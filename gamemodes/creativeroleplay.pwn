//includes
#include <a_samp>
#include <foreach>
#include <streamer>
#include <a_mysql>
#include <sscanf2>
#include <crashdetect>
#include <zcmd>
#include <easyDialog>
#include <djson>
#include <mSelection>
#include <YSI\y_ini>
#include <yom_buttons>
#include <JunkBuster>
#include <playerprogress>

#pragma tabsize	0

//versión actual
#define version_actual "4.11"

//constants
#undef MAX_VEHICLES
#undef MAX_PLAYERS
#undef MAX_ACTORS

const
	MAX_VEHICLES = 1999,
	MAX_PLAYERS = 200,
	MAX_ACTORS = 500,
	MAX_CASAS = 500,
	MAX_FACCIONES = 50,
	MAX_PUERTAS = 100,
	MAX_VEHICULOS = 10000,
	MAX_MODIFICACIONES = 15,
	MAX_REPORTS = 50,
	MAX_NEGOCIOS = 100,
	MAX_ZONE_NAME = 32,
	MAX_OBJETOS_ADMIN = 200,
	MAX_CAJEROS = 40,
	MAX_ACTORES = 100,
	MAX_PING = 1500,
	MAX_GRAFFITIS = 50,
	MAX_REPARTOS = 50
;

#define             MAX_UBICACIONES             (25)
#define             MAX_GARAGES              	(100)
#define				MAX_DAMAGES					(1000)
#define				MAX_BARRICADES 				(50)
#define 			TIME_RESPAWN 				(1800)

//mysql
new MySQL: DBcreative;

#define	sql_host "localhost"
#define	sql_user "pablopr"
#define	sql_password "g]WX38]7o2mMtP"
#define	sql_database "tcagame_svc386"

//#define	sql_host "localhost"
//#define	sql_user "root"
//#define	sql_password ""
//#define	sql_database "creativerp"

#define reg_int			cache_get_value_int
#define reg_float		cache_get_value_float
#define reg_string		cache_get_value_name

//old: "CUENTAS/%s.ini"
//old: "BACKUP/%s.ini"
//old: "ACTORES/%d.ini"
//old: "FACCIONES/%d.ini"
#define             UBICACIONES                 "UBICACIONES/%d.ini"
//old: "NEGOCIOS/%d.ini"
#define 			GARAGES_FILE 				"GARAGES/%d.ini"
//old: "PORTONES/%d.ini"
//old: "GRAFFITIS/%s.ini"
//old: "PROPIEDADES/%d.ini"

//macros
#define funcion%0(%1)				forward %0(%1); public %0(%1)
#define	GetVehicleName(%0)			VehicleName[GetVehicleModel(%0)-400]
#define	SetPVarInt(%0,%1,0);		DeletePVar(%0,%1);
#define Loop(%0,%1,%2)				for(new %0 = %2; %0 < %1; %0++)
#define GetNameVehicle(%0) 			VehicleName[%0-400]
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

//colores
#define COLOR_GENERAL		0xFFBF00FF
#define COLOR_RADIO			0x9B9BFFFF
#define	COLOR_ORANGE		0xFFA500FF
#define	COLOR_VIP			0xC93CCE00
#define	COLOR_MEGAPHONE		0xFF9B6AFF
#define	COLOR_GRAD1			0xB4B5B7FF
#define	COLOR_GRAD2 		0xBFC0C2FF
#define	COLOR_GRAD3			0xCBCCCEFF
#define	COLOR_GRAD4			0xD8D8D8FF
#define	COLOR_GRAD5			0xE3E3E3FF
#define	COLOR_GRAD6			0xF0F0F0FF
#define	COLOR_GREY			0xAFAFAFAA
#define	COLOR_GREEN			0x9EC73DAA
#define	COLOR_RED			0xAA3333AA
#define	COLOR_LIGHTRED		0xFF6347AA
#define	COLOR_LIGHTBLUE		0x33CCFFAA
#define	COLOR_LIGHTGREEN	0x9ACD32AA
#define	COLOR_YELLOW		0xF5DEB3AA
#define	COLOR_WHITE			0xFFFFFFAA
#define COLOR_FADE			0xE6E6E6E6
#define COLOR_FADE1			0xE6E6E6E6
#define COLOR_FADE2			0xC8C8C8C8
#define COLOR_FADE3			0xAAAAAAAA
#define COLOR_FADE4			0x8C8C8C8C
#define COLOR_FADE5			0x6E6E6E6E
#define COLOR_PURPLE		0xC2A2DAAA

//totales sql
new totalcasas = 1;				//casas dinámicas
new totalvehiculos = 1;			//vehículos dinámicos
new totalpuertas = 1;			//puertas dinámicas
new totalnegocios = 1;			//negocios dinámicos
new totalfacciones = 1;         //facciones dinámicas
new totalactores = 1;			//actores dinámicos
new totalobjetosadmin = 1;		//objetos dinámicos admin
new totalcajeros = 1;			//cajeros automáticos
new totalgraffitis = 1;			//graffitis dinámicos

//new's by edinsonwalker

new TimerRepartos[MAX_PLAYERS];
new RepartoID[MAX_PLAYERS];
new RepartoCasa[MAX_PLAYERS];
new RepartoNegocio[MAX_PLAYERS];
new RepartoPago[MAX_PLAYERS];

new CulandoPrecio[MAX_PLAYERS];
new CulandoCliente[MAX_PLAYERS];
new CulandoNegocio[MAX_PLAYERS];

new ConTransferir[MAX_PLAYERS];
new NumeroMensaje[MAX_PLAYERS];
new playerGraffitiTimer[MAX_PLAYERS];

//animaciones
static const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

new TimerWeaponCreate[MAX_PLAYERS];
new MensajeMuelto[MAX_PLAYERS];

new depositoembargo, open_embargo = 0;
new ObjSD_derecha, sd_derecha1, sd_derecha2, ObjSD_izquierda, sd_izquierda1, sd_izquierda2;

new PlayerText:draw_money[MAX_PLAYERS];
new GetTextDraw[MAX_PLAYERS];

//puntos de embargos
static const Float: point_embargo[][] =
{
	{1605.6499, -1838.4331, 13.4624, -90.1200},
	{1605.6586, -1831.6129, 13.4624, -90.1200},
	{1605.6606, -1826.2428, 13.4624, -90.1200},
	{1605.4218, -1820.1104, 13.4624, -90.1200},
	{1600.9728, -1814.9929, 13.4624, -90.1200},
	{1600.4681, -1809.2795, 13.4624, -90.1200},
	{1610.5453, -1801.6992, 13.4624, -153.1800},
	{1649.7317, -1807.5803, 13.4624, -175.8000},
	{1655.2010, -1807.9847, 13.4624, -175.8000},
	{1655.7618, -1817.2306, 13.4624, -260.5800},
	{1656.4235, -1822.8483, 13.4624, -260.5800},
	{1655.6775, -1828.7864, 13.4624, -269.3400},
	{1654.6257, -1834.6389, 13.4624, -269.3400},
	{1653.7234, -1839.9099, 13.4624, -272.1600},
	{1635.1046, -1844.4045, 13.4624, -370.5000},
	{1629.9003, -1844.0775, 13.4624, -356.7600}
};

new ConBalasGoma[MAX_PLAYERS];
new PlayerText:TDping_fps[MAX_PLAYERS];
new test_rol[MAX_PLAYERS];

new show_velocimetro[MAX_PLAYERS]; //velocimetro de gcrp diciembre 2019
new Text:velocimetro_nice[3];
new PlayerText:velocimetro_pice[MAX_PLAYERS][4];
new PlayerBar:velocimetro_bar[MAX_PLAYERS];

new tipo_anuncio[MAX_PLAYERS];
new DiferenciaAnuncio = -1;
new TimerReportarBug = -1;

new AnunceID = 0;
new AnunceString1[256];
new AnunceString2[256];
new AnunceString3[256];
new AnunceString4[256];
new PlayerViewAnunce[MAX_PLAYERS];
new Text:TD_Anuncio[5];

new LlegandoLlamadoMecanico[MAX_PLAYERS];
new EnLlamadoMecanico[MAX_PLAYERS];
new TallerCliente[MAX_PLAYERS];
new TallerMecanico[MAX_PLAYERS];
new TallerColor1[MAX_PLAYERS];
new TallerColor2[MAX_PLAYERS];
new TallerCosto[MAX_PLAYERS];
new ID_Taller_Cobro[MAX_PLAYERS];
new ID_Veh_Cobro[MAX_PLAYERS];

new
	ColorList[] = {
	    0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
		0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
		0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
		0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
		0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
		0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
		0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
		0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
		0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
		0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
		0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
		0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
		0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF, 0x177517FF, 0x210606FF,
		0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF,
		0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF,
		0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF,
		0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF, 0x481A0EFF, 0x7A7399FF,
		0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,
		0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF,
		0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF,
		0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF,
		0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF, 0x99581EFF,
		0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF,
		0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF,
		0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF,
		0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
	};

new Float: PosSpawnBug[MAX_PLAYERS][4], PosVwBug[MAX_PLAYERS], PosIntBug[MAX_PLAYERS];
new LockStatus[MAX_VEHICLES];

new EditandoObjetoJ[MAX_PLAYERS];

new Altavoz[MAX_PLAYERS];
new EnLlamada[MAX_PLAYERS];
new ToqueLlamada[MAX_PLAYERS];
new PersonaEnLlamada[MAX_PLAYERS];
new ToqueLlamadaTimer[MAX_PLAYERS];

//sistema de boombox by GCRP
enum boomboxInfo
{
	Float: BB_x,
	Float: BB_y,
	Float: BB_z,
	BB_obj,
	BB_area,
	BB_int,
	BB_vw,
	Text3D: BB_label,
};
new InfoBoombox[MAX_PLAYERS][boomboxInfo];

//
new Text:TDmariguana[3];
new edicion_sql_actual[MAX_PLAYERS];
new Text:TDLogin[4];
new ClimaGeneral = 14;

new ContadorCuraciones[MAX_PLAYERS];
new random_abstinence[MAX_PLAYERS];
new abstinence_power[MAX_PLAYERS];

new UsedFind[MAX_PLAYERS];
new WhoFind[MAX_PLAYERS];

new bool:playerTextdraw[MAX_PLAYERS];
new Text3D:playerVehicleTextdraw[MAX_PLAYERS];

new IntentosRespuesta[MAX_PLAYERS];

new CountKick[MAX_PLAYERS];
new TimerCkick[MAX_PLAYERS];
new CountBan[MAX_PLAYERS];
new TimerCban[MAX_PLAYERS];
new CountWarn[MAX_PLAYERS];
new TimerCwarn[MAX_PLAYERS];

new GiftAllowed;
new FabricaID[MAX_PLAYERS];
new FabricaSexo[MAX_PLAYERS];

new PlayerDuda[MAX_PLAYERS];
new PlayerTextoDuda[MAX_PLAYERS][256];

new FondosAnuncios = 0;
new TaxAnuncios = 0;

new id_negocio[MAX_PLAYERS];

new lspdPuerta[2], lspdBoton[4];
new LSPD_NEW1, LSPD_NEW2, LSPD_NEW3, LSPD_NEW4, LSPD_NEW5, LSPD_NEW6, LSPD_NEW7, LSPD_NEW8; // LSPD New

new mmaguebo_abusadol[MAX_PLAYERS];
new slotselection[MAX_PLAYERS];

new GunVendedor[MAX_PLAYERS];
new GunCliente[MAX_PLAYERS];
new GunObjeto[MAX_PLAYERS];
new GunCantidad[MAX_PLAYERS];
new GunPrecio[MAX_PLAYERS];

new PayDayLeft = 60;
new PaydayOn = 0;
new PayDaySecond = 120;

new Text:TD_Account[2]; // Imagen cargado de cuenta by EdinsonWalker (11/01/2020) es un regalo xd
new PlayerText:TD_AccountSkin[MAX_PLAYERS];

new Osql_vehicle[MAX_PLAYERS];
new Pla_vehicle[MAX_PLAYERS];
new Price_vehicle[MAX_PLAYERS];

new GiveKeysTo[MAX_PLAYERS];

new Taseado[MAX_PLAYERS]; //nuevo táser
new TaserRecarga[MAX_PLAYERS];
new RecargarTiempo[MAX_PLAYERS];
new CederTiempo[MAX_PLAYERS];
new	countGameTime[MAX_PLAYERS]; //variable update cada 5seg la posición del jugador

new timer_herido[MAX_PLAYERS];
new Text:TD_fechahora;
new intentos_load[MAX_PLAYERS];
new Text:TD_Load[2];

new Text:txtAnimHelper;
new gPlayerUsingLoopingAnim[MAX_PLAYERS];

new RandomMascara[MAX_PLAYERS]; //new mascara by edinsonwalker

new CommandSpamTimes[MAX_PLAYERS];
new CommandSpamUnmute[MAX_PLAYERS];

#define IDObj_Admin 505

//nuevo sistema de compra de skin by EdinsonWalker (18/01/2020)
#define Compra_Skin 750
#define Actor_Skin 751
#define Equipo_Skin 752
#define Fabrica_Skin 753
#define Clinica_Skin 754
#define VIP_Skin 755

new actore_skin[MAX_PLAYERS];

enum mainS
{
	sModelo,    // id skin samp
	sSexo,      // 1: masculino - 2: femenino
	sTipo,		// 0: no existe - 1: civil - 2: banda - 3: mafia - 4: sexy - 5: facción - 6: premium - 7: admin
};

static const InfoSkin[][mainS] =
{
	{0, 0, 0},
	{1, 1, 1},
	{2, 1, 1},
	{3, 1, 1},
	{4, 1, 2},
	{5, 1, 2},
	{6, 1, 1},
	{7, 1, 1},
	{8, 1, 1},
	{9, 2, 1},
	{10, 2, 1},
	{11, 2, 1},
	{12, 2, 1},
	{13, 2, 2},
	{14, 1, 1},
	{15, 1, 1},
	{16, 1, 1},
	{17, 1, 1},
	{18, 1, 4},
	{19, 1, 2},
	{20, 1, 1},
	{21, 1, 2},
	{22, 1, 1},
	{23, 1, 1},
	{24, 1, 1},
	{25, 1, 1},
	{26, 1, 1},
	{27, 1, 1},
	{28, 1, 2},
	{29, 1, 2},
	{30, 1, 2},
	{31, 2, 1},
	{32, 1, 1},
	{33, 1, 3},
	{34, 1, 1},
	{35, 1, 1},
	{36, 1, 1},
	{37, 1, 1},
	{38, 2, 1},
	{39, 2, 1},
	{40, 2, 1},
	{41, 2, 1},
	{42, 1, 1},
	{43, 1, 3},
	{44, 1, 1},
	{45, 1, 4},
	{46, 1, 3},
	{47, 1, 2},
	{48, 1, 2},
	{49, 1, 3},
	{50, 1, 1},
	{51, 1, 1},
	{52, 1, 1},
	{53, 2, 1},
	{54, 2, 1},
	{55, 2, 1},
	{56, 2, 1},
	{57, 1, 1},
	{58, 1, 1},
	{59, 1, 1},
	{60, 1, 1},
	{61, 1, 1},
	{62, 1, 1},
	{63, 2, 4},
	{64, 2, 4},
	{65, 2, 2},
	{66, 1, 2},
	{67, 1, 2},
	{68, 1, 1},
	{69, 2, 2},
	{70, 1, 5},
	{71, 1, 5},
	{72, 1, 3},
	{73, 1, 1},
	{74, 0, 0},
	{75, 2, 4},
	{76, 2, 1},
	{77, 2, 1},
	{78, 1, 1},
	{79, 1, 1},
	{80, 1, 1},
	{81, 1, 1},
	{82, 1, 1},
	{83, 1, 1},
	{84, 1, 1},
	{85, 2, 4},
	{86, 1, 6},
	{87, 2, 6},
	{88, 2, 1},
	{89, 2, 1},
	{90, 2, 1},
	{91, 2, 1},
	{92, 2, 4},
	{93, 2, 1},
	{94, 1, 1},
	{95, 1, 1},
	{96, 1, 1},
	{97, 1, 4},
	{98, 1, 3},
	{99, 1, 1},
	{100, 1, 2},
	{101, 1, 1},
	{102, 1, 2},
	{103, 1, 2},
	{104, 1, 2},
	{105, 1, 2},
	{106, 1, 2},
	{107, 1, 2},
	{108, 1, 2},
	{109, 1, 2},
	{110, 1, 2},
	{111, 1, 3},
	{112, 1, 3},
	{113, 1, 3},
	{114, 1, 2},
	{115, 1, 2},
	{116, 1, 2},
	{117, 1, 3},
	{118, 1, 3},
	{119, 1, 3},
	{120, 1, 3},
	{121, 1, 3},
	{122, 1, 3},
	{123, 1, 3},
	{124, 1, 3},
	{125, 1, 3},
	{126, 1, 3},
	{127, 1, 3},
	{128, 1, 1},
	{129, 2, 1},
	{130, 2, 1},
	{131, 2, 1},
	{132, 1, 1},
	{133, 1, 1},
	{134, 1, 1},
	{135, 1, 1},
	{136, 1, 1},
	{137, 1, 1},
	{138, 2, 4},
	{139, 2, 4},
	{140, 2, 4},
	{141, 2, 3},
	{142, 1, 1},
	{143, 1, 1},
	{144, 1, 6},
	{145, 2, 6},
	{146, 1, 6},
	{147, 1, 1},
	{148, 2, 1},
	{149, 1, 6},
	{150, 2, 1},
	{151, 2, 6},
	{152, 2, 4},
	{153, 1, 1},
	{154, 1, 4},
	{155, 1, 1},
	{156, 1, 1},
	{157, 2, 1},
	{158, 1, 1},
	{159, 1, 1},
	{160, 1, 1},
	{161, 1, 1},
	{162, 1, 6},
	{163, 1, 1},
	{164, 1, 1},
	{165, 1, 1},
	{166, 1, 1},
	{167, 1, 6},
	{168, 1, 1},
	{169, 2, 3},
	{170, 1, 1},
	{171, 1, 1},
	{172, 2, 1},
	{173, 1, 2},
	{174, 1, 2},
	{175, 1, 2},
	{176, 1, 1},
	{177, 1, 1},
	{178, 2, 4},
	{179, 1, 4},
	{180, 1, 1},
	{181, 1, 6},
	{182, 1, 1},
	{183, 1, 1},
	{184, 1, 1},
	{185, 1, 1},
	{186, 1, 3},
	{187, 1, 3},
	{188, 1, 1},
	{189, 1, 1},
	{190, 2, 2},
	{191, 2, 1},
	{192, 2, 6},
	{193, 2, 2},
	{194, 2, 1},
	{195, 2, 2},
	{196, 2, 1},
	{197, 2, 1},
	{198, 2, 1},
	{199, 2, 1},
	{200, 1, 1},
	{201, 2, 1},
	{202, 1, 1},
	{203, 1, 1},
	{204, 1, 1},
	{205, 2, 6},
	{206, 1, 1},
	{207, 2, 2},
	{208, 1, 3},
	{209, 1, 1},
	{210, 1, 1},
	{211, 2, 7},
	{212, 1, 1},
	{213, 1, 1},
	{214, 2, 6},
	{215, 2, 1},
	{216, 2, 1},
	{217, 1, 7},
	{218, 2, 1},
	{219, 2, 1},
	{220, 1, 1},
	{221, 1, 1},
	{222, 1, 1},
	{223, 1, 1},
	{224, 2, 3},
	{225, 2, 3},
	{226, 2, 1},
	{227, 1, 1},
	{228, 1, 3},
	{229, 1, 3},
	{230, 1, 1},
	{231, 2, 1},
	{232, 2, 1},
	{233, 2, 6},
	{234, 1, 1},
	{235, 1, 1},
	{236, 1, 6},
	{237, 2, 4},
	{238, 2, 4},
	{239, 1, 1},
	{240, 1, 1},
	{241, 1, 6},
	{242, 1, 6},
	{243, 2, 2},
	{244, 2, 4},
	{245, 2, 2},
	{246, 2, 6},
	{247, 1, 2},
	{248, 1, 2},
	{249, 1, 3},
	{250, 1, 1},
	{251, 2, 4},
	{252, 1, 4},
	{253, 1, 1},
	{254, 1, 2},
	{255, 1, 1},
	{256, 2, 4},
	{257, 2, 4},
	{258, 1, 3},
	{259, 1, 3},
	{260, 1, 1},
	{261, 1, 1},
	{262, 1, 1},
	{263, 2, 3},
	{264, 1, 6},
	{265, 1, 6},
	{266, 1, 6},
	{267, 1, 5},
	{268, 1, 7},
	{269, 1, 6},
	{270, 1, 6},
	{271, 1, 6},
	{272, 1, 3},
	{273, 1, 3},
	{274, 1, 5},
	{275, 1, 5},
	{276, 1, 5},
	{277, 1, 5},
	{278, 1, 5},
	{279, 1, 5},
	{280, 1, 5},
	{281, 1, 5},
	{282, 1, 5},
	{283, 1, 5},
	{284, 1, 5},
	{285, 1, 5},
	{286, 1, 5},
	{287, 1, 5},
	{288, 1, 5},
	{289, 1, 6},
	{290, 1, 6},
	{291, 1, 1},
	{292, 1, 6},
	{293, 1, 6},
	{294, 1, 3},
	{295, 1, 1},
	{296, 1, 6},
	{297, 1, 1},
	{298, 2, 6},
	{299, 1, 6},
	{300, 1, 5},
	{301, 1, 5},
	{302, 1, 5},
	{303, 1, 1},
	{304, 1, 1},
	{305, 1, 6},
	{306, 2, 5},
	{307, 2, 5},
	{308, 2, 5},
	{309, 2, 5},
	{310, 1, 5},
	{311, 1, 5}
};

/*uwucmdz(playerid, params[])
{
	new skin, sexo, tipo;
	if (sscanf(params, "ddd", skin, sexo, tipo)) return 1;
	new File: fileGformat = fopen("skinsall.txt", io_append);
	new sz_logEntry[255];

	format(sz_logEntry, sizeof(sz_logEntry), "{%d, %d, %d}\r\n", skin, sexo, tipo);
	fwrite(fileGformat, sz_logEntry);
	return fclose(fileGformat);
}*/

//antichit
enum antichit
{
	bool:teleport,
	bool:Balas
}
new AntiG[antichit];

enum antichitplayers
{
	Float:vidac1,
	Float:vidac2,
	BalasW
}
new Anti[MAX_PLAYERS][antichitplayers];

//include: a_zones
enum SAZONE_MAIN
{
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2
{
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",              	{787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",          	{1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",         	{1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

stock GetPlayer2DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		    return i;

		}
	}
	return 0;
}

stock GetPlayer3DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
		{
		    format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		    return i;
		}
	}
	return 0;
}

stock IsPlayerInZone(playerid, zone[]) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new TmpZone[MAX_ZONE_NAME];
	GetPlayer3DZone(playerid, TmpZone, sizeof(TmpZone));
	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if(strfind(TmpZone, zone, true) != -1)
			return 1;
	}
	return 0;
}

//*******************Sistema afk*******************
new Text:Messageafk;
new Afk[MAX_PLAYERS];
new Timer[MAX_PLAYERS];
//*******************************
new BigEar[MAX_PLAYERS];
//*******************Sistema de Reparacion de Auto con latas*******************
new autorepara[MAX_PLAYERS];
// Anuncios automáticos.
//*******************Solucion 0.3z*******************
forward TimerBANIP(playerid);
//*******************seleccion skin 0.3z*******************
new bars = mS_INVALID_LISTID; // cmd_bar.

//SISTEMA HERIDAS
enum dmgInfo
{
	dmgDamage,
	dmgWeapon,
	dmgBodypart,
	dmgKevlarhit,
	dmgSeconds
}
new InfoDamage[MAX_PLAYERS][MAX_DAMAGES][dmgInfo];
stock ResetPlayerDamages(playerid)
{
	for(new id = 0; id < MAX_DAMAGES; id++)
	{
		if(InfoDamage[playerid][id][dmgDamage] != 0)
		{
			InfoDamage[playerid][id][dmgDamage] = 0;
			InfoDamage[playerid][id][dmgWeapon] = 0;
			InfoDamage[playerid][id][dmgBodypart] = 0;
			InfoDamage[playerid][id][dmgKevlarhit] = 0;
			InfoDamage[playerid][id][dmgSeconds] = 0;
		}
	}
	return 1;
}

stock GetBodypartName(bodypart)
{
	new bodyname[60];
	switch(bodypart)
	{
		case 3: alm(bodyname, "TORSO");
		case 4: alm(bodyname, "INGLE");
		case 5: alm(bodyname, "BRAZO DERECHO");
		case 6: alm(bodyname, "BRAZO IZQUIERDO");
		case 7: alm(bodyname, "PIERNA DERECHA");
		case 8: alm(bodyname, "PIERNA IZQUIERDA");
		case 9: alm(bodyname, "CABEZA");
	}
	return bodyname;
}

stock ShowPlayerDamages(playerid, toid)
{
	new
	str[1000], str1[500], count = 0, name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	for(new id = 0; id < MAX_DAMAGES; id++)
	{
		if(InfoDamage[playerid][id][dmgDamage] != 0) count++;
	}
	if (count == 0) return Dialog_Show(toid, ShowInvalido, DIALOG_STYLE_LIST, name, "Este usuario no tiene heridas", "Cerrar", "");
	else if (count > 0)
	{
	    strcat(str, "DAÑO\tARMA\tPARTE\n");
		for(new id = 0; id < MAX_DAMAGES; id++)
		{
			if(InfoDamage[playerid][id][dmgDamage] != 0)
			{

				format(str1, sizeof(str1), "%d\t%s\t%s\n", InfoDamage[playerid][id][dmgDamage], GetWeaponNameEx2(InfoDamage[playerid][id][dmgWeapon]), GetBodypartName(InfoDamage[playerid][id][dmgBodypart]), InfoDamage[playerid][id][dmgKevlarhit], gettime() - InfoDamage[playerid][id][dmgSeconds]);
				strcat(str, str1);
			}
		}
		Dialog_Show(toid, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, name, str, "Cerrar", "");
	}
	return 1;
}
stock GetWeaponNameEx2(weaponid)
{
	new weaponname[60];
	if(!GetWeaponName(weaponid, weaponname, sizeof(weaponname))){ weaponname = "ENTORNO"; }
	GetWeaponName(weaponid, weaponname, sizeof(weaponname));
	return weaponname;
}

//variables del jugador en sql, hecho: 03/01/2020 by EdinsonWalker

new usuario_registro[MAX_PLAYERS]; // 2: jugando - 1: registrado - 0: no registrado
new altavoz_phone[MAX_PLAYERS];
new refuerzos_pd[MAX_PLAYERS];
new state_on[MAX_PLAYERS]; // 0: ningún logeo, 1: en spawn, 2: en login & 3: jugando.

verificar_cuenta(account[])
{
	new query[256];
	mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE Nombre_Apellido = '%e'", account);
	mysql_query(DBcreative, query);
	if (cache_num_rows() > 0) return 1;
	return 0;
}

enum pInfo
{
	pID,								// ID en base de datos
	pNombre_Apellido[MAX_PLAYER_NAME],	// Nombre_Apellido
	pNombre_Temporal[MAX_PLAYER_NAME],  // Nombre temporal
	pNombre_PD[MAX_PLAYER_NAME],		// Nombre temporal policial
	pClave[65],							// Contraseña
	pSalt[11],              			// Salt contraseña
	pIP[18],                			// Dirección IP
	pAdmin,                 			// Nivel admin
	pApodo[12],             			// Apodo admin
	pEncFac,                			// Encargado de facciones
	pPreguntaSeguridad[256],			// Pregunta seguridad
	pRespuestaSeguridad[256],			// Respuesta seguridad
	Float: pPosicionX,      			// Posición x
	Float: pPosicionY,      			// Posición y
	Float: pPosicionZ,      			// Posición z
	Float: pPosicionR,      			// Posición angulo
	pInterior,              			// Interior
	pVirtualWorld,          			// VirtualWorld
	Float: pVida,           			// Vida
	Float: pChaleco,        			// Chaleco
	pSkin,                          	// Skin actual
	pNivel,								// Nivel del personaje
	pExperiencia,           			// Puntos de experiencia
	pHorasOn,               			// Horas conectado
	pSexo,                  			// Sexo
	pEdad,                  			// Edad
	pCiudad,                			// Ciudad
	pAcento,                        	// Acento
	pEstiloPelea,                   	// Estilo de pelea
	pDinero,                			// Dinero en bolsillos
	pBanco,                 			// Dinero en banco
	pLider,								// Lider de facción
	pMiembro,							// Miembro de facción
	pRango,                 			// Rango de facción
	pBolsillo[10],						// Bolsillos
	pBolsilloCant[10],					// Cantidad en bolsillos
	pManoDerecha,						// Mano derecha
	pManoDerechaCant,					// Cantidad en mano derecha
	pManoIzquierda,						// Mano izquierda
	pManoIzquierdaCant,					// Cantidad en mano izquierda
	pEspalda,							// Espalda
	pEspaldaCant,						// Cantidad en espalda
	pVIP,                           	// VIP: 1(bronce) 2(plata) 3(oro) 4(platino)
	pDiaVIP,                        	// Fin día VIP
	pMesVIP,                        	// Fin mes VIP
	pCoinsVIP,                   		// Coins VIP
	pTogVIP,							// Chat VIP
	pDobleExp,                      	// Doble experiencia
	pRegalo,                        	// Regalo random por premios, sistema no terminado
	pMuerto,                			// Estado muerto
	pHospital,                      	// Estado hospital
	pBalaCabeza,            			// Bala en la cabeza, muerto
	pJails,                 			// Cantidad de jails ooc
	pArrestos,              			// Cantidad de jails ic
	pDudaBloqueado,         			// Bloqueo del canal de dudas
	pDudaAdvertencias,      			// Advertencias del canal de dudas
	pAdvertencia,           			// Advertencias de posible bloqueo
	pSancionado,						// Si está en jail
	pTiempoSancion,						// Tiempo Jail
	pBySancion[MAX_PLAYER_NAME],		// Jaileado por
	pRazonSancion[128],					// Razón del jail
	pMateriales,						// Materiales
	pGanzuas,							// Ganzuas
	pTelefono,                      	// Número de teléfono
	pTogVelocimetro,                   	// Activo velocimetro
	pCasa1,                          	// Casa
	pCasa2,                          	// Casa2
	pNegocio1,                       	// Negocio
	pNegocio2,                       	// Negocio2
	pLicencia[5],						// Licencias: 0(conducir) 1(vuelo) 2(bote) 3(armas) 4(taxi)
	pMulticuenta,                   	// Multicuenta access
	pMascara,                       	// Máscara
	pUsoMascara,                    	// Usando máscara
	pBaneo,                         	// Baneado: 0(desbloqueado) 2(permanente)
	pBlockBug,                      	// Bloqueo de /reportarbug
	pTogGraffiti,						// Bloqueo de graffitis
	pDocumento,                     	// Documento nacional
	pHabilidad[5],                  	// Habilidades: 0(vendedor de armas) 1(camionero) 2(traficante) 3(vendedor de drogas) 4(pescador)
	YaCobre,                        	// YaCobre PayDay
	pEstrellas,                     	// Estrellas
	pLimiteRobos,                   	// Limite de robar piezas
	pNivelRolero,                   	// Nivel de rol
	pPuntosRol,                     	// Experiencia de puntos rol
	pNivelMuteoReport,              	// Nivel de muteo del /re
	pAdvMuteoReport,                	// Advertencias de muteo del /re
	pTiempoMuteoReport,             	// Tiempo de muteo del /re
	pFrecuencia_radio,              	// Frecuencia de radio portatil
	pTiempoRegalo,                  	// Tiempo de regalo
	pTipoSpawn,                     	// Tipo spawn: 0(hospital) 1(casa)
	pAutoRespuestaSMS[128],         	// Auto respuesta SMS
	pBlockAD,                       	// Bloqueo de anuncios
	pAdvAD,                         	// Advertencias de anuncios
	pPescados,                      	// Pescados
	pRecordPesoPes,                 	// Pes más gordo pescado
	pEstadoYo[128],						// Estado /yo
	Text3D: pNameTag,					// Estado label (27/04/2020)
	pNumeroContacto[10],            	// Número de contacto
	pJobSkin,                       	// Skin normal
	pRestriccionRobo,               	// Restricción robo
	pFalsoDocumento,                	// Falso documento
	pFalsoNombre[MAX_PLAYER_NAME],  	// Falso nombre
	pFechaRegistro[256],                // Fecha de registro
	pUltimaConexion[256],               // Última conexión
    ptModelo[10],                       // toys
	ptHueso[10],
    Float: ptPosX[10],
	Float: ptPosY[10],
	Float: ptPosZ[10],
	Float: ptRotX[10],
	Float: ptRotY[10],
	Float: ptRotZ[10],
	Float: ptScaleX[10],
	Float: ptScaleY[10],
	Float: ptScaleZ[10],
	ptColocado[10],
	pCinturon[6],						// Cinturon
	pCinturonCant[6],					// Cantidad en cinturon
	ptColor[10],                        // color toys
	pContrato,                          // negocio o empresa o fabrica donde trabaja
	pAdiccion[3],						// Adicciones
	pDrogaTipo,							// Droga tipo
	pDrogaTiempo,						// Droga tiempo
	pDrogaPower,						// Droga power
	pAbstinenceEffect,					// Abstinence efecto
	pAbstinenceTime,					// Abstinence tiempo
	pTogManos,                          // 1 puede mover | 0 no mueve
	pTogCajero,							// Restricción de retirar del cajero
	pTogAnuncios,                       // 0 visibles | ocultos
	pTogTelefono,                       // 1 encendido | 0 apagado
	pTimerAnuncios,                     // tiempo de anuncios
	pTogOOC,                            // Mensajes administrativos
	pTogMusic,                          // Musíca
	pTogRadio,                          // Radio o wsp
	pTogPortatil,                       // Radio portatil
	pTogFaccion,                        // Mensajes de facciones
	pRepartoViajes,                     // restricción de viajes por payday repartos
	//no saved
	pServiceTime,
	pTriageTime,
	pLlaveVehicle,

	pEditingMode,
};
new InfoPlayer[MAX_PLAYERS][pInfo];

new nombre_contacto[MAX_PLAYERS][20][MAX_PLAYER_NAME];

// update personalizado by EdinsonWalker (30/01/2020)
guardar_int_mysql(tabla[], columna[], id, monto)
{
	new query[210];
	mysql_format(DBcreative, query, sizeof query, "UPDATE %s SET %s = '%d' WHERE ID = '%d'", tabla, columna, monto, id);
	mysql_tquery(DBcreative, query);
	return 1;
}

guardar_float_mysql(tabla[], columna[], id, Float: monto)
{
	new query[210];
	mysql_format(DBcreative, query, sizeof query, "UPDATE %s SET %s = '%f' WHERE ID = '%d'", tabla, columna, monto, id);
	mysql_tquery(DBcreative, query);
	return 1;
}

guardar_string_mysql(tabla[], columna[], id, monto[])
{
	new query[740];
	mysql_format(DBcreative, query, sizeof query, "UPDATE %s SET %s = '%e' WHERE ID = '%d'", tabla, columna, monto, id);
	mysql_tquery(DBcreative, query);
	return 1;
}

// sistema administrativo
new AdminChat[MAX_PLAYERS];
new papilla[MAX_PLAYERS];

AdminOnlineCheck()
{
	new count;
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		if (GetPlayerAdmin(playerid, 1) != 0)
		{
			count++;
		}
	}
	return count;
}

SendAdminMessage(color, gformat[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		if (GetPlayerAdmin(playerid, 1) == 1 && AdminChat[playerid] == 0)
		{
			SendSplitMessage(playerid, color, gformat);
		}
	}
	return 1;
}

CheckAdminCMD(playerid, rango)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	new gformat[190];
	if (GetPlayerAdmin(playerid, rango) == 0)
	{
		new name[39] = "Admin";
		switch (rango)
		{
			case 1: alm(name, "Ayudante");
			case 2: alm(name, "Moderador I");
			case 3: alm(name, "Moderador II");
			case 4: alm(name, "Moderador III");
			case 5: alm(name, "Administrador");
			case 6: alm(name, "Encargado");
			case 10: alm(name, "Propietario");
		}
		format(gformat, sizeof gformat, "* Para hacer esto debes ser mínimo rango %s.", name);
		SendClientMessage(playerid, COLOR_GREY, gformat);
		return 1;
	}
	return 0;
}

CheckAdminDuty(playerid)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Pablo_Prieto", true) || !strcmp(InfoPlayer[playerid][pNombre_Apellido], "Elias_Moss", true)) { return 0; }
	if (papilla[playerid] == 0) { SendClientMessage(playerid, COLOR_GREY, "* Para hacer esto debes estar admin duty. (/onstaff)"); return 1; }
	return 0;
}

GetPlayerAdmin(playerid, nivel)
{
	if (!IsPlayerConnectedEx(playerid)) return 0;
	if (nivel == 10)
	{
		if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Pablo_Prieto", true) || !strcmp(InfoPlayer[playerid][pNombre_Apellido], "Elias_Moss", true)) { return 1; }
	}
	else
	{
		if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Pablo_Prieto", true) || !strcmp(InfoPlayer[playerid][pNombre_Apellido], "Elias_Moss", true)) { return 1; }
		if (InfoPlayer[playerid][pAdmin] >= nivel) return 1;
	}
	return 0;
}

GetAdminName(playerid)
{
	new name[39] = "Admin";
	if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Pablo_Prieto", true))
	{
		alm(name, "Propietario");
		return name;
	}
	if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Elias_Moss", true))
	{
		alm(name, "Programador");
		return name;
	}
	switch (InfoPlayer[playerid][pAdmin])
	{
		case 1: alm(name, "Ayudante");
		case 2: alm(name, "Moderador I");
		case 3: alm(name, "Moderador II");
		case 4: alm(name, "Moderador III");
		case 5: alm(name, "Administrador");
		case 6: alm(name, "Encargado");
	}
	return name;
}

//actualizar toy
ActualizarToy(playerid, toy)
{
	new query[1029], infotoy[512];
	format(infotoy, sizeof infotoy, "%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%d|",
	InfoPlayer[playerid][ptModelo][toy], InfoPlayer[playerid][ptHueso][toy],
	InfoPlayer[playerid][ptPosX][toy], InfoPlayer[playerid][ptPosY][toy], InfoPlayer[playerid][ptPosZ][toy],
	InfoPlayer[playerid][ptRotX][toy], InfoPlayer[playerid][ptRotY][toy], InfoPlayer[playerid][ptRotZ][toy],
	InfoPlayer[playerid][ptScaleX][toy], InfoPlayer[playerid][ptScaleY][toy], InfoPlayer[playerid][ptScaleZ][toy],
	InfoPlayer[playerid][ptColocado][toy]);

	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Toy%d = '%e', ColorToy%d = '%d' WHERE ID = '%d'", toy+1, infotoy, toy+1, InfoPlayer[playerid][ptColor][toy], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
}

//actualizar dinero
#define GetPlayerCash(%0) InfoPlayer[%0][pDinero]
GivePlayerCash(playerid, money, reason[])
{
	new gformat[128], money_new = 0, gregistros[256];
	//diseño + log normal
	new f_string[32];
	format(f_string, sizeof f_string, "%d", money);
	if (!isnumeric(f_string))
	{
	    format(gregistros, sizeof gregistros, "[-] %s perdió %s$, razón: [%s]", NombreDeCuenta(playerid), diner_coma(money), reason);
		format(gformat, sizeof gformat, "~r~~h~ %s$", diner_coma(money));
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	}
	else
	{
	    format(gregistros, sizeof gregistros, "[+] %s recibió %s$, razón: [%s]", NombreDeCuenta(playerid), diner_coma(money), reason);
		format(gformat, sizeof gformat, "~g~~h~ %s$", diner_coma(money));
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	}
	Log("LOGS/MoneyUwU.txt", gregistros);
	//log si supera 100k
	if (money >= 100000)
	{
		new rse[190];
		format(rse, sizeof rse, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) recibió $%s [razón: %s]", NombreOriginal(playerid), playerid, diner_coma(money), reason);
		SendAdminMessage(0xFFFFFFFF, rse);
		Log("LOGS/ExagerarMoneyUwU.txt", rse);
	}
	if (GetTextDraw[playerid] == 0)
	{
		GetTextDraw[playerid] = 1;
		PlayerTextDrawSetStringEx(playerid, draw_money[playerid], gformat);
		PlayerTextDrawShow(playerid, draw_money[playerid]);
		SetTimerEx("HideDrawMoney", 4000, false, "d", playerid);
	}
	//ceder dinero
	money_new = InfoPlayer[playerid][pDinero] + money;
	InfoPlayer[playerid][pDinero] = money_new;
	GivePlayerMoney(playerid, money);
	guardar_int_mysql("cuentas", "BolosUwU", InfoPlayer[playerid][pID], money_new);
	return 1;
}

forward HideDrawMoney(playerid);
public HideDrawMoney(playerid)
{
	GetTextDraw[playerid] = 0;
	PlayerTextDrawHide(playerid, draw_money[playerid]);
}

CheckMoney(playerid, money)
{
	new b[190], xx;
	xx = money - (GetPlayerCash(playerid));
	if (GetPlayerCash(playerid) >= money)
	{
		return 1;
	}
	else
	{
		format(b, sizeof b, "No tienes dinero suficiente! Te faltan {F72222}$%s", diner_coma(xx));
		SendClientMessage(playerid, 0xEBEBEBFF, b);
		return 0;
	}
}

//actualizar skin normal
GivePlayerSkin(playerid, idskin)
{
	if (idskin == 0) return SendClientMessage(playerid, COLOR_GREY, "jajsajsa no puedes ponerte la skin de cj mmaguebo!!owo");
	InfoPlayer[playerid][pJobSkin] = 0;
	InfoPlayer[playerid][pSkin] = idskin;
	SetPlayerSkin(playerid, idskin);
	new query[170];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Skin = '%d', JobSkin = 0 WHERE ID = '%d'", idskin, InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	return 1;
}

//actualizar skin de facción/trabajo
GivePlayerJobSkin(playerid, idskin)
{
	if (idskin == 0) return SendClientMessage(playerid, COLOR_GREY, "jajsajsa no puedes ponerte la skin de cj mmaguebo!!owo");
	InfoPlayer[playerid][pJobSkin] = idskin;
	SetPlayerSkin(playerid, idskin);
	guardar_int_mysql("cuentas", "JobSkin", InfoPlayer[playerid][pID], idskin);
	return 1;
}

// graffitis en sql - diciembre 2019
enum grInfo
{
	grID_sql,						// id db
	gr_Mensaje[256],                // mensaje
	gr_Creador[MAX_PLAYER_NAME],    // creador
	gr_Fecha,                       // fecha de creación
	Float: gr_PosX,					// potX
	Float: gr_PosY,					// potY
	Float: gr_PosZ,					// potZ
	Float: gr_RotX,					// rotX
	Float: gr_RotY,					// rotY
	Float: gr_RotZ,					// rotZ
	gr_Interior,					// interior
	gr_VirtualWorld,				// virtualWorld
	gr_Objeto,                      // objeto
};
new InfoGraffiti[MAX_GRAFFITIS][grInfo];

forward CargarGraffitis();
public CargarGraffitis()
{
	//clear
	Loop(x, MAX_GRAFFITIS, 0)
	{
		alm(InfoGraffiti[x][gr_Mensaje], "ninguno");
		alm(InfoGraffiti[x][gr_Creador], "ninguno");
		InfoGraffiti[x][gr_Fecha] = 0;
		InfoGraffiti[x][gr_PosX] = 0.0;
		InfoGraffiti[x][gr_PosY] = 0.0;
		InfoGraffiti[x][gr_PosZ] = 0.0;
		InfoGraffiti[x][gr_RotX] = 0.0;
		InfoGraffiti[x][gr_RotY] = 0.0;
		InfoGraffiti[x][gr_RotZ] = 0.0;
	}
	new cargaditos = 0, pintados = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoGraffiti[id][grID_sql]);
		reg_string(tabla, "Mensaje", InfoGraffiti[id][gr_Mensaje], 256);
		reg_string(tabla, "Creador", InfoGraffiti[id][gr_Creador], MAX_PLAYER_NAME);
		reg_int(tabla, "Fecha", InfoGraffiti[id][gr_Fecha]);
		reg_float(tabla, "PotX", InfoGraffiti[id][gr_PosX]);
		reg_float(tabla, "PotY", InfoGraffiti[id][gr_PosY]);
		reg_float(tabla, "PotZ", InfoGraffiti[id][gr_PosZ]);
		reg_float(tabla, "RotX", InfoGraffiti[id][gr_RotX]);
		reg_float(tabla, "RotY", InfoGraffiti[id][gr_RotY]);
		reg_float(tabla, "RotZ", InfoGraffiti[id][gr_RotZ]);
		reg_int(tabla, "Interior", InfoGraffiti[id][gr_Interior]);
		reg_int(tabla, "VirtualWorld", InfoGraffiti[id][gr_VirtualWorld]);
		if (InfoGraffiti[id][grID_sql]) totalgraffitis++;
		//función
		if (InfoGraffiti[id][gr_PosX] != 0.0)
		{
			if (!strcmp(InfoGraffiti[id][gr_Creador], "ninguno", true))
			{
				InfoGraffiti[id][gr_Objeto] = CreateDynamicObject(18665, InfoGraffiti[id][gr_PosX], InfoGraffiti[id][gr_PosY], InfoGraffiti[id][gr_PosZ], InfoGraffiti[id][gr_RotX], InfoGraffiti[id][gr_RotY], InfoGraffiti[id][gr_RotZ], -1, 0, -1, 6000.0);
			}
			else
			{
				InfoGraffiti[id][gr_Objeto] = CreateDynamicObject(18665, InfoGraffiti[id][gr_PosX], InfoGraffiti[id][gr_PosY], InfoGraffiti[id][gr_PosZ], InfoGraffiti[id][gr_RotX], InfoGraffiti[id][gr_RotY], InfoGraffiti[id][gr_RotZ], -1, 0, -1, 6000.0);
				new graffitiText[128];
				alm(graffitiText, InfoGraffiti[id][gr_Mensaje]);
				strreplace(graffitiText, "(n)", "\n");
				strreplace(graffitiText, "(a)", "{0000FF}"); //azul
				strreplace(graffitiText, "(b)", "{FFFFFF}"); //blanco
				strreplace(graffitiText, "(am)", "{FFFF00}"); //amarillo
				strreplace(graffitiText, "(v)", "{00C200}"); //verde
				strreplace(graffitiText, "(ne)", "{000000}"); //negro
				strreplace(graffitiText, "(na)", "{FFBF00}"); //naranja
				strreplace(graffitiText, "(r)", "{FF0000}"); //rojo
				strreplace(graffitiText, "(ce)", "{00FFFF}"); //celeste
				SetDynamicObjectMaterialText(InfoGraffiti[id][gr_Objeto], 0, graffitiText, OBJECT_MATERIAL_SIZE_256x256, "Arial", 32, 1, 0xFFFFFFFF, 0, 1);
				pintados++;
			}
			cargaditos++;
		}
	}
	printf("%d graffitis dinámicos (Pintados: %d) (SQL: %d) cargados correctamente.", cargaditos, pintados, totalgraffitis-1);
	return 1;
}

//renovación de sistema de puertas dinámicas en sql, by EdinsonWalker (23/01/2020)
enum puertaInfo
{
	pdID_sql,                   // id sql
	pdNombre[128],              // nombre
	Float: pdExteriorX,         // exterior x
	Float: pdExteriorY,         // exterior y
	Float: pdExteriorZ,         // exterior z
	Float: pdExteriorR,         // exterior r
	pdExteriorInt,              // exterior int
	pdExteriorVW,               // exterior vw
	Float: pdInteriorX,         // interior x
	Float: pdInteriorY,         // interior y
	Float: pdInteriorZ,         // interior z
	Float: pdInteriorR,         // interior r
	pdInteriorInt,              // interior int
	pdInteriorVW,               // interior vw
	pdModelo,                   // modelo pickup
	pdMapIcon,					// modelo mapicon
	pdFaccion,                  // facción
	pdAdmin,                    // admin
	pdVIP,                      // vip
	pdEstrellas,                // estrellas
	pdStatusVehiculo,           // status vehículo
	//dynamic
	pdExteriorPickup,           // exterior pickup
	Text3D: pdExteriorLabel,    // exterior label
	pdExteriorMapIcon,          // exterior mapicon
	pdInteriorPickup,           // interior pickup
	Text3D: pdInteriorLabel,    // interior label
};
new InfoPuerta[MAX_PUERTAS][puertaInfo];

forward CargarPuertas();
public CargarPuertas()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoPuerta[id][pdID_sql]);
		reg_string(tabla, "Nombre", InfoPuerta[id][pdNombre], 128);
		reg_float(tabla, "ExteriorX", InfoPuerta[id][pdExteriorX]);
		reg_float(tabla, "ExteriorY", InfoPuerta[id][pdExteriorY]);
		reg_float(tabla, "ExteriorZ", InfoPuerta[id][pdExteriorZ]);
		reg_float(tabla, "ExteriorR", InfoPuerta[id][pdExteriorR]);
		reg_int(tabla, "ExteriorInt", InfoPuerta[id][pdExteriorInt]);
		reg_int(tabla, "ExteriorVW", InfoPuerta[id][pdExteriorVW]);
		reg_float(tabla, "InteriorX", InfoPuerta[id][pdInteriorX]);
		reg_float(tabla, "InteriorY", InfoPuerta[id][pdInteriorY]);
		reg_float(tabla, "InteriorZ", InfoPuerta[id][pdInteriorZ]);
		reg_float(tabla, "InteriorR", InfoPuerta[id][pdInteriorR]);
		reg_int(tabla, "InteriorInt", InfoPuerta[id][pdInteriorInt]);
		reg_int(tabla, "InteriorVW", InfoPuerta[id][pdInteriorVW]);
		reg_int(tabla, "Modelo", InfoPuerta[id][pdModelo]);
		reg_int(tabla, "MapIcon", InfoPuerta[id][pdMapIcon]);
		reg_int(tabla, "Faccion", InfoPuerta[id][pdFaccion]);
		reg_int(tabla, "Admin", InfoPuerta[id][pdAdmin]);
		reg_int(tabla, "VIP", InfoPuerta[id][pdVIP]);
		reg_int(tabla, "Estrellas", InfoPuerta[id][pdEstrellas]);
		reg_int(tabla, "StatusVehiculo", InfoPuerta[id][pdStatusVehiculo]);
		if (InfoPuerta[id][pdID_sql]) totalpuertas++;
		//función
		if (InfoPuerta[id][pdExteriorX] != 0.0)
		{
			cargaditos++;
			CreateDynamicDoor(id, 1);
		} else noexitDoor(id);
	}
	printf("%d puertas dinámicas (SQL: %d) cargadas correctamente.", cargaditos, totalpuertas-1);
	return 1;
}

CreateDynamicDoor(id, mapicon)
{
	new label_door[235];
	DestroyDynamicPickup(InfoPuerta[id][pdExteriorPickup]);
	DestroyDynamicPickup(InfoPuerta[id][pdInteriorPickup]);
	DestroyDynamic3DTextLabel(InfoPuerta[id][pdExteriorLabel]);
	DestroyDynamic3DTextLabel(InfoPuerta[id][pdInteriorLabel]);
	format(label_door, sizeof label_door, "[%d] {FFBF00}%s\n{EBEBEB}Presiona {3E62F4}'H'{EBEBEB} para entrar", id, InfoPuerta[id][pdNombre]);
	InfoPuerta[id][pdExteriorLabel] = CreateDynamic3DTextLabel(label_door, 0xEBEBEBFF, InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ]+0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoPuerta[id][pdExteriorVW], InfoPuerta[id][pdExteriorInt], -1);
	format(label_door, sizeof label_door, "[%d] {FFBF00}%s\n{EBEBEB}Presiona {3E62F4}'H'{EBEBEB} para salir", id, InfoPuerta[id][pdNombre]);
	InfoPuerta[id][pdInteriorLabel] = CreateDynamic3DTextLabel(label_door, 0xEBEBEBFF, InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ]+0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoPuerta[id][pdInteriorVW], InfoPuerta[id][pdInteriorInt], -1);
	InfoPuerta[id][pdExteriorPickup] = CreateDynamicPickup(GetModelDoor(id), 1, InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ], InfoPuerta[id][pdExteriorVW], InfoPuerta[id][pdExteriorInt], -1);
	InfoPuerta[id][pdInteriorPickup] = CreateDynamicPickup(GetModelDoor(id), 1, InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ], InfoPuerta[id][pdInteriorVW], InfoPuerta[id][pdInteriorInt], -1);
	if (mapicon != 0)
	{
		DestroyDynamicMapIcon(InfoPuerta[id][pdExteriorMapIcon]);
		if (InfoPuerta[id][pdMapIcon] != 0)
			InfoPuerta[id][pdExteriorMapIcon] = CreateDynamicMapIcon(InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ], InfoPuerta[id][pdMapIcon], 0, 0, 0, -1, 300);
	}
}

noexitDoor(id)
{
	DestroyDynamicPickup(InfoPuerta[id][pdExteriorPickup]);
	DestroyDynamicPickup(InfoPuerta[id][pdInteriorPickup]);
	DestroyDynamic3DTextLabel(InfoPuerta[id][pdExteriorLabel]);
	DestroyDynamic3DTextLabel(InfoPuerta[id][pdInteriorLabel]);
	DestroyDynamicMapIcon(InfoPuerta[id][pdExteriorMapIcon]);
	InfoPuerta[id][pdExteriorLabel] = CreateDynamic3DTextLabel("puelta", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoPuerta[id][pdInteriorLabel] = CreateDynamic3DTextLabel("puelta", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoPuerta[id][pdExteriorPickup] = CreateDynamicPickup(1239, 1, -2190.7974, 165.9186, 58.2604, id, id);
	InfoPuerta[id][pdInteriorPickup] = CreateDynamicPickup(1239, 1, -2190.7974, 165.9186, 58.2604, id, id);
	return 1;
}

GetModelDoor(id)
{
	new modelid = 1318;
	switch (InfoPuerta[id][pdModelo])
	{
		case 1: modelid = 1210;
		case 2: modelid = 1212;
		case 3: modelid = 1239;
		case 4: modelid = 1240;
		case 5: modelid = 1241;
		case 6: modelid = 1242;
		case 7: modelid = 1247;
		case 8: modelid = 1248;
		case 9: modelid = 1252;
		case 10: modelid = 1253;
		case 11: modelid = 1254;
		case 12: modelid = 1313;
		case 13: modelid = 1272;
		case 14: modelid = 1273;
		case 15: modelid = 1274;
		case 16: modelid = 1275;
		case 17: modelid = 1276;
		case 18: modelid = 1277;
		case 19: modelid = 1279;
		case 20: modelid = 1314;
		case 21: modelid = 1316;
		case 22: modelid = 1317;
		case 23: modelid = 1559;
		case 24: modelid = 1582;
		case 25: modelid = 2894;
	}
	return modelid;
}

//renovación de sistema de casas en sql, by EdinsonWalker (16/01/2020)
enum casaInfo
{
	cID_sql,                            // id sql
	cPropietario[MAX_PLAYER_NAME],      // propietario
	cTipo,                              // tipo de clase
	cVenta,                             // 0 en venta, 1 comprado
	cSeguro,                            // 1 seguro, 0 sin seguro
	Float: cExteriorX,                  // pos x
	Float: cExteriorY,                  // pos y
	Float: cExteriorZ,                  // pos z
	Float: cExteriorR,                  // pos angulo
	cExteriorInt,                       // ext int
	cExteriorVW,                        // ext vw
	Float: cInteriorX,                  // int x
	Float: cInteriorY,                  // int y
	Float: cInteriorZ,                  // int z
	Float: cInteriorR,                  // int r
	cInteriorInt,                       // int int
	cInteriorVW,                        // int vw
	cDinero,                            // dinero
	cPrecio,                            // precio
	cNivel,                             // nivel
	cMateriales,                        // materiales
	cArmario[10],                       // armario
	cArmarioCant[10],                   // armario cant
	//dynamic
	cPickupExt,                         // pickup ext
	cPickupInt,                         // pickup int
	Text3D: cLabelExt,                  // label ext
	Text3D: cLabelInt,                  // label int
};
new InfoCasa[MAX_CASAS][casaInfo];

forward CargarCasas();
public CargarCasas()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoCasa[id][cID_sql]);
		reg_string(tabla, "Propietario", InfoCasa[id][cPropietario], MAX_PLAYER_NAME);
		reg_int(tabla, "Tipo", InfoCasa[id][cTipo]);
		reg_int(tabla, "Venta", InfoCasa[id][cVenta]);
		reg_int(tabla, "Seguro", InfoCasa[id][cSeguro]);
		reg_float(tabla, "Exterior_X", InfoCasa[id][cExteriorX]);
		reg_float(tabla, "Exterior_Y", InfoCasa[id][cExteriorY]);
		reg_float(tabla, "Exterior_Z", InfoCasa[id][cExteriorZ]);
		reg_float(tabla, "Exterior_R", InfoCasa[id][cExteriorR]);
		reg_int(tabla, "Exterior_Int", InfoCasa[id][cExteriorInt]);
		reg_int(tabla, "Exterior_VW", InfoCasa[id][cExteriorVW]);
		reg_float(tabla, "Interior_X", InfoCasa[id][cInteriorX]);
		reg_float(tabla, "Interior_Y", InfoCasa[id][cInteriorY]);
		reg_float(tabla, "Interior_Z", InfoCasa[id][cInteriorZ]);
		reg_float(tabla, "Interior_R", InfoCasa[id][cInteriorR]);
		reg_int(tabla, "Interior_Int", InfoCasa[id][cInteriorInt]);
		reg_int(tabla, "Interior_VW", InfoCasa[id][cInteriorVW]);
		reg_int(tabla, "BolosUwU", InfoCasa[id][cDinero]);
		reg_int(tabla, "Precio", InfoCasa[id][cPrecio]);
		reg_int(tabla, "Nivel", InfoCasa[id][cNivel]);
		reg_int(tabla, "Materiales", InfoCasa[id][cMateriales]);
		reg_int(tabla, "Armario1", InfoCasa[id][cArmario][0]);
		reg_int(tabla, "ArmarioCant1", InfoCasa[id][cArmarioCant][0]);
		reg_int(tabla, "Armario2", InfoCasa[id][cArmario][1]);
		reg_int(tabla, "ArmarioCant2", InfoCasa[id][cArmarioCant][1]);
		reg_int(tabla, "Armario3", InfoCasa[id][cArmario][2]);
		reg_int(tabla, "ArmarioCant3", InfoCasa[id][cArmarioCant][2]);
		reg_int(tabla, "Armario4", InfoCasa[id][cArmario][3]);
		reg_int(tabla, "ArmarioCant4", InfoCasa[id][cArmarioCant][3]);
		reg_int(tabla, "Armario5", InfoCasa[id][cArmario][4]);
		reg_int(tabla, "ArmarioCant5", InfoCasa[id][cArmarioCant][4]);
		reg_int(tabla, "Armario6", InfoCasa[id][cArmario][5]);
		reg_int(tabla, "ArmarioCant6", InfoCasa[id][cArmarioCant][5]);
		reg_int(tabla, "Armario7", InfoCasa[id][cArmario][6]);
		reg_int(tabla, "ArmarioCant7", InfoCasa[id][cArmarioCant][6]);
		reg_int(tabla, "Armario8", InfoCasa[id][cArmario][7]);
		reg_int(tabla, "ArmarioCant8", InfoCasa[id][cArmarioCant][7]);
		reg_int(tabla, "Armario9", InfoCasa[id][cArmario][8]);
		reg_int(tabla, "ArmarioCant9", InfoCasa[id][cArmarioCant][8]);
		reg_int(tabla, "Armario10", InfoCasa[id][cArmario][9]);
		reg_int(tabla, "ArmarioCant10", InfoCasa[id][cArmarioCant][9]);
		if (InfoCasa[id][cID_sql]) totalcasas++;
		//función
		if (InfoCasa[id][cTipo] != 0)
		{
			LabelPickup_casa(id);
			cargaditos++;
		}
		else noexitcasa(id);
	}
	printf("%d casas dinámicas (SQL: %d) cargadas correctamente.", cargaditos, totalcasas-1);
	return 1;
}

noexitcasa(id)
{
	DestroyDynamicPickup(InfoCasa[id][cPickupExt]);
	DestroyDynamicPickup(InfoCasa[id][cPickupInt]);
	DestroyDynamic3DTextLabel(InfoCasa[id][cLabelExt]);
	DestroyDynamic3DTextLabel(InfoCasa[id][cLabelInt]);
	InfoCasa[id][cPickupExt] = CreateDynamicPickup(1273, 1, -2190.7974, 165.9186, 58.2604, id, id);
	InfoCasa[id][cPickupInt] = CreateDynamicPickup(1273, 1, -2190.7974, 165.9186, 58.2604, id, id);
	InfoCasa[id][cLabelExt] = CreateDynamic3DTextLabel("casita", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoCasa[id][cLabelInt] = CreateDynamic3DTextLabel("casita", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
}

LabelPickup_casa(id)
{
	//delete error
	DestroyDynamicPickup(InfoCasa[id][cPickupExt]);
	DestroyDynamicPickup(InfoCasa[id][cPickupInt]);
	DestroyDynamic3DTextLabel(InfoCasa[id][cLabelExt]);
	DestroyDynamic3DTextLabel(InfoCasa[id][cLabelInt]);
	//info new
	new location[MAX_ZONE_NAME], house_label[470], model = 1273, exdireccion[215];
	Get2DZone(location, MAX_ZONE_NAME, InfoCasa[id][cExteriorX], InfoCasa[id][cExteriorY], InfoCasa[id][cExteriorZ]);
	if (InfoCasa[id][cExteriorVW] == 0 && InfoCasa[id][cExteriorInt] == 0) format(exdireccion, sizeof exdireccion, "{EBEBEB}Dirección: {FFBF00}%s {0080C0}%d", location, id);
	else format(exdireccion, sizeof exdireccion, "{EBEBEB}Dirección: {0080C0}%d", id);
	//3d label
	if (InfoCasa[id][cVenta] != 0)
	{
		model = 19522;
		format(house_label, sizeof house_label, "{EBEBEB}Propiedad de {0080C0}%s\n%s", InfoCasa[id][cPropietario], exdireccion);
	}
	else
	{
		format(house_label, sizeof house_label, "{00CC00}¡Casa en venta!\n{EBEBEB}Clase: {FFBF00}%s{EBEBEB} - Nivel: {FFBF00}%d{EBEBEB}\n{EBEBEB}Precio: {00CC00}$%s\n%s\n\n{EBEBEB}Para comprar usa: {FFBF00}/comprarcasa{EBEBEB}.", GetClaseCasa(InfoCasa[id][cTipo]), InfoCasa[id][cNivel], diner_coma(InfoCasa[id][cPrecio]), exdireccion);
	}
	InfoCasa[id][cLabelExt] = CreateDynamic3DTextLabel(house_label, -1, InfoCasa[id][cExteriorX], InfoCasa[id][cExteriorY], InfoCasa[id][cExteriorZ]+0.4, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoCasa[id][cExteriorVW], InfoCasa[id][cExteriorInt], -1);
	format(house_label, sizeof house_label, "{0080C0}Salida\n%s", exdireccion);
	InfoCasa[id][cLabelInt] = CreateDynamic3DTextLabel(house_label, -1, InfoCasa[id][cInteriorX], InfoCasa[id][cInteriorY], InfoCasa[id][cInteriorZ]+0.4, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoCasa[id][cInteriorVW], InfoCasa[id][cInteriorInt], -1);
	//pickup
	InfoCasa[id][cPickupInt] = CreateDynamicPickup(model, 1, InfoCasa[id][cInteriorX], InfoCasa[id][cInteriorY], InfoCasa[id][cInteriorZ], InfoCasa[id][cInteriorVW], InfoCasa[id][cInteriorInt]);
	InfoCasa[id][cPickupExt] = CreateDynamicPickup(model, 1, InfoCasa[id][cExteriorX], InfoCasa[id][cExteriorY], InfoCasa[id][cExteriorZ], InfoCasa[id][cExteriorVW], InfoCasa[id][cExteriorInt]);
}

GetClaseCasa(x)
{
	new eClase[24];
	switch (x)
	{
		case 1: alm(eClase, "baja");
		case 2: alm(eClase, "media-baja");
		case 3: alm(eClase, "media");
		case 4: alm(eClase, "media-alta");
		case 5: alm(eClase, "alta");
	}
	return eClase;
}

SetInteriorCasa(playerid, id, interior)
{
	new Float: x, Float: y, Float: z, Float: r, int, clase;
	switch (interior)
	{
		//baja
		case 1: x = 266.5080, y = 304.9096, z = 999.1484, r = 271.8487, int = 2, clase = 1;
		case 2: x = 2218.4019, y = -1076.2317, z = 1050.4844, r = 94.0354, int = 1, clase = 1;
		case 3: x = 2233.7324, y = -1115.2200, z = 1050.8828, r = 4.4446, int = 5, clase = 1;
		//media-baja
		case 4: x = 2468.8379, y = -1698.2688, z = 1013.5078, r = 90.6120, int = 2, clase = 2;
		case 5: x = 217.2689, y = 1275.1978, z = 1059.0253, r = 1.2881, int = 4, clase = 2;
		case 6: x = 295.1263, y = 1472.2615, z = 1080.2578, r = 358.1545, int = 15, clase = 2;
		case 7: x = 226.7467, y = 1239.9583, z = 1082.1406, r = 87.4319, int = 2, clase = 2;
		//media
		case 8: x = 2270.4004, y = -1210.5198, z = 1047.5625, r = 91.5055, int = 10, clase = 3;
		case 9: x = 2196.8484, y = -1204.3329, z = 1049.0234, r = 94.3722, int = 6, clase = 3;
		//media-alta
		case 10: x = 83.0492, y = 1322.2887, z = 1083.8662, r = 0.9745, int = 9, clase = 4;
		case 11: x = 2317.7004, y = -1026.5896, z = 1050.2178, r = 7.2412, int = 9, clase = 4;
		case 12: x = 2324.4644, y = -1149.5463, z = 1050.7101, r = 2.8840, int = 12, clase = 4;
		//alta
		case 13: x = 140.2607, y = 1365.9283, z = 1083.8594, r = 3.7945, int = 5, clase = 5;
		case 14: x = 1260.6597, y = -785.3624, z = 1091.9063, r = 272.6137, int = 5, clase = 5;
	}
	if (playerid == -1)
	{
		new string[370];
		InfoCasa[id][cInteriorX] = x;
		InfoCasa[id][cInteriorY] = y;
		InfoCasa[id][cInteriorZ] = z;
		InfoCasa[id][cInteriorR] = r;
		InfoCasa[id][cInteriorInt] = int;
		InfoCasa[id][cTipo] = clase;
		mysql_format(DBcreative, string, sizeof string, "UPDATE casas SET Interior_X = '%f', Interior_Y = '%f', Interior_Z = '%f', Interior_R = '%f', Interior_Int = '%d', Tipo = '%d' WHERE ID = '%d'", InfoCasa[id][cInteriorX], InfoCasa[id][cInteriorY], InfoCasa[id][cInteriorZ], InfoCasa[id][cInteriorR], InfoCasa[id][cInteriorInt], InfoCasa[id][cTipo], InfoCasa[id][cID_sql]);
		mysql_tquery(DBcreative, string);
	}
	else
	{
		new string[170];
		SetPlayerPos(playerid, x, y, z);
		SetPlayerInterior(playerid, int);
		SetPlayerVirtualWorld(playerid, playerid);
		format(string, sizeof string, "Estás en el interior %d, clase: %s.", interior, GetClaseCasa(clase));
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

//renovación de sistema de negocios en sql, by EdinsonWalker (23/01/2020)

new neg_automatico[20]; //sistema de cobro productos-ganancia

enum negocioInfo
{
	nID_sql,								// id sql
	nNombre[32],                            // nombre
	nPropietario[MAX_PLAYER_NAME],          // propietario
	nVenta,                                 // venta
	nTipo,                                  // tipo
	nEmpleo,                                // 1 deja que ingresen | 0 los contrata
	nPrecio,                                // precio
	nNivel,                                 // nivel
	Float: nExteriorX,                      // exterior x
	Float: nExteriorY,                      // exterior y
	Float: nExteriorZ,                      // exterior z
	Float: nExteriorR,                      // exterior r
	nExteriorInt,                           // exterior int
	nExteriorVW,                            // exterior vw
	Float: nInteriorX,                      // interior x
	Float: nInteriorY,                      // interior y
	Float: nInteriorZ,                      // interior z
	Float: nInteriorR,                      // interior r
	nInteriorInt,                           // interior int
	nInteriorVW,                            // interior vw
	Float: nLugarCompraX,                   // lugar de comprar x
	Float: nLugarCompraY,                   // lugar de comprar y
	Float: nLugarCompraZ,                   // lugar de comprar z
	nSeguro,                                // seguro
	nDinero,                                // dinero
	nProductos,                             // productos
	nMapIcon,                               // mapicon
	Float: nActorX,                         // actor x
	Float: nActorY,                         // actor y
	Float: nActorZ,                         // actor z
	Float: nActorR,                         // actor r
	nActorSkin,                             // actor skin
	//concesionario
	Float: nVehicleX,                       // entrega vehiculo x
	Float: nVehicleY,                       // entrega vehiculo y
	Float: nVehicleZ,                       // entrega vehiculo z
	Float: nVehicleR,                       // entrega vehiculo r
	//fabrica
	Float: nExteriorVehX,
	Float: nExteriorVehY,
	Float: nExteriorVehZ,
	Float: nExteriorVehR,
	Float: nExteriorVehX_V,
	Float: nExteriorVehY_V,
    nEmpleado[5],
	nQuimicos,
	nTimeNecesitaQuimicos,
	nCocinando[5],
	nTimeCocinando[5],
	nEntregasListas,
	//mecánico
	nPrecioPintura,
	nPrecioPaintJob,
	nPrecioReparacion,
	nPrecioGasolina,
	nPrecioLlantas,
	nPrecioNitro,
	nPrecioHyd,
	nPrecioTuneo,
	//dynamic fabrica:
	Text3D: nExteriorVehLabel,
	nExteriorVehPickup,
	Text3D: nInteriorVehLabel,
	nInteriorVehPickup,
	nObjMoney,
	nVehiculo[2],
	nCountQVeh1,
	nCountQVeh2,
	nBarrilVeh1[5],
	nBarrilVeh2[5],
    nActorEmpleado[5],
	nRecorridosQuimicos,
	Text3D: nLabelQuimicos[3],
	Text3D: nLabelCocina[5],
	nCajaObj[20],
	//dynamic
	Text3D: nExteriorLabel,                 // exterior label
	nExteriorPickup,                        // exterior pickup
	nExteriorMapIcon,                       // exterior mapicon
	Text3D: nInteriorLabel,                 // interior label
	nInteriorPickup,                        // interior pickup
	nInteriorActor,                         // interior actor
	Text3D: nLugarCompraLabel,              // lugar de comprar label
	nLugarCompraPickup,                     // lugar de comprar pickup
	nVeh1SinUso,
	nVeh2SinUso,
}
new InfoNegocio[MAX_NEGOCIOS][negocioInfo];

new EnViajeQuimicos[MAX_PLAYERS]; // 1: buscando químicos - 2: por entregar químicos
new EnViajeDrogas[MAX_PLAYERS]; // 1: llevando drogas - 2: devolviendo fábrica
new UsandoVehFabrica[MAX_PLAYERS];

IsPlayerContrato(playerid, type)
{
	if (InfoPlayer[playerid][pNegocio1] != -1)
	{
		if (InfoNegocio[InfoPlayer[playerid][pNegocio1]][nTipo] == type) return InfoPlayer[playerid][pNegocio1];
	}
	if (InfoPlayer[playerid][pNegocio2] != -1)
	{
		if (InfoNegocio[InfoPlayer[playerid][pNegocio2]][nTipo] == type) return InfoPlayer[playerid][pNegocio2];
	}
	new id = InfoPlayer[playerid][pContrato];
	if (id == -1) return -1;
	if (InfoNegocio[id][nTipo] == type) return id;
	return -1;
}

IsNameContrato(type)
{
	new is_name[19];
	switch (type)
	{
		case 6: alm(is_name, "Repartidor");
		case 9: alm(is_name, "Mecánico");
		case 12: alm(is_name, "Fábrica de drogas");
		case 13: alm(is_name, "Médico");
	}
	return is_name;
}

GetNameContrato(id)
{
	new is_name[19];
	switch (InfoNegocio[id][nTipo])
	{
		case 6: alm(is_name, "Repartidor");
		case 9: alm(is_name, "Mecánico");
		case 12: alm(is_name, "Fábrica de drogas");
		case 13: alm(is_name, "Médico");
	}
	return is_name;
}

forward CargarNegocios();
public CargarNegocios()
{
	//cargado de negocios
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoNegocio[id][nID_sql]);
		reg_string(tabla, "Nombre", InfoNegocio[id][nNombre], 32);
		reg_string(tabla, "Propietario", InfoNegocio[id][nPropietario], MAX_PLAYER_NAME);
		reg_int(tabla, "Venta", InfoNegocio[id][nVenta]);
		reg_int(tabla, "Tipo", InfoNegocio[id][nTipo]);
		reg_int(tabla, "Empleo", InfoNegocio[id][nEmpleo]);
		reg_int(tabla, "Precio", InfoNegocio[id][nPrecio]);
		reg_int(tabla, "Nivel", InfoNegocio[id][nNivel]);
		reg_float(tabla, "ExteriorX", InfoNegocio[id][nExteriorX]);
		reg_float(tabla, "ExteriorY", InfoNegocio[id][nExteriorY]);
		reg_float(tabla, "ExteriorZ", InfoNegocio[id][nExteriorZ]);
		reg_float(tabla, "ExteriorR", InfoNegocio[id][nExteriorR]);
		reg_int(tabla, "ExteriorInt", InfoNegocio[id][nExteriorInt]);
		reg_int(tabla, "ExteriorVW", InfoNegocio[id][nExteriorVW]);
		reg_float(tabla, "InteriorX", InfoNegocio[id][nInteriorX]);
		reg_float(tabla, "InteriorY", InfoNegocio[id][nInteriorY]);
		reg_float(tabla, "InteriorZ", InfoNegocio[id][nInteriorZ]);
		reg_float(tabla, "InteriorR", InfoNegocio[id][nInteriorR]);
		reg_int(tabla, "InteriorInt", InfoNegocio[id][nInteriorInt]);
		reg_int(tabla, "InteriorVW", InfoNegocio[id][nInteriorVW]);
		reg_float(tabla, "LugarCompraX", InfoNegocio[id][nLugarCompraX]);
		reg_float(tabla, "LugarCompraY", InfoNegocio[id][nLugarCompraY]);
		reg_float(tabla, "LugarCompraZ", InfoNegocio[id][nLugarCompraZ]);
		reg_int(tabla, "Seguro", InfoNegocio[id][nSeguro]);
		reg_int(tabla, "BolosUwU", InfoNegocio[id][nDinero]);
		reg_int(tabla, "Productos", InfoNegocio[id][nProductos]);
		reg_int(tabla, "MapIcon", InfoNegocio[id][nMapIcon]);
		reg_float(tabla, "ActorX", InfoNegocio[id][nActorX]);
		reg_float(tabla, "ActorY", InfoNegocio[id][nActorY]);
		reg_float(tabla, "ActorZ", InfoNegocio[id][nActorZ]);
		reg_float(tabla, "ActorR", InfoNegocio[id][nActorR]);
		reg_int(tabla, "ActorSkin", InfoNegocio[id][nActorSkin]);
		reg_float(tabla, "VehicleX", InfoNegocio[id][nVehicleX]);
		reg_float(tabla, "VehicleY", InfoNegocio[id][nVehicleY]);
		reg_float(tabla, "VehicleZ", InfoNegocio[id][nVehicleZ]);
		reg_float(tabla, "VehicleR", InfoNegocio[id][nVehicleR]);
		reg_float(tabla, "ExteriorVehX", InfoNegocio[id][nExteriorVehX]);
		reg_float(tabla, "ExteriorVehY", InfoNegocio[id][nExteriorVehY]);
		reg_float(tabla, "ExteriorVehZ", InfoNegocio[id][nExteriorVehZ]);
		reg_float(tabla, "ExteriorVehR", InfoNegocio[id][nExteriorVehR]);
		reg_float(tabla, "ExteriorVehX_V", InfoNegocio[id][nExteriorVehX_V]);
		reg_float(tabla, "ExteriorVehY_V", InfoNegocio[id][nExteriorVehY_V]);
		reg_int(tabla, "Empleado1", InfoNegocio[id][nEmpleado][0]);
		reg_int(tabla, "Empleado2", InfoNegocio[id][nEmpleado][1]);
		reg_int(tabla, "Empleado3", InfoNegocio[id][nEmpleado][2]);
		reg_int(tabla, "Empleado4", InfoNegocio[id][nEmpleado][3]);
		reg_int(tabla, "Empleado5", InfoNegocio[id][nEmpleado][4]);
		reg_int(tabla, "Quimicos", InfoNegocio[id][nQuimicos]);
		reg_int(tabla, "TimeNecesitaQuimicos", InfoNegocio[id][nTimeNecesitaQuimicos]);
		reg_int(tabla, "Cocinando1", InfoNegocio[id][nCocinando][0]);
		reg_int(tabla, "Cocinando2", InfoNegocio[id][nCocinando][1]);
		reg_int(tabla, "Cocinando3", InfoNegocio[id][nCocinando][2]);
		reg_int(tabla, "Cocinando4", InfoNegocio[id][nCocinando][3]);
		reg_int(tabla, "Cocinando5", InfoNegocio[id][nCocinando][4]);
		reg_int(tabla, "TimeCocinando1", InfoNegocio[id][nTimeCocinando][0]);
		reg_int(tabla, "TimeCocinando2", InfoNegocio[id][nTimeCocinando][1]);
		reg_int(tabla, "TimeCocinando3", InfoNegocio[id][nTimeCocinando][2]);
		reg_int(tabla, "TimeCocinando4", InfoNegocio[id][nTimeCocinando][3]);
		reg_int(tabla, "TimeCocinando5", InfoNegocio[id][nTimeCocinando][4]);
		reg_int(tabla, "EntregasListas", InfoNegocio[id][nEntregasListas]);
		new gformat[512];
		reg_string(tabla, "Mecanico", gformat, 512);
		sscanf(gformat, "p<|>dddddddd", InfoNegocio[id][nPrecioPintura], InfoNegocio[id][nPrecioPaintJob], InfoNegocio[id][nPrecioReparacion], InfoNegocio[id][nPrecioGasolina],
		InfoNegocio[id][nPrecioLlantas], InfoNegocio[id][nPrecioNitro], InfoNegocio[id][nPrecioHyd], InfoNegocio[id][nPrecioTuneo]);
		if (InfoNegocio[id][nID_sql]) totalnegocios++;
		//función
		if (InfoNegocio[id][nTipo] != 0)
		{
			LabelPickup_negocio(id, 1, 1, 1, 1);
			if (InfoNegocio[id][nTipo] == 12) CargarFabricas(id);
			cargaditos++;
		}
		else noexitnegocio(id);
	}
	printf("%d negocios dinámicos (SQL: %d) cargados correctamente.", cargaditos, totalnegocios-1);

	//fábricas:
	CreateDynamic3DTextLabel("Presiona {FFBF00}'H'{EBEBEB} para\nadministrar la fábrica", 0xEBEBEBFF, -2182.9316, -208.9902, 544.7307, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 9, -1);
	CreateDynamic3DTextLabel("Presiona {FFBF00}'H'{EBEBEB} para ver la lista de actividades", 0xEBEBEBFF, -2181.2676, -211.3310, 545.2496, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 9, -1);

	//costo de productos y ganancia
	neg_automatico[1] = Random(3200, 4200);
	neg_automatico[2] = Random(4000, 5400);
	neg_automatico[3] = Random(2100, 3100);
	neg_automatico[4] = Random(2000, 3230);
	neg_automatico[5] = Random(5200, 6600);
	neg_automatico[6] = 0;
	neg_automatico[7] = Random(1750, 2570);
	neg_automatico[8] = Random(4400, 5800);
	neg_automatico[9] = 0;
	neg_automatico[10] = Random(8400, 13600);
	neg_automatico[11] = Random(1750, 3180);
	neg_automatico[12] = 0;
	neg_automatico[13] = 0;

	//clínicas
	CreateDynamic3DTextLabel("Escribe '{FFBF00}/uniformes{EBEBEB}' aquí", 0xEBEBEBFF, -2288.0708, 89.1743, -5.3042+0.4, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 61, -1);
	CreateDynamicPickup(1275, 1, -2288.0708, 89.1743, -5.3042, -1, 61);
	return 1;
}

ActualizarPrecioNegocio(id)
{
	new gformat2[512];
	format(gformat2, sizeof gformat2, "%d|%d|%d|%d|%d|%d|%d|%d|",
	InfoNegocio[id][nPrecioPintura], InfoNegocio[id][nPrecioPaintJob], InfoNegocio[id][nPrecioReparacion], InfoNegocio[id][nPrecioGasolina],
	InfoNegocio[id][nPrecioLlantas], InfoNegocio[id][nPrecioNitro], InfoNegocio[id][nPrecioHyd], InfoNegocio[id][nPrecioTuneo]);

	new query[620];
	mysql_format(DBcreative, query, sizeof query, "UPDATE negocios SET Mecanico = '%e' WHERE ID = '%d'", gformat2, InfoNegocio[id][nID_sql]);
	mysql_tquery(DBcreative, query);
}

LabelPickup_negocio(id, labelpickup, mapicon, actor, lugarcompra)
{
	if (labelpickup != 0)
	{
		//delete error
		DestroyDynamicPickup(InfoNegocio[id][nExteriorPickup]);
		DestroyDynamicPickup(InfoNegocio[id][nInteriorPickup]);
		DestroyDynamic3DTextLabel(InfoNegocio[id][nExteriorLabel]);
		DestroyDynamic3DTextLabel(InfoNegocio[id][nInteriorLabel]);
		//info new
		new negocio_label[470], model = 1274;
		//3d label
		if (InfoNegocio[id][nVenta] != 0)
		{
			model = 1272;
			if (InfoNegocio[id][nTipo] == 6) format(negocio_label, sizeof negocio_label, "{FFBF00}%s\n\n{0080C0}Propietario: {EBEBEB}%s\n{0080C0}Empresa {55AD30}%d\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], id);
			else if (InfoNegocio[id][nTipo] == 12) format(negocio_label, sizeof negocio_label, "{FFBF00}%s\n\n{0080C0}Propietario: {EBEBEB}%s\n{0080C0}Fábrica {55AD30}%d\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], id);
			else if (InfoNegocio[id][nTipo] == 13) format(negocio_label, sizeof negocio_label, "{FFBF00}%s\n\n{0080C0}Propietario: {EBEBEB}%s\n{0080C0}Clínica {55AD30}%d\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], id);
			else
			{
				if (InfoNegocio[id][nSeguro] == 0) format(negocio_label, sizeof negocio_label, "{0080C0}%s\n\n{00CC00}Propietario: {EBEBEB}%s\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{EBEBEB}\nNegocio {FFBF00}%d{EBEBEB}: {55AD30}Abierto\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], id);
				else format(negocio_label, sizeof negocio_label, "{0080C0}%s\n\n{00CC00}Propietario: {EBEBEB}%s\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{EBEBEB}\nNegocio {FFBF00}%d{EBEBEB}: {F92B2B}Cerrado", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], id);
			}
		}
		else
		{
			if (InfoNegocio[id][nTipo] == 6) format(negocio_label, sizeof negocio_label, "{FFBF00}¡Empresa {EBEBEB}%d{FFBF00} en venta!\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{00CC00}\nPrecio: {EBEBEB}$%s", id, GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], diner_coma(InfoNegocio[id][nPrecio]));
			else if (InfoNegocio[id][nTipo] == 12) format(negocio_label, sizeof negocio_label, "{FFBF00}¡Fábrica {EBEBEB}%d{FFBF00} en venta!\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{00CC00}\nPrecio: {EBEBEB}$%s", id, GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], diner_coma(InfoNegocio[id][nPrecio]));
			else format(negocio_label, sizeof negocio_label, "{0080C0}¡Negocio {EBEBEB}%d{0080C0} en venta!\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{00CC00}\nPrecio: {EBEBEB}$%s\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", id, GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], diner_coma(InfoNegocio[id][nPrecio]));
		}
		if (InfoNegocio[id][nTipo] == 6) model = 19523;
		if (InfoNegocio[id][nTipo] == 12) model = 1318;
		if (InfoNegocio[id][nTipo] == 13) model = 1240;
		InfoNegocio[id][nExteriorLabel] = CreateDynamic3DTextLabel(negocio_label, -1, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ]+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoNegocio[id][nExteriorVW], InfoNegocio[id][nExteriorInt], -1);
		if (InfoNegocio[id][nTipo] == 6) format(negocio_label, sizeof negocio_label, "{EBEBEB}Empresa {55AD30}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
		else if (InfoNegocio[id][nTipo] == 12) format(negocio_label, sizeof negocio_label, "{EBEBEB}Fábrica {55AD30}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
		else if (InfoNegocio[id][nTipo] == 13) format(negocio_label, sizeof negocio_label, "{EBEBEB}Clínica {55AD30}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
		else format(negocio_label, sizeof negocio_label, "{EBEBEB}Salida {0080C0}%d{EBEBEB}: {0080C0}%s\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
		InfoNegocio[id][nInteriorLabel] = CreateDynamic3DTextLabel(negocio_label, -1, InfoNegocio[id][nInteriorX], InfoNegocio[id][nInteriorY], InfoNegocio[id][nInteriorZ]+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		//pickup
		InfoNegocio[id][nInteriorPickup] = CreateDynamicPickup(model, 1, InfoNegocio[id][nInteriorX], InfoNegocio[id][nInteriorY], InfoNegocio[id][nInteriorZ], InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
		InfoNegocio[id][nExteriorPickup] = CreateDynamicPickup(model, 1, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ], InfoNegocio[id][nExteriorVW], InfoNegocio[id][nExteriorInt]);
		//pickup fabrica vehículo
		if (InfoNegocio[id][nExteriorVehX] != 0.0 && InfoNegocio[id][nTipo] == 12)
		{
			DestroyDynamicPickup(InfoNegocio[id][nExteriorVehPickup]);
			DestroyDynamicPickup(InfoNegocio[id][nInteriorVehPickup]);
			DestroyDynamic3DTextLabel(InfoNegocio[id][nExteriorVehLabel]);
			DestroyDynamic3DTextLabel(InfoNegocio[id][nInteriorVehLabel]);
			//entrada
			format(negocio_label, sizeof negocio_label, "{EBEBEB}Fábrica {FFBF00}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Escribe {FFBF00}'/enter'{EBEBEB} para entrar", id, InfoNegocio[id][nNombre]);
			InfoNegocio[id][nExteriorVehLabel] = CreateDynamic3DTextLabel(negocio_label, -1, InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ]+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoNegocio[id][nExteriorVW], InfoNegocio[id][nExteriorInt], -1);
			InfoNegocio[id][nExteriorVehPickup] = CreateDynamicPickup(19132, 1, InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ], InfoNegocio[id][nExteriorVW], InfoNegocio[id][nExteriorInt]);
			//salida
			format(negocio_label, sizeof negocio_label, "{EBEBEB}Fábrica {FFBF00}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Escribe {FFBF00}'/exit'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
			InfoNegocio[id][nInteriorVehLabel] = CreateDynamic3DTextLabel(negocio_label, -1, -2140.3772, -247.4875, 544.8397+0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
			InfoNegocio[id][nInteriorVehPickup] = CreateDynamicPickup(19132, 1, -2140.3772, -247.4875, 544.8397, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
		}
	}
	if (mapicon != 0 && InfoNegocio[id][nMapIcon] != 0)
	{
		DestroyDynamicMapIcon(InfoNegocio[id][nExteriorMapIcon]);
		InfoNegocio[id][nExteriorMapIcon] = CreateDynamicMapIcon(InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ], InfoNegocio[id][nMapIcon], 0, 0, 0, -1, 300);
	}
	if (actor != 0 && InfoNegocio[id][nActorSkin] != 0)
	{
		DestroyDynamicActor(InfoNegocio[id][nInteriorActor]);
		InfoNegocio[id][nInteriorActor] = CreateDynamicActor(InfoNegocio[id][nActorSkin], InfoNegocio[id][nActorX], InfoNegocio[id][nActorY], InfoNegocio[id][nActorZ], InfoNegocio[id][nActorR], true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
	}
	if (lugarcompra != 0 && InfoNegocio[id][nLugarCompraX] != 0.0)
	{
		DestroyDynamicPickup(InfoNegocio[id][nLugarCompraPickup]);
		DestroyDynamic3DTextLabel(InfoNegocio[id][nLugarCompraLabel]);
		if (InfoNegocio[id][nTipo] == 13)
		{
			InfoNegocio[id][nLugarCompraPickup] = CreateDynamicPickup(11738, 1, InfoNegocio[id][nLugarCompraX], InfoNegocio[id][nLugarCompraY], InfoNegocio[id][nLugarCompraZ], InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
			InfoNegocio[id][nLugarCompraLabel] = CreateDynamic3DTextLabel("Botiquin de primeros auxilios\nAdquiere uno por {00CC00}$1,500{EBEBEB}\nEscribe aquí '{FFBF00}/tomarhp{EBEBEB}'", -1, InfoNegocio[id][nLugarCompraX], InfoNegocio[id][nLugarCompraY], InfoNegocio[id][nLugarCompraZ], 5.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
		}
		else
		{
			InfoNegocio[id][nLugarCompraPickup] = CreateDynamicPickup(19578, 1, InfoNegocio[id][nLugarCompraX], InfoNegocio[id][nLugarCompraY], InfoNegocio[id][nLugarCompraZ], InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
			InfoNegocio[id][nLugarCompraLabel] = CreateDynamic3DTextLabel("Para abrir el {FFBF00}menú de productos{FFFFFF}\nEscribe aquí '{FFBF00}/comprar{FFFFFF}'", -1, InfoNegocio[id][nLugarCompraX], InfoNegocio[id][nLugarCompraY], InfoNegocio[id][nLugarCompraZ], 10.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
		}
	}
}

Labelupdate_negocio(id)
{
	new negocio_label[470];
	if (InfoNegocio[id][nVenta] != 0)
	{
		if (InfoNegocio[id][nTipo] == 6) format(negocio_label, sizeof negocio_label, "{FFBF00}%s\n\n{0080C0}Propietario: {EBEBEB}%s\n{0080C0}Empresa {55AD30}%d\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], id);
		else if (InfoNegocio[id][nTipo] == 12) format(negocio_label, sizeof negocio_label, "{FFBF00}%s\n\n{0080C0}Propietario: {EBEBEB}%s\n{0080C0}Fábrica {55AD30}%d\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], id);
		else if (InfoNegocio[id][nTipo] == 13) format(negocio_label, sizeof negocio_label, "{FFBF00}%s\n\n{0080C0}Propietario: {EBEBEB}%s\n{0080C0}Clínica {55AD30}%d\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], id);
		else
		{
			if (InfoNegocio[id][nSeguro] == 0) format(negocio_label, sizeof negocio_label, "{0080C0}%s\n\n{00CC00}Propietario: {EBEBEB}%s\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{EBEBEB}\nNegocio {FFBF00}%d{EBEBEB}: {55AD30}Abierto\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], id);
			else format(negocio_label, sizeof negocio_label, "{0080C0}%s\n\n{00CC00}Propietario: {EBEBEB}%s\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{EBEBEB}\nNegocio {FFBF00}%d{EBEBEB}: {F92B2B}Cerrado", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], id);
		}
	}
	else
	{
		if (InfoNegocio[id][nTipo] == 6) format(negocio_label, sizeof negocio_label, "{FFBF00}¡Empresa {EBEBEB}%d{FFBF00} en venta!\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{00CC00}\nPrecio: {EBEBEB}$%s", id, GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], diner_coma(InfoNegocio[id][nPrecio]));
		else if (InfoNegocio[id][nTipo] == 12) format(negocio_label, sizeof negocio_label, "{FFBF00}¡Fábrica {EBEBEB}%d{FFBF00} en venta!\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{00CC00}\nPrecio: {EBEBEB}$%s", id, GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], diner_coma(InfoNegocio[id][nPrecio]));
		else format(negocio_label, sizeof negocio_label, "{0080C0}¡Negocio {EBEBEB}%d{0080C0} en venta!\n{00CC00}Tipo: {EBEBEB}%s{00CC00} - Nivel: {EBEBEB}%d{00CC00}\nPrecio: {EBEBEB}$%s\n\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para entrar", id, GetTipoNegocio(InfoNegocio[id][nTipo]), InfoNegocio[id][nNivel], diner_coma(InfoNegocio[id][nPrecio]));
	}
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nExteriorLabel], -1, negocio_label);
	if (InfoNegocio[id][nTipo] == 6) format(negocio_label, sizeof negocio_label, "{EBEBEB}Empresa {55AD30}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
	else if (InfoNegocio[id][nTipo] == 12) format(negocio_label, sizeof negocio_label, "{EBEBEB}Fábrica {55AD30}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
	else if (InfoNegocio[id][nTipo] == 13) format(negocio_label, sizeof negocio_label, "{EBEBEB}Clínica {55AD30}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
	else format(negocio_label, sizeof negocio_label, "{EBEBEB}Salida {0080C0}%d{EBEBEB}: {0080C0}%s\n{EBEBEB}Presiona {FFBF00}'H'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nInteriorLabel], -1, negocio_label);
	// fabrica vehículo
	if (InfoNegocio[id][nExteriorVehX] != 0.0 && InfoNegocio[id][nTipo] == 12)
	{
		//entrada
		format(negocio_label, sizeof negocio_label, "{EBEBEB}Fábrica {FFBF00}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Escribe {FFBF00}'/enter'{EBEBEB} para entrar", id, InfoNegocio[id][nNombre]);
		UpdateDynamic3DTextLabelText(InfoNegocio[id][nExteriorVehLabel], -1, negocio_label);
		//salida
		format(negocio_label, sizeof negocio_label, "{EBEBEB}Fábrica {FFBF00}%d{EBEBEB}: {FFBF00}%s\n{EBEBEB}Escribe {FFBF00}'/exit'{EBEBEB} para salir", id, InfoNegocio[id][nNombre]);
		UpdateDynamic3DTextLabelText(InfoNegocio[id][nInteriorVehLabel], -1, negocio_label);
	}
}

noexitnegocio(id)
{
	DestroyDynamicActor(InfoNegocio[id][nInteriorActor]);
	DestroyDynamicMapIcon(InfoNegocio[id][nExteriorMapIcon]);
	DestroyDynamicPickup(InfoNegocio[id][nExteriorPickup]);
	DestroyDynamicPickup(InfoNegocio[id][nInteriorPickup]);
	DestroyDynamicPickup(InfoNegocio[id][nLugarCompraPickup]);
	DestroyDynamic3DTextLabel(InfoNegocio[id][nExteriorLabel]);
	DestroyDynamic3DTextLabel(InfoNegocio[id][nInteriorLabel]);
	DestroyDynamic3DTextLabel(InfoNegocio[id][nLugarCompraLabel]);
	DestroyDynamicPickup(InfoNegocio[id][nExteriorVehPickup]);
	DestroyDynamicPickup(InfoNegocio[id][nInteriorVehPickup]);
	DestroyDynamic3DTextLabel(InfoNegocio[id][nExteriorVehLabel]);
	DestroyDynamic3DTextLabel(InfoNegocio[id][nInteriorVehLabel]);
	InfoNegocio[id][nExteriorPickup] = CreateDynamicPickup(1273, 1, -2190.7974, 165.9186, 58.2604, id, id);
	InfoNegocio[id][nInteriorPickup] = CreateDynamicPickup(1273, 1, -2190.7974, 165.9186, 58.2604, id, id);
	InfoNegocio[id][nLugarCompraPickup] = CreateDynamicPickup(1273, 1, -2190.7974, 165.9186, 58.2604, id, id);
	InfoNegocio[id][nExteriorLabel] = CreateDynamic3DTextLabel("negocio", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoNegocio[id][nInteriorLabel] = CreateDynamic3DTextLabel("negocio", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoNegocio[id][nLugarCompraLabel] = CreateDynamic3DTextLabel("negocio", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoNegocio[id][nExteriorVehLabel] = CreateDynamic3DTextLabel("negocio", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoNegocio[id][nInteriorVehLabel] = CreateDynamic3DTextLabel("negocio", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoNegocio[id][nExteriorVehPickup] = CreateDynamicPickup(1273, 1, -2190.7974, 165.9186, 58.2604, id, id);
	InfoNegocio[id][nInteriorVehPickup] = CreateDynamicPickup(1273, 1, -2190.7974, 165.9186, 58.2604, id, id);
}

GetTipoNegocio(tipo)
{
	new name_tipo[27];
	switch (tipo)
	{
		case 1: alm(name_tipo, "24-7");
		case 2: alm(name_tipo, "Ropa");
		case 3: alm(name_tipo, "Restaurante");
		case 4: alm(name_tipo, "Gasolinera");
		case 5: alm(name_tipo, "Armería");
		case 6: alm(name_tipo, "Repartos");
		case 7: alm(name_tipo, "Sex shop");
		case 8: alm(name_tipo, "Club bar");
		case 9: alm(name_tipo, "Mecánico");
		case 10: alm(name_tipo, "Concesionario");
		case 11: alm(name_tipo, "Pescadería");
		case 12: alm(name_tipo, "Fábrica de drogas");
		case 13: alm(name_tipo, "Clínica");
		default: alm(name_tipo, "Privado");
	}
	return name_tipo;
}

CobroNegocio(id, valor) // ID del negocio (VW del usuario y cantidad a pagar). (Este stock no afecta al VW 0).
{
	if (id == -1) return 1;
	if (InfoNegocio[id][nVenta] == 0) return 1;
	InfoNegocio[id][nDinero] += valor;
	if (valor >= 500) InfoNegocio[id][nProductos]--;
	new query[210];
	mysql_format(DBcreative, query, sizeof query, "UPDATE negocios SET BolosUwU = '%d', Productos = '%d' WHERE ID = '%d'", InfoNegocio[id][nDinero], InfoNegocio[id][nProductos], InfoNegocio[id][nID_sql]);
	mysql_tquery(DBcreative, query);
	return 1;
}

// fábricas de drogas (19/02/2020) by EdinsonWalker
CargarFabricas(id)
{
	//cartel de dinero
	InfoNegocio[id][nObjMoney] = CreateDynamicObject(19353, -2190.02563, -206.69887, 545.51245, 0.00000, 0.00000, 0.00000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
	UpdateDineroGuardado(id);
	//vehículos
	InfoNegocio[id][nVehiculo][0] = CreateVehicle(554, -2168.7524, -246.0328, 544.7685, -91.0200, 1, 53, -1);
	LinkVehicleToInterior(InfoNegocio[id][nVehiculo][0], InfoNegocio[id][nInteriorInt]);
	SetVehicleVirtualWorld(InfoNegocio[id][nVehiculo][0], InfoNegocio[id][nInteriorVW]);
	SetVehicleHealth(InfoNegocio[id][nVehiculo][0], 5000.0);
	InfoNegocio[id][nVehiculo][1] = CreateVehicle(554, -2162.6091, -251.6801, 544.7685, -72.0600, 1, 53, -1);
	LinkVehicleToInterior(InfoNegocio[id][nVehiculo][1], InfoNegocio[id][nInteriorInt]);
	SetVehicleVirtualWorld(InfoNegocio[id][nVehiculo][1], InfoNegocio[id][nInteriorVW]);
	SetVehicleHealth(InfoNegocio[id][nVehiculo][1], 5000.0);
	//empleados
	if (InfoNegocio[id][nEmpleado][0] != 0)
	{
		InfoNegocio[id][nActorEmpleado][0] = CreateDynamicActor(InfoNegocio[id][nEmpleado][0], -2161.46045, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
	}
	if (InfoNegocio[id][nEmpleado][1] != 0)
	{
		InfoNegocio[id][nActorEmpleado][1] = CreateDynamicActor(InfoNegocio[id][nEmpleado][1], -2166.19263, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
	}
	if (InfoNegocio[id][nEmpleado][2] != 0)
	{
		InfoNegocio[id][nActorEmpleado][2] = CreateDynamicActor(InfoNegocio[id][nEmpleado][2], -2170.95386, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
	}
	if (InfoNegocio[id][nEmpleado][3] != 0)
	{
		InfoNegocio[id][nActorEmpleado][3] = CreateDynamicActor(InfoNegocio[id][nEmpleado][3], -2175.86133, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
	}
	if (InfoNegocio[id][nEmpleado][4] != 0)
	{
		InfoNegocio[id][nActorEmpleado][4] = CreateDynamicActor(InfoNegocio[id][nEmpleado][4], -2181.31445, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
	}
	//quimicos
	new QuimiEx[240];
	format(QuimiEx, sizeof QuimiEx, "{FFBF00}Tanque de almacenaje{FFFFFF}\nQuímicos acumulados: {3399FF}%d{FFFFFF}\nPresiona {FFBF00}'H'{FFFFFF} para preparar el cristal", InfoNegocio[id][nQuimicos]);
	InfoNegocio[id][nLabelQuimicos][0] = CreateDynamic3DTextLabel(QuimiEx, -1, -2155.43799, -264.92325, 544.66193, 8.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
	InfoNegocio[id][nLabelQuimicos][1] = CreateDynamic3DTextLabel(QuimiEx, -1, -2158.95898, -265.10498, 544.66193, 8.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
	InfoNegocio[id][nLabelQuimicos][2] = CreateDynamic3DTextLabel(QuimiEx, -1, -2162.32373, -265.29837, 544.66193, 8.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
	//cocinando metanfetamina
	new MetanEx[340];
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #1{FFFFFF}\n%s", EstadoMesaProduccion(id, 0));
	InfoNegocio[id][nLabelCocina][0] = CreateDynamic3DTextLabel(MetanEx, -1, -2161.47070, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #2{FFFFFF}\n%s", EstadoMesaProduccion(id, 1));
	InfoNegocio[id][nLabelCocina][1] = CreateDynamic3DTextLabel(MetanEx, -1, -2166.25708, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #3{FFFFFF}\n%s", EstadoMesaProduccion(id, 2));
	InfoNegocio[id][nLabelCocina][2] = CreateDynamic3DTextLabel(MetanEx, -1, -2170.97900, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #4{FFFFFF}\n%s", EstadoMesaProduccion(id, 3));
	InfoNegocio[id][nLabelCocina][3] = CreateDynamic3DTextLabel(MetanEx, -1, -2175.96655, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #5{FFFFFF}\n%s", EstadoMesaProduccion(id, 4));
	InfoNegocio[id][nLabelCocina][4] = CreateDynamic3DTextLabel(MetanEx, -1, -2181.32300, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
	//cajas
	Loop(x, InfoNegocio[id][nEntregasListas], 0)
	{
		ColocarProduccion(id, x+1);
	}
}

EnEntregaDrogas(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 11.0, 1092.6354, -1215.1941, 17.2890)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 11.0, 2102.6060, -2086.7402, 13.2103)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 11.0, 2683.9063, -1109.2195, 68.9253)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 11.0, 2202.7043, -2299.6982, 14.2621)) return 1;
	return 0;
}

EnRecogerQuimicos(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 11.0, -33.2935, 2340.0342, 24.2849)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 11.0, -1850.3842, 124.1603, 15.1508)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 11.0, -1037.8477, 1549.7322, 33.0265)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 11.0, 1091.5005, 2364.4463, 10.8606)) return 1;
	return 0;
}

EnTanquesProduccion(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 2.0, -2155.43799, -264.92325, 544.66193) && InfoPlayer[playerid][pInterior] == 9) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, -2158.95898, -265.10498, 544.66193) && InfoPlayer[playerid][pInterior] == 9) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, -2162.32373, -265.29837, 544.66193) && InfoPlayer[playerid][pInterior] == 9) return 1;
	return 0;
}

EnMesasProduccion(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 2.0, -2161.47070, -233.69153, 544.87073) && InfoPlayer[playerid][pInterior] == 9) return 0;
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, -2166.25708, -233.67906, 544.87073) && InfoPlayer[playerid][pInterior] == 9) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, -2170.97900, -233.71970, 544.87073) && InfoPlayer[playerid][pInterior] == 9) return 2;
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, -2175.96655, -233.71837, 544.87073) && InfoPlayer[playerid][pInterior] == 9) return 3;
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, -2181.32300, -233.74008, 544.87073) && InfoPlayer[playerid][pInterior] == 9) return 4;
	return -1;
}

EstadoMesaProduccion(id, x)
{
	new string[240];
	if (InfoNegocio[id][nCocinando][x] == 0)
	{
		if (InfoNegocio[id][nEmpleado][x] == 0) format(string, sizeof string, "Estado: {EB0000}falta empleado");
		else
		{
			format(string, sizeof string, "Estado: {DBED16}faltan materiales{FFFFFF}\nVe a los {3399FF}tanques{FFFFFF} por cristal");
		}
	}
	else
	{
		if (InfoNegocio[id][nTimeCocinando][x] != 0)
		{
		    if (InfoNegocio[id][nTimeCocinando][x] == 1) format(string, sizeof string, "Estado: {00CC00}procesando{FFFFFF}\nTiempo de entrega: {8080FF}1 minuto");
		    else format(string, sizeof string, "Estado: {00CC00}procesando{FFFFFF}\nTiempo de entrega: {8080FF}%d minutos", InfoNegocio[id][nTimeCocinando][x]);
		}
		else format(string, sizeof string, "Estado: {3D83CE}esperando recolección{FFFFFF}\nPresiona {FFBF00}'H'{FFFFFF} para mover la droga de la mesa");
	}
	return string;
}

UpdateDineroGuardado(id)
{
	new moneytext[240];
	if (InfoNegocio[id][nDinero] >= 0) format(moneytext, sizeof moneytext, "Dinero guardado:\n{00C600}$%s", diner_coma(InfoNegocio[id][nDinero]));
	else format(moneytext, sizeof moneytext, "Dinero guardado:\n{FD1717}$%s", diner_coma(InfoNegocio[id][nDinero]));
	SetDynamicObjectMaterialText(InfoNegocio[id][nObjMoney], 0, moneytext, 130, "F25_Bank_Printer_Bold", 25, 1, 0xFFFFFFFF, 0, 1);
}

UpdateQuimicos(id)
{
	new QuimiEx[240];
	format(QuimiEx, sizeof QuimiEx, "{FFBF00}Tanque de almacenaje{FFFFFF}\nQuímicos acumulados: {3399FF}%d{FFFFFF}\nPresiona {FFBF00}'H'{FFFFFF} para preparar el cristal", InfoNegocio[id][nQuimicos]);
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nLabelQuimicos][0], -1, QuimiEx);
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nLabelQuimicos][1], -1, QuimiEx);
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nLabelQuimicos][2], -1, QuimiEx);
}

UpdateMesasProduccion(id)
{
	//cocinando metanfetamina
	new MetanEx[340];
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #1{FFFFFF}\n%s", EstadoMesaProduccion(id, 0));
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nLabelCocina][0], -1, MetanEx);
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #2{FFFFFF}\n%s", EstadoMesaProduccion(id, 1));
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nLabelCocina][1], -1, MetanEx);
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #3{FFFFFF}\n%s", EstadoMesaProduccion(id, 2));
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nLabelCocina][2], -1, MetanEx);
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #4{FFFFFF}\n%s", EstadoMesaProduccion(id, 3));
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nLabelCocina][3], -1, MetanEx);
	format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #5{FFFFFF}\n%s", EstadoMesaProduccion(id, 4));
	UpdateDynamic3DTextLabelText(InfoNegocio[id][nLabelCocina][4], -1, MetanEx);
}

ColocarProduccion(id, x)
{
	switch (x)
	{
		case 1: InfoNegocio[id][nCajaObj][0] = CreateDynamicObject(1271, -2158.54492, -239.05231, 544.19897,   0.00000, 0.00000, -20.64000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 2: InfoNegocio[id][nCajaObj][1] = CreateDynamicObject(1271, -2158.54907, -238.99904, 545.26978,   0.00000, 0.00000, 10.32000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 3: InfoNegocio[id][nCajaObj][2] = CreateDynamicObject(1271, -2162.52002, -239.27122, 544.19897,   0.00000, 0.00000, 0.30000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 4: InfoNegocio[id][nCajaObj][3] = CreateDynamicObject(1271, -2162.48145, -239.28342, 545.26978,   0.00000, 0.00000, -5.10000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 5: InfoNegocio[id][nCajaObj][4] = CreateDynamicObject(1271, -2166.82813, -239.27992, 544.19897,   0.00000, 0.00000, -4.44000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 6: InfoNegocio[id][nCajaObj][5] = CreateDynamicObject(1271, -2166.89648, -239.30844, 545.26978,   0.00000, 0.00000, 8.34000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 7: InfoNegocio[id][nCajaObj][6] = CreateDynamicObject(1271, -2170.97168, -239.33023, 544.19897,   0.00000, 0.00000, 0.84000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 8: InfoNegocio[id][nCajaObj][7] = CreateDynamicObject(1271, -2170.98438, -239.28654, 545.26978,   0.00000, 0.00000, 7.14000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 9: InfoNegocio[id][nCajaObj][8] = CreateDynamicObject(1271, -2175.38794, -239.13707, 544.19897,   0.00000, 0.00000, -3.24000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 10: InfoNegocio[id][nCajaObj][9] = CreateDynamicObject(1271, -2175.44629, -239.28380, 545.26978,   0.00000, 0.00000, -3.54000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 11: InfoNegocio[id][nCajaObj][10] = CreateDynamicObject(1271, -2179.58496, -239.29593, 544.19897,   0.00000, 0.00000, 3.42000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 12: InfoNegocio[id][nCajaObj][11] = CreateDynamicObject(1271, -2179.60547, -239.49200, 545.26978,   0.00000, 0.00000, -13.08000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 13: InfoNegocio[id][nCajaObj][12] = CreateDynamicObject(1271, -2184.00586, -239.35796, 544.19897,   0.00000, 0.00000, -3.96000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 14: InfoNegocio[id][nCajaObj][13] = CreateDynamicObject(1271, -2184.03052, -239.35204, 545.26978,   0.00000, 0.00000, 5.94000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 15: InfoNegocio[id][nCajaObj][14] = CreateDynamicObject(1271, -2189.15356, -236.47655, 544.19897,   0.00000, 0.00000, -90.00002, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 16: InfoNegocio[id][nCajaObj][15] = CreateDynamicObject(1271, -2189.20996, -236.50739, 545.26978,   0.00000, 0.00000, 4.44000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 17: InfoNegocio[id][nCajaObj][16] = CreateDynamicObject(1271, -2189.10107, -233.11459, 544.19897,   0.00000, 0.00000, -90.00002, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 18: InfoNegocio[id][nCajaObj][17] = CreateDynamicObject(1271, -2189.23438, -233.07941, 545.26978,   0.00000, 0.00000, 0.36000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 19: InfoNegocio[id][nCajaObj][18] = CreateDynamicObject(1271, -2181.66089, -227.06544, 544.19897,   0.00000, 0.00000, -85.92002, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
		case 20: InfoNegocio[id][nCajaObj][19] = CreateDynamicObject(1271, -2181.57520, -226.82733, 545.26978,   0.00000, 0.00000, -23.22000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
	}
}

QuitarProduccion(id, x)
{
	switch (x)
	{
		case 1..20: DestroyDynamicObject(InfoNegocio[id][nCajaObj][x]);
	}
	return 1;
}

// compra vehiculos by edinonwalker, 25,01,2020
new CompraVehiculo[MAX_PLAYERS], PlayerText:pCocheVS[MAX_PLAYERS][7];
new Text:CocheVS[3];

vehiculo_avion(modelo)
{
	new Avion[] = {592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469};
	for(new i = 0; i < sizeof(Avion); i++) { if(modelo == Avion[i]) return 1; }
	return 0;
}

vehiculo_bote(modelo)
{
	new Boats[] = {472, 473, 493, 484, 430, 454, 453, 452, 446};
	for(new i = 0; i < sizeof(Boats); i++) { if(modelo == Boats[i]) return 1; }
	return 0;
}

enum documentalveh
{
	elModelo,
	elNombre[32],
	elPrecio,
	elMaxMaletero,
};

static const infovehicle[][documentalveh] =
{
	{400, "Landstalker", 300000, 10},
	{401, "Bravura", 19416, 6},
	{402, "Buffalo", 775520, 8},
	{403, "Linerunner", 5998990, 10},
	{404, "Perennial", 20000, 6},
	{405, "Sentinel", 79528, 6},
	{406, "Dumper", 0, 10},
	{407, "Firetruck", 0, 0},
	{408, "Trashmaster", 0, 10},
	{409, "Stretch", 0, 10},
	{410, "Manana", 17500, 6},
	{411, "Infernus", 0, 10},
	{412, "Voodoo", 22500, 6},
	{413, "Pony", 46900, 10},
	{414, "Mule", 237500, 10},
	{415, "Cheetah", 1325000, 8},
	{416, "Ambulance", 0, 0},
	{417, "Leviathan", 0, 10},
	{418, "Moonbeam", 39420, 10},
	{419, "Esperanto", 25000, 6},
	{420, "Taxi", 22500, 6},
	{421, "Washington", 345090, 8},
	{422, "Bobcat", 20000, 10},
	{423, "Mr. Whoopee", 0, 10},
	{424, "BF Injection", 568990, 6},
	{425, "Hunter", 0, 10},
	{426, "Premier", 27500, 6},
	{427, "Enforcer", 0, 10},
	{428, "Securicar", 0, 10},
	{429, "Banshee", 1124990, 6},
	{430, "Predator", 0, 5},
	{431, "Bus", 0, 10},
	{432, "Rhino", 0, 4},
	{433, "Barracks", 0, 10},
	{434, "Hotknife", 0, 4},
	{435, "Article Trailer 1", 0, 10},
	{436, "Previon", 20000, 6},
	{437, "Coach", 0, 10},
	{438, "Cabbie", 25000, 6},
	{439, "Stallion", 104500, 6},
	{440, "Rumpo", 30000, 10},
	{441, "RC Bandit", 0, 2},
	{442, "Romero", 0, 10},
	{443, "Packer", 3506990, 10},
	{444, "Monster", 0, 10},
	{445, "Admiral", 22500, 6},
	{446, "Squallo", 500000, 6},
	{447, "Seasparrow", 0, 4},
	{448, "Pizzaboy", 0, 2},
	{449, "Tram", 0, 6},
	{450, "Article Trailer 2", 0, 10},
	{451, "Turismo", 0, 8},
	{452, "Speeder", 0, 10},
	{453, "Reefer", 555000, 10},
	{454, "Tropic", 679999, 10},
	{455, "Flatbed", 0, 10},
	{456, "Yankee", 725000, 10},
	{457, "Caddy", 0, 3},
	{458, "Solair", 25000, 6},
	{459, "Topfun Van", 29000, 10},
	{460, "Skimmer", 0, 4},
	{461, "PCJ-600", 678000, 2},
	{462, "Faggio", 10000, 3},
	{463, "Freeway", 75000, 3},
	{464, "RC Baron", 0, 3},
	{465, "RC Raider", 0, 3},
	{466, "Glendale", 25000, 6},
	{467, "Oceanic", 18500, 6},
	{468, "Sanchez", 35000, 3},
	{469, "Sparrow", 0, 3},
	{470, "Patriot", 0, 10},
	{471, "Quad", 18000, 2},
	{472, "Coastguard", 475000, 6},
	{473, "Dinghy", 410000, 4},
	{474, "Hermes", 25000, 5},
	{475, "Sabre", 65000, 5},
	{476, "Rustler", 0, 4},
	{477, "ZR-350", 679090, 5},
	{478, "Walton", 15000, 10},
	{479, "Regina", 20000, 5},
	{480, "Comet", 915000, 6},
	{481, "BMX", 8000, 0},
	{482, "Burrito", 60000, 10},
	{483, "Camper", 542500, 10},
	{484, "Marquis", 0, 6},
	{485, "Baggage", 0, 2},
	{486, "Dozer", 0, 3},
	{487, "Maverick", 9750000, 10},
	{488, "SAN News Maverick", 10700000, 10},
	{489, "Rancher", 455000, 10},
	{490, "FBI Rancher", 0, 10},
	{491, "Virgo", 20500, 5},
	{492, "Greenwood", 43500, 5},
	{493, "Jetmax", 0, 4},
	{494, "Hotring Racer", 0, 5},
	{495, "Sandking", 0, 10},
	{496, "Blista Compact", 255000, 5},
	{497, "Police Maverick", 0, 10},
	{498, "Boxville", 425000, 10},
	{499, "Benson", 322500, 12},
	{500, "Mesa", 127000, 8},
	{501, "RC Goblin", 0, 1},
	{502, "Hotring Racer A", 0, 5},
	{503, "Hotring Racer B", 0, 5},
	{504, "Bloodring Banger", 0, 5},
	{505, "Rancher Lure", 354321, 10},
	{506, "Super GT", 998990, 6},
	{507, "Elegant", 58000, 8},
	{508, "Journey", 420000, 10},
	{509, "Bike", 8000, 0},
	{510, "Mountain Bike", 8100, 0},
	{511, "Beagle", 0, 10},
	{512, "Cropduster", 0, 8},
	{513, "Stuntplane", 0, 8},
	{514, "Tanker", 9400000, 10},
	{515, "Roadtrain", 9450000, 10},
	{516, "Nebula", 20000, 5},
	{517, "Majestic", 22500, 5},
	{518, "Buccaneer", 22500, 5},
	{519, "Shamal", 0, 10},
	{520, "Hydra", 0, 10},
	{521, "FCR-900", 600000, 3},
	{522, "NRG-500", 0, 4},
	{523, "HPV1000", 0, 3},
	{524, "Cement Truck", 0, 5},
	{525, "Towtruck", 0, 7},
	{526, "Fortune", 27500, 5},
	{527, "Cadrona", 22500, 5},
	{528, "FBI Truck", 0, 9},
	{529, "Willard", 22500, 6},
	{530, "Forklift", 0, 1},
	{531, "Tractor", 0, 2},
	{532, "Combine Harvester", 0, 3},
	{533, "Feltzer", 322500, 5},
	{534, "Remington", 27500, 6},
	{535, "Slamvan", 219500, 7},
	{536, "Blade", 114500, 5},
	{537, "Freight (Train)", 0, 10},
	{538, "Brownstreak (Train)", 0, 10},
	{539, "Vortex", 0, 2},
	{540, "Vincent", 15500, 6},
	{541, "Bullet", 0, 8},
	{542, "Clover", 19500, 4},
	{543, "Sadler", 12500, 7},
	{544, "Firetruck LA", 0, 10},
	{545, "Hustler", 40000, 5},
	{546, "Intruder", 23000, 5},
	{547, "Primo", 16500, 5},
	{548, "Cargobob", 0, 10},
	{549, "Tampa", 17500, 4},
	{550, "Sunrise", 26000, 6},
	{551, "Merit", 35000, 5},
	{552, "Utility Van", 0, 10},
	{553, "Nevada", 0, 10},
	{554, "Yosemite", 43200, 10},
	{555, "Windsor", 220000, 6},
	{556, "Monster A", 0, 6},
	{557, "Monster B", 0, 6},
	{558, "Uranus", 565000, 5},
	{559, "Jester", 560000, 5},
	{560, "Sultan", 654000, 10},
	{561, "Stratum", 155000, 8},
	{562, "Elegy", 510000, 6},
	{563, "Raindance", 0, 10},
	{564, "RC Tiger", 0, 1},
	{565, "Flash", 250000, 5},
	{566, "Tahoma", 37000, 6},
	{567, "Savanna", 39500, 6},
	{568, "Bandito", 0, 2},
	{569, "Freight Flat Trailer", 0, 10},
	{570, "Streak Trailer", 0, 10},
	{571, "Kart", 0, 2},
	{572, "Mower", 0, 2},
	{573, "Dune", 0, 4},
	{574, "Sweeper", 0, 2},
	{575, "Broadway", 35000, 6},
	{576, "Tornado", 26500, 6},
	{577, "AT400", 0, 10},
	{578, "DFT-30", 250000, 6},
	{579, "Huntley", 400000, 10},
	{580, "Stafford", 350000, 8},
	{581, "BF-400", 340000, 3},
	{582, "Newsvan", 0, 10},
	{583, "Tug", 0, 3},
	{584, "Petrol Trailer", 0, 0},
	{585, "Emperor", 30000, 5},
	{586, "Wayfarer", 25000, 3},
	{587, "Euros", 321000, 5},
	{588, "Hotdog", 0, 10},
	{589, "Club", 180000, 6},
	{590, "Freight Box Trailer", 0, 10},
	{591, "Article Trailer 3", 0, 10},
	{592, "Andromada", 0, 10},
	{593, "Dodo", 6000000, 10},
	{594, "RC Cam", 0, 0},
	{595, "Launch", 0, 10},
	{596, "Car LSPD", 0, 10},
	{597, "Car SFPD", 0, 10},
	{598, "Car LVPD", 0, 10},
	{599, "Police Ranger", 0, 10},
	{600, "Picador", 13400, 5},
	{601, "SWAT", 0, 10},
	{602, "Alpha", 195000, 5},
	{603, "Phoenix", 325000, 5},
	{604, "ShitGlendale", 8300, 3},
	{605, "ShitSadler", 8500, 3},
	{606, "Baggage Trailer A", 0, 2},
	{607, "Baggage Trailer B", 0, 2},
	{608, "Tug Stairs Trailer", 0, 0},
	{609, "Boxville", 350000, 10},
	{610, "Farm Trailer", 0, 0},
	{611, "Utility Trailer", 0, 0}
};

//renovación de sistema de facciones en sql, by EdinsonWalker (11/02/2020)
enum facInfo
{
	fID_sql,							// id sql
	fNombre[128],						// nombre
	fLogo[8],                           // logo
	fLider[MAX_PLAYER_NAME],			// líder
	fSubLider[MAX_PLAYER_NAME],         // sub líder
	fMensaje[256],						// mensaje
	fTipo,								// tipo
	fDinero,                            // dinero
	fSalario,							// salario
	fMaxRangos,                         // max de rangos
	Float: fSpawnX,						// spawn x
	Float: fSpawnY,						// spawn y
	Float: fSpawnZ,						// spawn z
	Float: fSpawnR,						// spawn r
	fSpawnInt,							// spawn int
	fSpawnVW,							// spawn vw
	Float: fArmarioX,					// armario x
	Float: fArmarioY,					// armario y
	Float: fArmarioZ,					// armario z
	fArmarioInt,						// armario int
	fArmarioVW,                         // armario vw
	fMateriales,                        // materiales
	fEquipo[20],						// objetos de equipo
	fSkin[20],							// skins de equipo
	fArmarioPickup,                     // armario pickup
	Text3D: fArmarioLabel,              // armario label
};
new InfoFaccion[MAX_FACCIONES][facInfo];

new fac_rango[MAX_FACCIONES][15][32];

new TomandoTrabajo[MAX_PLAYERS];
new IDfabrica[MAX_PLAYERS];
new YaOfrecioEmpleo[MAX_PLAYERS];

forward CargarFacciones();
public CargarFacciones()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoFaccion[id][fID_sql]);
		reg_string(tabla, "Nombre", InfoFaccion[id][fNombre], 128);
		reg_string(tabla, "Logo", InfoFaccion[id][fLogo], 8);
		reg_string(tabla, "Lider", InfoFaccion[id][fLider], MAX_PLAYER_NAME);
		reg_string(tabla, "SubLider", InfoFaccion[id][fSubLider], MAX_PLAYER_NAME);
		reg_string(tabla, "Mensaje", InfoFaccion[id][fMensaje], 256);
		reg_int(tabla, "Tipo", InfoFaccion[id][fTipo]);
		reg_int(tabla, "BolosUwU", InfoFaccion[id][fDinero]);
		reg_int(tabla, "Salario", InfoFaccion[id][fSalario]);
		reg_int(tabla, "MaxRangos", InfoFaccion[id][fMaxRangos]);
		reg_string(tabla, "Rango1", fac_rango[id][0], 32);
		reg_string(tabla, "Rango2", fac_rango[id][1], 32);
		reg_string(tabla, "Rango3", fac_rango[id][2], 32);
		reg_string(tabla, "Rango4", fac_rango[id][3], 32);
		reg_string(tabla, "Rango5", fac_rango[id][4], 32);
		reg_string(tabla, "Rango6", fac_rango[id][5], 32);
		reg_string(tabla, "Rango7", fac_rango[id][6], 32);
		reg_string(tabla, "Rango8", fac_rango[id][7], 32);
		reg_string(tabla, "Rango9", fac_rango[id][8], 32);
		reg_string(tabla, "Rango10", fac_rango[id][9], 32);
		reg_string(tabla, "Rango11", fac_rango[id][10], 32);
		reg_string(tabla, "Rango12", fac_rango[id][11], 32);
		reg_string(tabla, "Rango13", fac_rango[id][12], 32);
		reg_string(tabla, "Rango14", fac_rango[id][13], 32);
		reg_string(tabla, "Rango15", fac_rango[id][14], 32);
		reg_float(tabla, "SpawnX", InfoFaccion[id][fSpawnX]);
		reg_float(tabla, "SpawnY", InfoFaccion[id][fSpawnY]);
		reg_float(tabla, "SpawnZ", InfoFaccion[id][fSpawnZ]);
		reg_float(tabla, "SpawnR", InfoFaccion[id][fSpawnR]);
		reg_int(tabla, "SpawnInt", InfoFaccion[id][fSpawnInt]);
		reg_int(tabla, "SpawnVW", InfoFaccion[id][fSpawnVW]);
		reg_float(tabla, "ArmarioX", InfoFaccion[id][fArmarioX]);
		reg_float(tabla, "ArmarioY", InfoFaccion[id][fArmarioY]);
		reg_float(tabla, "ArmarioZ", InfoFaccion[id][fArmarioZ]);
		reg_int(tabla, "ArmarioInt", InfoFaccion[id][fArmarioInt]);
		reg_int(tabla, "ArmarioVW", InfoFaccion[id][fArmarioVW]);
		reg_int(tabla, "Materiales", InfoFaccion[id][fMateriales]);
		reg_int(tabla, "Equipo1", InfoFaccion[id][fEquipo][0]);
		reg_int(tabla, "Equipo2", InfoFaccion[id][fEquipo][1]);
		reg_int(tabla, "Equipo3", InfoFaccion[id][fEquipo][2]);
		reg_int(tabla, "Equipo4", InfoFaccion[id][fEquipo][3]);
		reg_int(tabla, "Equipo5", InfoFaccion[id][fEquipo][4]);
		reg_int(tabla, "Equipo6", InfoFaccion[id][fEquipo][5]);
		reg_int(tabla, "Equipo7", InfoFaccion[id][fEquipo][6]);
		reg_int(tabla, "Equipo8", InfoFaccion[id][fEquipo][7]);
		reg_int(tabla, "Equipo9", InfoFaccion[id][fEquipo][8]);
		reg_int(tabla, "Equipo10", InfoFaccion[id][fEquipo][9]);
		reg_int(tabla, "Equipo11", InfoFaccion[id][fEquipo][10]);
		reg_int(tabla, "Equipo12", InfoFaccion[id][fEquipo][11]);
		reg_int(tabla, "Equipo13", InfoFaccion[id][fEquipo][12]);
		reg_int(tabla, "Equipo14", InfoFaccion[id][fEquipo][13]);
		reg_int(tabla, "Equipo15", InfoFaccion[id][fEquipo][14]);
		reg_int(tabla, "Equipo16", InfoFaccion[id][fEquipo][15]);
		reg_int(tabla, "Equipo17", InfoFaccion[id][fEquipo][16]);
		reg_int(tabla, "Equipo18", InfoFaccion[id][fEquipo][17]);
		reg_int(tabla, "Equipo19", InfoFaccion[id][fEquipo][18]);
		reg_int(tabla, "Equipo20", InfoFaccion[id][fEquipo][19]);
		reg_int(tabla, "Skin1", InfoFaccion[id][fSkin][0]);
		reg_int(tabla, "Skin2", InfoFaccion[id][fSkin][1]);
		reg_int(tabla, "Skin3", InfoFaccion[id][fSkin][2]);
		reg_int(tabla, "Skin4", InfoFaccion[id][fSkin][3]);
		reg_int(tabla, "Skin5", InfoFaccion[id][fSkin][4]);
		reg_int(tabla, "Skin6", InfoFaccion[id][fSkin][5]);
		reg_int(tabla, "Skin7", InfoFaccion[id][fSkin][6]);
		reg_int(tabla, "Skin8", InfoFaccion[id][fSkin][7]);
		reg_int(tabla, "Skin9", InfoFaccion[id][fSkin][8]);
		reg_int(tabla, "Skin10", InfoFaccion[id][fSkin][9]);
		reg_int(tabla, "Skin11", InfoFaccion[id][fSkin][10]);
		reg_int(tabla, "Skin12", InfoFaccion[id][fSkin][11]);
		reg_int(tabla, "Skin13", InfoFaccion[id][fSkin][12]);
		reg_int(tabla, "Skin14", InfoFaccion[id][fSkin][13]);
		reg_int(tabla, "Skin15", InfoFaccion[id][fSkin][14]);
		reg_int(tabla, "Skin16", InfoFaccion[id][fSkin][15]);
		reg_int(tabla, "Skin17", InfoFaccion[id][fSkin][16]);
		reg_int(tabla, "Skin18", InfoFaccion[id][fSkin][17]);
		reg_int(tabla, "Skin19", InfoFaccion[id][fSkin][18]);
		reg_int(tabla, "Skin20", InfoFaccion[id][fSkin][19]);
		if (InfoFaccion[id][fTipo]) cargaditos++;
		if (InfoFaccion[id][fID_sql]) totalfacciones++;
		if (InfoFaccion[id][fArmarioX] != 0.0) faccion_armario(id, 0);
	}
	printf("%d facciones dinámicas (SQL: %d) cargadas correctamente.", cargaditos, totalfacciones-1);
	return 1;
}

faccion_armario(id, estilo)
{
	new faccion_label[350];
	format(faccion_label, sizeof faccion_label, "Equipo {226BBD}%s\n{EBEBEB}Materiales: {FFFF00}%d", InfoFaccion[id][fLogo], InfoFaccion[id][fMateriales]);
	if (estilo == 0)
	{
		DestroyDynamicPickup(InfoFaccion[id][fArmarioPickup]);
		DestroyDynamic3DTextLabel(InfoFaccion[id][fArmarioLabel]);

		InfoFaccion[id][fArmarioLabel] = CreateDynamic3DTextLabel(faccion_label, 0xEBEBEBFF, InfoFaccion[id][fArmarioX], InfoFaccion[id][fArmarioY], InfoFaccion[id][fArmarioZ]+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoFaccion[id][fArmarioVW], InfoFaccion[id][fArmarioInt], -1);
		InfoFaccion[id][fArmarioPickup] = CreateDynamicPickup(1239, 1, InfoFaccion[id][fArmarioX], InfoFaccion[id][fArmarioY], InfoFaccion[id][fArmarioZ], InfoFaccion[id][fArmarioVW], InfoFaccion[id][fArmarioInt]);
	}
	else
	{
		UpdateDynamic3DTextLabelText(InfoFaccion[id][fArmarioLabel], 0xEBEBEBFF, faccion_label);
	}
}

stock member_faccion(playerid, faccion, extra = -1, extra2 = -1, extra3 = -1, extra4 = -1)
{
	if (!IsPlayerConnectedEx(playerid)) return 0;
	new lider = InfoPlayer[playerid][pLider], miembro = InfoPlayer[playerid][pMiembro];
	if (InfoFaccion[lider][fTipo] == faccion || InfoFaccion[miembro][fTipo] == faccion) return 1;
	if (InfoFaccion[lider][fTipo] == extra || InfoFaccion[miembro][fTipo] == extra) return 1;
	if (InfoFaccion[lider][fTipo] == extra2 || InfoFaccion[miembro][fTipo] == extra2) return 1;
	if (InfoFaccion[lider][fTipo] == extra3 || InfoFaccion[miembro][fTipo] == extra3) return 1;
	if (InfoFaccion[lider][fTipo] == extra4 || InfoFaccion[miembro][fTipo] == extra4) return 1;
	return 0;
}

stock leader_faccion(playerid, faccion, extra = -1, extra2 = -1, extra3 = -1, extra4 = -1)
{
	if (!IsPlayerConnectedEx(playerid)) return 0;
	new id = InfoPlayer[playerid][pMiembro];
	if (InfoFaccion[id][fTipo] == faccion)
	{
		if (InfoPlayer[playerid][pLider] == id) return 1; //afirmativo, tiene acceso
		if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) return 1; //afirmativo, tiene acceso
	}
	if (InfoFaccion[id][fTipo] == extra)
	{
		if (InfoPlayer[playerid][pLider] == id) return 1; //afirmativo, tiene acceso
		if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) return 1; //afirmativo, tiene acceso
	}
	if (InfoFaccion[id][fTipo] == extra2)
	{
		if (InfoPlayer[playerid][pLider] == id) return 1; //afirmativo, tiene acceso
		if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) return 1; //afirmativo, tiene acceso
	}
	if (InfoFaccion[id][fTipo] == extra3)
	{
		if (InfoPlayer[playerid][pLider] == id) return 1; //afirmativo, tiene acceso
		if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) return 1; //afirmativo, tiene acceso
	}
	if (InfoFaccion[id][fTipo] == extra4)
	{
		if (InfoPlayer[playerid][pLider] == id) return 1; //afirmativo, tiene acceso
		if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

SendRadioMessage(faccion, color, gformat[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		if (InfoPlayer[playerid][pMiembro] == faccion && InfoPlayer[playerid][pTogRadio] == 1)
		{
			SendSplitMessage(playerid, color, gformat);
		}
	}
}

SendFaccionMessage(faccion, color, gformat[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoPlayer[playerid][pTogFaccion] == 1)
	{
		if (InfoPlayer[playerid][pMiembro] == faccion || InfoPlayer[playerid][pLider] == faccion)
		{
			SendSplitMessage(playerid, color, gformat);
		}
	}
}

SendEmpleoMessage(contrato, color, gformat[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoPlayer[playerid][pContrato] == contrato)
	{
		SendSplitMessage(playerid, color, gformat);
	}
}

SendRadioEmpleoMessage(contrato, color, gformat[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoPlayer[playerid][pContrato] == contrato)
	{
		if (InfoPlayer[playerid][pTogRadio] == 1)
		{
			SendSplitMessage(playerid, color, gformat);
		}
	}
}


//ubicaciones:
enum Ubicaciones
{
	uNombre[16],
	Float: uPosicion[3],
}
new InfoGPS[MAX_UBICACIONES][Ubicaciones];
// Garajes.
enum Garages
{
	gType,
	gOwner[MAX_PLAYER_NAME],
	gName[32],
	Float: gExteriorPos[4],
	Float: gInteriorPos[4],
	gInterior,
	gLocked,
	gPrice,
	gLevel,
	Text3D: gLabelID,
	gPickupID,
}
new InfoGarages[MAX_GARAGES][Garages];

//renovación de sistema de actors en sql, by EdinsonWalker (02/03/2020)
enum actorInfo
{
	aID_sql,						// id sql
	aNombre[MAX_PLAYER_NAME],       // nombre
	aSkin,                          // skin
	Float: aPosX,                   // pos x
	Float: aPosY,                   // pos y
	Float: aPosZ,                   // pos z
	Float: aPosR,                   // pos r
	aInterior,                      // interior
	aVirtualWorld,                  // virtualworld
	aAnimacion,                     // animación id
	aID_ig,                         // id ig
	Text3D: aLabel,                 // label
}
new InfoActor[MAX_ACTORES][actorInfo];

forward CargarActores();
public CargarActores()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoActor[id][aID_sql]);
		reg_string(tabla, "Nombre", InfoActor[id][aNombre], MAX_PLAYER_NAME);
		reg_int(tabla, "Skin", InfoActor[id][aSkin]);
		reg_float(tabla, "PosX", InfoActor[id][aPosX]);
		reg_float(tabla, "PosY", InfoActor[id][aPosY]);
		reg_float(tabla, "PosZ", InfoActor[id][aPosZ]);
		reg_float(tabla, "PosR", InfoActor[id][aPosR]);
		reg_int(tabla, "Interior", InfoActor[id][aInterior]);
		reg_int(tabla, "VirtualWorld", InfoActor[id][aVirtualWorld]);
		reg_int(tabla, "Animacion", InfoActor[id][aAnimacion]);
		if (InfoActor[id][aID_sql]) totalactores++;
		//función
		if (InfoActor[id][aPosX] != 0.0)
		{
			Dynamic_actor(id);
			cargaditos++;
		}
	}
	printf("%d actores dinámicos (SQL: %d) cargados correctamente.", cargaditos, totalactores-1);
	return 1;
}

Dynamic_actor(id)
{
	if (InfoActor[id][aPosX] == 0.0) return 1;
	//label
	DestroyDynamic3DTextLabel(InfoActor[id][aLabel]);
	new labelactor[128];
	if (!strcmp("Ninguno", InfoActor[id][aNombre])) format(labelactor, sizeof labelactor, "(%d)", id);
	else format(labelactor, sizeof labelactor, "%s (%d)", InfoActor[id][aNombre], id);
	InfoActor[id][aLabel] = CreateDynamic3DTextLabel(labelactor, -1, InfoActor[id][aPosX], InfoActor[id][aPosY], InfoActor[id][aPosZ]+1, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoActor[id][aVirtualWorld], InfoActor[id][aInterior], -1);
	//actor
	DestroyDynamicActor(InfoActor[id][aID_ig]);
	InfoActor[id][aID_ig] = CreateDynamicActor(InfoActor[id][aSkin], InfoActor[id][aPosX], InfoActor[id][aPosY], InfoActor[id][aPosZ], InfoActor[id][aPosR], true, 100.0, InfoActor[id][aVirtualWorld], InfoActor[id][aInterior]);
    Animacion_actor(id);
	return 1;
}

Animacion_actor(id)
{
	switch (InfoActor[id][aAnimacion])
	{
		case 1: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 1, 0, 0); // Hablar.
		case 2: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 1, 0, 0); // Seguridad.
		case 3: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "SMOKING","M_smk_in", 4.0, 1, 0, 1, 0, 0); // Fumar.
		case 4: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0); // Hablar 2.
		case 5: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 0); // Sentado.
		case 6: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "RAPPING", "Laugh_01", 4.0, 1, 0, 1, 0, 0); // Rie.
		case 7: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "DEALER", "DEALER_DEAL", 4.0, 1, 0, 1, 0, 0); //  Sacando dinero.
		case 8: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "RAPPING","RAP_A_Loop", 4.0, 1, 0, 1, 0, 0); // Rapeando.
		case 9: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "GANGS","smkcig_prtl", 4.0, 1, 0, 1, 0, 0); // Observando.
		case 10: ApplyDynamicActorAnimation(InfoActor[id][aID_ig], "STRIP","strip_E",4.1,7,5,1,1,1); // Perrea, perrea :D
	}
}

//test de rol
PreguntaTestRol(playerid, pregunta, error)
{
	new dialog[1024];
	if (error == 1) test_rol[playerid]--;
	switch (pregunta)
	{
		case 1:
		{
			strcat(dialog, "#\tRespuesta\n");
			strcat(dialog, "A\tEs todo aquello que interpreta el personaje dentro del juego.\n");
			strcat(dialog, "B\tEs todo aquello que se encuentra fuera del personaje. (Osea tú jugando)\n");
			strcat(dialog, "C\tMatar a una persona con razón lógica.\n");
			Dialog_Show(playerid, Show1Tutorial, DIALOG_STYLE_TABLIST_HEADERS, "1. ¿Qué es IC?", dialog, "Continuar", "Salir");
		}
		case 2:
		{
			strcat(dialog, "#\tRespuesta\n");
			strcat(dialog, "A\tEs todo lo que interpreta el personaje de manera In game.\n");
			strcat(dialog, "B\tEs realizar acciones que no harías en la vida real.\n");
			strcat(dialog, "C\tEs que no valoras la vida de tu personaje.\n");
			Dialog_Show(playerid, Show2Tutorial, DIALOG_STYLE_TABLIST_HEADERS, "2. ¿Qué es PG?", dialog, "Continuar", "Salir");
		}
		case 3:
		{
			strcat(dialog, "#\tRespuesta\n");
			strcat(dialog, "A\tPara describir las prendas de mi personaje.\n");
			strcat(dialog, "B\tPara rolear mis ganas de volar como superman.\n");
			strcat(dialog, "C\tEste comando es para rolear toda acción que realice mi personaje.\n");
			Dialog_Show(playerid, Show3Tutorial, DIALOG_STYLE_TABLIST_HEADERS, "3. ¿Para qué sirve el /me?", dialog, "Continuar", "Salir");
		}
		case 4:
		{
			strcat(dialog, "#\tRespuesta\n");
			strcat(dialog, "A\tBuscar a la policía y realizar acciones para provocar una persecución.\n");
			strcat(dialog, "B\tEs ir por la calle e insultar al primero que se cruce.\n");
			strcat(dialog, "C\tPelearse con gente en la calle porque te chocaron el vehículo o agredieron a un amigo tuyo.\n");
			Dialog_Show(playerid, Show4Tutorial, DIALOG_STYLE_TABLIST_HEADERS, "4. ¿Cuáles de estas opciones no es incentivar DM?", dialog, "Continuar", "Salir");
		}
		case 5:
		{
			strcat(dialog, "#\tRespuesta\n");
			strcat(dialog, "A\tPara describir el entorno que nos rodea o aclarar situaciones de rol.\n");
			strcat(dialog, "B\tCon este comando podemos explicar que el juego de anoche fue una mierda.\n");
			strcat(dialog, "C\tPara rolear las acciones antes de matar a un policía.\n");
			Dialog_Show(playerid, Show5Tutorial, DIALOG_STYLE_TABLIST_HEADERS, "5. ¿Para qué sirve el /do?", dialog, "Continuar", "Salir");
        }
		case 6:
		{
			ClearChat(playerid);
			if (test_rol[playerid] == 5)
			{
				SendClientMessage(playerid, 0x55AD30FF, "Correcto, puedes seguir el registro.");
				Dialog_Show(playerid, ShowSexo, DIALOG_STYLE_MSGBOX, "Sexo", "{cccccc}Escoge el sexo de tu personaje:", "Masculino", "Femenino");
			}
			else
			{
				SendClientMessage(playerid, 0xF92B2BFF, "Fallaste, puedes intentarlo de nuevo.");
				PreguntaTestRol(playerid, 1, 0);
				test_rol[playerid] = 5;
			}
		}
	}
	return 1;
}

Dialog:Show1Tutorial(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	switch (listitem)
	{
		case 0: PreguntaTestRol(playerid, 2, 0);
		case 1: PreguntaTestRol(playerid, 2, 1);
		case 2: PreguntaTestRol(playerid, 2, 1);
	}
	return 1;
}

Dialog:Show2Tutorial(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	switch (listitem)
	{
		case 0: PreguntaTestRol(playerid, 3, 1);
		case 1: PreguntaTestRol(playerid, 3, 0);
		case 2: PreguntaTestRol(playerid, 3, 1);
	}
	return 1;
}

Dialog:Show3Tutorial(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	switch (listitem)
	{
		case 0: PreguntaTestRol(playerid, 4, 1);
		case 1: PreguntaTestRol(playerid, 4, 1);
		case 2: PreguntaTestRol(playerid, 4, 0);
	}
	return 1;
}

Dialog:Show4Tutorial(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	switch (listitem)
	{
		case 0: PreguntaTestRol(playerid, 5, 1);
		case 1: PreguntaTestRol(playerid, 5, 1);
		case 2: PreguntaTestRol(playerid, 5, 0);
	}
	return 1;
}

Dialog:Show5Tutorial(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	switch (listitem)
	{
		case 0: PreguntaTestRol(playerid, 6, 0);
		case 1: PreguntaTestRol(playerid, 6, 1);
		case 2: PreguntaTestRol(playerid, 6, 1);
	}
	return 1;
}

//sistema de toys renovado by EdinsonWalker (18/01/2020)
#define Compra_Toy 760

enum ToyEnum
{
	accModelo,
	accPrecio,
	accNombre[54],
	accTipo,
};

static const InfoToy[][ToyEnum] =
{
	{11745, 80, "Bolso", 1},
	{19610, 80, "Microfono", 1},
	{19559, 800, "Mochila", 1},
	{19878, 8000, "Skate", 3},
	{19591, 500, "Abanico", 3},
	{18952, 1500, "Casco de boxeo", 1},
	{19555, 500, "Guante izquierdo", 1},
	{19556, 500, "Guante derecho", 1},
	{19631, 8000, "Martillo", 1},
	{19626, 8000, "Pala", 1},
	{19623, 15000, "Cámara de fotos", 1},
	{19893, 15000, "Computador portatil", 3},
	{19942, 8000, "Radio portatil", 1},
	{19904, 15000, "Chaleco naranja", 1},
	{2706, 1200, "Camisa roja", 3},
	{19086, 5000, "Dildo grande", 3},
	{19528, 2000, "Gorro bruja", 3},
	{19141, 2500, "Casco SWAT", 2},
	{19142, 2500, "Chaleco SWAT", 2},
	{19777, 200, "Parche FBI", 2},
	{18636, 1000, "Gorra de policía", 2},
	{19099, 1000, "Sombrero de policía", 2},
	{18637, 1000, "Escudo de policía", 2},
	{19200, 1000, "Casco de policía", 2},
	{19138, 1000, "Lentes de policía", 2},
	{18633, 28, "Llave inglesa", 1},
	{18634, 20, "Palanca", 1},
	{18635, 56, "Martillo", 1},
	{18638, 500, "Casco de minero", 1},
	{19093, 500, "Casco dude", 1},
	{18639, 500, "Sombrero negro", 1},
	{18640, 54, "Peluca 1", 1},
	{18975, 60, "Peluca 2", 1},
	{19136, 299, "Peluca 3", 1},
	{19274, 90, "Peluca 4", 1},
	{19516, 120, "Peluca 5", 1},
	{19517, 130, "Peluca 6", 1},
	{19518, 132, "Peluca 7", 1},
	{19519, 154, "Peluca 8", 1},
	{18641, 1000, "Linterna", 1},
	{18644, 5000, "Destornillador", 1},
	{18874, 500, "Teléfono", 1},
	{18890, 500, "Rastrillo", 1},
	{18891, 124, "Bandana 1", 1},
	{18892, 124, "Bandana 2", 1},
	{18893, 124, "Bandana 3", 1},
	{18894, 124, "Bandana 4", 1},
	{18895, 124, "Bandana 5", 1},
	{18896, 124, "Bandana 6", 1},
	{18897, 124, "Bandana 7", 1},
	{18898, 124, "Bandana 8", 1},
	{18899, 124, "Bandana 9", 1},
	{18900, 124, "Bandana 10", 1},
	{18901, 124, "Bandana 11", 1},
	{18902, 124, "Bandana 12", 1},
	{18903, 124, "Bandana 13", 1},
	{18904, 124, "Bandana 14", 1},
	{18905, 124, "Bandana 15", 1},
	{18906, 124, "Bandana 16", 1},
	{18907, 124, "Bandana 17", 1},
	{18908, 124, "Bandana 18", 1},
	{18909, 124, "Bandana 19", 1},
	{18910, 124, "Bandana 20", 1},
	{18911, 124, "Bandana 22", 1},
	{18912, 124, "Bandana 23", 1},
	{18913, 124, "Bandana 24", 1},
	{18914, 124, "Bandana 25", 1},
	{18915, 124, "Bandana 26", 1},
	{18916, 124, "Bandana 27", 1},
	{18917, 124, "Bandana 28", 1},
	{18918, 124, "Bandana 29", 1},
	{18919, 124, "Bandana 30", 1},
	{18920, 124, "Bandana 31", 1},
	{18941, 750, "Gorra negra", 1},
	{18961, 750, "Gorra camionero", 1},
	{19469, 500, "Cinta blanca", 1},
	{19330, 1250, "Casco de bombero", 1},
	{18974, 10000, "Máscara de zorro", 3},
	{18645, 1500, "Casco de moto roja", 3},
	{18976, 1000, "Casco de moto azul", 3},
	{18978, 1000, "Casco de moto blanco", 1},
	{19006, 70, "Gafas roja", 1},
	{19007, 70, "Gafas amarilla", 1},
	{19008, 70, "Gafas verde", 1},
	{19009, 70, "Gafas azul", 1},
	{19010, 70, "Gafas porpura", 1},
	{19011, 70, "Gafas manipulador", 1},
	{19012, 70, "Gafas negra", 1},
	{19013, 70, "Gafas ojo", 1},
	{19014, 70, "Gafas carrera", 1},
	{19015, 70, "Gafas blanca", 1},
	{19016, 70, "Gafas vision", 1},
	{19017, 86, "Lentes amarillo", 1},
	{19018, 86, "Lentes naranja", 1},
	{19019, 86, "Lentes rosa", 1},
	{19020, 86, "Lentes celeste", 1},
	{19021, 86, "Lentes verde", 1},
	{19022, 86, "Gafas R negro", 1},
	{19023, 86, "Gafas R azul", 1},
	{19024, 86, "Gafas R porpura", 1},
	{19025, 86, "Gafas R rosa", 1},
	{19026, 86, "Gafas R rojo", 1},
	{19027, 86, "Gafas R naranja", 1},
	{19028, 86, "Gafas R amarillo", 1},
	{19029, 86, "Gafas R verde", 1},
	{19030, 66, "Lentes N marron", 1},
	{19031, 66, "Lentes N amarillo", 1},
	{19032, 66, "Lentes N rojo", 1},
	{19033, 66, "Lentes N negro", 1},
	{19034, 66, "Lentes N carrera", 1},
	{19035, 66, "Lentes N azul", 1},
	{19036, 120, "Máscara de terror", 1},
	{19039, 450, "Reloj oro", 1},
	{19040, 260, "Reloj plata", 1},
	{19041, 110, "Reloj cobre", 1},
	{19042, 440, "Reloj oro 2", 1},
	{19043, 250, "Reloj plata 2", 1},
	{19044, 60, "Reloj morado", 1},
	{19045, 60, "Reloj rosa", 1},
	{19046, 60, "Reloj verde", 1},
	{19047, 60, "Reloj azul", 1},
	{19048, 60, "Reloj azul negro", 1},
	{19049, 60, "Reloj floriado", 1},
	{19050, 60, "Reloj azul celeste", 1},
	{19051, 60, "Reloj naranja negro", 1},
	{19052, 60, "Reloj rosa naranja", 1},
	{19053, 60, "Reloj militar", 1},
	{19064, 10000, "Gorro de santa normal", 1},
	{19065, 20000, "Gorro de santa MXMas", 3},
	{19066, 30000, "Gorro de santa HXMas", 3},
	{19078, 7500, "Loro", 3},
	{19085, 5000, "Parche de ojo", 1},
	{19163, 1000, "Máscara de CJ", 3},
	{19317, 1000, "Guitarra roja", 1},
	{19318, 1500, "Guitarra X", 1},
	{19319, 2000, "XFireGuitarra", 3},
	{1210, 500, "Maleta", 1},
	{19346, 50, "HotDog", 1},
	{19472, 3000, "Máscara de gas", 3},
	{19421, 140, "Audifonos blanco", 1},
	{19422, 140, "Audifonos negro", 1},
	{19423, 140, "Audifonos rosa", 1},
	{19424, 140, "Audifonos azul", 1},
	{11704, 2200, "Máscara demonio", 3}, //agregados x edinsonwalker (18/01/2020)
	{1242, 100, "Chaleco de seguridad", 3},
	{371, 100, "Paracaidas", 3},
	{19801, 70, "Pasamontañas", 2},
	{19773, 50, "Pistolera", 2},
	{19347, 40, "Estrella", 2},
	{19515, 255, "Chaleco tactico gris", 2},
	{19514, 150, "Casco gris", 2},
	{368, 12, "Visión nocturna", 2},
	{19781, 12, "Sargento I", 2},
	{19782, 12, "Sargento II", 2},
	{19783, 12, "Oficial II", 2},
	{19784, 12, "Oficial III", 2},
	{19785, 12, "Oficial III+", 2},
	{19778, 12, "Detective I", 2},
	{19779, 12, "Detective II", 2},
	{19780, 12, "Detective III", 2},
	{370, 11118, "Jetpack", 3},
	{19558, 4, "Gorra pizzero", 1},
	{19488, 13, "Sombrero blanco", 1}
};

GetNameToy(playerid, id)
{
	new	name_this[64];
	alm(name_this, "desconocido");
	Loop(x, sizeof InfoToy, 0) if (InfoToy[x][accModelo] == InfoPlayer[playerid][ptModelo][id])
	{
		alm(name_this, InfoToy[x][accNombre]);
		return name_this;
	}
	return name_this;
}

GetStatusToy(playerid, id)
{
	new	name_this[64];
	if (InfoPlayer[playerid][ptColocado][id] != 0) alm(name_this, "{64CA46}Sí");
	else alm(name_this, "{ED3F3F}No");
	return name_this;
}

GetParteToy(playerid, id)
{
	new	name_this[24];
	alm(name_this, "Desconocida");
	switch (InfoPlayer[playerid][ptHueso][id])
	{
		case 1: alm(name_this, "Columna");
		case 2: alm(name_this, "Cabeza");
		case 3: alm(name_this, "Brazo izquierdo");
		case 4: alm(name_this, "Brazo derecho");
		case 5: alm(name_this, "Mano izquierda");
		case 6: alm(name_this, "Mano derecha");
		case 7: alm(name_this, "Muslo izquierdo");
		case 8: alm(name_this, "Muslo derecho");
		case 9: alm(name_this, "Pie izquierdo");
		case 10: alm(name_this, "Pie derecho");
		case 11: alm(name_this, "Pantorrilla derecha");
		case 12: alm(name_this, "LefPantorrillat izquierda");
		case 13: alm(name_this, "Antevrazo izquierdo");
		case 14: alm(name_this, "Antevrazo derecho");
		case 15: alm(name_this, "Clavicula izquierda");
		case 16: alm(name_this, "Clavicula derecha");
		case 17: alm(name_this, "Cuello");
		case 18: alm(name_this, "Quijada");
	}
	return name_this;
}

// colores toys
#define RGBAToARGB(%1)		(%1 >>> 8 | %1 << 24)

enum ctInfo
{
	ctColor[32],
	ctNombre[32]
};

static const InfoColorToy[][ctInfo] =
{
	// ROSA
    {"0xFFC0CBFF", "Rosado"},
    {"0xFFB6C1FF", "Rosado claro"},
    {"0xFF69B4FF", "Rosado caliente"},
    {"0xFF1493FF", "Rosado profundo"},
    {"0xC71585FF", "Violeta medio"},
    {"0xDB7093FF", "Violeta roso"},
    {"0x8B008BFF", "Magenta oscuro"},
    {"0x9932CCFF", "Orquidea oscuro"},
    {"0x7FFF00FF", "Chatreuse 1"},

	// NARANJA
    {"0xFFA07AFF", "Salmon claro"},
    {"0xFF7F50FF", "Coral"},
    {"0xFF6347FF", "Tomate"},
    {"0xFF4500FF", "Anaranjado"},
    {"0xFF8C00FF", "Naranja oscura"},
    {"0xFFA500FF", "Naranja"},

	// AMARILLO
    {"0xFFD700FF", "Oro"},
    {"0xFFFF00FF", "Amarillo"},
    {"0xFFFFE0FF", "Amarilo claro"},
    {"0xFFFACDFF", "Limon gasa"},
    {"0xFAFAD2FF", "Amarillo oro claro"},
    {"0xFFEFD5FF", "Papaya latigo"},
    {"0xFFE4B5FF", "Moccasin"},
    {"0xFFDAB9FF", "Hojaldre de melcoton"},
    {"0xEEE8AAFF", "Amarillo caía"},
    {"0xF0E68CFF", "Khaki"},
    {"0xBDB76BFF", "Khaki oscuro"},

	// ROJO
	{"0xCD5C5CFF", "Rojo indio"},
	{"0xF08080FF", "Coral claro"},
	{"0xFA8072FF", "Salmón"},
	{"0xE9967AFF", "Salmón oscuro"},
	{"0xFFA07AFF", "Salmón claro"},
	{"0xDC143CFF", "Carmesí"},
	{"0xFF0000FF", "Rojo"},
	{"0xB22222FF", "Ladrillo fuego"},
	{"0x8B0000FF", "Rojo oscuro"},
	{"0x000000FF", "Negro"}
};

GetColorToy(playerid, id)
{
	new exName[128] = "{EBEBEB}Ninguno";
	//verifica si es -1
	if (InfoPlayer[playerid][ptColor][id] == -1) return exName;
	//resto:
	format(exName, sizeof exName, "{%.6s}%s\n", InfoColorToy[InfoPlayer[playerid][ptColor][id]][ctColor][2], InfoColorToy[InfoPlayer[playerid][ptColor][id]][ctNombre]);
	return exName;
}

SetColorToy(coler)
{
	new color = 0, gformat[32];
	if (coler == -1) return color;
	format(gformat, sizeof gformat, "%x", RGBAToARGB(hexstr(InfoColorToy[coler][ctColor])));
	color = hexstr(gformat);
	return color;
}

//sistema de inventario/bolsillos:
#define MAX_OBJETOS_S 300

enum dData
{
	DropID,
	DropCantidad,
	Float:DropPosX,
	Float:DropPosY,
	Float:DropPosZ,
	DropVWorld,
	DropInterior,
	Text3D: DropLabel
};
new InfoSuelo[MAX_OBJETOS_S][dData], ObjetoCaido[MAX_OBJETOS_S], ObjTimer[MAX_OBJETOS_S];

enum inventarioInfo
{
	IDObjeto,
	NombreObjeto[32],
	ModeloObjeto,
	IDArma,
	Guardable,
	Arrojadizo,
	DefaultCantidad,
	MaxCantidad,
};

static const InfoInventario[][inventarioInfo] =
{
	{0, "Vacío", 0, 0, 0, 0, 0, 0},
	//.weapons
	{1, "Nudillera", 331, 1, 1, 0, 1, 1},
	{2, "Palo de golf", 333, 2, 3, 0, 1, 1},
	{3, "Porra", 334, 3, 1, 0, 1, 1},
	{4, "Cuchillo", 335, 4, 1, 1, 1, 1},
	{5, "Bate", 336, 5, 3, 0, 1, 1},
	{6, "Pala", 337, 6, 3, 0, 1, 1},
	{7, "Palo de billar", 338, 7, 3, 0, 1, 1},
	{8, "Katana", 339, 8, 3, 0, 1, 1},
	{9, "Motosierra", 341, 9, 3, 0, 1, 1},
	{10, "Consolador rosa", 321, 10, 1, 0, 1, 1},
	{11, "Consolador pequeño", 322, 11, 1, 0, 1, 1},
	{12, "Consolador largo", 323, 12, 1, 0, 1, 1},
	{13, "Consolador plateado", 324, 13, 1, 0, 1, 1},
	{14, "Flores", 325, 14, 3, 0, 1, 1},
	{15, "Bastón", 326, 15, 3, 0, 1, 1},
	{16, "Granada", 342, 16, 1, 1, 1, 1},
	{17, "Granada de gas", 343, 17, 1, 1, 10, 10},
	{18, "Cóctel molotov", 344, 0, 1, 1, 10, 10},
	{19, "9mm", 346, 22, 1, 0, 30, 90},
	{20, "9mm con silenciador", 347, 23, 1, 0, 30, 90},
	{21, "Desert eagle", 348, 24, 1, 0, 14, 36},
	{22, "Escopeta", 349, 25, 3, 0, 10, 30},
	{23, "Recortada", 350, 26, 3, 0, 14, 35},
	{24, "Escopeta de combate", 351, 27, 3, 0, 14, 35},
	{25, "Uzi", 352, 28, 1, 0, 50, 150},
	{26, "MP5K", 353, 29, 3, 0, 60, 120},
	{27, "AK47", 355, 30, 3, 0, 60, 180},
	{28, "M4A1", 356, 31, 3, 0, 60, 180},
	{29, "Tec9", 372, 32, 1, 0, 50, 150},
	{30, "Rifle de caza", 357, 33, 3, 0, 10, 20},
	{31, "Rifle de francotirador", 358, 34, 3, 0, 5, 10},
	{32, "Cohete", 359, 35, 3, 0, 10, 10},
	{33, "RPG Cohete", 360, 0, 3, 0, 10, 10},
	{34, "Lanzallamas", 361, 37, 3, 0, 10, 10},
	{35, "Minigun", 362, 0, 3, 0, 9999, 9999},
	{36, "Spray", 365, 41, 1, 0, 99999, 9999},
	{37, "Extintor", 366, 42, 3, 0, 500, 1500},
	{38, "Cámara fotográfica", 367, 43, 1, 0, 50, 100},
	{39, "Paracaidas", 371, 46, 3, 1, 1, 1},
	{40, "Táser", 347, 23, 1, 0, 2, 2},
	//objetos desde 04/03/2020
	{41, "Encendedor", 19998, 0, 1, 1, 20, 40},
	{42, "Paquete de cigarros", 19896, 0, 1, 1, 10, 20},
	{43, "Marihuana", 2709, 0, 1, 1, 20, 50},
	{44, "Crack", 2709, 0, 1, 1, 20, 50},
	{45, "Metanfetamina", 2709, 0, 1, 1, 20, 50},
	{46, "Cocaína", 2709, 0, 1, 1, 20, 50},
	{47, "Canuto de marihuana", 3027, 0, 1, 1, 5, 5},
	{48, "Blunt de marihuana", 3044, 0, 1, 1, 5, 5},
	{49, "Cigarro", 19625, 0, 1, 1, 5, 5},
	{50, "Teléfono S10", 18865, 0, 1, 0, 1, 1},
	{51, "Boombox",	2103, 0, 2, 0, 1, 1},
	{52, "Dinamita", 1654, 0, 1, 0, 1, 1},
	{53, "Botiquin", 11738, 0, 2, 1, 1, 1},
	{54, "Escopeta no-letal", 349, 25, 3, 0, 15, 20},
	{55, "Paquete", 1575, 0, 1, 0, 1, 100}
};

PonerObjeto(playerid, lugar, objetoid)
{
	new modelo = InfoInventario[objetoid][ModeloObjeto];
	switch (lugar)
	{
		case 1: //mano derecha
		{
			switch (objetoid)
			{
				case 1..40: SetPlayerAttachedObject(playerid, 7, modelo, 6); //weapons
				case 41: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.059000, 0.041000, 0.012999, 0.199999, -21.399997, 0.099999, 0.389000, 0.939000, 0.409999); //encendedor
				case 42: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.057000, 0.035999, 0.003999, -105.099983, -2.200000, -171.699981, 1.000000, 1.000000, 1.000000); //paquete de cigarros
				case 43..46: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.073000, 0.073000, 0.015999, -9.699999, 0.600041, -0.299999, 1.000000, 1.000000, 1.000000); //marihuana, crack, metanfetamina, cocaína
				case 47: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.098000, 0.034000, 0.037999, 111.599998, 19.299999, 8.299999, 1.000000, 1.000000, 1.000000); //canuto de marihuana
				case 48: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.045999, 0.111999, 0.032000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //blunt de marihuana
				case 49: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.121999, -0.004000, 0.004999, 9.599995, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //cigarro
				case 50: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.093999, 0.012000, -0.010999, -81.199974, 10.000000, 179.099945, 0.990999, 0.829000, 0.903000); //teléfono s10
				case 51: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.388999, 0.034000, 0.101999, 0.000000, -100.599998, 0.399999, 1.000000, 1.000000, 1.000000); //boombox
				case 52: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.048000, -0.001999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //dinamita
				case 53: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.178000, 0.019999, 0.031998, 0.000000, -101.600021, 0.000000, 0.630999, 0.452998, 0.611998); //botiquin
				case 54: SetPlayerAttachedObject(playerid, 7, modelo, 6); //escopetita
				case 55: SetPlayerAttachedObject(playerid, 7, modelo, 6, 0.082000, 0.000000, 0.000000, 0.099999, 76.499984, 1.000000, 1.000000, 1.000000, 1.000000); //paquete de negocio
			}
		}
		case 2: //mano izquierda
		{
			switch (objetoid)
			{
				case 1: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.024999, 0.000000, -0.005999, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //nudillera
				case 2: SetPlayerAttachedObject(playerid, 8, modelo, 5, -0.040000, 0.067000, -0.003000, -29.899999, 152.000000, 176.000030, 1.000000, 1.000000, 1.000000); //palo de golf
				case 3: SetPlayerAttachedObject(playerid, 8, modelo, 5, -0.115999, 0.113999, 0.087999, 0.000000, 44.500000, 0.000000, 1.000000, 1.000000, 1.000000); //porra
				case 4: SetPlayerAttachedObject(playerid, 8, modelo, 5, -0.007000, 0.060999, -0.013000, 156.600051, 9.100000, -14.800011, 1.000000, 1.000000, 1.000000); //cuchillo
				case 5: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.135999, 0.030999, 0.053999, -17.900001, 153.800018, 0.000000, 1.000000, 1.000000, 1.000000); //bate
				case 6: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.041999, 0.051999, -0.080000, -27.899986, 155.800018, -167.499938, 1.000000, 1.000000, 1.000000); //pala
				case 7: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.156999, 0.092000, 0.071999, -25.099998, 172.899963, -19.899995, 1.000000, 1.000000, 1.000000); //palo de billar
				case 8: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.058000, 0.008000, -0.109000, -27.999998, 155.100036, 172.699966, 1.000000, 1.000000, 1.000000); //sable
				case 9: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.000000, 0.078999, -0.009000, 155.599990, 7.200000, 4.800000, 1.000000, 1.000000, 1.000000); //motosierra
				case 10: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.015000, 0.041000, -0.068000, -25.599971, 162.900054, -175.300018, 1.000000, 1.000000, 1.000000); //consolador 1
				case 11: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.023999, 0.052999, -0.041999, 157.899978, 2.499999, 0.000000, 1.000000, 1.000000, 1.000000); //consolador 2
				case 12: SetPlayerAttachedObject(playerid, 8, modelo, 5, -0.002000, 0.074000, 0.001000, 151.200042, 23.000000, -9.100001, 1.000000, 1.000000, 1.000000); //consolador 3
				case 13: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.017999, 0.003999, -0.047999, 168.200012, 18.300003, -27.900005, 1.000000, 1.000000, 1.000000); //consolador 4
				case 14: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.176000, 0.000000, -0.011000, -23.399999, 160.599990, -6.399995, 1.000000, 1.000000, 1.000000); //flores
				case 15: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.008999, -0.018999, -0.047999, -33.199996, 159.900085, 156.399902, 1.000000, 1.000000, 1.000000); //bastón
				case 16: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.019000, 0.047000, -0.021000, 164.499984, 0.000000, -17.599994, 1.000000, 1.000000, 1.000000); //granada
				case 17: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.034000, 0.063000, -0.037999, 164.500000, 14.599996, -4.700009, 1.000000, 1.000000, 1.000000); //granada de gas
				case 18: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.022999, 0.039000, -0.125999, 165.700012, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //molotov
				case 19: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.033000, 0.057999, -0.017999, 146.299987, 14.999998, -4.700002, 1.000000, 1.000000, 1.000000); //9mm + silenciador
				case 20: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.050999, 0.038000, -0.021999, 144.500015, 9.100000, -11.600002, 1.000000, 1.000000, 1.000000); //9mm
				case 21: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.041000, 0.038000, -0.026999, 173.899963, 0.000000, 1.799999, 1.000000, 1.000000, 1.000000); //desert eagle
				case 22: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.000000, 0.089000, 0.000000, 153.500015, 10.000001, 4.800000, 1.000000, 1.000000, 1.000000); //escopeta
				case 23: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.040000, 0.026000, 0.011000, -156.300003, 0.000000, 2.600000, 1.000000, 1.000000, 1.000000); //recortada
				case 24: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.023000, 0.048999, -0.013000, 172.200012, 14.400005, 0.599999, 1.000000, 1.000000, 1.000000); //escopeta combate
				case 25: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.024999, 0.048000, -0.012000, 172.000076, -3.099988, -2.099991, 1.000000, 1.000000, 1.000000); //UZI
				case 26: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.005000, 0.065000, -0.016000, 162.399963, 9.599999, 8.400000, 1.000000, 1.000000, 1.000000); //MP5K
				case 27: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.057999, 0.076999, -0.023999, 162.799942, 14.399999, 0.000000, 1.000000, 1.000000, 1.000000); //AK47
				case 28: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.043999, 0.028999, -0.038000, 167.499969, 15.999998, 0.000000, 1.000000, 1.000000, 1.000000); //M4
				case 29: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.048000, 0.049999, 0.011000, -172.600006, -2.299995, 5.999999, 1.000000, 1.000000, 1.000000); //tec9
				case 30: SetPlayerAttachedObject(playerid, 8, modelo, 5, -0.043000, 0.065999, -0.044999, 167.499954, 17.399999, 0.000000, 1.000000, 1.000000, 1.000000); //rifle de caza
				case 31: SetPlayerAttachedObject(playerid, 8, modelo, 5, -0.018000, 0.085000, 0.033000, 167.399978, 12.200000, -0.299997, 1.000000, 1.000000, 1.000000); //rifle de francotirador
				case 32: SetPlayerAttachedObject(playerid, 8, modelo, 5, -0.019999, 0.053999, -0.042000, -33.100013, -174.800018, 171.199890, 0.757999, 0.782000, 0.979999); //cohete
				case 33: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.171999, 0.079999, -0.111999, -124.399993, 166.300018, -93.599990, 1.038999, 0.752000, 0.854999); //RPG
				case 34: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.044999, 0.083999, 0.034999, 47.699974, -79.599967, -89.300102, 0.654999, 0.782000, 0.758000); //lanzallamas
				case 35: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.023000, 0.048999, -0.013000, 172.200012, 14.400005, 0.599999, 1.000000, 1.000000, 1.000000); //minigun
				case 36: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.036999, 0.026999, -0.079999, 152.899993, 14.900004, -0.400000, 1.000000, 1.000000, 1.000000); //spray
				case 37: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.004000, 0.061999, -0.063999, 126.599990, 33.099998, 2.200000, 1.000000, 1.000000, 1.000000); //extintor
				case 38: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //cámara fotográfica
				case 39: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //paracaidas
				case 40: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.050999, 0.038000, -0.021999, 144.500015, 9.100000, -11.600002, 1.000000, 1.000000, 1.000000); //táser
				case 41: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.084000, 0.026000, -0.014000, 156.000076, -21.299989, -1.399998, 0.389000, 0.939000, 0.409999); //encendedor
				case 42: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.086000, 0.043999, -0.010000, -89.599967, -2.199996, 1.099998, 1.000000, 1.000000, 1.000000); //paquete de cigarros
				case 43..46: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.094000, 0.065000, -0.026000, 0.000000, -177.499969, 0.000000, 1.000000, 1.000000, 1.000000); //marihuana,crack, metanfetamina, cocaína
				case 47: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.116999, 0.034000, -0.037000, 111.599998, 19.299999, 8.299999, 1.000000, 1.000000, 1.000000); //canuto de marihuana
				case 48: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.036000, 0.074000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //blunt de marihuana
				case 49: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.130000, 0.013999, 0.007999, 9.599995, 6.699999, 29.500005, 1.000000, 1.000000, 1.000000); //cigarro
				case 50: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.056000, 0.000000, 0.007000, -97.100006, 0.000000, 0.000000, 0.990999, 0.829000, 0.903000); //teléfono s10
				case 51: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.423000, 0.000000, 0.019999, 6.100001, -101.499984, 36.800006, 1.000000, 1.000000, 1.000000); //boombox
				case 52: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.050999, 0.072000, 0.000000, -34.699996, -21.000000, 1.699999, 1.000000, 1.000000, 1.000000); //dinamita
				case 53: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.193000, 0.029000, -0.001001, 0.000000, -101.600021, 12.900000, 0.630999, 0.452998, 0.611998); //botiquin
				case 54: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.000000, 0.089000, 0.000000, 153.500015, 10.000001, 4.800000, 1.000000, 1.000000, 1.000000); //escopetita
				case 55: SetPlayerAttachedObject(playerid, 8, modelo, 5, 0.082000, 0.000000, 0.000000, -0.399999, 76.499984, -25.099998, 1.000000, 1.000000, 1.000000); //paquete de negocio
			}
		}
		case 3: //espalda
		{
		    new toy = 7;
			if (InfoPlayer[playerid][ptPosX][toy] != 0.0)
			{
				if (InfoPlayer[playerid][ptHueso][toy] == 0) InfoPlayer[playerid][ptHueso][toy] = 1;
				SetPlayerAttachedObject(playerid, 9, modelo, InfoPlayer[playerid][ptHueso][toy], InfoPlayer[playerid][ptPosX][toy], InfoPlayer[playerid][ptPosY][toy], InfoPlayer[playerid][ptPosZ][toy],
				InfoPlayer[playerid][ptRotX][toy], InfoPlayer[playerid][ptRotY][toy], InfoPlayer[playerid][ptRotZ][toy], 1.000000, 1.000000, 1.000000);
			}
			else
			{
				switch (objetoid)
				{
					case 2,3: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.000000, 1.000000, 1.000000);
					case 5,6,7,8: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.000000, 1.000000, 1.000000);
					case 9: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.2349, -0.1289, 0.0000, -166.7000, 0.0000, 0.0000, 1.000000, 1.000000, 1.000000);
					case 10: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.000000, 1.000000, 1.000000);
					case 11: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.000000, 1.000000, 1.000000);
					case 12: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.000000, 1.000000, 1.000000);
					case 13: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.000000, 1.000000, 1.000000);
					case 14: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.000000, 1.000000, 1.000000);
					case 15: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.000000, 1.000000, 1.000000);
					case 22: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.220000, -0.135998, 0.113000, -1.900013, 161.699951, 8.599991, 1.000000, 1.000000, 1.000000); //escopeta
					case 23: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.345999, -0.151998, 0.166000, -1.900013, 161.699951, 8.599991, 1.000000, 1.000000, 1.000000); //recortada
					case 24: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.345999, -0.151998, 0.166000, -1.900013, 161.699951, 8.599991, 1.000000, 1.000000, 1.000000); //escopeta combate
					case 26: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.205000, -0.136998, 0.156000, -1.500012, 152.599945, 5.399990, 1.000000, 1.000000, 1.000000); //MP5K
					case 27: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.251000, -0.130998, 0.135999, -1.500012, 152.599945, 5.399990, 1.000000, 1.000000, 1.000000); //AK47
					case 28: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.251000, -0.130998, 0.135999, -1.500012, 152.599945, 5.399990, 1.000000, 1.000000, 1.000000); //M4
					case 30: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.017999, -0.133999, 0.000000, 11.899997, 32.799995, 9.599994, 1.000000, 1.000000, 1.000000); //rifle de caza
					case 31: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.018000, -0.133999, 0.000000, 11.899998, 32.799995, 9.599995, 1.000000, 1.000000, 1.000000); //rifle de francotirador
					case 32: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.019999, -0.155000, 0.068000, 15.799981, 164.600006, -3.100142, 1.000000, 1.000000, 1.000000); //cohete
					case 33: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.195999, -0.142000, -0.129000, -1.799999, 18.200000, 0.000000, 1.000000, 1.000000, 1.000000); //RPG
					case 34: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.363999, -0.155000, 0.083000, 15.799981, 164.600006, -3.100142, 1.000000, 1.000000, 1.000000); //lanzallamas
					case 35: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.289000, -0.114999, -0.048000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //minigun
					case 37: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.439999, -0.114999, 0.157000, -27.400011, 134.299942, -2.600011, 1.000000, 1.000000, 1.000000); //extintor
					case 39: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.087999, -0.114999, 0.000000, 11.899997, 86.899993, -18.700014, 1.000000, 1.000000, 1.000000); //paracaidas
					case 40: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.220000, -0.135998, 0.113000, -1.900013, 161.699951, 8.599991, 1.000000, 1.000000, 1.000000); //escopetita
					default: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.000000, 0.231000, 0.000000, 10.899998, 0.000000, 175.900009, 1.000000, 1.000000, 1.000000);
				}
				InfoPlayer[playerid][ptHueso][toy] = 1;
				EditAttachedObject(playerid, 9);
				EditandoObjetoJ[playerid] = 2;
				SendClientMessage(playerid, -1, "Mantén presionado {FFBF00}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
			}

		}
	}
	return 1;
}

funcion tirar_objeto(ObjetoID, Cantidad, Float: X, Float: Y, Float: Z, world, interior, bomxo)
{
	if (ObjetoID != 0)
	{
		new Float: rotx, Float: roty, Float: rotz;
		for (new i = 0; i < sizeof(InfoSuelo); i++)
		{
			if (InfoSuelo[i][DropPosX] == 0.0)
			{
				InfoSuelo[i][DropID] = ObjetoID;
				InfoSuelo[i][DropCantidad] = Cantidad;
				InfoSuelo[i][DropPosX] = X;
				InfoSuelo[i][DropPosY] = Y;
				InfoSuelo[i][DropPosZ] = Z;
				InfoSuelo[i][DropVWorld] = world;
				InfoSuelo[i][DropInterior] = interior;
				//
				switch (ObjetoID)
				{
					case 1..5: { rotx = 85; roty = 1; rotz = 8; Z += 0; } //nudillera, palo de golf, porra, cuchillo y bate
					case 6: { rotx = 8.5; roty = 90; rotz = -82; Z += 0.1; } //pala
					case 7,8: { rotx = 85; roty = 1; rotz = 8; Z += 0; } //palo de billar, sable
					case 9: { rotx = 95; roty = -69; rotz = 8; Z += 0.08; } //motosierra
					case 10..13: { rotx = 90; roty = 1; rotz =  8; Z+= 0; } //consoladores
					case 14: { rotx = 70; roty = 1; rotz =  8; Z+= 0; } //flores
					case 15: { rotx = 87; roty = 1; rotz =  8; Z+= 0; } //bastón
					case 16: { rotx = 0; roty = -17; rotz = 0; Z += 0.05; } //granada
					case 17: { rotx = 0; roty = 0.3; rotz = -7; Z += 0.06; } //granada de humo
					case 18: { rotx = -5.5; roty = -1.8; rotz = -7; Z += 0.2; } //molotov
					case 19: { rotx = -85; roty = 3; rotz = 3; Z += 0.04; } //9mm
					case 20: { rotx = -85; roty = 3; rotz = 3; Z += 0.05; } //9mm con silenciador
					case 21: { rotx = -85; roty = 3; rotz = 3; Z += 0.04; } //desert eagle
					case 22: { rotx = -82; roty = 58; rotz = 64; Z += 0.06; } //escopeta
					case 23: { rotx = -90; roty = 58; rotz =  64; Z += 0.05; } //recortada
					case 24: { rotx = -82; roty = 58; rotz =  64; Z += 0.05; } //combate
					case 25,26: { rotx = -90; roty = 0; rotz = 0; Z += 0.04; } //uzi, mp5k
					case 27,28: { rotx = -92.6; roty = 0.8; rotz = -3.1; Z += 0.06; } //ak47, m4a1
					case 29: { rotx = -90; roty = 0; rotz = 0; Z += 0.05; } //tec9
					case 30: { rotx = -112; roty = -150; rotz = -159; Z += 0.04; } //rifle de caza
					case 31: { rotx = -105; roty = -150; rotz = -159; Z += 0.04; } //rifle de francotirador
					case 32,33,34: { rotx = -90; roty = 0; rotz = 0; Z += 0.07; } //cohete, rpg, lanzallamas
					case 35: {  rotx = -4.4; roty = 27.5; rotz = 0; Z += 0.315; } //minigun
					case 36: {  rotx = 0.5; roty = -5.5; rotz = -4.7; Z += 0.15; } //spray
					case 37: { rotx = -3.2; roty = 40.3; rotz = 0; Z += 0.59; } //extintor
					case 38: { rotx = 0; roty = -1.8; rotz = -30; Z += 0.02; } //camara
					case 39: { rotx = 0; roty = 0; rotz = 9.7; Z += 0.19; } //paracaidas
					case 40: { rotx = -85; roty = 3; rotz = 3; Z += 0.05; } //taser
					case 41: { rotx = 0; roty = 0; rotz = 0; Z += 0.1; } //encendedor
					case 42: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; } //paquete de cigarros
					case 43..46: { rotx = 0; roty = 0; rotz = 0; Z += 0.12; } //marihuana, crack, metanfetamina, cocaína
					case 47: { rotx = 0; roty = -90; rotz = 0; Z += 0.02; } //canuto de marihuana
					case 48: { rotx = 0; roty = 0; rotz = 90; Z += 0.05; } //blunt de marihuana
					case 49: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; } //cigarro
					case 50: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; } //teléfono s10
					case 51: { rotx = 0; roty = 0; rotz = 0; Z += 0; } //boombox
					case 52: { rotx = 0; roty = 0; rotz = 0; Z += 0.2; } //dinamita
					case 53: { rotx = 0; roty = 0; rotz = 0; Z += 0.06; } //botiquin
					case 54: { rotx = -82; roty = 58; rotz = 64; Z += 0.06; } //escopeta no-letal
					default: { rotx = 0; roty = 0; rotz = 0; Z += 0.02; }
				}
				DestroyDynamic3DTextLabel(InfoSuelo[i][DropLabel]);
				new info_obj[170];
				format(info_obj, sizeof info_obj, "%s{EBEBEB} (/recoger %d)", InfoInventario[ObjetoID][NombreObjeto], i);
				if (bomxo != 0)
				{
					InfoSuelo[i][DropLabel] = CreateDynamic3DTextLabel(info_obj, COLOR_GENERAL, X, Y, Z, 15.0, .worldid = world, .interiorid = interior);
					ObjetoCaido[i] = CreateDynamicObject(InfoInventario[ObjetoID][ModeloObjeto], X, Y, Z, rotx, roty, rotz, world, interior);
				}
				else
				{
					InfoSuelo[i][DropLabel] = CreateDynamic3DTextLabel(info_obj, COLOR_GENERAL, X, Y, Z-1, 15.0, .worldid = world, .interiorid = interior);
					ObjetoCaido[i] = CreateDynamicObject(InfoInventario[ObjetoID][ModeloObjeto], X, Y, Z-1, rotx, roty, rotz, world, interior);
				}
				ObjTimer[i] = SetTimerEx("SueloTime", 3600000*2, false, "i", i);
				return 1;
			}
		}
	}
	return 1;
}

funcion SueloTime(i)
{
	DestroyDynamicObject(ObjetoCaido[i]);
	DestroyDynamic3DTextLabel(InfoSuelo[i][DropLabel]);
	InfoSuelo[i][DropLabel] = CreateDynamic3DTextLabel("dropid", -1, -1178.1569, 58.9069, 1.9609, 1.0, .worldid = 1+777, .interiorid = i);
	InfoSuelo[i][DropPosX] = 0.0;
	InfoSuelo[i][DropPosY] = 0.0;
	InfoSuelo[i][DropPosZ] = 0.0;
	InfoSuelo[i][DropID] = 0;
	InfoSuelo[i][DropCantidad] = 0;
	KillTimer(ObjTimer[i]);
	return 1;
}

forward no_tiene_manos(playerid, objeto);
public no_tiene_manos(playerid, objeto)
{
	if (InfoPlayer[playerid][pManoDerecha] == objeto) return 1;
	if (InfoPlayer[playerid][pManoIzquierda] == objeto) return 1;
	new no_tiene[256];
	format(no_tiene, sizeof no_tiene, "No tienes {FFBF00}%s{EFEFEF} en ninguna mano.", InfoInventario[objeto][NombreObjeto]);
	SendClientMessage(playerid, 0xEFEFEFFF, no_tiene);
	return 0;
}

forward DarObjeto(playerid, objeto, cantidad);
public DarObjeto(playerid, objeto, cantidad)
{
	if (InfoPlayer[playerid][pManoDerecha] == 0)
	{
		InfoPlayer[playerid][pManoDerecha] = objeto;
		InfoPlayer[playerid][pManoDerechaCant] = cantidad;
		PonerObjeto(playerid, 1, objeto);
		if (InfoInventario[objeto][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], cantidad); }
		ActualizarManos(playerid);
		return 1;
	}
	else if (InfoPlayer[playerid][pManoIzquierda] == 0)
	{
		InfoPlayer[playerid][pManoIzquierda] = objeto;
		InfoPlayer[playerid][pManoIzquierdaCant] = cantidad;
		PonerObjeto(playerid, 2, objeto);
		ActualizarManos(playerid);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Debes tener alguna mano vacía, tira o guarda lo que llevas en tus manos.");
	return 2;
}

forward PlayerWeapon(playerid, idarma);
public PlayerWeapon(playerid, idarma)
{
	new idobj = -1, gformat[128];
	Loop(x, sizeof InfoInventario, 0) if (InfoInventario[x][IDArma] == idarma)
	{
		idobj = x;
		break;
	}
	if (idobj == -1) { SendClientMessage(playerid, COLOR_GREY, "Error, ese id de arma no existe en la base de datos, contacta con el programador."); return 0; }
	if (InfoPlayer[playerid][pManoDerecha] == 0)
	{
		InfoPlayer[playerid][pManoDerecha] = idobj;
		InfoPlayer[playerid][pManoDerechaCant] = InfoInventario[idobj][DefaultCantidad];
		PonerObjeto(playerid, 1, idobj);
		GivePlayerWeapon(playerid, idarma, InfoInventario[idobj][DefaultCantidad]);
		ActualizarManos(playerid);
		format(gformat, sizeof gformat, "Mano derecha: {FFBF00}%s", InfoInventario[idobj][NombreObjeto]);
		SendClientMessage(playerid, 0xccccccff, gformat);
		return 1;
	}
	else if (InfoPlayer[playerid][pManoIzquierda] == 0)
	{
		InfoPlayer[playerid][pManoIzquierda] = idobj;
		InfoPlayer[playerid][pManoIzquierdaCant] = InfoInventario[idobj][DefaultCantidad];
		PonerObjeto(playerid, 2, idobj);
		ActualizarManos(playerid);
		format(gformat, sizeof gformat, "Mano izquierda: {FFBF00}%s{cccccc} usa /mano", InfoInventario[idobj][NombreObjeto]);
		SendClientMessage(playerid, 0xccccccff, gformat);
		return 1;
	}
	SendClientMessage(playerid, 0xebebebff, "Tienes ambas manos ocupadas!");
	return 0;
}

stock QuitarBolsillos(playerid)
{
	for (new x = 0; x < 10; x++)
	{
		InfoPlayer[playerid][pBolsillo][x] = 0;
		InfoPlayer[playerid][pBolsilloCant][x] = 0;
	}
	new que2ry[1000], query[2000];
	format(que2ry, sizeof que2ry, "UPDATE cuentas SET Bolsillo_1 = 0, Cantidad_bolsillo_1 = 0, Bolsillo_2 = 0, Cantidad_bolsillo_2 = 0, Bolsillo_3 = 0, Cantidad_bolsillo_3 = 0, Bolsillo_4 = 0, Cantidad_bolsillo_4 = 0, Bolsillo_5 = 0, Cantidad_bolsillo_5 = 0,");
	mysql_format(DBcreative, query, sizeof query, "%s Bolsillo_6 = 0, Cantidad_bolsillo_6 = 0, Bolsillo_7 = 0, Cantidad_bolsillo_7 = 0, Bolsillo_8 = 0, Cantidad_bolsillo_8 = 0, Bolsillo_9 = 0, Cantidad_bolsillo_9 = 0, Bolsillo_10 = 0, Cantidad_bolsillo_10 = 0 WHERE ID = '%d'", que2ry, InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
}

stock QuitarManos(playerid)
{
	InfoPlayer[playerid][pManoIzquierda] = 0;
	InfoPlayer[playerid][pManoIzquierdaCant] = 0;
	InfoPlayer[playerid][pManoDerecha] = 0;
	InfoPlayer[playerid][pManoDerechaCant] = 0;
	RemovePlayerAttachedObject(playerid, 7);
	RemovePlayerAttachedObject(playerid, 8);
	ResetPlayerWeapons(playerid);
	new query[500];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0, Mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
}

stock QuitarEspalda(playerid)
{
	InfoPlayer[playerid][pEspalda] = 0, InfoPlayer[playerid][pEspaldaCant] = 0;
	RemovePlayerAttachedObject(playerid, 9);
	new query[256];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Espalda = 0, Cantidad_espalda = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
}

GetNameObjeto(modelo)
{
	new ex_name[64];
	alm(ex_name, InfoInventario[modelo][NombreObjeto]);
	return ex_name;
}

slot_inv(id_objeto, cantidad)
{
	new mensaje[128];
	switch (id_objeto)
	{
		case 19..31: format(mensaje, sizeof(mensaje), "%s\t{FFBF00}%d balas", InfoInventario[id_objeto][NombreObjeto], cantidad);
		case 40: format(mensaje, sizeof(mensaje), "%s\t{FFBF00}%d cargas", InfoInventario[id_objeto][NombreObjeto], cantidad);
		case 41: format(mensaje, sizeof(mensaje), "%s\t{FFBF00}%d usos", InfoInventario[id_objeto][NombreObjeto], cantidad);
		case 43..46: format(mensaje, sizeof(mensaje), "%s\t{FFBF00}%d gramos", InfoInventario[id_objeto][NombreObjeto], cantidad);
		case 47,48,49: format(mensaje, sizeof(mensaje), "%s\t{FFBF00}%d usos", InfoInventario[id_objeto][NombreObjeto], cantidad);
		default:
		{
		    if (cantidad >= 2) format(mensaje, sizeof(mensaje), "%s\t{FFBF00}%d unidades", InfoInventario[id_objeto][NombreObjeto], cantidad);
		    else format(mensaje, sizeof(mensaje), "%s", InfoInventario[id_objeto][NombreObjeto]);
		}
	}
	return mensaje;
}

slot_objeto(id_objeto, cantidad)
{
	new mensaje[128];
	switch (id_objeto)
	{
		case 19..31: format(mensaje, sizeof(mensaje), "%s {FFBF00}(%d balas)", InfoInventario[id_objeto][NombreObjeto], cantidad);
		case 40: format(mensaje, sizeof(mensaje), "%s {FFBF00}(%d cargas)", InfoInventario[id_objeto][NombreObjeto], cantidad);
		case 41: format(mensaje, sizeof(mensaje), "%s {FFBF00}(%d usos)", InfoInventario[id_objeto][NombreObjeto], cantidad);
		case 43..46: format(mensaje, sizeof(mensaje), "%s {FFBF00}(%d gramos)", InfoInventario[id_objeto][NombreObjeto], cantidad);
		case 47,48,49: format(mensaje, sizeof(mensaje), "%s {FFBF00}(%d usos)", InfoInventario[id_objeto][NombreObjeto], cantidad);
		default:
		{
		    if (cantidad >= 2) format(mensaje, sizeof(mensaje), "%s {FFBF00}(%d unidades)", InfoInventario[id_objeto][NombreObjeto], cantidad);
		    else format(mensaje, sizeof(mensaje), "%s", InfoInventario[id_objeto][NombreObjeto]);
		}
	}
	return mensaje;
}

forward ActualizarManos(playerid);
public ActualizarManos(playerid)
{
	new ManoDer = InfoPlayer[playerid][pManoDerecha], ManoDerCant = InfoPlayer[playerid][pManoDerechaCant];
	if (ManoDer == 0) RemovePlayerAttachedObject(playerid, 7);
	if (InfoInventario[ManoDer][Arrojadizo] == 1 && ManoDerCant <= 0)
	{
		InfoPlayer[playerid][pManoDerecha] = 0;
		InfoPlayer[playerid][pManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
	}
	if (ManoDer > 0 && ManoDer < sizeof(InfoInventario))
	{
		if (ManoDerCant > InfoInventario[ManoDer][MaxCantidad])
		{
			if (InfoInventario[ManoDer][IDArma] > 0) { ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, InfoInventario[ManoDer][IDArma], InfoInventario[ManoDer][MaxCantidad]); }
			InfoPlayer[playerid][pManoDerechaCant] = InfoInventario[ManoDer][MaxCantidad];
		}
		if (ManoDer < 16 && ManoDerCant <= 0) { GivePlayerWeapon(playerid, InfoInventario[ManoDer][IDArma], 1); }
	}
	new ManoIzq = InfoPlayer[playerid][pManoIzquierda], ManoIzqCant = InfoPlayer[playerid][pManoIzquierdaCant];
	if (ManoIzq == 0) RemovePlayerAttachedObject(playerid, 8);
	if (ManoIzq > 0 && ManoIzq < sizeof(InfoInventario))
	{
		if (ManoIzqCant > InfoInventario[ManoIzq][MaxCantidad]) { InfoPlayer[playerid][pManoIzquierdaCant] = InfoInventario[ManoIzq][MaxCantidad]; }
		if (ManoIzq < 16 && ManoIzqCant <= 0) { InfoPlayer[playerid][pManoIzquierdaCant] = 1; }
	}
	if (InfoInventario[ManoIzq][Arrojadizo] == 1 && ManoIzqCant <= 0)
	{
		InfoPlayer[playerid][pManoIzquierda] = 0;
		InfoPlayer[playerid][pManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid, 8);
	}
	new query[500];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = '%d', Cantidad_mano_derecha = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
	InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
}

SetPosEx(playerid, Float: pot_x, Float: pot_y, Float: pot_z, Float: pot_r = 0.0, pot_int, pot_vw, guardable)
{
	//posiciones x,y,z,r
	if (pot_x != -1)
	{
		InfoPlayer[playerid][pPosicionX] = pot_x;
		InfoPlayer[playerid][pPosicionY] = pot_y;
		InfoPlayer[playerid][pPosicionZ] = pot_z;
		InfoPlayer[playerid][pPosicionR] = pot_r;
		SetPlayerPos(playerid, pot_x, pot_y, pot_z);
		SetPlayerFacingAngle(playerid, pot_r);
	}
	else { GetPlayerPos(playerid, InfoPlayer[playerid][pPosicionX], InfoPlayer[playerid][pPosicionY], InfoPlayer[playerid][pPosicionZ]); GetPlayerFacingAngle(playerid, InfoPlayer[playerid][pPosicionR]); }
	//interior
	if (pot_int != -1)
	{
		InfoPlayer[playerid][pInterior] = pot_int;
		SetPlayerInterior(playerid, pot_int);
	}
	else InfoPlayer[playerid][pInterior] = GetPlayerInterior(playerid);
	//virtualworld
	if (pot_vw != -1)
	{
		InfoPlayer[playerid][pVirtualWorld] = pot_vw;
		SetPlayerVirtualWorld(playerid, pot_vw);
	}
	else InfoPlayer[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
	if (guardable != 0)
	{
		//guardado mysql
		new query[1028];
		mysql_format(DBcreative, query, sizeof query , "UPDATE cuentas SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
		InfoPlayer[playerid][pPosicionX], InfoPlayer[playerid][pPosicionY], InfoPlayer[playerid][pPosicionZ], InfoPlayer[playerid][pPosicionR], InfoPlayer[playerid][pInterior], InfoPlayer[playerid][pVirtualWorld], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
    }
	return 1;
}

NombreJugador(playerid)
{
	new nameplayer[MAX_PLAYER_NAME + 2];
	GetPlayerName(playerid, nameplayer, sizeof nameplayer);

	if (InfoPlayer[playerid][pUsoMascara]) format(nameplayer, sizeof nameplayer, "Desconocido%d", RandomMascara[playerid]);
	else
	{
		for(new i = 0, j = strlen(nameplayer); i < j; i ++)
		{
			if(nameplayer[i] == '_')
			{
				nameplayer[i] = ' ';
			}
		}
	}
	return nameplayer;
}

NombreDeCuenta(playerid)
{
	new nameplayer[128];
	alm(nameplayer, InfoPlayer[playerid][pNombre_Apellido]);
	return nameplayer;
}

NombreOriginal(playerid)
{
	new nameplayer[128];
	if (InfoPlayer[playerid][pUsoMascara]) alm(nameplayer, InfoPlayer[playerid][pNombre_Apellido]);
	else GetPlayerName(playerid, nameplayer, sizeof nameplayer);
	return nameplayer;
}

Nombre2Original(playerid)
{
	new nameplayer[128];
	GetPlayerName(playerid, nameplayer, sizeof nameplayer);
	return nameplayer;
}

// objetos dinámicos en sql 06/03/2019 by EdinsonWalker
enum oInfo
{
	oID_sql,			// ID-DB
	oModelo,			// Modelo
	Float: oPotX,		// PotX
	Float: oPotY,		// PotY
	Float: oPotZ,		// PotZ
	Float: oRotX,		// RotX
	Float: oRotY,		// RotY
	Float: oRotZ,		// RotZ
	oInterior,			// Interior
	oVirtualWorld,		// VirtualWorld
	oObjeto,			// Objeto
};
new InfoObjeto[MAX_OBJETOS_ADMIN][oInfo];

forward CargarObjetosAdmin();
public CargarObjetosAdmin()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoObjeto[id][oID_sql]);
		reg_int(tabla, "Modelo", InfoObjeto[id][oModelo]);
		reg_float(tabla, "PotX", InfoObjeto[id][oPotX]);
		reg_float(tabla, "PotY", InfoObjeto[id][oPotY]);
		reg_float(tabla, "PotZ", InfoObjeto[id][oPotZ]);
		reg_float(tabla, "RotX", InfoObjeto[id][oRotX]);
		reg_float(tabla, "RotY", InfoObjeto[id][oRotY]);
		reg_float(tabla, "RotZ", InfoObjeto[id][oRotZ]);
		reg_int(tabla, "Interior", InfoObjeto[id][oInterior]);
		reg_int(tabla, "VirtualWorld", InfoObjeto[id][oVirtualWorld]);
		if (InfoObjeto[id][oID_sql]) totalobjetosadmin++;
		//función
		if (InfoObjeto[id][oPotX] != 0.0)
		{
			cargaditos++;
			InfoObjeto[id][oObjeto] = CreateDynamicObject(InfoObjeto[id][oModelo], InfoObjeto[id][oPotX], InfoObjeto[id][oPotY], InfoObjeto[id][oPotZ], InfoObjeto[id][oRotX], InfoObjeto[id][oRotY], InfoObjeto[id][oRotZ], .interiorid = InfoObjeto[id][oInterior], .worldid = InfoObjeto[id][oVirtualWorld]);
		}
	}
	printf("%d objetos dinámicos (SQL: %d) cargados correctamente.", cargaditos, totalobjetosadmin-1);
	return 1;
}

// vehículos dinámicos, renovación en sql 09/01/2019 by EdinsonWalker
new veh_gasolina[MAX_VEHICLES] = 200;

enum PVinfo
{
	vID_sql,                            // id en base de datos
	vIG_id,                             // id dentro del servidor (/dl)
	vNombre[128],                       // nombre
	vPropietario[MAX_PLAYER_NAME],      // propietario
	vTipo,								// tipo (0: usuarios, 1..50: facciones, 200: vip, 300: admin, 600: renta)
	vNegocio,
	vModelo,                            // modelo
	Float: vPosicionX,                  // X
	Float: vPosicionY,                  // Y
	Float: vPosicionZ,                  // Z
	Float: vPosicionR,                  // Angle
	vInterior,                          // Interior
	vVirtualWorld,                      // VirtualWorld
	Float: vVida,                       // Vida
	vDanioSuperficie,                   // Daño superficie
	vDanioPuertas,                      // Daño puertas
	vDanioLuces,                        // Daño luces
	vDanioRuedas,                       // Daño ruedas
	vGasolina,							// Gasolina
	vColor_1,                           // Color 1
	vColor_2,                           // Color 2
	vPaintJob,                          // Paint job
	vSeguro,							// Con seguro puesto
	vPrecio,                            // Precio
	vEmbargo,                           // Embargo
	vMulta,                             // Multa
	vMaletero[10],                      // Maletero
	vMaleteroCant[10],                  // Maletero cantidad
	vMaxMaletero,                       // Máximo maletero
	vModificacion[MAX_MODIFICACIONES],	// Tunning
	vModeloNeon,                        // Modelo neon
	vOnNeon,                            // Activo neon
	vCallSign[40],                      // Callsign
	vObjModelo[5],
	Float: vObjPosX[5],
	Float: vObjPosY[5],
	Float: vObjPosZ[5],
	Float: vObjRotX[5],
	Float: vObjRotY[5],
	Float: vObjRotZ[5],
	vSirena,                            // Sirena
	//no save:
	vSpawned,                           // Spawned
	vLlavePrestada,                     // Llave prestada
	vMaleteroOn,                        // 0 cerrado, 1 abierto
	vObjetoNeonL,                       // Pieza neon 1
	vObjetoNeonR,                       // Pieza neon 2
	vRentaDueno[MAX_PLAYER_NAME],       // Renta dueño
	vRentaTiempo,                       // Renta tiempo
	Text3D: vOnCallSign,                // Label callsign
	vTuneo[5],
};
new InfoVehiculo[MAX_VEHICULOS][PVinfo];

//sistema de objetos en vehículos (VIP)
#define Create_VehObject 690

new VehicleFurnObjs[] =
{
	1000,1001,1002,1003,1004,1005,1007,1018,1019,1021,1024,1029,1043,
    1044,1047,1048,1049,1050,1056,1090,2768, 11736,19147,19580,2690,
	19308,1550,19306,19307,18749,19054, 19314,2404,2405,2406,19317,19318,
	2232,1840,19471,19878,19893,19894,19873,19874,19624,19621,19620,19078,
	1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,
	1096,1097,1098,
};

SetVehicleExVirtualWorld(vehicleid, vw)
{
	SetVehicleVirtualWorld(vehicleid, vw);
	Loop(id, totalvehiculos, 0) if (InfoVehiculo[id][vIG_id] == vehicleid)
	{
		Colocar_Neon(id, vehicleid);
		Colocar_Objeto(id, vehicleid);
	}
}

forward CargarVehiculos();
public CargarVehiculos()
{
	Loop(xd, MAX_VEHICULOS, 0)
	{
		InfoVehiculo[xd][vMaleteroOn] = 0;
		InfoVehiculo[xd][vRentaTiempo] = 0;
		alm(InfoVehiculo[xd][vRentaDueno], "none");
		InfoVehiculo[xd][vLlavePrestada] = -1;
		alm(InfoVehiculo[xd][vCallSign], "");
	}
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoVehiculo[id][vID_sql]);
		reg_string(tabla, "Nombre", InfoVehiculo[id][vNombre], 128);
		reg_string(tabla, "Propietario", InfoVehiculo[id][vPropietario], MAX_PLAYER_NAME);
		reg_int(tabla, "Tipo", InfoVehiculo[id][vTipo]);
		reg_int(tabla, "Negocio", InfoVehiculo[id][vNegocio]);
		reg_int(tabla, "Modelo", InfoVehiculo[id][vModelo]);
		reg_float(tabla, "Posicion_X", InfoVehiculo[id][vPosicionX]);
		reg_float(tabla, "Posicion_Y", InfoVehiculo[id][vPosicionY]);
		reg_float(tabla, "Posicion_Z", InfoVehiculo[id][vPosicionZ]);
		reg_float(tabla, "Posicion_R", InfoVehiculo[id][vPosicionR]);
		reg_int(tabla, "Interior", InfoVehiculo[id][vInterior]);
		reg_int(tabla, "VirtualWorld", InfoVehiculo[id][vVirtualWorld]);
		reg_float(tabla, "Vida", InfoVehiculo[id][vVida]);
		reg_int(tabla, "DanioSuperficie", InfoVehiculo[id][vDanioSuperficie]);
		reg_int(tabla, "DanioPuertas", InfoVehiculo[id][vDanioPuertas]);
		reg_int(tabla, "DanioLuces", InfoVehiculo[id][vDanioLuces]);
		reg_int(tabla, "DanioRuedas", InfoVehiculo[id][vDanioRuedas]);
		reg_int(tabla, "Gasolina", InfoVehiculo[id][vGasolina]);
		reg_int(tabla, "Color_1", InfoVehiculo[id][vColor_1]);
		reg_int(tabla, "Color_2", InfoVehiculo[id][vColor_2]);
		reg_int(tabla, "PaintJob", InfoVehiculo[id][vPaintJob]);
		reg_int(tabla, "ConSeguro", InfoVehiculo[id][vSeguro]);
		reg_int(tabla, "Precio", InfoVehiculo[id][vPrecio]);
		reg_int(tabla, "Embargo", InfoVehiculo[id][vEmbargo]);
		reg_int(tabla, "Multa", InfoVehiculo[id][vMulta]);
		reg_int(tabla, "Maletero1", InfoVehiculo[id][vMaletero][0]);
		reg_int(tabla, "MaleteroCant1", InfoVehiculo[id][vMaleteroCant][0]);
		reg_int(tabla, "Maletero2", InfoVehiculo[id][vMaletero][1]);
		reg_int(tabla, "MaleteroCant2", InfoVehiculo[id][vMaleteroCant][1]);
		reg_int(tabla, "Maletero3", InfoVehiculo[id][vMaletero][2]);
		reg_int(tabla, "MaleteroCant3", InfoVehiculo[id][vMaleteroCant][2]);
		reg_int(tabla, "Maletero4", InfoVehiculo[id][vMaletero][3]);
		reg_int(tabla, "MaleteroCant4", InfoVehiculo[id][vMaleteroCant][3]);
		reg_int(tabla, "Maletero5", InfoVehiculo[id][vMaletero][4]);
		reg_int(tabla, "MaleteroCant5", InfoVehiculo[id][vMaleteroCant][4]);
		reg_int(tabla, "Maletero6", InfoVehiculo[id][vMaletero][5]);
		reg_int(tabla, "MaleteroCant6", InfoVehiculo[id][vMaleteroCant][5]);
		reg_int(tabla, "Maletero7", InfoVehiculo[id][vMaletero][6]);
		reg_int(tabla, "MaleteroCant7", InfoVehiculo[id][vMaleteroCant][6]);
		reg_int(tabla, "Maletero8", InfoVehiculo[id][vMaletero][7]);
		reg_int(tabla, "MaleteroCant8", InfoVehiculo[id][vMaleteroCant][7]);
		reg_int(tabla, "Maletero9", InfoVehiculo[id][vMaletero][8]);
		reg_int(tabla, "MaleteroCant9", InfoVehiculo[id][vMaleteroCant][8]);
		reg_int(tabla, "Maletero10", InfoVehiculo[id][vMaletero][9]);
		reg_int(tabla, "MaleteroCant10", InfoVehiculo[id][vMaleteroCant][9]);
		reg_int(tabla, "MaxMaletero", InfoVehiculo[id][vMaxMaletero]);
		reg_int(tabla, "Modificacion1", InfoVehiculo[id][vModificacion][0]);
		reg_int(tabla, "Modificacion2", InfoVehiculo[id][vModificacion][1]);
		reg_int(tabla, "Modificacion3", InfoVehiculo[id][vModificacion][2]);
		reg_int(tabla, "Modificacion4", InfoVehiculo[id][vModificacion][3]);
		reg_int(tabla, "Modificacion5", InfoVehiculo[id][vModificacion][4]);
		reg_int(tabla, "Modificacion6", InfoVehiculo[id][vModificacion][5]);
		reg_int(tabla, "Modificacion7", InfoVehiculo[id][vModificacion][6]);
		reg_int(tabla, "Modificacion8", InfoVehiculo[id][vModificacion][7]);
		reg_int(tabla, "Modificacion9", InfoVehiculo[id][vModificacion][8]);
		reg_int(tabla, "Modificacion10", InfoVehiculo[id][vModificacion][9]);
		reg_int(tabla, "Modificacion11", InfoVehiculo[id][vModificacion][10]);
		reg_int(tabla, "Modificacion12", InfoVehiculo[id][vModificacion][11]);
		reg_int(tabla, "Modificacion13", InfoVehiculo[id][vModificacion][12]);
		reg_int(tabla, "Modificacion14", InfoVehiculo[id][vModificacion][13]);
		reg_int(tabla, "Modificacion15", InfoVehiculo[id][vModificacion][14]);
		reg_int(tabla, "ModeloNeon", InfoVehiculo[id][vModeloNeon]);
		reg_int(tabla, "OnNeon", InfoVehiculo[id][vOnNeon]);
		reg_string(tabla, "CallSign", InfoVehiculo[id][vCallSign], 40);
		reg_int(tabla, "ObjModelo_1", InfoVehiculo[id][vObjModelo][0]);
		reg_float(tabla, "ObjPosX_1", InfoVehiculo[id][vObjPosX][0]);
		reg_float(tabla, "ObjPosY_1", InfoVehiculo[id][vObjPosY][0]);
		reg_float(tabla, "ObjPosZ_1", InfoVehiculo[id][vObjPosZ][0]);
		reg_float(tabla, "ObjRotX_1", InfoVehiculo[id][vObjRotX][0]);
		reg_float(tabla, "ObjRotY_1", InfoVehiculo[id][vObjRotY][0]);
		reg_float(tabla, "ObjRotZ_1", InfoVehiculo[id][vObjRotZ][0]);
		reg_int(tabla, "ObjModelo_2", InfoVehiculo[id][vObjModelo][1]);
		reg_float(tabla, "ObjPosX_2", InfoVehiculo[id][vObjPosX][1]);
		reg_float(tabla, "ObjPosY_2", InfoVehiculo[id][vObjPosY][1]);
		reg_float(tabla, "ObjPosZ_2", InfoVehiculo[id][vObjPosZ][1]);
		reg_float(tabla, "ObjRotX_2", InfoVehiculo[id][vObjRotX][1]);
		reg_float(tabla, "ObjRotY_2", InfoVehiculo[id][vObjRotY][1]);
		reg_float(tabla, "ObjRotZ_2", InfoVehiculo[id][vObjRotZ][1]);
		reg_int(tabla, "ObjModelo_3", InfoVehiculo[id][vObjModelo][2]);
		reg_float(tabla, "ObjPosX_3", InfoVehiculo[id][vObjPosX][2]);
		reg_float(tabla, "ObjPosY_3", InfoVehiculo[id][vObjPosY][2]);
		reg_float(tabla, "ObjPosZ_3", InfoVehiculo[id][vObjPosZ][2]);
		reg_float(tabla, "ObjRotX_3", InfoVehiculo[id][vObjRotX][2]);
		reg_float(tabla, "ObjRotY_3", InfoVehiculo[id][vObjRotY][2]);
		reg_float(tabla, "ObjRotZ_3", InfoVehiculo[id][vObjRotZ][2]);
		reg_int(tabla, "ObjModelo_4", InfoVehiculo[id][vObjModelo][3]);
		reg_float(tabla, "ObjPosX_4", InfoVehiculo[id][vObjPosX][3]);
		reg_float(tabla, "ObjPosY_4", InfoVehiculo[id][vObjPosY][3]);
		reg_float(tabla, "ObjPosZ_4", InfoVehiculo[id][vObjPosZ][3]);
		reg_float(tabla, "ObjRotX_4", InfoVehiculo[id][vObjRotX][3]);
		reg_float(tabla, "ObjRotY_4", InfoVehiculo[id][vObjRotY][3]);
		reg_float(tabla, "ObjRotZ_4", InfoVehiculo[id][vObjRotZ][3]);
		reg_int(tabla, "ObjModelo_5", InfoVehiculo[id][vObjModelo][4]);
		reg_float(tabla, "ObjPosX_5", InfoVehiculo[id][vObjPosX][4]);
		reg_float(tabla, "ObjPosY_5", InfoVehiculo[id][vObjPosY][4]);
		reg_float(tabla, "ObjPosZ_5", InfoVehiculo[id][vObjPosZ][4]);
		reg_float(tabla, "ObjRotX_5", InfoVehiculo[id][vObjRotX][4]);
		reg_float(tabla, "ObjRotY_5", InfoVehiculo[id][vObjRotY][4]);
		reg_float(tabla, "ObjRotZ_5", InfoVehiculo[id][vObjRotZ][4]);
		reg_int(tabla, "Sirena", InfoVehiculo[id][vSirena]);
		if (InfoVehiculo[id][vID_sql]) totalvehiculos++;
		if (InfoVehiculo[id][vModelo] != 0) cargaditos++;
		if (InfoVehiculo[id][vTipo] != 0 || InfoVehiculo[id][vNegocio] != 0)
		{
			new Coche;
			Coche = CreateVehicle(InfoVehiculo[id][vModelo], InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ], InfoVehiculo[id][vPosicionR], InfoVehiculo[id][vColor_1], InfoVehiculo[id][vColor_2], -1, InfoVehiculo[id][vSirena]);
			InfoVehiculo[id][vIG_id] = Coche;
			InfoVehiculo[id][vSpawned] = 1;
			veh_gasolina[Coche] = InfoVehiculo[id][vGasolina];
			if (InfoVehiculo[id][vModelo] == 528 || InfoVehiculo[id][vModelo] == 427) SetVehicleHealth(Coche, 5000.0);
			else SetVehicleHealth(Coche, InfoVehiculo[id][vVida]);
			LinkVehicleToInterior(Coche, InfoVehiculo[id][vInterior]);
			SetVehicleExVirtualWorld(Coche, InfoVehiculo[id][vVirtualWorld]);
			UpdateVehicleDamageStatus(Coche, InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas]);
			if (InfoVehiculo[id][vSeguro] != 0) LockPlayerVehicle(Coche);
			Load_Mods(id);
			if (!isnull(InfoVehiculo[id][vCallSign]))
			{
				DestroyDynamic3DTextLabel(InfoVehiculo[id][vOnCallSign]);
				InfoVehiculo[id][vOnCallSign] = CreateDynamic3DTextLabel(InfoVehiculo[id][vCallSign], 0xEBEBEBFF, -1.0, -2.8, 0.0, 30.0, INVALID_PLAYER_ID, Coche);
			}
		}
	}
	printf("%d vehículos dinámicos (SQL: %d) cargados correctamente.", cargaditos, totalvehiculos-1);
	return 1;
}

CountVehs(type)
{
	new count = 0;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vTipo] == type)
	{
		count++;
	}
	return count;
}

verificar_id_vehiculo(vehicleid)
{
	new id = -1;
	Loop(x, totalvehiculos, 1) if (InfoVehiculo[x][vIG_id] == vehicleid)
	{
		id = x;
		break;
	}
	return id;
}

llaves_vehiculo(playerid, vehicleid)
{
	if (!IsPlayerConnected(playerid)) return -1;
	if (!GetVehicleModel(vehicleid)) return -1;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid && InfoVehiculo[v][vTipo] == 0)
	{
		if (strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[v][vPropietario], true) == 0)
		{
			return v;
		}
	}
	return -1;
}

Vehiculo_LSPD(vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[id][vTipo] == 1) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

Vehiculo_FBI(vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[id][vTipo] == 2) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

Vehiculo_SAEM(vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[id][vTipo] == 3) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

Vehiculo_SASD(vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[id][vTipo] == 4) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

Vehiculo_GOB(vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[id][vTipo] == 5) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

Vehiculo_Renta(vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[id][vTipo] == 600) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

llaves_lider(playerid, vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid && InfoVehiculo[id][vTipo] != 0)
	{
		if (InfoPlayer[playerid][pLider] == InfoVehiculo[id][vTipo]) return 1; //afirmativo, tiene acceso
		if (InfoPlayer[playerid][pMiembro] == InfoVehiculo[id][vTipo])
			if (InfoPlayer[playerid][pRango] == InfoFaccion[InfoPlayer[playerid][pMiembro]][fMaxRangos]) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

llaves_faccion(playerid, vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid && InfoVehiculo[id][vTipo] != 0)
	{
		if (InfoPlayer[playerid][pMiembro] == InfoVehiculo[id][vTipo]) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

llaves_negocio(playerid, vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid && InfoVehiculo[id][vNegocio] != 0)
	{
		if (InfoPlayer[playerid][pContrato] == InfoVehiculo[id][vNegocio]) return 1; //afirmativo, tiene acceso
		if (InfoPlayer[playerid][pNegocio1] == InfoVehiculo[id][vNegocio]) return 1; //afirmativo, tiene acceso
		if (InfoPlayer[playerid][pNegocio2] == InfoVehiculo[id][vNegocio]) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

llaves_renta(playerid, vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid && InfoVehiculo[id][vTipo] == 600)
	{
		if (strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[id][vRentaDueno], true) == 0)
		{
			return 1;
		}
		if (GetPlayerAdmin(playerid, 6) != 0) return 1;
	}
	return 0;
}

llaves_vip(playerid, vehicleid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid && InfoVehiculo[id][vTipo] != 0)
	{
		if (InfoPlayer[playerid][pVIP] != 0) return 1; //afirmativo, tiene acceso
	}
	return 0;
}

forward vehiculos_legales(vehicleid);
public vehiculos_legales(vehicleid) //vehicleid legales
{
	if (Vehiculo_LSPD(vehicleid) || Vehiculo_FBI(vehicleid) || Vehiculo_SAEM(vehicleid) || Vehiculo_SASD(vehicleid) || Vehiculo_GOB(vehicleid))
	{
		return 1;
	}
	return 0;
}

// cajeros automáticos en sql - julio 2019
enum atmInfo
{
	atmID_sql,						// ID-DB
	atmModelo,						// Modelo
	atmDinero,						// Dinero
	Float: atmPotX,					// PotX
	Float: atmPotY,              	// PotY
	Float: atmPotZ,              	// PotZ
	Float: atmRotX,              	// RotX
	Float: atmRotY,              	// RotY
	Float: atmRotZ,              	// RotZ
	atmInterior,                 	// Interior
	atmVirtualWorld,             	// VirtualWorld
	atmObject,                   	// Objeto
	Text3D: atmLabel,            	// 3d label
};
new InfoCajero[MAX_CAJEROS][atmInfo];

forward CargarCajeros();
public CargarCajeros()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoCajero[id][atmID_sql]);
		reg_int(tabla, "Modelo", InfoCajero[id][atmModelo]);
		reg_int(tabla, "BolosUwU", InfoCajero[id][atmDinero]);
		reg_float(tabla, "PotX", InfoCajero[id][atmPotX]);
		reg_float(tabla, "PotY", InfoCajero[id][atmPotY]);
		reg_float(tabla, "PotZ", InfoCajero[id][atmPotZ]);
		reg_float(tabla, "RotX", InfoCajero[id][atmRotX]);
		reg_float(tabla, "RotY", InfoCajero[id][atmRotY]);
		reg_float(tabla, "RotZ", InfoCajero[id][atmRotZ]);
		reg_int(tabla, "Interior", InfoCajero[id][atmInterior]);
		reg_int(tabla, "VirtualWorld", InfoCajero[id][atmVirtualWorld]);
		if (InfoCajero[id][atmID_sql]) totalcajeros++;
		//función
		if (InfoCajero[id][atmPotX] != 0.0)
		{
			cargaditos++;
			Label_cajero(id, 1);
		}
	}
	printf("%d cajeros automáticos (SQL: %d) cargados correctamente.", cargaditos, totalcajeros-1);
	return 1;
}

Label_cajero(id, type)
{
	//info new
	new atm_label[470];
	format(atm_label, sizeof atm_label, "{EBEBEB}ATM {FFBF00}%d\n{EBEBEB}Dinero: {00CC00}$%s\n{EBEBEB}Aquí puedes usar {FFBF00}/cajero{EBEBEB} para tus operaciones", id, diner_coma(InfoCajero[id][atmDinero]));
	if (type == 1)
	{
		DestroyDynamicObject(InfoCajero[id][atmObject]);
		DestroyDynamic3DTextLabel(Text3D: InfoCajero[id][atmLabel]);
		InfoCajero[id][atmObject] = CreateDynamicObject(InfoCajero[id][atmModelo], InfoCajero[id][atmPotX], InfoCajero[id][atmPotY], InfoCajero[id][atmPotZ], InfoCajero[id][atmRotX], InfoCajero[id][atmRotY], InfoCajero[id][atmRotZ], .interiorid = InfoCajero[id][atmInterior], .worldid = InfoCajero[id][atmVirtualWorld]);
		InfoCajero[id][atmLabel] = CreateDynamic3DTextLabel(atm_label, -1, InfoCajero[id][atmPotX], InfoCajero[id][atmPotY], InfoCajero[id][atmPotZ] + 0.4, 8.0, .interiorid = InfoCajero[id][atmInterior], .worldid = InfoCajero[id][atmVirtualWorld]);
	}
	else UpdateDynamic3DTextLabelText(InfoCajero[id][atmLabel], -1, atm_label);
}

//system neones by edinson
Es_Neon(modelo)
{
	new gformat[32];
	switch (modelo)
	{
		case 18647: alm(gformat, "rojo");
		case 18648: alm(gformat, "azul");
		case 18649: alm(gformat, "verde");
		case 18650: alm(gformat, "amarillo");
		case 18651: alm(gformat, "rosado");
		case 18652: alm(gformat, "blanco");
	}
	return gformat;
}

#define MAX_VEHICLE_NAME			27

enum vSync_Vehicle_Info
{
	NombreVehicle[MAX_VEHICLE_NAME],
	Seats,
	Windows,
	Float:Mass,
	DriveType,
	EngineType,
	MaxSpeed,
	bool:Nitro,
	Float: NeonOffsetX,
	Float: NeonOffsetY,
    Float: NeonOffsetZ
}

static const vSync_VehicleInfo[212][vSync_Vehicle_Info] =
{
	{"Landstalker", 4, 4, 1700.0, '4', 'D', 159, true, -0.924996, 0.009998, -0.674996},
	{"Bravura", 2, 2, 1300.0, 'F', 'P', 148, true, -0.979999, 0.074997, -0.489998},
	{"Buffalo", 2, 2, 1500.0, 'R', 'P', 188, true, -1.034999, -0.029998, -0.579999},
	{"Linerunner", 2, 2, 3800.0, 'R', 'D', 111, true, -0.884998, 1.834998, -1.099997},
	{"Perennial", 4, 4, 1200.0, 'F', 'P', 134, true, -0.839999, -0.064998, -0.419999},
	{"Sentinel", 4, 4, 1600.0, 'R', 'P', 165, true, -0.914999, 0.000000, -0.534999},
	{"Dumper", 1, 1, 20000.0, 'R', 'D', 111, true, -1.129999, 0.354999, -1.219998},
	{"Firetruck", 2, 2, 6500.0, 'R', 'D', 150, true, -1.214998, 0.125000, -0.759998},
	{"Trashmaster", 2, 2, 5500.0, 'R', 'D', 101, true, -0.664999, 0.709999, -0.889998},
	{"Stretch", 4, 4, 2200.0, 'R', 'P', 159, true, -0.914999, -0.294999, -0.474999},
	{"Manana", 2, 2, 1000.0, 'F', 'P', 131, true, -0.879998, 0.000000, -0.389999},
	{"Infernus", 2, 2, 1400.0, '4', 'P', 223, true, -0.969999, 0.004999, -0.559997},
	{"Voodoo", 2, 2, 1800.0, 'R', 'P', 170, true, -0.994997, -0.154999, -0.569998},
	{"Pony", 4, 4, 2600.0, 'R', 'D', 111, true, -0.919999, -0.069999, -0.719999},
	{"Mule", 2, 2, 3500.0, 'R', 'D', 107, true, -0.759998, -0.469998, -0.524999},
	{"Cheetah", 2, 2, 1200.0, 'R', 'P', 194, true, -0.949998, -0.009998, -0.524999},
	{"Ambulance", 4, 4, 2600.0, '4', 'D', 155, true, -1.259999, -0.604999, -0.664999},
	{"Leviathan", 2, 2, 15000.0, '4', 'P', 143, false, -2.255002, 0.859999, -0.124999},
	{"Moonbeam", 4, 4, 2000.0, 'R', 'D', 116, true, -1.004999, 0.089997, -0.829999},
	{"Esperanto", 2, 2, 1800.0, 'R', 'P', 150, true, -0.934997, -0.009998, -0.584999},
	{"Taxi", 4, 4, 1450.0, 'F', 'P', 146, true, -0.954999, -0.009998, -0.444999},
	{"Washington", 2, 2, 1850.0, 'R', 'P', 155, true, -0.929997, -0.029998, -0.589999},
	{"Bobcat", 2, 2, 1700.0, '4', 'D', 141, true, -0.889998, 0.009998, -0.609999},
	{"Mr. Whoopee", 2, 2, 1700.0, 'R', 'D', 100, true, -0.999997, 0.164995, -0.714999},
	{"BF Injection", 2, 0, 1200.0, 'R', 'P', 137, true, -0.739997, 0.039999, -0.234999},
	{"Hunter", 1, 1, 10000.0, '4', 'P', 214, false, -0.639998, 2.475008, -0.789999},
	{"Premier", 4, 4, 1600.0, 'R', 'P', 175, true, -0.969999, 0.000000, -0.464998},
	{"Enforcer", 4, 4, 4000.0, 'R', 'D', 167, true, -1.124999, -0.714999, -0.734999},
	{"Securicar", 4, 2, 7000.0, 'R', 'D', 158, true, -1.124999, 0.054999, -0.759998},
	{"Banshee", 2, 2, 1400.0, 'R', 'P', 203, true, -0.844999, 0.004999, -0.474999},
	{"Predator", 1, 0, 2200.0, 'R', 'P', 184, false, 0.000000, 0.000000, 0.000000},
	{"Bus", 9, 2, 5500.0, 'R', 'D', 131, true, -1.304998, 2.300004, -0.714999},
	{"Rhino", 1, 0, 25000.0, '4', 'D', 95, true, 0.000000, 0.000000, 0.000000},
	{"Barracks", 2, 2, 10500.0, '4', 'D', 112, true, -0.579999, 0.994997, -0.874997},
	{"Hotknife", 2, 2, 1400.0, 'R', 'P', 169, true, 0.000000, 0.000000, 0.000000},
	{"Article Trailer", 1, 0, 3800.0, 'R', 'D', 0, true, 0.000000, 0.000000, 0.000000},
	{"Previon", 2, 2, 1400.0, 'F', 'P', 150, true, -0.859999, -0.024999, -0.489998},
	{"Coach", 9, 0, 9500.0, 'R', 'D', 159, true, -1.314998, 2.245002, -0.724999},
	{"Cabbie", 4, 4, 1750.0, 'R', 'P', 144, true, -0.969999, -0.034999, -0.674996},
	{"Stallion", 2, 2, 1600.0, 'R', 'P', 170, true, -0.884998, 0.034999, -0.644999},
	{"Rumpo", 4, 4, 2000.0, 'F', 'P', 137, true, -0.914999, -0.045000, -0.899999},
	{"RC Bandit", 1, 0, 100.0, '4', 'E', 76, true, 0.000000, 0.000000, 0.000000},
	{"Romero", 2, 2, 2500.0, 'R', 'P', 140, true, -1.004999, -0.074997, -0.604999},
	{"Packer", 2, 2, 8000.0, 'R', 'D', 127, true, -0.809997, 2.770015, -1.174998},
	{"Monster", 2, 2, 5000.0, '4', 'P', 111, true, -1.064998, 0.000000, 0.135000},
	{"Admiral", 4, 4, 1650.0, 'F', 'P', 165, true, -0.949998, 0.000000, -0.519999},
	{"Squallo", 1, 0, 2200.0, 'R', 'P', 240, false, 0.000000, 0.000000, 0.000000},
	{"Seasparrow", 2, 2, 3000.0, '4', 'P', 145, false, -1.004999, 0.259999, -0.769999},
	{"Pizzaboy", 1, 0, 350.0, 'R', 'P', 190, false, 0.000000, 0.000000, 0.000000},
	{"Tram", 2, 0, 1900.0, 'R', 'P', 185, false, 0.000000, 0.000000, 0.000000},
	{"Article Trailer 2", 1, 0, 3800.0, 'R', 'D', 0, true, 0.000000, 0.000000, 0.000000},
	{"Turismo", 2, 2, 1400.0, '4', 'P', 195, true, -0.984999, -0.194995, -0.519999},
	{"Speeder", 1, 0, 2200.0, 'R', 'P', 183, false, 0.000000, 0.000000, 0.000000},
	{"Reefer", 1, 0, 5000.0, 'R', 'P', 57, false, 0.000000, 0.000000, 0.000000},
	{"Tropic", 1, 0, 2200.0, 'R', 'P', 130, false, 0.000000, 0.000000, 0.000000},
	{"Flatbed", 2, 2, 8500.0, 'R', 'D', 159, true, -0.579999, 0.979999, -0.859999},
	{"Yankee", 2, 2, 4500.0, 'R', 'D', 107, true, -0.764998, -0.179995, -0.464998},
	{"Caddy", 2, 0, 1000.0, '4', 'E', 96, true, 0.000000, 0.000000, 0.000000},
	{"Solair", 4, 4, 2000.0, 'R', 'P', 159, true, -0.959999, -0.039999, -0.594999},
	{"Topfun Van (Berkley's RC)", 4, 4, 1900.0, 'R', 'D', 137, true, -0.919999, -0.069999, -0.719999},
	{"Skimmer", 2, 2, 5000.0, '4', 'P', 135, false, -1.399996, 0.554997, -1.819998},
	{"PCJ-600", 2, 0, 500.0, 'R', 'P', 207, false, 0.000000, 0.000000, 0.000000},
	{"Faggio", 2, 0, 350.0, 'R', 'P', 190, false, 0.000000, 0.000000, 0.000000},
	{"Freeway", 2, 0, 800.0, 'R', 'P', 210, false, 0.000000, 0.000000, 0.000000},
	{"RC Baron", 1, 0, 100.0, 'F', 'P', 45, true, 0.000000, 0.000000, 0.000000},
	{"RC Raider", 1, 0, 100.0, '4', 'P', 50, true, 0.000000, 0.000000, 0.000000},
	{"Glendale", 4, 4, 1600.0, 'R', 'P', 148, true, -0.989997, -0.064998, -0.489998},
	{"Oceanic", 4, 4, 1900.0, 'R', 'P', 142, true, -0.989997, -0.044998, -0.484999},
	{"Sanchez", 2, 0, 500.0, 'R', 'P', 186, false, 0.000000, 0.000000, 0.000000},
	{"Sparrow", 2, 2, 2500.0, '4', 'P', 145, false, 0.000000, 0.000000, 0.000000},
	{"Patriot", 4, 4, 2500.0, '4', 'P', 158, true, -1.119999, -0.149995, -0.359999},
	{"Quad", 2, 0, 400.0, '4', 'P', 111, true, 0.000000, 0.000000, 0.000000},
	{"Coastguard", 1, 0, 1200.0, 'R', 'P', 125, false, 0.000000, 0.000000, 0.000000},
	{"Dinghy", 1, 0, 800.0, 'R', 'P', 107, false, 0.000000, 0.000000, 0.000000},
	{"Hermes", 2, 2, 1950.0, 'F', 'P', 150, true, -0.994997, -0.064998, -0.544999},
	{"Sabre", 2, 2, 1700.0, 'R', 'P', 175, true, -0.904999, -0.054999, -0.549996},
	{"Rustler", 1, 1, 5000.0, '4', 'P', 220, false, 0.000000, 0.000000, 0.000000},
	{"ZR-350", 2, 2, 1400.0, 'R', 'P', 188, true, -0.979999, 0.019997, -0.514998},
	{"Walton", 2, 2, 1850.0, '4', 'D', 119, true, -0.804997, 0.064998, -0.519999},
	{"Regina", 4, 4, 1500.0, 'F', 'P', 141, true, -0.854999, 0.090000, -0.454997},
	{"Comet", 2, 2, 1400.0, '4', 'P', 186, true, -0.879998, 0.000000, -0.489998},
	{"BMX", 1, 0, 100.0, 'R', 'P', 97, false, 0.000000, 0.000000, 0.000000},
	{"Burrito", 2, 4, 1900.0, 'R', 'P', 158, true, -0.989997, 0.000000, -0.759998},
	{"Camper", 3, 3, 1900.0, 'R', 'P', 124, true, -0.834999, -0.149995, -0.744997},
	{"Marquis", 1, 0, 5000.0, 'R', 'P', 64, false, 0.000000, 0.000000, 0.000000},
	{"Baggage", 1, 0, 1000.0, 'R', 'E', 100, true, -0.629998, 0.164995, -0.374998},
	{"Dozer", 1, 0, 10000.0, '4', 'D', 65, true, 0.000000, 0.000000, 0.000000},
	{"Maverick", 4, 4, 5000.0, '4', 'P', 181, false, 0.000000, 0.000000, 0.000000},
	{"News Chopper", 2, 2, 3500.0, '4', 'P', 170, false, 0.000000, 0.000000, 0.000000},
	{"Rancher", 2, 2, 2500.0, '4', 'P', 141, true, -1.019999, 0.109999, -0.679997},
	{"FBI Rancher", 4, 4, 3500.0, '4', 'P', 158, true, -1.054998, 0.125000, -0.604999},
	{"Virgo", 2, 2, 1700.0, 'R', 'P', 150, true, -0.874997, -0.009998, -0.569998},
	{"Greenwood", 4, 4, 1600.0, 'R', 'P', 142, true, -0.909999, 0.000000, -0.459998},
	{"Jetmax", 1, 0, 3000.0, 'R', 'P', 183, false, 0.000000, 0.000000, 0.000000},
	{"Hotring Racer", 2, 2, 1600.0, 'R', 'P', 217, true, -0.909999, -0.199999, -0.639998},
	{"Sandking", 2, 2, 2000.0, '4', 'P', 178, true, -1.024999, 0.184999, -0.809997},
	{"Blista Compact", 2, 2, 1000.0, 'F', 'P', 164, true, -0.854999, 0.029998, -0.469998},
	{"Police Maverick", 4, 4, 4500.0, '4', 'P', 190, false, 0.000000, 0.000000, 0.000000},
	{"Boxville", 4, 2, 5500.0, 'R', 'D', 109, true, -1.149999, 0.269998, -0.654999},
	{"Benson", 2, 2, 3500.0, 'R', 'D', 124, true, -0.969999, -1.404996, -0.199999},
	{"Mesa", 2, 2, 1300.0, '4', 'D', 142, true, -0.969999, 0.189998, -0.574998},
	{"RC Goblin", 1, 0, 100.0, '4', 'P', 30, true, 0.000000, 0.000000, 0.000000},
	{"Hotring Racer A", 2, 2, 1600.0, 'R', 'P', 217, true, -0.909999, 0.029998, -0.639998},
	{"Hotring Racer B", 2, 2, 1600.0, 'R', 'P', 217, true, -0.909999, -0.184999, -0.639998},
	{"Bloodring Banger", 2, 2, 2100.0, 'R', 'P', 175, true, -0.989997, -0.059999, -0.494998},
	{"Rancher (Lure)", 2, 2, 2500.0, '4', 'P', 141, true, -1.019999, 0.109999, -0.679997},
	{"Super GT", 2, 2, 1400.0, 'R', 'P', 181, true, -0.904999, -0.249999, -0.509998},
	{"Elegant", 4, 4, 2200.0, 'R', 'P', 167, true, -1.084998, -0.024999, -0.589999},
	{"Journey", 2, 3, 3500.0, 'R', 'D', 109, true, -1.334998, -0.424997, -0.979999},
	{"Bike", 1, 0, 100.0, 'R', 'P', 105, false, 0.000000, 0.000000, 0.000000},
	{"Mountain Bike", 1, 0, 100.0, 'R', 'P', 130, false, 0.000000, 0.000000, 0.000000},
	{"Beagle", 2, 2, 10000.0, '4', 'P', 133, false, 0.000000, 0.000000, 0.000000},
	{"Cropduster", 1, 1, 5000.0, '4', 'P', 115, false, 0.000000, 0.000000, 0.000000},
	{"Stuntplane", 1, 1, 5000.0, '4', 'P', 151, false, 0.000000, 0.000000, 0.000000},
	{"Tanker", 2, 2, 3800.0, 'R', 'D', 122, true, -0.969999, 1.669998, -1.174998},
	{"Roadtrain", 2, 2, 5000.0, 'R', 'D', 144, true, -1.454998, 0.439999, -1.854997},
	{"Nebula", 4, 4, 1400.0, 'F', 'P', 159, true, -0.989997, 0.024999, -0.584999},
	{"Majestic", 2, 2, 1400.0, 'R', 'P', 159, true, -0.959999, 0.004999, -0.554997},
	{"Buccaneer", 2, 2, 1700.0, 'R', 'P', 166, true, -1.049998, 0.109999, -0.439999},
	{"Shamal", 1, 0, 15000.0, '4', 'P', 272, false, 0.000000, 0.000000, 0.000000},
	{"Hydra", 1, 1, 9000.0, '4', 'P', 272, false, 0.000000, 0.000000, 0.000000},
	{"FCR-900", 2, 0, 500.0, 'R', 'P', 209, false, 0.000000, 0.000000, 0.000000},
	{"NRG-500", 2, 0, 400.0, 'R', 'P', 209, false, 0.000000, 0.000000, 0.000000},
	{"HPV1000", 2, 0, 500.0, 'R', 'P', 197, false, 0.000000, 0.000000, 0.000000},
	{"Cement Truck", 2, 2, 5500.0, 'R', 'D', 131, true, -0.689997, 1.489997, -1.319998},
	{"Towtruck", 2, 2, 3500.0, 'R', 'D', 162, true, -1.054998, 0.499998, -0.329997},
	{"Fortune", 2, 2, 1700.0, 'R', 'P', 159, true, -0.899999, 0.000000, -0.564997},
	{"Cadrona", 2, 2, 1200.0, 'R', 'P', 150, true, -0.944998, 0.154999, -0.419999},
	{"FBI Truck", 2, 2, 4000.0, '4', 'D', 178, true, -0.924996, 0.059999, -0.529999},
	{"Willard", 4, 4, 1800.0, 'R', 'P', 150, true, -0.934997, -0.109999, -0.429998},
	{"Forklift", 1, 0, 1000.0, 'F', 'E', 61, true, 0.000000, 0.000000, 0.000000},
	{"Tractor", 1, 0, 2000.0, 'R', 'D', 71, true, -0.144997, 0.314999, -0.444999},
	{"Combine Harvester", 1, 1, 8500.0, '4', 'D', 111, true, 0.000000, 0.000000, 0.000000},
	{"Feltzer", 2, 2, 1600.0, 'R', 'P', 169, true, -0.924996, -0.034999, -0.479999},
	{"Remington", 2, 2, 1800.0, 'R', 'P', 170, true, -0.984999, 0.164995, -0.564997},
	{"Slamvan", 2, 2, 1950.0, 'R', 'P', 160, true, -1.069998, -0.034999, -0.569998},
	{"Blade", 2, 2, 1500.0, 'R', 'P', 175, true, -0.954999, -0.019997, -0.579999},
	{"Freight", 2, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Brown Streak", 2, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Vortex", 1, 0, 1900.0, 'R', 'P', 101, true, -1.004999, -0.049998, -0.019997},
	{"Vincent", 4, 4, 1800.0, 'F', 'P', 150, true, -1.024999, -0.090000, -0.639998},
	{"Bullet", 2, 2, 1200.0, 'R', 'P', 205, true, -0.904999, 0.000000, -0.414999},
	{"Clover", 2, 2, 1600.0, 'R', 'P', 166, true, -0.894999, 0.014999, -0.539999},
	{"Sadler", 2, 2, 1700.0, '4', 'D', 152, true, -0.904999, 0.009998, -0.409999},
	{"Firetruck (ladder variant)", 2, 2, 6500.0, 'R', 'D', 150, true, -1.089998, 0.000000, -0.709999},
	{"Hustler", 2, 2, 1700.0, 'R', 'P', 148, true, -0.939997, -0.029998, -0.564997},
	{"Intruder", 4, 4, 1800.0, 'R', 'P', 150, true, -1.039999, -0.100000, -0.474999},
	{"Primo", 4, 4, 1600.0, 'R', 'P', 144, true, -0.884998, 0.059999, -0.479999},
	{"Cargobob", 2, 2, 20000.0, '4', 'P', 158, false, -1.769997, 1.484997, -1.774996},
	{"Tampa", 2, 2, 1700.0, 'R', 'P', 155, true, -0.949998, 0.104997, -0.439999},
	{"Sunrise", 4, 4, 1600.0, 'F', 'P', 146, true, -1.089998, -0.059999, -0.554997},
	{"Merit", 4, 4, 1800.0, 'R', 'P', 159, true, -0.964999, 0.004999, -0.564997},
	{"Utility Van", 2, 2, 2600.0, 'R', 'D', 122, true, -1.034999, 0.749997, -0.254999},
	{"Nevada", 1, 0, 25000.0, '4', 'P', 193, false, 0.000000, 0.000000, 0.000000},
	{"Yosemite", 2, 2, 3000.0, 'R', 'P', 145, true, -1.109997, 0.009998, -0.534999},
	{"Windsor", 2, 2, 1500.0, 'R', 'P', 160, true, -0.754998, 0.000000, -0.464998},
	{"Monster A", 2, 2, 5000.0, '4', 'P', 111, true, -1.119999, 0.000000, 0.184999},
	{"Monster B", 2, 2, 5000.0, '4', 'P', 111, true, -1.129999, 0.044998, 0.074997},
	{"Uranus", 2, 2, 1400.0, 'R', 'P', 157, true, -0.894999, -0.089997, -0.374998},
	{"Jester", 2, 2, 1500.0, 'F', 'P', 179, true, -0.964999, 0.000000, -0.444999},
	{"Sultan", 4, 4, 1400.0, '4', 'P', 171, true, -1.004999, 0.054999, -0.414999},
	{"Stratum", 4, 4, 1800.0, 'R', 'P', 155, true, -0.919999, 0.129997, -0.574998},
	{"Elegy", 2, 2, 1500.0, 'R', 'P', 179, true, -0.909999, 0.119998, -0.404998},
	{"Raindance", 2, 2, 10000.0, '4', 'P', 160, false, 0.000000, 0.000000, 0.000000},
	{"RC Tiger", 1, 0, 100.0, '4', 'E', 89, true, 0.000000, 0.000000, 0.000000},
	{"Flash", 2, 2, 1400.0, 'F', 'P', 166, true, -0.824998, 0.000000, -0.414999},
	{"Tahoma", 4, 4, 1800.0, 'R', 'P', 161, true, -0.989997, -0.049998, -0.479999},
	{"Savanna", 4, 2, 1500.0, 'R', 'P', 175, true, -1.089998, 0.309998, -0.609999},
	{"Bandito", 1, 0, 1000.0, 'R', 'P', 148, true, -0.334998, 0.100000, -0.374998},
	{"Freight Flat Trailer", 1, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Brown Streak Trailer", 1, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Kart", 1, 0, 300.0, 'R', 'P', 94, true, 0.000000, 0.000000, 0.000000},
	{"Mower", 1, 0, 800.0, 'R', 'P', 61, true, 0.000000, 0.000000, 0.000000},
	{"Dune", 2, 2, 10000.0, '4', 'P', 111, true, 0.000000, 0.000000, 0.000000},
	{"Sweeper", 1, 2, 800.0, 'R', 'P', 61, true, 0.000000, 0.000000, 0.000000},
	{"Broadway", 2, 2, 1700.0, 'R', 'P', 159, true, -0.924996, 0.004999, -0.334998},
	{"Tornado", 2, 2, 1700.0, 'R', 'P', 159, true, -1.019999, -0.140000, -0.419999},
	{"AT-400", 2, 0, 60000.0, '4', 'P', 250, false, 0.000000, 0.000000, 0.000000},
	{"DFT-30", 2, 2, 5500.0, 'R', 'D', 131, true, -1.429998, -0.649999, -0.879998},
	{"Huntley", 4, 4, 2500.0, '4', 'P', 159, true, -1.014999, 0.000000, -0.484999},
	{"Stafford", 4, 4, 2200.0, 'R', 'P', 154, true, -1.089998, 0.014999, -0.474999},
	{"BF-400", 2, 0, 500.0, 'R', 'P', 200, false, 0.000000, 0.000000, 0.000000},
	{"Newsvan", 4, 3, 1900.0, 'R', 'D', 137, true, -0.984999, -0.194995, -0.709999},
	{"Tug", 1, 2, 800.0, 'R', 'P', 86, true, -0.674996, 0.259999, 0.129997},
	{"Petrol Trailer", 1, 0, 3800.0, 'R', 'D', 0, true, 0.000000, 0.000000, 0.000000},
	{"Emperor", 4, 4, 1800.0, 'R', 'P', 154, true, -1.019999, -0.009998, -0.354999},
	{"Wayfarer", 2, 0, 800.0, 'R', 'P', 211, false, 0.000000, 0.000000, 0.000000},
	{"Euros", 2, 2, 1400.0, '4', 'P', 166, true, -1.009999, -0.064998, -0.534999},
	{"Hotdog", 2, 2, 5500.0, 'R', 'D', 109, true, -1.374997, 0.000000, -0.664999},
	{"Club", 2, 2, 1400.0, 'F', 'P', 164, true, -0.909999, 0.000000, -0.359999},
	{"Freight Box Trailer", 1, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Article Trailer 3", 1, 0, 3800.0, 'R', 'D', 0, true, 0.000000, 0.000000, 0.000000},
	{"Andromada", 2, 0, 40000.0, '4', 'P', 266, false, 0.000000, 0.000000, 0.000000},
	{"Dodo", 2, 2, 5000.0, '4', 'P', 135, false, 0.000000, 0.000000, 0.000000},
	{"RC Cam", 1, 0, 100.0, '4', 'E', 62, true, 0.000000, 0.000000, 0.000000},
	{"Launch", 1, 0, 2200.0, 'R', 'P', 118, false, 0.000000, 0.000000, 0.000000},
	{"Police Car (LSPD)", 4, 4, 1600.0, 'R', 'P', 177, true, -0.974999, 0.000000, -0.469998},
	{"Police Car (SFPD)", 4, 4, 1600.0, 'R', 'P', 177, true, -0.969999, 0.000000, -0.464998},
	{"Police Car (LVPD)", 4, 4, 1600.0, 'R', 'P', 177, true, -1.004999, -0.014999, -0.414999},
	{"Ranger", 2, 2, 2500.0, '4', 'D', 159, true, -1.019999, 0.115000, -0.684997},
	{"Picador", 2, 2, 1600.0, 'R', 'D', 152, true, -0.959999, 0.204998, -0.499998},
	{"S.W.A.T.", 2, 0, 5000.0, '4', 'D', 111, true, 0.000000, 0.000000, 0.000000},
	{"Alpha", 2, 2, 1500.0, 'R', 'P', 171, true, -1.024999, 0.000000, -0.549996},
	{"Phoenix", 2, 2, 1500.0, 'R', 'P', 173, true, -0.954999, 0.034999, -0.629998},
	{"Glendale (destroyed)", 4, 4, 1600.0, 'R', 'P', 148, true, -0.989997, -0.064998, -0.489998},
	{"Sadler (destroyed)", 2, 2, 1700.0, '4', 'D', 152, true, -0.904999, 0.009998, -0.409999},
	{"Baggage Trailer A", 1, 0, 1000.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000},
	{"Baggage Trailer B", 1, 0, 1000.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000},
	{"Tug Stairs Trailer", 1, 0, 1000.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000},
	{"Boxville (burglary)", 4, 2, 5500.0, 'R', 'D', 109, true, -1.149999, 0.269998, -0.654999},
	{"Farm Trailer", 1, 0, 400.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000},
	{"Utility Trailer", 1, 0, 1000.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000}
};

Valid_Vehicle_Nitro(modelid)
{
    new idx = modelid - 400;
	if (0 <= idx <= 211)
	{
        if (vSync_VehicleInfo[idx][Nitro] == false)
		{
	    	return 0;
		}
		return 1;
	}
	return 0;
}

Valid_Vehicle_Neon(modelid)
{
    new idx = modelid - 400;
	if (0 <= idx <= 211)
	{
        if (vSync_VehicleInfo[idx][NeonOffsetX] == 0.0 && vSync_VehicleInfo[idx][NeonOffsetY] == 0.0 && vSync_VehicleInfo[idx][NeonOffsetZ] == 0.0)
		{
	    	return 0;
		}
		return 1;
	}
	return 0;
}

Colocar_Neon(id, vehicleid)
{
	if (InfoVehiculo[id][vModeloNeon] == 0) return 1;
	if (InfoVehiculo[id][vOnNeon] == 0) return 1;
	new idx = GetVehicleModel(vehicleid) - 400;
	if (0 <= idx <= 211)
	{
		DestroyDynamicObject(InfoVehiculo[id][vObjetoNeonL]);
		DestroyDynamicObject(InfoVehiculo[id][vObjetoNeonR]);
		InfoVehiculo[id][vObjetoNeonL] = CreateDynamicObject(InfoVehiculo[id][vModeloNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, GetVehicleVirtualWorld(vehicleid), -1);
		InfoVehiculo[id][vObjetoNeonR] = CreateDynamicObject(InfoVehiculo[id][vModeloNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, GetVehicleVirtualWorld(vehicleid), -1);
		AttachDynamicObjectToVehicle(InfoVehiculo[id][vObjetoNeonL], vehicleid, vSync_VehicleInfo[idx][NeonOffsetX], vSync_VehicleInfo[idx][NeonOffsetY], vSync_VehicleInfo[idx][NeonOffsetZ], 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(InfoVehiculo[id][vObjetoNeonR], vehicleid, -vSync_VehicleInfo[idx][NeonOffsetX], vSync_VehicleInfo[idx][NeonOffsetY], vSync_VehicleInfo[idx][NeonOffsetZ], 0.0, 0.0, 0.0);
		return 1;
	}
	return 0;
}

Colocar_Objeto(id, vehicleid)
{
	Loop(x, 5, 0) if (InfoVehiculo[id][vObjModelo][x] != 0)
	{
		DestroyDynamicObject(InfoVehiculo[id][vTuneo][x]);
		InfoVehiculo[id][vTuneo][x] = CreateDynamicObject(InfoVehiculo[id][vObjModelo][x], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, GetVehicleVirtualWorld(vehicleid), -1);
		AttachDynamicObjectToVehicle(InfoVehiculo[id][vTuneo][x], vehicleid, InfoVehiculo[id][vObjPosX][x], InfoVehiculo[id][vObjPosY][x], InfoVehiculo[id][vObjPosZ][x], InfoVehiculo[id][vObjRotX][x], InfoVehiculo[id][vObjRotY][x], InfoVehiculo[id][vObjRotZ][x]);
	}
}

// Variables de vehículos En General.
new IntentarPuente[MAX_PLAYERS]; // Uso del CMD /puente.
new Intentar[MAX_PLAYERS];
new AntiAbuso[MAX_PLAYERS]; // JOBS.
new HaceAbuso[MAX_PLAYERS]; // NEW CAHNNEL.
new arr_Engine[MAX_VEHICLES char];
new arr_Towing[MAX_PLAYERS];
new RefuelingVehicle[MAX_PLAYERS];
new RefuelingVehicleTimer[MAX_PLAYERS];
new PrecioGasolinaVeh[MAX_PLAYERS];
new QFA[MAX_PLAYERS][24];
new Float:TeleportDest[MAX_PLAYERS][3];
new textdrawscount;
new FishCount[MAX_PLAYERS];
new TotalLogin, TotalConnect, TotalAutoBan, TotalRegister, MaxPlayersConnected, MPDay, MPMonth, MPYear, MPHour, MPMinute, TotalUptime;
//*******************Sistema de reportes*******************
enum reportinfo
{
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
 	TimeToExpire,
	BeingUsed,
	ReportExpireTimer,
	ReplyTimerr
}
new Reports[MAX_REPORTS][reportinfo];

new JustReported[MAX_PLAYERS];
new JustDuda[MAX_PLAYERS];
new JustAfk[MAX_PLAYERS];

new NewbieTimer[MAX_PLAYERS];
new VIPTimer[MAX_PLAYERS];
new JetPack[MAX_PLAYERS];
new PuedeD[MAX_PLAYERS];
new ShowRules[MAX_PLAYERS];
new RulesTime[MAX_PLAYERS];

//points:

new Float:SAEMPrisonSpawns[4][3] =
{
	{181.6174,1953.3961,3867.2429},
	{190.7607,1951.7330,3867.2358},
	{199.2319,1951.4128,3867.2358},
	{173.4761,1951.0363,3867.2429}
};

new Float:PrisonDillmore[2][3] =
{
	{1444.55,-1512.901000,1604.03},
	{318.7299,317.0638,999.1484}
};

new Float:FBIPrisonSpawns[5][3] =
{
	{1430.4956,-1569.5317,4340.1563},
	{1429.2046,-1551.8027,4340.1563},
	{1422.8323,-1551.3651,4340.1563},
	{1415.3214,-1571.1622,4340.1563},
	{1422.9600,-1570.5835,4340.1563}
};

new Float:LSPDPrisonSpawns[10][3] =
{
	{1558.819458,-1642.5,4985.22},
	{1562.030151,-1642.5,4985.22},
	{1565.201049,-1642.5,4985.22},
	{1568.456665,-1642.5,4985.22},
	{1571.5,-1646.192382,4985.22},
	{1571.5,-1650.072753,4985.22},
	{1567.978027,-1654.2,4985.22},
	{1564.464477,-1654.2,4985.22},
	{1561.536865,-1654.2,4985.22},
	{1557.713378,-1653.2,4985.22}
};

new WeaponNames[47][] = // Armas en mano.
{
	"Puños","brass knuckles","golf club","nitestick","knife","baseball bat","shovel","palo de billar","katana","chainsaw","purple dildo","small white vibrator","large white vibrator","silver vibrator",
	"bouquet of flowers","cane","grenade","tear gas grenade","molotov cocktail","jetpack"," "," ","Colt .45","silenced Colt .45","Desert Eagle","12-gauge shotgun","sawn-off shotgun","SPAS-12",
	"Micro Uzi","MP5","AK-47","M4A1","TEC-9","rifle","sniper rifle","rocket launcher","heatseeker","flamethrower","minigun","satchel charge","detonator","spray can","fire extinguisher",
	"camera","nightvision goggles", "thermal goggles","parachute"
};

dar_chaleco(playerid, Float: armour) // Fijar
{
	if (InfoPlayer[playerid][pChaleco] < 101.0) InfoPlayer[playerid][pChaleco] = 100.0;

	InfoPlayer[playerid][pChaleco] = armour; SetPlayerArmour(playerid, armour);

	guardar_float_mysql("cuentas", "Chaleco", InfoPlayer[playerid][pID], InfoPlayer[playerid][pChaleco]);
	return 1;
}

dar_vida(playerid, Float: hp) // Fijar
{
	if (InfoPlayer[playerid][pVida] < 101.0) InfoPlayer[playerid][pVida] = 100.0;

	InfoPlayer[playerid][pVida] = hp; SetPlayerHealth(playerid, hp);

	guardar_float_mysql("cuentas", "Vida", InfoPlayer[playerid][pID], InfoPlayer[playerid][pVida]);
	return 1;
}

quitar_vida(playerid, Float: sg1) // Quitar
{
	new Float: sg0 = InfoPlayer[playerid][pVida];
	InfoPlayer[playerid][pVida] = sg0+sg1;
	if (InfoPlayer[playerid][pVida] <= 15.0)
	{
	    if (GetPVarInt(playerid, "EstaCrack") == 0)
	    {
			SetPlayerHealth(playerid, 25.0);
			SetPVarInt(playerid, "EstaCrack", 1);
			estado_xdxdxd(playerid, 1);
		}
		else estado_xdxdxd(playerid, 2);
		return 1;
	}
	SetPlayerHealth(playerid, sg0+sg1);

	guardar_float_mysql("cuentas", "Vida", InfoPlayer[playerid][pID], InfoPlayer[playerid][pVida]);
	return 1;
}

//*******************Variables*******************
new InsideMainMenu[MAX_PLAYERS];
new BarObject[MAX_PLAYERS]; // ID del Objeto.
new ObjectBar[MAX_PLAYERS]; // Objeto.
//*******************
new InviteOffer[MAX_PLAYERS];
new InviteFaction[MAX_PLAYERS];
new InviteFamily[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
//*******************Vender Casa*******************
new HouseOffer[MAX_PLAYERS];
new House[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];

//*******************EMS*******************
new EMSCallTime[MAX_PLAYERS];
new EMSAccepted[MAX_PLAYERS];
//*******************LSPD int*******************
new courtbuttons[5], courtgates[2];
new fen1,fen2,fen3,fen4,fen5,fen6, JDoor1, JDoor2, JDoor3, JDoor4, JDoor5, JDoor6;
// Buttons Poder Judicial.
new PJBT, PJBT2, PJBT3, PJDOOR, PJDOOR2, PJCELDA, PJCELDA2, PJCELDA3, PJCELDA4; // Botones, puerta de los botones y celdas, 2 arriba y 2 abajo.

//new rejaALEPH, rejaALEPH2;
//*******************LSPD Portones*******************
new porton_lspd, saem1, saem2, saem3, saemSF, saemLV, saemLV2;
//*******************GIFTS*******************
new dynamicgift;
new Text3D:dynamicgift3DText;
//*******************FBI Int*******************
new FBILobbyRight, FBILobbyRightBTN[2] ;
//****************************Rejas Peaje****************************
new peaje1, peaje2;
//*******************
new Carnada[MAX_PLAYERS];
new Lineas[MAX_PLAYERS];
new Barricade[MAX_BARRICADES];
//*******************Mats Seller*******************
new MatsOffer[MAX_PLAYERS];
new MatsPrice[MAX_PLAYERS];
new MatsAmount[MAX_PLAYERS];
new VIPOffer[MAX_PLAYERS];
new VIPPrice[MAX_PLAYERS];
new FOffer[MAX_PLAYERS];
new FPrice[MAX_PLAYERS];
new FAmount[MAX_PLAYERS];
//*******************
new See_MP[MAX_PLAYERS];
new See_FRC[MAX_PLAYERS];
new Blinded[MAX_PLAYERS], Tied[MAX_PLAYERS];
new Rope[MAX_PLAYERS];
new Editing[MAX_PLAYERS];
//*******************Security comands spam*******************

new RequestingBackup[MAX_PLAYERS];
new Seatbelt[MAX_PLAYERS];
new FreezeLast[MAX_PLAYERS];
new Misile_Launcher;
new PuertaH1;
new PuertaH2;
new HaciaArriba = 0;
new HaciaAbajo = 0;
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new Blood = 1000;
new Fuel = 200;

new RStep[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new Paquetes[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PrecioLicencia[MAX_PLAYERS];
new NombreLicencia[MAX_PLAYERS];
new Autorizado[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];


new player_asesino[MAX_PLAYERS];
new player_weapon[MAX_PLAYERS];

forward estado_xdxdxd(playerid, type);
public estado_xdxdxd(playerid, type)
{
	DeletePVar(playerid, "en_emergencias");
	SetPVarInt(playerid, "PlayerCuffed", 0);
	switch (type)
	{
	    case 1:
	    {
			new killerid = player_asesino[playerid];
			new reason = player_weapon[playerid];
			// /qfa
			if (IsPlayerConnected(killerid)) { alm(QFA[playerid], NombreOriginal(killerid)); }
			//aviso muerte staff
			new gformat[256], dead[20];
			switch(reason)
			{
				case 54:                    {dead="Suicidio";}
				case 49:                    {dead="Atropellado";}
				case 50:                    {dead="Heli-Kill";}
				case 53:                    {dead="Ahogado";}
				case 255: 					{dead="Quemado/Bug";}
				case 51:    				{dead="Explotado";}
				case 47:                    {dead="Fake Pistol";}
				default:                   {dead="Desconocida";}
			}
			InfoPlayer[playerid][pBalaCabeza] = 0;
			InfoPlayer[playerid][pMuerto] = 0;
			if (reason >= 0 && reason <= 42)
			{
				format(gformat, sizeof gformat, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) mató a %s(%d). Weapon: %s", NombreOriginal(killerid), killerid, NombreOriginal(playerid), playerid, WeaponNames[reason]);
				SendAdminMessage(0xFFFFFFFF, gformat);
			}
			else if (reason >= 47 && reason <= 255) // Anteriormente 54.
			{
				format(gformat, sizeof gformat, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) murió por posible bug/muerte sin rol. Razón: %s", NombreOriginal(playerid), playerid, dead);
				SendAdminMessage(0xFFFFFFFF, gformat);
			}
			//new
			new query[195], Float: X, Float: Y, Float: Z, Interior = GetPlayerInterior(playerid), World = GetPlayerVirtualWorld(playerid), qobjs = 0;
			GetPlayerPos(playerid, X, Y, Z);
			if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				ActualizarManos(playerid);
				if (InfoPlayer[playerid][pManoDerecha] != 0)
				{
					new ManoDer = InfoPlayer[playerid][pManoDerecha], ManoDerCant = InfoPlayer[playerid][pManoDerechaCant];
					ResetPlayerWeapons(playerid);
					InfoPlayer[playerid][pManoDerecha] = 0;
					InfoPlayer[playerid][pManoDerechaCant] = 0;
					RemovePlayerAttachedObject(playerid, 7);
					tirar_objeto(ManoDer, ManoDerCant, X, Y, Z, World, Interior, 0);
					Streamer_Update(playerid);
					mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
					mysql_tquery(DBcreative, query);
                    qobjs++;
				}
				if (InfoPlayer[playerid][pManoIzquierda] != 0)
				{
					new ManoDer = InfoPlayer[playerid][pManoIzquierda], ManoDerCant = InfoPlayer[playerid][pManoIzquierdaCant];
					ResetPlayerWeapons(playerid);
					InfoPlayer[playerid][pManoIzquierda] = 0;
					InfoPlayer[playerid][pManoIzquierdaCant] = 0;
					RemovePlayerAttachedObject(playerid, 8);
					tirar_objeto(ManoDer, ManoDerCant, X, Y, Z, World, Interior, 0);
					Streamer_Update(playerid);
					mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
					mysql_tquery(DBcreative, query);
                    qobjs++;
				}
			}
			//
			PlayerDrunk[playerid] = 0;
			PlayerDrunkTime[playerid] = 0;
			Autorizado[playerid] = 0;
			//animacion
			if (gPlayerUsingLoopingAnim[playerid] == 1)
			{
		        gPlayerUsingLoopingAnim[playerid] = 0;
		        TextDrawHideForPlayer(playerid, txtAnimHelper);
			}
			//en veh
			if (IsPlayerInAnyVehicle(playerid))
			{
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, X, Y+1, Z);
			}
			SetPVarInt(playerid, "mueltito", 0);
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
			//label's
			ActualizarEstado(playerid);
			//mensaje
			SendClientMessage(playerid, 0xFF6666FF, "Has sido brutalmente herido, puedes usar /reaparecer en 240 segundos.");
			if (qobjs != 0) SendClientMessage(playerid, 0xFF6666FF, "Perdiste los objetos que tenías en tus manos, alguien más los puede recoger.");
			//Vida
			InfoPlayer[playerid][pVida] = 70;
			dar_chaleco(playerid, 0);
			timer_herido[playerid] = 240;
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Hospital = 1, Vida = '%f', BalaCabeza = 0, Muerto = 0 WHERE ID = '%d'", InfoPlayer[playerid][pVida], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
		}
		case 2:
		{
			foreach(Player, i) if (EMSAccepted[i] != 999)
			{
				if (EMSAccepted[i] == playerid)
				{
					EMSAccepted[i] = 999;
					GameTextForPlayer(i, "~w~Paciente~n~~r~ha muerto", 5000, 1);
					EMSCallTime[i] = 0;
					DisablePlayerCheckpoint(i);
				}
			}
			SetPVarInt(playerid, "mueltito", 1);
			ActualizarEstado(playerid);
			timer_herido[playerid] = 120;
			if (MensajeMuelto[playerid] == 0) SendClientMessage(playerid, 0x0CA7B8FF, "Acabas de caer en estado de muerte, puedes usar /reaparecer 120 segundos.");
			MensajeMuelto[playerid] = 1;
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
		}
	}
	return 1;
}

ActualizarEstado(playerid)
{
	DestroyDynamic3DTextLabelEx(InfoPlayer[playerid][pNameTag]);
	if (GetPVarInt(playerid, "EstaCrack") != 0)
	{
		if (GetPVarInt(playerid, "mueltito") == 1)
		{
			InfoPlayer[playerid][pNameTag] = CreateDynamic3DTextLabel("(( ESTE JUGADOR ESTÁ MUERTO ))", 0xFF6347FF, 0, 0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
		else
		{
			new tag_herido[150];
			format(tag_herido, sizeof tag_herido, "(( Este jugador está herido, para\nmás información /heridas %d ))", playerid);
			InfoPlayer[playerid][pNameTag] = CreateDynamic3DTextLabel(tag_herido, 0xFF6347FF, 0, 0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
	}
	else
	{
		if (!isnull(InfoPlayer[playerid][pEstadoYo])) //quitar
		{
			InfoPlayer[playerid][pNameTag] = CreateDynamic3DTextLabel(InfoPlayer[playerid][pEstadoYo], 0x00A5AAFF, 0, 0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
	}
}

GoToHospital(playerid)
{
	MensajeMuelto[playerid] = 0;
	KillEMSQueue(playerid);
	dar_vida(playerid, 100);
	ResetPlayerDamages(playerid);
	if (InfoPlayer[playerid][pDrogaTipo] != 0) EndEffectDroug(playerid, InfoPlayer[playerid][pDrogaTipo]);
	if (InfoPlayer[playerid][pTipoSpawn] == 1)
	{
		if (InfoPlayer[playerid][pCasa1] != -1)
		{
			new idcasa = InfoPlayer[playerid][pCasa1];
			SendClientMessage(playerid, COLOR_YELLOW, "[VIP]:{FFFFFF} Te llevaron a tu casa (1) por la caracteristica Gold activada.");
			LoadObjects(playerid);
			SetPosEx(playerid, InfoCasa[idcasa][cInteriorX], InfoCasa[idcasa][cInteriorY], InfoCasa[idcasa][cInteriorZ], InfoCasa[idcasa][cInteriorR], InfoCasa[idcasa][cInteriorInt], InfoCasa[idcasa][cInteriorVW], 1);
			SetCameraBehindPlayer(playerid);
			guardar_int_mysql("cuentas", "Hospital", InfoPlayer[playerid][pID], 0);
			return 1;
		}
		if (InfoPlayer[playerid][pCasa2] != -1)
		{
			new idcasa = InfoPlayer[playerid][pCasa2];
			SendClientMessage(playerid, COLOR_YELLOW, "[VIP]:{FFFFFF} Te llevaron a tu casa (2) por la caracteristica Gold activada.");
			LoadObjects(playerid);
			SetPosEx(playerid, InfoCasa[idcasa][cInteriorX], InfoCasa[idcasa][cInteriorY], InfoCasa[idcasa][cInteriorZ], InfoCasa[idcasa][cInteriorR], InfoCasa[idcasa][cInteriorInt], InfoCasa[idcasa][cInteriorVW], 1);
			SetCameraBehindPlayer(playerid);
			guardar_int_mysql("cuentas", "Hospital", InfoPlayer[playerid][pID], 0);
			return 1;
		}
	}
	StopAudioStreamForPlayer(playerid);
	new Float: hosX, Float: hosY, Float: hosZ, Float: hosR, hosInt, hosVW;
	if (InfoPlayer[playerid][pMiembro] != 0)
	{
		new id = InfoPlayer[playerid][pMiembro];
		if (InfoFaccion[id][fSpawnX] != 0.0)
		{
			hosX = InfoFaccion[id][fSpawnX];
			hosY = InfoFaccion[id][fSpawnY];
			hosZ = InfoFaccion[id][fSpawnZ];
			hosR = InfoFaccion[id][fSpawnR];
			hosInt = InfoFaccion[id][fSpawnInt];
			hosVW = InfoFaccion[id][fSpawnVW];
    		SendClientMessage(playerid, COLOR_WHITE, "Los gastos del seguro médico son de {B00000}$250{FFFFFF}, que tengas buen día.");
	    	GivePlayerCash(playerid, -250, "seguro médico facción");
		}
		else
		{
			hosX = 1114.10;
			hosY = -1319.2;
			hosZ = 13.76;
			hosR = 270;
			hosInt = 0;
			hosVW = 0;
    		SendClientMessage(playerid, COLOR_WHITE, "Los gastos del seguro médico son de {B00000}$500{FFFFFF}, que tengas buen día.");
    		GivePlayerCash(playerid, -500, "seguro médico civil");
		}
	}
	else
	{
		hosX = 1114.10;
		hosY = -1319.2;
		hosZ = 13.76;
		hosR = 270;
		hosInt = 0;
		hosVW = 0;
    	SendClientMessage(playerid, COLOR_WHITE, "Los gastos del seguro médico son de {B00000}$500{FFFFFF}, que tengas buen día.");
    	GivePlayerCash(playerid, -500, "seguro médico civil");
	}
	SetPosEx(playerid, hosX, hosY, hosZ, hosR, hosInt, hosVW, 1);
	SetCameraBehindPlayer(playerid);
	guardar_int_mysql("cuentas", "Hospital", InfoPlayer[playerid][pID], 0);
	return 1;
}

new Condom[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new GettingSpectated[MAX_PLAYERS];
new Spectating[MAX_PLAYERS];

new HidePM[MAX_PLAYERS];

new ghour = 0;
new gminute = 0;
new gsecond = 0;
new timeshift = -1;
new shifthour;
new explevel = 4;
new txtcost = 1;

new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
//********************************
new VehicleWindows[MAX_VEHICLES] = 0;
new AdminDuty[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new RegText[MAX_PLAYERS];
new RegConfig[MAX_PLAYERS];

//*******************Factura*******************
new Facturing[MAX_PLAYERS];
new fPay[MAX_PLAYERS];
new fDest[MAX_PLAYERS];
new fFacturer[MAX_PLAYERS];

new Refueling[MAX_PLAYERS];

stock Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new SpikeStrips[10][Spikes];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jacket"},
{"Amberjack"},
{"Grouper"},
{"Red Snapper"},
{"Pants"},
{"Trout"},
{"Blue Marlin"},
{"Can"},
{"Mackeral"},
{"Sea Bass"},
{"Bracko"},
{"Pike"},
{"Sail Fish"},
{"Garbage"},
{"Tuna"},
{"Eel"},
{"Dolphin"},
{"Shark"},
{"Turtle"},
{"Catfish"},
{"Pinesh"},
{"Swordfish"}
};


//**************************************
//*******************Vehicle Names*******************

new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

new VehicleName[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkleys RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","HotDog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

stock SaveVarGPS(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new lfile[24];
			format(lfile, 24, UBICACIONES, id);
			new INI:File = INI_Open(lfile);
			INI_SetTag(File,"UbicacionesData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new lfile[24];
			format(lfile, 24, UBICACIONES, id);
			new INI:File = INI_Open(lfile);
			INI_SetTag(File,"UbicacionesData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}
stock SaveVarGarages(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new gfile[64];
			format(gfile, 64, GARAGES_FILE, id);
			new INI:File = INI_Open(gfile);
			INI_SetTag(File,"GarageData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new gfile[64];
			format(gfile, 64, GARAGES_FILE, id);
			new INI:File = INI_Open(gfile);
			INI_SetTag(File,"GarageData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}

RespawnNearbyVehicles(playerid, Float:radi)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i=1; i<MAX_VEHICLES; i++)
    {
        if(GetVehicleModel(i))
        {
            new Float:posx, Float:posy, Float:posz;
            new Float:tempposx, Float:tempposy, Float:tempposz;
            GetVehiclePos(i, posx, posy, posz);
            tempposx = (posx - x);
            tempposy = (posy - y);
            tempposz = (posz - z);
            if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
            {
				if (!EsVehFabrica(i))
                	SetVehicleToRespawn(i);
            }
        }
    }
}

stock IsSeatAvailable(vehicleid, seat)
{
	new carmodel = GetVehicleModel(vehicleid);
	for (new i = 0; i < sizeof( OneSeatVehicles ); i++ )
	{
	    if( carmodel == OneSeatVehicles[i] ) return 0;
	}
	foreach(Player, i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}

main()
{
	SetTimer("timer_segundo", 1000, true);
	SetTimer("timer_2segundo", 1000, true);
	SetTimer("timer_minuto", 60000, true);
    SetTimer("timer_mediosegundo", 500, true);
	SetTimer("timer_microbeat", 250, true);
	SetTimer("timer_autoMensajes", 600000, true);
	SetTimer("timer_spec", 3000, true);
}

forward timer_mediosegundo();
public timer_mediosegundo()
{
	Loop(playerid, MAX_PLAYERS, 0) if (usuario_registro[playerid] == 2)
	{
		//actualizar automáticamente nivel
		if (InfoPlayer[playerid][pNivel] != 0)
		{
			if (InfoPlayer[playerid][pExperiencia] >= ((4 * InfoPlayer[playerid][pNivel]) + (4)))
			{
				new string[256];
				new nxtlevel = InfoPlayer[playerid][pNivel]+1;
				new expamount = nxtlevel*explevel;
				format(string, sizeof string, "[AVISO]: Subiste de nivel automáticamente, ahora eres nivel %d.", nxtlevel);
				SendClientMessage(playerid, COLOR_GREY, string);
				format(string, sizeof string, "~g~~h~Nivel %d!", InfoPlayer[playerid][pNivel] + 1);
				GameTextForPlayer(playerid, string, 8000, 1);
				PlayerPlaySound(playerid, 10214, 0.0, 0.0, 0.0);
				InfoPlayer[playerid][pNivel]++;
				SetPlayerScore(playerid, InfoPlayer[playerid][pNivel]);
				InfoPlayer[playerid][pExperiencia] = InfoPlayer[playerid][pExperiencia]-expamount;
				mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Nivel = '%d', Experiencia = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pNivel], InfoPlayer[playerid][pExperiencia], InfoPlayer[playerid][pID]);
				mysql_tquery(DBcreative, string);
			}
		}
		//actualiza estado crack & táser
		if (Taseado[playerid] != 0 && GetPlayerAnimationIndex(playerid) != 1209)
		{
			ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0, 1);
		}
		if (GetPVarInt(playerid, "EstaCrack") == 1 && GetPlayerAnimationIndex(playerid) != 1701)
		{
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
		}
		if (ConBalasGoma[playerid] != 0 && GetPlayerAnimationIndex(playerid) != 1533)
		{
			ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0, 1);
		}
		//otros
		if (papilla[playerid] != 0) SetPlayerColor(playerid, 0xFFBF0000);
		if (refuerzos_pd[playerid] == 1)
		{
			Loop(i, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(i) && member_faccion(i, 1) && OnDuty[i] == 1)
			{
				SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
			}
		}
		ActualizarManos(playerid); //actualiza los objetos de manos del jugador
	} // } end
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	new id = verificar_id_vehiculo(vehicleid);
	if (id != -1)
	{
		InfoVehiculo[id][vPaintJob] = paintjobid;
		guardar_int_mysql("vehiculos", "PaintJob", InfoVehiculo[id][vID_sql], InfoVehiculo[id][vPaintJob]);
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	new id = verificar_id_vehiculo(vehicleid);
	if (id != -1)
	{
		new query[128];
		InfoVehiculo[id][vColor_1] = color1;
		InfoVehiculo[id][vColor_2] = color2;
		mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET Color_1 = '%d', Color_2 = '%d' WHERE ID = '%d'", InfoVehiculo[id][vColor_1], InfoVehiculo[id][vColor_2], InfoVehiculo[id][vID_sql]);
		mysql_tquery(DBcreative, query);
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if (enterexit == 0)
	{
		if (EsteVehEs(playerid, GetPlayerVehicleID(playerid)) > -1)
		{
			ActualizarMods(EsteVehEs(playerid, GetPlayerVehicleID(playerid)));
		}
		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!(1 <= GetPlayerInterior(playerid) <= 3))
	{
		new szMessage[260];
		format(szMessage, sizeof szMessage, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) tal vez esté usando hacks de modificaciones de autos (aplicando: %s %s en un %s).", NombreOriginal(playerid), playerid, partName(componentid), partType(GetVehicleComponentType(componentid)), GetVehicleName(vehicleid));
		SendAdminMessage(0xFFFFFFFF, szMessage);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    Seatbelt[playerid] = 0;
    if (veh_gasolina[vehicleid] <= 0) { SetVehicleEngine(vehicleid, playerid); }
    if (GetPVarInt(playerid, "EstaCrack") == 1) SetPVarInt(playerid, "ToBeEjected", 1);
    if (InfoPlayer[playerid][pMuerto] == 1) SetPVarInt(playerid, "ToBeEjected", 1);
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if (engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510: veh_gasolina[vehicleid] = 200, arr_Engine{vehicleid} = 1, SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 1;
		default: SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 0;
	}
	if (!ispassenger)
	{
		new si_no = 0;
		Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
		{
		    if (InfoVehiculo[id][vNegocio] != 0)
		    {
				if (llaves_negocio(playerid, vehicleid)) si_no = 1;
		    }
		    else
		    {
				switch (InfoVehiculo[id][vTipo])
				{
					case 1..50: //facciones
					{
						if (llaves_faccion(playerid, vehicleid)) si_no = 1;
					}
					case 200: //vip
					{
						if (llaves_vip(playerid, vehicleid)) si_no = 1;
					}
					case 600: //rentable
					{
						si_no = 1;
					}
					default: //usuarios
					{
						si_no = 1;
					}
				}
			}
		}
		if (EsVehFabrica(vehicleid)) si_no = 1;
		//función
		if (si_no != 1)
		{
			if (playerTextdraw[playerid] == false)
			{
				playerVehicleTextdraw[playerid] = CreateDynamic3DTextLabel("No tienes las llaves de este vehiculo.", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
				SetTimerEx("OnVehicleTextdraw", 4000, false, "i", playerid);
				playerTextdraw[playerid] = true;
			}
			new Float: slx,Float: sly,Float: slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz);
			return ClearAnimations(playerid);
		}
	}
    else
    {
		if (!IsPlayerInRangeOfVehicle(playerid, vehicleid, 7.5) || LockStatus[vehicleid] != 0)// G-bugging fix
		{
			if (playerTextdraw[playerid] == false)
			{
				playerVehicleTextdraw[playerid] = CreateDynamic3DTextLabel("Este vehículo se encuentra bloqueado.", 0xFFFFFFFF, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
				SetTimerEx("OnVehicleTextdraw", 4000, false, "i", playerid);

				playerTextdraw[playerid] = true;
			}
			new Float: slx,Float: sly,Float: slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz);
			return ClearAnimations(playerid);
		}
	}
	return 1;
}

forward OnVehicleTextdraw(playerid);
public OnVehicleTextdraw(playerid)
{
	if(IsValidDynamic3DTextLabel(playerVehicleTextdraw[playerid]))
		DestroyDynamic3DTextLabel(playerVehicleTextdraw[playerid]);

	playerTextdraw[playerid] = false;
	return 1;
}

IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,2.0,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,2.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,2.0,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,2.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,2.0,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,2.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,2.0,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,2.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,2.0,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,836.4791, -2086.1738, 3.4484))
		{ // Nuevo lugar, justo debajo de la tienda de pesca.
			return 1;
		}
	}
	return 0;
}

IsAtArrestPoint(playerid){
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0,1559.3228,-1693.7491,5.8970)){return 1;} // LSPD Garage
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1559.650,-1649.430,4990.58)){ return 1;} // LSPD Interior
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 613.3228,-589.1623,17.2266)){ return 1; } // SASD Dillmore
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 299.9566,-1529.9164,24.9219)){ return 1; } // FBI
 	}
	return 0;
}

PlazaAyuntamiento(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid,95.0,1482.6306, -1790.6089, 12.47770)) { return 1; } //Parking Ayuntamiento
	else if (IsPlayerInRangeOfPoint(playerid,75.0,1479.5547, -1649.9537, 13.6082)) { return 1; } //Plaza
	return 0;
}

Tienda_247(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid,5.0,-1833.8270,62.3936,1055.1891)) { return 1; } //intaero
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-22.3260,-138.6221,1003.5469)) { return 1; }
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-25.6448,-56.6718,1003.5469)) { return 1; }
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-29.3554,-28.8020,1003.5573)) { return 1; }
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-28.7605,-185.1333,1003.5469)) { return 1; } //LV 1er 24-7
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-10.3085,-178.2465,1003.5469)) { return 1; } // LV 1er 24-7 >
	else if (IsPlayerInRangeOfPoint(playerid,5.0,2.3437,-29.0118,1003.5494)) { return 1; } //LV 2do 24-7
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-28.0818,-89.9434,1003.5469)) { return 1; } //LV 3er 24-7
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-29.1318,-184.7204,1003.5469)) { return 1; } //LV 3er 24-7
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-25.7885,-183.2835,1003.5469)) { return 1; } //LV 3er 24-7
	else if (IsPlayerInRangeOfPoint(playerid,3.0,664.8079,-568.7150,16.3433)) { return 1; }
	return 0;
}

IsAtGasStation(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid,6.0,1004.0070,-939.3102,42.1797) || IsPlayerInRangeOfPoint(playerid,6.0,1944.3260,-1772.9254,13.3906)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid,6.0,-90.5515,-1169.4578,2.4079) || IsPlayerInRangeOfPoint(playerid,6.0,-1609.7958,-2718.2048,48.5391)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid,8.0,1409.993896,-1525.738159,13.555365) || IsPlayerInRangeOfPoint(playerid,8.0,-1676.6323,414.0262,6.9484)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid,6.0,1595.5337,2198.9404,10.8203)|| IsPlayerInRangeOfPoint(playerid,10.0,1880.558105,-2304.451660,14.119070)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid,8.0,656.4265,-559.8610,16.5015) || IsPlayerInRangeOfPoint(playerid,6.0,656.3797,-570.4138,16.5015) || IsPlayerInRangeOfPoint(playerid,6.0,2294.2227,-1911.0593,13.5971)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid,8.0,1628.361938,-1808.970458,13.521308)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid,8.0,1568.5785, -1690.0538, 5.2162)) return 1;
	return 0;
}

// VEHICULOS NORMALES:
IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574)
	{
		return 1;
	}
	return 0;
}

IsABike(carid)
{
	if(GetVehicleModel(carid) == 509 || GetVehicleModel(carid) ==  481 || GetVehicleModel(carid) == 510)
	{
		return 1;
	}
	return 0;
}

IsAPlane(carid)
{
	switch(GetVehicleModel(carid)) {
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}

IsABoat(carid)
{
	new Boats[] = { 472, 473, 493, 484, 430, 454, 453, 452, 446 };
	for(new i = 0; i < sizeof(Boats); i++){
		if(GetVehicleModel(carid) == Boats[i]) return 1;
	}
	return 0;
}

stock PlayerPlaySoundEx(soundid, Float:x, Float:y, Float:z) { //Realistic sound playback
	foreach(Player, i) {
		if(IsPlayerInRangeOfPoint(i, 20.0, x, y, z))
			PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}
partType(type)
{
	new name[64];
	switch(type){
	    case 0: name = "Alerón";
        case 1: name = "Capó";
        case 2: name = "Techo";
        case 3: name = "Lados";
        case 4: name = "Lamps";
        case 5: name = "Nitro";
        case 6: name = "Escape";
        case 7: name = "Ruedas";
        case 8: name = "Stereo";
        case 9: name = "Hidráulica";
        case 10: name = "Parachoque D.";
        case 11: name = "Parachoque T.";
        case 12: name = "Ventilacion Izq.";
        case 13: name = "Ventilacion Der.";
        default: name = "Desconocida";
	}
	return name;
}

partName(part){

	new
		name[24];

	switch(part - 1000) {
		case 0:	name = "Pro";
		case 1: name = "Win";
		case 2: name = "Drag";
		case 3: name = "Alpha";
		case 4: name = "Champ Scoop";
		case 5: name = "Fury Scoop";
		case 6: name = "Roof Scoop";
		case 7: name = "Sideskirt";
		case 8: name = "2x";
		case 9: name = "5x";
		case 10: name = "10x";
		case 11: name = "Race Scoop";
		case 12: name = "Worx Scoop";
		case 13: name = "Round Fog";
		case 14: name = "Champ";
		case 15: name = "Race";
		case 16: name = "Worx";
		case 17: name = "Sideskirt";
		case 18: name = "Upswept";
		case 19: name = "Twin";
		case 20: name = "Large";
		case 21: name = "Medium";
		case 22: name = "Small";
		case 23: name = "Fury";
		case 24: name = "Square Fog";
		case 26: name = "Alien";
		case 27: name = "Alien";
		case 28: name = "Alien";
		case 29: name = "X-Flow";
		case 30: name = "X-Flow";
		case 31: name = "X-Flow";
		case 32: name = "Alien Roof Vent";
		case 33: name = "X-Flow Roof Vent";
		case 34: name = "Alien";
		case 35: name = "X-Flow Roof Vent";
		case 36: name = "Alien";
		case 37: name = "X-Flow";
		case 38: name = "Alien Roof Vent";
		case 39: name = "X-Flow";
		case 40: name = "Alien";
		case 41: name = "X-Flow";
		case 42: name = "Chrome";
		case 43: name = "Slamin";
		case 44: name = "Chrome";
		case 45: name = "X-Flow";
		case 46: name = "Alien";
		case 47: name = "Alien";
		case 48: name = "X-Flow";
		case 49: name = "Alien";
		case 50: name = "X-Flow";
		case 51: name = "Alien";
		case 52: name = "X-Flow";
		case 53: name = "X-Flow";
		case 54: name = "Alien";
		case 55: name = "Alien";
		case 56: name = "Alien";
		case 57: name = "X-Flow";
		case 58: name = "Alien";
		case 59: name = "X-Flow";
		case 60: name = "X-Flow";
		case 61: name = "X-Flow";
		case 62: name = "Alien";
		case 63: name = "X-Flow";
		case 64: name = "Alien";
		case 65: name = "Alien";
		case 66: name = "X-Flow";
		case 67: name = "Alien";
		case 68: name = "X-Flow";
		case 69: name = "Alien";
		case 70: name = "X-Flow";
		case 71: name = "Alien";
		case 72: name = "X-Flow";
		case 88: name = "Alien";
		case 89: name = "X-Flow";
		case 90: name = "Alien";
		case 91: name = "X-Flow";
		case 92: name = "Alien";
		case 93: name = "X-Flow";
		case 94: name = "Alien";
		case 95: name = "X-Flow";
		case 99: name = "Chrome";
		case 100: name = "Chrome Grill";
		case 101: name = "Chrome Flames";
		case 102: name = "Chrome Strip";
		case 103: name = "Convertible";
		case 104: name = "Chrome";
		case 105: name = "Slamin";
		case 106: name = "Chrome Arches";
		case 107: name = "Chrome Strip";
		case 108: name = "Chrome Strip";
		case 109: name = "Chrome";
		case 110: name = "Slamin";
		case 113: name = "Chrome";
		case 114: name = "Slamin";
		case 115: name = "Chrome";
		case 116: name = "Slamin";
		case 117: name = "Chrome";
		case 118: name = "Chrome Trim";
		case 119: name = "Wheelcovers";
		case 120: name = "Chrome Trim";
		case 121: name = "Wheelcovers";
		case 122: name = "Chrome Flames";
		case 123: name = "Bullbar Chrome Bars";
		case 124: name = "Chrome Arches";
		case 125: name = "Bullbar Chrome Lights";
		case 126: name = "Chrome";
		case 127: name = "Slamin";
		case 128: name = "Vinyl Hardtop";
		case 129: name = "Chrome";
		case 130: name = "Hardtop";
		case 131: name = "Softtop";
		case 132: name = "Slamin";
		case 133: name = "Chrome Strip";
		case 134: name = "Chrome Strip";
		case 135: name = "Slamin";
		case 136: name = "Chrome";
		case 137: name = "Chrome Strip";
		case 138: name = "Alien";
		case 139: name = "X-Flow";
		case 140: name = "X-Flow";
		case 141: name = "Alien";
		case 142: name = "Left Oval Vents";
		case 143: name = "Right Oval Vents";
		case 144: name = "Left Square Vents";
		case 145: name = "Right Square Vents";
		case 146: name = "X-Flow";
		case 147: name = "Alien";
		case 148: name = "X-Flow";
		case 149: name = "Alien";
		case 150: name = "Alien";
		case 151: name = "X-Flow";
		case 152: name = "X-Flow";
		case 153: name = "Alien";
		case 154: name = "Alien";
		case 155: name = "Alien";
		case 156: name = "X-Flow";
		case 157: name = "X-Flow";
		case 158: name = "X-Flow";
		case 159: name = "Alien";
		case 160: name = "Alien";
		case 161: name = "X-Flow";
		case 162: name = "Alien";
		case 163: name = "X-Flow";
		case 164: name = "Alien";
		case 165: name = "X-Flow";
		case 166: name = "Alien";
		case 167: name = "X-Flow";
		case 168: name = "Alien";
		case 169: name = "Alien";
		case 170: name = "X-Flow";
		case 171: name = "Alien";
		case 172: name = "X-Flow";
		case 173: name = "X-Flow";
		case 174: name = "Chrome";
		case 175: name = "Slamin";
		case 176: name = "Chrome";
		case 177: name = "Slamin";
		case 178: name = "Slamin";
		case 179: name = "Chrome";
		case 180: name = "Chrome";
		case 181: name = "Slamin";
		case 182: name = "Chrome";
		case 183: name = "Slamin";
		case 184: name = "Chrome";
		case 185: name = "Slamin";
		case 186: name = "Slamin";
		case 187: name = "Chrome";
		case 188: name = "Slamin";
		case 189: name = "Chrome";
		case 190: name = "Slamin";
		case 191: name = "Chrome";
		case 192: name = "Chrome";
		case 193: name = "Slamin";
	}
	return name;
}

//
public OnPlayerRequestClass(playerid, classid)
{
    if (IsPlayerNPC(playerid)) return 1;
	if (state_on[playerid] == 0)
	{
		state_on[playerid] = 1;
		SetSpawnInfo(playerid, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0) ;
		SpawnPlayer(playerid);
		ClearChat(playerid);
	}
    return 1;
}

//
public OnPlayerConnect(playerid)
{
    if (IsPlayerNPC(playerid)) return 1;
	TextDrawShowForPlayer(playerid, TD_Load[0]);
	new playerIP[32], gformat[256];
	GetPlayerIp(playerid, playerIP, sizeof playerIP);
	if (CheckBan(playerIP) == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_GENERAL, "Has sido expulsado del servidor, tu cuenta está baneada. (Web: www.cr-rp.com)");
		SetTimerEx("TimerKICK", 1000, false, "d", playerid);
		return 1;
 	}
	// nombre inválido
	if (!IsValidRoleplayName(NombreOriginal(playerid)))
	{
		format(gformat, sizeof gformat, "{FFFFFF}Has ingresado con un nombre inválido: {FFBF00}%s{FFFFFF}\n\n\
		- Formato correcto ({00CC00}Nombre_Apellido{FFFFFF})\n- Ejemplo ({FFBF00}Mario_Villanueva{FFFFFF})\n", NombreOriginal(playerid));
		Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Expulsado", gformat, "Ok", "");
		SetTimerEx("TimerKICK", 1000, false, "d", playerid);
		return 1;
	}
	// contador de usuarios
	state_on[playerid] = 0;
	PlayAudioStreamForPlayer(playerid, "http://www.cr-rp.com/sorry.mp3");
	TextDrawShowForPlayer(playerid, TD_Load[1]);
	TotalConnect++;
	if (Iter_Count(Player) > MaxPlayersConnected)
	{
		MaxPlayersConnected = Iter_Count(Player);
		gettime(MPHour, MPMinute);
		getdate(MPYear, MPMonth, MPDay);
	}
	if (MaxPlayersConnected > MAX_PLAYERS) MaxPlayersConnected = MAX_PLAYERS;

    reset_InfoPlayer(playerid);         // limpieza InfoPlayer
	CheckPlayerIP(playerid);            // sistema de multicuenta por IP
	resetPlayerVariables(playerid);     // limpieza de variables 1
	OnPlayerCleanVariables(playerid);	// limpieza de variables 2
	MapsRemoveForPlayer(playerid);      // remueve mapeos
	OnPlayerTextDraw(playerid);         // PlayerTextDraw
	SyncPlayerTime(playerid);           // tiempo real
	ResetPlayerDamages(playerid);       // limpieza de heridas

	SetPlayerColor(playerid, 0x00000000); // color logeo
	PlayerTextDrawShow(playerid, TDping_fps[playerid]);
	return 1;
}

IsValidRoleplayName(const name[])
{
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

OnPlayerCleanVariables(playerid) // by edinsonwalker, ordené todo XD
{
    TimerRepartos[playerid] = -1;

	RepartoID[playerid] = -1;
	RepartoCasa[playerid] = -1;
	RepartoNegocio[playerid] = -1;
	RepartoPago[playerid] = 0;

	CulandoPrecio[playerid] = 0;
	CulandoCliente[playerid] = -1;
	CulandoNegocio[playerid] = -1;
	
	DeletePVar(playerid, "ModoSpray");
	SetPVarString(playerid, "TextoGraffiti", "");
	SetPVarInt(playerid, "LetraGraffiti", 5);
	
	TimerWeaponCreate[playerid] = -1;

	MensajeMuelto[playerid] = 0;
	GetTextDraw[playerid] = 0;
	ConBalasGoma[playerid] = 0;
	test_rol[playerid] = 5;
	
    show_velocimetro[playerid] = 0;
	PlayerViewAnunce[playerid] = 0;
	SetPVarString(playerid, "anunce1", "");
	SetPVarString(playerid, "anunce2", "");
	SetPVarString(playerid, "anunce3", "");
	SetPVarString(playerid, "anunce4", "");
	SetPVarString(playerid, "anunce5", "");

    LlegandoLlamadoMecanico[playerid] = 0;
	EnLlamadoMecanico[playerid] = 0;
	TallerCliente[playerid] = -1;
	TallerMecanico[playerid] = -1;
	TallerColor1[playerid] = -1;
	TallerColor2[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
		
	DeletePVar(playerid, "desbug_muerte");
	PosSpawnBug[playerid][0] = 2105.0334;
	PosSpawnBug[playerid][1] = -1473.9088;
	PosSpawnBug[playerid][2] = 24.1237;
	PosSpawnBug[playerid][3] = 0.0000;
	PosVwBug[playerid] = 0;
	PosIntBug[playerid] = 0;

	SetPVarInt(playerid, "PlayerCuffed", 0);
	EditandoObjetoJ[playerid] = 0;

	Altavoz[playerid] = 0;
	EnLlamada[playerid] = 0; //Sistema teléfono
	ToqueLlamada[playerid] = 0;
	PersonaEnLlamada[playerid] = -1;

	edicion_sql_actual[playerid] = -1;
	InfoPlayer[playerid][pEditingMode] = 0;

	ContadorCuraciones[playerid] = 0;
	KillTimer(random_abstinence[playerid]);
	abstinence_power[playerid] = 0;
	random_abstinence[playerid] = 0;

	UsedFind[playerid] = 0;

	playerTextdraw[playerid] = false;

	CountKick[playerid] = 0;
	TimerCkick[playerid] = -1;
	CountBan[playerid] = 0;
	TimerCban[playerid] = -1;
	CountWarn[playerid] = 0;
	TimerCwarn[playerid] = -1;

    papilla[playerid] = 0;
	AdminChat[playerid] = 0;
	EnViajeQuimicos[playerid] = 0;
	EnViajeDrogas[playerid] = 0;
	UsandoVehFabrica[playerid] = 0;
	FabricaID[playerid] = -1;
	PlayerDuda[playerid] = 0;
	alm(PlayerTextoDuda[playerid], "nada");
    InfoPlayer[playerid][pLlaveVehicle] = 0;
	TomandoTrabajo[playerid] = -1;
	IDfabrica[playerid] = -1;
	YaOfrecioEmpleo[playerid] = -1;
	SetPVarInt(playerid, "mueltito", 0);
	Taseado[playerid] = 0;
    RecargarTiempo[playerid] = -1;
	Anti[playerid][BalasW] = 0;
    CederTiempo[playerid] = -1;
	countGameTime[playerid] = 0;
    RandomMascara[playerid] = Random(1000, 9999);
	player_weapon[playerid] = -1;
	player_asesino[playerid] = -1;
    DeletePVar(playerid, "EstaCrack");
	intentos_load[playerid] = 0;
	Afk[playerid] = 0;
    autorepara[playerid] = 0;
	// Administración.
	See_MP[playerid] = 0;
	See_FRC[playerid] = 0; // Frecuencia de la radio.
}

OnPlayerTextDraw(playerid)
{
	// Textdraw's by EdinsonWalker
	draw_money[playerid] = CreatePlayerTextDraw(playerid, 617.496582, 138.666625, "");
	PlayerTextDrawLetterSize(playerid, draw_money[playerid], 0.337686, 1.255832);
	PlayerTextDrawAlignment(playerid, draw_money[playerid], 3);
	PlayerTextDrawColor(playerid, draw_money[playerid], -16776961);
	PlayerTextDrawSetShadow(playerid, draw_money[playerid], 0);
	PlayerTextDrawSetOutline(playerid, draw_money[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, draw_money[playerid], 255);
	PlayerTextDrawFont(playerid, draw_money[playerid], 3);
	PlayerTextDrawSetProportional(playerid, draw_money[playerid], 1);

	TDping_fps[playerid] = CreatePlayerTextDraw(playerid, 632.489501, 433.250091, "");
	PlayerTextDrawLetterSize(playerid, TDping_fps[playerid], 0.195723, 0.818333);
	PlayerTextDrawAlignment(playerid, TDping_fps[playerid], 3);
	PlayerTextDrawColor(playerid, TDping_fps[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TDping_fps[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TDping_fps[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TDping_fps[playerid], 255);
	PlayerTextDrawFont(playerid, TDping_fps[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TDping_fps[playerid], 1);

	// pCocheVS
	pCocheVS[playerid][0] = CreatePlayerTextDraw(playerid, 317.899597, 73.751869, "Vehiculo"); // NOMBRE COCHE
	PlayerTextDrawLetterSize(playerid, pCocheVS[playerid][0], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, pCocheVS[playerid][0], 2);
	PlayerTextDrawColor(playerid, pCocheVS[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, pCocheVS[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, pCocheVS[playerid][0], 255);
	PlayerTextDrawFont(playerid, pCocheVS[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, pCocheVS[playerid][0], 1);

	pCocheVS[playerid][1] = CreatePlayerTextDraw(playerid, 221.000000, 96.511108, ""); // MODEL 1
	PlayerTextDrawTextSize(playerid, pCocheVS[playerid][1], 94.000000, 92.000000);
	PlayerTextDrawAlignment(playerid, pCocheVS[playerid][1], 1);
	PlayerTextDrawColor(playerid, pCocheVS[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, pCocheVS[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, pCocheVS[playerid][1], 336925951);
	PlayerTextDrawFont(playerid, pCocheVS[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, pCocheVS[playerid][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, pCocheVS[playerid][1], 411);
	PlayerTextDrawSetPreviewRot(playerid, pCocheVS[playerid][1], 0.000000, 0.000000, 0.000000, 0.699998);
	PlayerTextDrawSetPreviewVehCol(playerid, pCocheVS[playerid][1], 3, 1);

	pCocheVS[playerid][2] = CreatePlayerTextDraw(playerid, 321.733428, 96.525917, ""); // MODEL 2
	PlayerTextDrawTextSize(playerid, pCocheVS[playerid][2], 94.000000, 92.000000);
	PlayerTextDrawAlignment(playerid, pCocheVS[playerid][2], 1);
	PlayerTextDrawColor(playerid, pCocheVS[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, pCocheVS[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, pCocheVS[playerid][2], 336925951);
	PlayerTextDrawFont(playerid, pCocheVS[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, pCocheVS[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, pCocheVS[playerid][2], 411);
	PlayerTextDrawSetPreviewRot(playerid, pCocheVS[playerid][2], 0.000000, 0.000000, 180.000000, 0.699998);
	PlayerTextDrawSetPreviewVehCol(playerid, pCocheVS[playerid][2], 3, 1);

	pCocheVS[playerid][3] = CreatePlayerTextDraw(playerid, 220.933334, 192.796188, ""); // MODEL 3
	PlayerTextDrawTextSize(playerid, pCocheVS[playerid][3], 94.000000, 92.000000);
	PlayerTextDrawAlignment(playerid, pCocheVS[playerid][3], 1);
	PlayerTextDrawColor(playerid, pCocheVS[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, pCocheVS[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, pCocheVS[playerid][3], 336925951);
	PlayerTextDrawFont(playerid, pCocheVS[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, pCocheVS[playerid][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, pCocheVS[playerid][3], 411);
	PlayerTextDrawSetPreviewRot(playerid, pCocheVS[playerid][3], 0.000000, 0.000000, 90.000000, 0.899999);
	PlayerTextDrawSetPreviewVehCol(playerid, pCocheVS[playerid][3], 3, 1);

	pCocheVS[playerid][4] = CreatePlayerTextDraw(playerid, 321.733398, 192.851837, ""); // MODEL 4
	PlayerTextDrawTextSize(playerid, pCocheVS[playerid][4], 94.000000, 92.000000);
	PlayerTextDrawAlignment(playerid, pCocheVS[playerid][4], 1);
	PlayerTextDrawColor(playerid, pCocheVS[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, pCocheVS[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, pCocheVS[playerid][4], 336925951);
	PlayerTextDrawFont(playerid, pCocheVS[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, pCocheVS[playerid][4], 0);
	PlayerTextDrawSetPreviewRot(playerid, pCocheVS[playerid][4], 0.000000, 0.000000, 270.000000, 0.899999);
	PlayerTextDrawSetPreviewVehCol(playerid, pCocheVS[playerid][4], 3, 1);

	pCocheVS[playerid][5] = CreatePlayerTextDraw(playerid, 318.433441, 286.410949, "9000000$"); // PRECIO
	PlayerTextDrawLetterSize(playerid, pCocheVS[playerid][5], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, pCocheVS[playerid][5], 2);
	PlayerTextDrawColor(playerid, pCocheVS[playerid][5], 8388863);
	PlayerTextDrawSetShadow(playerid, pCocheVS[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, pCocheVS[playerid][5], 255);
	PlayerTextDrawFont(playerid, pCocheVS[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, pCocheVS[playerid][5], 1);

	pCocheVS[playerid][6] = CreatePlayerTextDraw(playerid, 317.666015, 299.177978, "Maletero:_10_ranuras"); // RANURAS MALETERO
	PlayerTextDrawLetterSize(playerid, pCocheVS[playerid][6], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, pCocheVS[playerid][6], 2);
	PlayerTextDrawColor(playerid, pCocheVS[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, pCocheVS[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, pCocheVS[playerid][6], 255);
	PlayerTextDrawFont(playerid, pCocheVS[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, pCocheVS[playerid][6], 1);

	//
	velocimetro_bar[playerid] = CreatePlayerProgressBar(playerid, 541.000000, 395.000000, 70.000000, 6.199998, -1429936641, 1000.0);

	velocimetro_pice[playerid][0] = CreatePlayerTextDraw(playerid, 579.411315, 351.631439, "000");
	PlayerTextDrawLetterSize(playerid, velocimetro_pice[playerid][0], 0.459766, 3.473984);
	PlayerTextDrawAlignment(playerid, velocimetro_pice[playerid][0], 3);
	PlayerTextDrawColor(playerid, velocimetro_pice[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, velocimetro_pice[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, velocimetro_pice[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, velocimetro_pice[playerid][0], 255);
	PlayerTextDrawFont(playerid, velocimetro_pice[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, velocimetro_pice[playerid][0], 1);

	velocimetro_pice[playerid][1] = CreatePlayerTextDraw(playerid, 576.589172, 380.217102, "Freight_Flat_Trailer");
	PlayerTextDrawLetterSize(playerid, velocimetro_pice[playerid][1], 0.141643, 1.149070);
	PlayerTextDrawTextSize(playerid, velocimetro_pice[playerid][1], 0.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, velocimetro_pice[playerid][1], 2);
	PlayerTextDrawColor(playerid, velocimetro_pice[playerid][1], 8388863);
	PlayerTextDrawSetShadow(playerid, velocimetro_pice[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, velocimetro_pice[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, velocimetro_pice[playerid][1], 255);
	PlayerTextDrawFont(playerid, velocimetro_pice[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, velocimetro_pice[playerid][1], 1);

	velocimetro_pice[playerid][2] = CreatePlayerTextDraw(playerid, 581.117675, 358.219726, "Gas:_200");
	PlayerTextDrawLetterSize(playerid, velocimetro_pice[playerid][2], 0.135526, 1.081722);
	PlayerTextDrawAlignment(playerid, velocimetro_pice[playerid][2], 1);
	PlayerTextDrawColor(playerid, velocimetro_pice[playerid][2], 8388863);
	PlayerTextDrawSetShadow(playerid, velocimetro_pice[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, velocimetro_pice[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, velocimetro_pice[playerid][2], 255);
	PlayerTextDrawFont(playerid, velocimetro_pice[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, velocimetro_pice[playerid][2], 1);

	velocimetro_pice[playerid][3] = CreatePlayerTextDraw(playerid, 577.058471, 394.967498, "HP:_1000");
	PlayerTextDrawLetterSize(playerid, velocimetro_pice[playerid][3], 0.140235, 0.668860);
	PlayerTextDrawAlignment(playerid, velocimetro_pice[playerid][3], 2);
	PlayerTextDrawColor(playerid, velocimetro_pice[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, velocimetro_pice[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, velocimetro_pice[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, velocimetro_pice[playerid][3], 255);
	PlayerTextDrawFont(playerid, velocimetro_pice[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, velocimetro_pice[playerid][3], 1);

	TD_AccountSkin[playerid] = CreatePlayerTextDraw(playerid, 239.500000, 124.511131, "");
	PlayerTextDrawTextSize(playerid, TD_AccountSkin[playerid], 144.000000, 154.000000);
	PlayerTextDrawAlignment(playerid, TD_AccountSkin[playerid], 1);
	PlayerTextDrawColor(playerid, TD_AccountSkin[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_AccountSkin[playerid], 0);
	PlayerTextDrawFont(playerid, TD_AccountSkin[playerid], 5);
	PlayerTextDrawBackgroundColor(playerid, TD_AccountSkin[playerid], 0x00000000);
	PlayerTextDrawSetProportional(playerid, TD_AccountSkin[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, TD_AccountSkin[playerid], 305);
	PlayerTextDrawSetPreviewRot(playerid, TD_AccountSkin[playerid], -11.000000, 0.000000, -55.000000, 1.000000);
}

//****************************************************************************

resetPlayerVariables(playerid)
{
	CompraVehiculo[playerid] = -1;
	mmaguebo_abusadol[playerid] = 0;
    slotselection[playerid] = -1;

	GunVendedor[playerid] = -1;
	GunCliente[playerid] = -1;
	GunObjeto[playerid] = 0;
	GunCantidad[playerid] = 0;
	GunPrecio[playerid] = 0;

	usuario_registro[playerid] = 0;
	altavoz_phone[playerid] = 0;
	refuerzos_pd[playerid] = 0;

	Osql_vehicle[playerid] = 0;
	Pla_vehicle[playerid] = 999;
	Price_vehicle[playerid] = 0;

	SetPVarInt(playerid, "shrequest", INVALID_PLAYER_ID);

	NombreLicencia[playerid] = 999;
	PrecioLicencia[playerid] = 0;

	BigEar[playerid] = 0;
	NewbieTimer[playerid] = 0; 			VIPTimer[playerid] = 0;
	gLastCar[playerid] = 0;
	TicketOffer[playerid] = 999; 				TicketMoney[playerid] = 0;          InsideMainMenu[playerid] = 0;
	Paquetes[playerid] = 0;

	OwnableCarOffer[playerid] = 999; 			OwnableCarID[playerid] = 999; 		OwnableCarPrice[playerid] = 0; 		BlindFold[playerid] = 0;
  			AdminDuty[playerid] = 0; 			PlayerNeedsHelp[playerid] = 0;

						PuedeD[playerid] = 0;
	Facturing[playerid] = 0; 					fPay[playerid] = 0; 				fDest[playerid] = 0; 				fFacturer[playerid] = 0;
	Refueling[playerid] = -1;		 		RequestingBackup[playerid] = 0; 	PlayersChannel[playerid] = 999;
	Autorizado[playerid] = 0;
    Lineas[playerid] = 0; 						Carnada[playerid] = 0;
 	RegText[playerid] = 0;						RegConfig[playerid] = 0;			HidePM[playerid] = 0;

	FishCount[playerid] = 0;			FreezeLast[playerid] = 0; 			MoneyMessage[playerid] = 0;
	Condom[playerid] = 0;
				TakingLesson[playerid] = 0;         RStep[playerid] = 0;

                     OnDuty[playerid] = 0;               arr_Towing[playerid] = INVALID_VEHICLE_ID;


	MatsOffer[playerid] = 999;                  MatsPrice[playerid] = 0;            MatsAmount[playerid] = 0;           gPlayerUsingLoopingAnim[playerid] = 0;

 	VIPPrice[playerid] = 0;                     VIPOffer[playerid] = 999;
	FOffer[playerid] = 999;						FPrice[playerid] = 0; 				FAmount[playerid] = 0;
         JetPack[playerid] = 0;
                 EMSAccepted[playerid] = 999;        EMSCallTime[playerid] = 0;          RefillOffer[playerid] = 999;
	RepairCar[playerid] = 0;                    RepairOffer[playerid] = 999;        RepairPrice[playerid] = 0;
	RefillPrice[playerid] = 0;
	InviteOffer[playerid] = 999;                InviteFaction[playerid] = 0;        InviteFamily[playerid] = 255;       JustDuda[playerid] = -1;
	                JustAfk[playerid] = -1;
	HouseOffer[playerid] = 999;                 HousePrice[playerid] = 0;           House[playerid] = -1;
	JailPrice[playerid] = 0;                        JustReported[playerid] = -1;
	Spectating[playerid] = 0;                   GettingSpectated[playerid] = 999;   Spectate[playerid] = 999;           Unspec[playerid][sLocal] = 255;
	PlayerDrunkTime[playerid] = 0;           	PlayerDrunk[playerid] = 0;          Editing[playerid] = 0;
	AntiAbuso[playerid] = 0;            HaceAbuso[playerid] = 0;
    Blinded[playerid] = 0; 						Tied[playerid] = 0;         		Intentar[playerid] = 0;
	ShowRules[playerid] = 0;                    RulesTime[playerid] = 0;
    CommandSpamTimes[playerid] = 0;				CommandSpamUnmute[playerid] = 0;
	alm(QFA[playerid], "Nadie");
	//
	BarObject[playerid] = 0; ObjectBar[playerid] = 0;
	GiveKeysTo[playerid] = INVALID_PLAYER_ID;

	return true;
}

public OnPlayerDisconnect(playerid, reason)
{
	if (InfoPlayer[playerid][pBaneo] != 0) return 1; // new 11/01/2020
	if (usuario_registro[playerid] != 2) return 1; // new 11/01/2020
	new gformat[256];
	//última conexión & posiciones
	GetPlayerPos(playerid, InfoPlayer[playerid][pPosicionX], InfoPlayer[playerid][pPosicionY], InfoPlayer[playerid][pPosicionZ]);
	GetPlayerFacingAngle(playerid, InfoPlayer[playerid][pPosicionR]);
	InfoPlayer[playerid][pInterior] = GetPlayerInterior(playerid);
	InfoPlayer[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
	InfoPlayer[playerid][pUltimaConexion] = FechaHoy();

	DestroyDynamic3DTextLabelEx(InfoPlayer[playerid][pNameTag]);
        
	//repartos 21/01/2020
	if (RepartoID[playerid] != -1)
	{
		RepartoID[playerid] = -1;
		if (InfoPlayer[playerid][pManoDerecha] == 55)
		{
			InfoPlayer[playerid][pManoDerecha] = 0;
			InfoPlayer[playerid][pManoDerechaCant] = 0;
		}
		if (InfoPlayer[playerid][pManoIzquierda] == 55)
		{
			InfoPlayer[playerid][pManoIzquierda] = 0;
			InfoPlayer[playerid][pManoIzquierdaCant] = 0;
		}
	}
	//empleo
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2) && YaOfrecioEmpleo[playerid2] == playerid)
	{
		YaOfrecioEmpleo[playerid2] = -1;
		SendClientMessage(playerid2, COLOR_YELLOW, "Se desconectó el jugador que le ofreciste empleo.");
	}
	//boombox
	if (InfoBoombox[playerid][BB_obj])
	{
		DestroyDynamicObject(InfoBoombox[playerid][BB_obj]);
		DestroyDynamic3DTextLabel(Text3D: InfoBoombox[playerid][BB_label]);
		InfoBoombox[playerid][BB_obj] = 0;
		tirar_objeto(51, 1, InfoBoombox[playerid][BB_x], InfoBoombox[playerid][BB_y], InfoBoombox[playerid][BB_z], InfoBoombox[playerid][BB_vw], InfoBoombox[playerid][BB_int], 1);
		if (InfoBoombox[playerid][BB_area])
		{
			foreach(Player, playerid2) if (IsPlayerInDynamicArea(playerid2, InfoBoombox[playerid][BB_area]))
			{
				StopAudioStreamForPlayer(playerid2);
				SendClientMessage(playerid2, COLOR_YELLOW, "* El dueño del boombox ha salido del servidor.");
				Streamer_Update(playerid2);
			}
		}
	}

	//respawn vehicle fabrica
	if (UsandoVehFabrica[playerid] != 0)
	{
		SetVehicleToRespawn(UsandoVehFabrica[playerid]);
	}
	//textdraw's
	PlayerTextDrawDestroy(playerid, TDping_fps[playerid]);
	PlayerTextDrawDestroy(playerid, draw_money[playerid]);
	
    DestroyPlayerProgressBar(playerid, velocimetro_bar[playerid]);
	Loop(x, 4, 0) { PlayerTextDrawDestroy(playerid, velocimetro_pice[playerid][x]); }
	Loop(x, 7, 0) { PlayerTextDrawDestroy(playerid, pCocheVS[playerid][x]); }

	//variantes null
	KillTimer(Timer[playerid]);

	//llamadas gc
	KillTimer(ToqueLlamadaTimer[playerid]); //cmd_llamar
	if (PersonaEnLlamada[playerid] != -1) KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]); //cmd_llamar
	if (PersonaEnLlamada[playerid] != -1)
	{
		if (EnLlamada[PersonaEnLlamada[playerid]] == 3)
		{
			SendClientMessage(PersonaEnLlamada[playerid], COLOR_LIGHTRED, "Coste de la llamada: 1$");
			GivePlayerCash(PersonaEnLlamada[playerid], -1, "costo de llamada");
		}
	}
	for(new i=0; i<MAX_PLAYERS; i++) { if(PersonaEnLlamada[i] == playerid){SendClientMessage(i, COLOR_LIGHTRED, "Se ha cortado la línea..."); EnLlamada[i] = 0; PersonaEnLlamada[i] = -1; break;} }

	//estado crack
	if (GetPVarInt(playerid, "EstaCrack") == 1)
	{
		guardar_int_mysql("cuentas", "Hospital", InfoPlayer[playerid][pID], 1);
	    KillEMSQueue(playerid);
	}

	//llave prestada
	if (InfoPlayer[playerid][pLlaveVehicle] != 0)
	{
		InfoVehiculo[InfoPlayer[playerid][pLlaveVehicle]][vLlavePrestada] = -1;
	}

	//desconectar esposado
	if (GetPVarInt(playerid, "PlayerCuffed") == 1 && reason != 2)
	{
		InfoPlayer[playerid][pSancionado] = 1;
		InfoPlayer[playerid][pTiempoSancion] += 10*60;
		alm(InfoPlayer[playerid][pBySancion], "SERVER");
		alm(InfoPlayer[playerid][pRazonSancion], "Desconect (/esposar)");
		mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Sancionado = 1, TiempoSancion = 600, BySancion = '%e', RazonSancion = '%e' WHERE ID = '%d'",
		InfoPlayer[playerid][pBySancion], InfoPlayer[playerid][pRazonSancion], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, gformat);
	}

	//info desconexión
	static const reasonQuit[3][32] = {"Posible Crash", "Abandono", "Kick/Ban"};
	format(gformat, sizeof gformat, "%s ha salido del servidor. (%s)", NombreOriginal(playerid), reasonQuit[reason]);
	ProxDetector(20.0, playerid, gformat, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);

	//nombre temporal
	if (!isnull(InfoPlayer[playerid][pNombre_Temporal]))
	{
		alm(InfoPlayer[playerid][pNombre_Temporal], "");
		SetPlayerName(playerid, InfoPlayer[playerid][pNombre_Apellido]);
	}
	//nombre temporal pd
	if (!isnull(InfoPlayer[playerid][pNombre_PD]))
	{
		alm(InfoPlayer[playerid][pNombre_PD], "");
		SetPlayerName(playerid, InfoPlayer[playerid][pNombre_Apellido]);
	}
	
	if (ShowRules[playerid] == 1)
	{
		InfoPlayer[playerid][pPosicionX] = GetPVarFloat(playerid, "rOldX");
		InfoPlayer[playerid][pPosicionY] = GetPVarFloat(playerid, "rOldY");
		InfoPlayer[playerid][pPosicionZ] = GetPVarFloat(playerid, "rOldZ");
		InfoPlayer[playerid][pInterior] = GetPVarInt(playerid, "rOldInt");
		InfoPlayer[playerid][pVirtualWorld] = GetPVarInt(playerid, "rOldVW");
	}
	if (Spectate[playerid] != 999)
	{
		InfoPlayer[playerid][pPosicionX] = GetPVarFloat(playerid, "SpecPosX");
		InfoPlayer[playerid][pPosicionY] = GetPVarFloat(playerid, "SpecPosY");
		InfoPlayer[playerid][pPosicionZ] = GetPVarFloat(playerid, "SpecPosZ");
        InfoPlayer[playerid][pInterior] = GetPVarInt(playerid, "SpecInt");
		InfoPlayer[playerid][pVirtualWorld] = GetPVarInt(playerid, "SpecVW");
	    GettingSpectated[Spectate[playerid]] = 999;
	    Spectate[playerid] = 999;
	}
	
	//reporte activo
	Loop(x, MAX_REPORTS, 0) if (Reports[x][ReportFrom] == playerid)
	{
		Reports[x][ReportFrom] = 999;
		Reports[x][BeingUsed] = 0;
		Reports[x][TimeToExpire] = 0;
	}

	//actualiza sql positions
	new query[1028];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Vida = '%f', Chaleco = '%f', Interior = '%d', VirtualWorld = '%d', \
	UltimaConexion = '%e', TiempoSancion = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
	InfoPlayer[playerid][pPosicionX], InfoPlayer[playerid][pPosicionY], InfoPlayer[playerid][pPosicionZ], InfoPlayer[playerid][pPosicionR], InfoPlayer[playerid][pVida], InfoPlayer[playerid][pChaleco], InfoPlayer[playerid][pInterior], InfoPlayer[playerid][pVirtualWorld],
	InfoPlayer[playerid][pUltimaConexion], InfoPlayer[playerid][pTiempoSancion], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);

	//desconectar vehículos player.
	Quit_Vehicles(playerid);
 	return 1;
}

funcion MissileLaunchEx(Float:x, Float:y, Float:z, Float:radius, type)
{
	new string[170];
	CreateExplosionEx(x, y, z, type, radius);
	Misile_Launcher--;
	format(string, sizeof string, "[CENTRAL] Lanzamiento denotado en %0.2f - %0.2f - %0.2f (radio %f)", x, y, z, radius);
	SendRadioMessage(3, COLOR_RADIO, string);
	return 1;
}

funcion MissileLaunch(vehicleid)
{
	if (!GetVehicleModel(vehicleid))
	{
		SendRadioMessage(3, COLOR_RADIO, "[CENTRAL] Lanzamiento fallido, el vehículo no se encontró.");
		return 1;
	}
	new Float:x, Float:y, Float: z, string[170];
	GetVehiclePos(vehicleid, x, y, z);
	CreateExplosionEx(x, y, z, 2, 10.0);
	CreateExplosionEx(x, y, z, 2, 10.0);
	CreateExplosionEx(x, y, z, 2, 10.0);
	Misile_Launcher--;
	format(string, sizeof string, "[CENTRAL] Lanzamiento denotado en objetivo vehículo %d. ", vehicleid);
	SendRadioMessage(3, COLOR_RADIO, string);
	return 1;
}

//*******************funciones de puertas dinamicas*******************
forward IntentarPuenteTimer(playerid);
public IntentarPuenteTimer(playerid)
{
	IntentarPuente[playerid] = 0;
	SendClientMessage(playerid, COLOR_GRAD2, "[CMD] Puedes usar de nuevo el comando /puente.");
}
forward IntentarTimer(playerid);
public IntentarTimer(playerid)
{
	Intentar[playerid] = 0;
}
forward AntiAbusoTimer(playerid);
public AntiAbusoTimer(playerid)
{
	AntiAbuso[playerid] = 0;
}
funcion CloseCourtGate1()
{
	MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934,7698.23632812,4);
	return 1;
}
funcion CloseCourtGate2()
{
	MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719,7698.24169922,4);
	return 1;
}

funcion CloseDoorPJ(){ // Cierra las puertas del Poder Judicial.
		MoveDynamicObject(PJDOOR, 1440.71216, -1469.97485, 1615.26636,1.5); // Cerrado.
       	return 1;
}
funcion CloseDoorPJ2(){ // Cierra las puertas del Poder Judicial.
		MoveDynamicObject(PJDOOR2, 1422.93811, -1469.96814, 1616.24707,1.5); // Cerrado.
       	return 1;
}
funcion CloseDoorPJCELDA(){ // Cierra las CELDAS del Poder Judicial.
		MoveDynamicObject(PJCELDA, 1436.45630, -1479.50000, 1617.51892, 0.5); // Cerrado.
       	return 1;
}
funcion CloseDoorPJCELDA2(){ // Cierra las CELDAS del Poder Judicial.
		MoveDynamicObject(PJCELDA2, 1432.98425, -1479.50000, 1617.51892, 0.5); // Cerrado.
       	return 1;
}
funcion OpenDoorNG(){
       MoveDynamicObject(saem1, 2457.7949, -2254.7595, 26.90,5.0);
       return 1;
}
funcion OpenDoorNG2(){
       MoveDynamicObject(saem2, 2338.1057, -2353.8828, 15.2,5.0);
       return 1;
}
funcion OpenDoorNG3(){
       MoveDynamicObject(saem3, 2273.5957, -2663.2905, 15.2,5.0);
       return 1;
}
funcion OpenDoorNGSF(){
       MoveDynamicObject(saemSF, -1529.0433, 482.4390, 9.0600,5.0);
       return 1;
}
funcion OpenDoorNGLV(){
       MoveDynamicObject(saemLV, 135.24150, 1941.01294, 20.59000,5.0);
       return 1;
}
funcion OpenDoorNGLV2(){
       MoveDynamicObject(saemLV2, 348.98410, 1801.11804, 20.27390,5.0,   0.00000, 358.25000, 41.75000);
       return 1;
}

funcion CloseCell3()
{
	MoveDynamicObject(fen3,1429.50000000,-1554.80004883,4334.70019531,4);
	return 1;
}
funcion CloseCell4()
{
	MoveDynamicObject(fen4,1422.19995117,-1567.00000000,4334.60009766,4);
	return 1;
}
funcion CloseCell5()
{
	MoveDynamicObject(fen6,1430.19995117,-1566.69995117,4334.70019531,4);
	return 1;
}
funcion CloseCell6()
{
	MoveDynamicObject(fen5,1414.80004883,-1566.69995117,4334.60009766,4);
	return 1;
}

funcion GateClosepeaje1()
{
	MoveDynamicObject(peaje1,35.25729, -1516.96399, 4.24860, 2.5);
	return 1;
}

funcion GateClosepeaje2()
{
	MoveDynamicObject(peaje2,67.85014, -1545.88879, 4.02450, 2.5);
	return 1;
}

SetPlayerSpawn(playerid)
{
	SetPlayerTeam(playerid, 1);
	if (usuario_registro[playerid] == 0)
	{
		SetTimerEx("FreezePlayer", 1000, false, "i", playerid);
		state_on[playerid] = 2;
		//camera
		TogglePlayerSpectating(playerid, true);
		SetCameraIntro(playerid);
		PreguntaTestRol(playerid, 1, 0);
		return 1;
	}
	else
	{
		SetPlayerColor(playerid, 0xFFFFFF00);
		if (GetPVarInt(playerid, "SpecOff" ) == 1 )
		{
			SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecPosX"), GetPVarFloat(playerid, "SpecPosY"), GetPVarFloat(playerid, "SpecPosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecInt"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
			SetPVarInt(playerid, "SpecOff", 0 );
			SetPVarInt(playerid, "SpecState", -1 );
			return 1;
		}
		new rand;
		switch (InfoPlayer[playerid][pSancionado])
		{
		    case 1: // Jail OOC.
			{
			    new stringjail[256], minutos = (InfoPlayer[playerid][pTiempoSancion]/60)+1;
			    InfoPlayer[playerid][pTogTelefono] = 0;
				SetPlayerPos(playerid, 2687.3630, 2705.2537, 22.9472);
			    SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, playerid+1);
				SetPlayerSkin(playerid, 50);
				SendClientMessage(playerid, COLOR_LIGHTRED, "{A2DC35}[INFO]:{FFFFFF} Estás en prisión, tienes que esperar a acabar tu condena administrativa.");
				format(stringjail, sizeof(stringjail), "(Tiempo: %d minutos) - Has sido jaileado por %s, motivo: %s", minutos, InfoPlayer[playerid][pBySancion], InfoPlayer[playerid][pRazonSancion]);
				SendClientMessage(playerid, COLOR_GRAD2, stringjail);
				TogglePlayerControllable(playerid, false);
				return 1;
			}
		    case 2: // Jail LSPD.
			{
			    InfoPlayer[playerid][pTogTelefono] = 0;
			    rand = random(sizeof(LSPDPrisonSpawns));
			    SetPlayerPos(playerid, LSPDPrisonSpawns[rand][0], LSPDPrisonSpawns[rand][1], LSPDPrisonSpawns[rand][2]);
			    LoadObjects(playerid);
				InfoPlayer[playerid][pInterior] = 1;
				SetPlayerInterior(playerid, 1);
				InfoPlayer[playerid][pVirtualWorld] = 1;
				SetPlayerVirtualWorld(playerid, 1);
				return 1;
			}
		    case 3: // Jail FBI.
			{
			    InfoPlayer[playerid][pTogTelefono] = 0;
			    rand = random(sizeof(FBIPrisonSpawns));
			    SetPlayerPos(playerid, FBIPrisonSpawns[rand][0], FBIPrisonSpawns[rand][1], FBIPrisonSpawns[rand][2]);
			    LoadObjects(playerid);
				InfoPlayer[playerid][pInterior] = 0;
				SetPlayerInterior(playerid, 0);
				InfoPlayer[playerid][pVirtualWorld] = 0;
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
		    case 5: // Jail SAEM.
			{
			    InfoPlayer[playerid][pTogTelefono] = 0;
	      		LoadObjects(playerid);
				SetPlayerInterior(playerid, 0);
				InfoPlayer[playerid][pInterior] = 0;
				rand = random(sizeof(SAEMPrisonSpawns));
				SetPlayerPos(playerid, SAEMPrisonSpawns[rand][0], SAEMPrisonSpawns[rand][1], SAEMPrisonSpawns[rand][2]);
				SetPlayerVirtualWorld(playerid, 1000);
				SetPlayerSkin(playerid, 50);
				return 1;
			}
		    case 6: // Jail Dillimore.
			{
			    InfoPlayer[playerid][pTogTelefono] = 0;
				SetPlayerInterior(playerid, 5);
				InfoPlayer[playerid][pInterior] = 5;
				rand = random(sizeof(PrisonDillmore));
				SetPlayerPos(playerid, PrisonDillmore[rand][0], PrisonDillmore[rand][1], PrisonDillmore[rand][2]);
				SetPlayerVirtualWorld(playerid, 5);
				return 1;
			}
		}
		if (GetPVarInt(playerid, "desbug_muerte") == 1)
		{
			SetPosEx(playerid, PosSpawnBug[playerid][0], PosSpawnBug[playerid][1], PosSpawnBug[playerid][2], PosSpawnBug[playerid][3], PosIntBug[playerid], PosVwBug[playerid], 1);
			dar_vida(playerid, 25); dar_chaleco(playerid, 0);
			SetPVarInt(playerid, "EstaCrack", 1);
			estado_xdxdxd(playerid, 2);
			SetCameraBehindPlayer(playerid);
			DeletePVar(playerid, "desbug_muerte");
			if (InfoPlayer[playerid][pDrogaTipo] != 0) EndEffectDroug(playerid, InfoPlayer[playerid][pDrogaTipo]);
			return 1;
		}
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	DestroyDynamic3DTextLabelEx(InfoPlayer[playerid][pNameTag]);
	SetPlayerColor(playerid, 0xFFFFFF00);
	GetPlayerPos(playerid, PosSpawnBug[playerid][0], PosSpawnBug[playerid][1], PosSpawnBug[playerid][2]);
	GetPlayerFacingAngle(playerid, PosSpawnBug[playerid][3]);
	PosVwBug[playerid] = GetPlayerVirtualWorld(playerid);
	PosIntBug[playerid] = GetPlayerInterior(playerid);
	SetPVarInt(playerid, "desbug_muerte", 1);
	return 1;
}

forward hide_inicie(playerid);
public hide_inicie(playerid)
{
	TextDrawHideForPlayer(playerid, TD_Load[0]);
	TextDrawHideForPlayer(playerid, TD_Load[1]);
}

SetCameraIntro(playerid)
{
	switch (random(10))
	{
		case 0:
		{
			InterpolateCameraPos(playerid, 2281.7715, -65.2711, 34.1500, 2281.7715, -65.2711, 34.1500, 1000);
			InterpolateCameraLookAt(playerid, 2281.9092, -64.2819, 33.9000, 2281.9092, -64.2819, 33.9000, 1000);
		}
		case 1:
		{
			InterpolateCameraPos(playerid, 2485.4258, -1083.5608, 52.2619, 2485.4258, -1083.5608, 52.2619, 1000);
			InterpolateCameraLookAt(playerid, 2484.6072, -1084.1326, 51.8069, 2484.6072, -1084.1326, 51.8069, 1000);
		}
		case 2:
		{
			InterpolateCameraPos(playerid, 2195.7659, -1073.9771, 51.9914, 2195.7659, -1073.9771, 51.9914, 1000);
			InterpolateCameraLookAt(playerid, 2196.5632, -1074.5787, 51.1814, 2196.5632, -1074.5787, 51.1814, 1000);
		}
		case 3:
		{
			InterpolateCameraPos(playerid, 1719.9323, -1302.8221, 22.6500, 1719.9323, -1302.8221, 22.6500, 1000);
			InterpolateCameraLookAt(playerid, 1719.5128, -1301.9159, 22.2500, 1719.5128, -1301.9159, 22.2500, 1000);
		}
		case 4:
		{
			InterpolateCameraPos(playerid, 931.6263, -1493.9928, 14.4238, 931.6263, -1493.9928, 14.4238, 1000);
			InterpolateCameraLookAt(playerid, 930.8324, -1493.3873, 14.3188, 930.8324, -1493.3873, 14.3188, 1000);
		}
		case 5:
		{
			InterpolateCameraPos(playerid, 1670.0333, -2259.6094, 1.0929, 1670.0333, -2259.6094, 1.0929, 1000);
			InterpolateCameraLookAt(playerid, 1669.2307, -2259.0149, 0.7628, 1669.2307, -2259.0149, 0.7628, 1000);
		}
		case 6:
		{
			InterpolateCameraPos(playerid, 152.5332, -1814.8130, 7.2081, 152.5332, -1814.8130, 7.2081, 1000);
			InterpolateCameraLookAt(playerid, 153.4565, -1815.1920, 6.9832, 153.4565, -1815.1920, 6.9832, 1000);
		}
		case 7:
		{
			InterpolateCameraPos(playerid, 2404.0757, -1750.1079, 22.5370, 2404.0757, -1750.1079, 22.5370, 1000);
			InterpolateCameraLookAt(playerid, 2404.9167, -1749.5699, 22.1820, 2404.9167, -1749.5699, 22.1820, 1000);
		}
		case 8:
		{
			InterpolateCameraPos(playerid, 1318.3506, -1141.1044, 27.1074, 1318.3506, -1141.1044, 27.1074, 1000);
			InterpolateCameraLookAt(playerid, 1317.3745, -1141.3120, 26.9375, 1317.3745, -1141.3120, 26.9375, 1000);
		}
		case 9:
		{
			InterpolateCameraPos(playerid, 2703.2417, -1669.2712, 19.1300, 2703.2417, -1669.2712, 19.1300, 1000);
			InterpolateCameraLookAt(playerid, 2703.6362, -1668.3546, 19.0701, 2703.6362, -1668.3546, 19.0701, 1000);
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if (IsPlayerNPC(playerid)) return 1;
	if (state_on[playerid] == 1)
	{
		SetPlayerColor(playerid, 0x00000000); // color logeo
		new gformat[330];
		SetTimerEx("hide_inicie", 2300, false, "d", playerid);
		Loop(x, 4, 0) { TextDrawShowForPlayer(playerid, TDLogin[x]); }
		ClearChat(playerid);
		state_on[playerid] = 2;
		// cámara de inicio
		TogglePlayerSpectating(playerid, true);
		SetCameraIntro(playerid);
		// revisa si está registrado
		InsideMainMenu[playerid] = true;
		if (verificar_cuenta(NombreOriginal(playerid)))
		{
			reg_int(0, "ID", InfoPlayer[playerid][pID]);
			reg_string(0, "Nombre_Apellido", InfoPlayer[playerid][pNombre_Apellido], MAX_PLAYER_NAME);
			reg_string(0, "Clave", InfoPlayer[playerid][pClave], 65);
			reg_string(0, "Salt", InfoPlayer[playerid][pSalt], 11);
			cache_unset_active();
			format(gformat, sizeof gformat, "{ffffff}Hola {FFBF00}%s{ffffff}, bienvenido de vuelta a {FFBF00}Creative Roleplay{ffffff}\n\
			Para ingresar en el servidor coloca tu contraseña:\n", NombreOriginal(playerid));
			Dialog_Show(playerid, ShowIngreso, DIALOG_STYLE_PASSWORD, "Inicio de sesión", gformat, "Ingresar", "Salir");
		}
		else
		{
			format(gformat, sizeof gformat, "{ffffff}Hola {FFBF00}%s{ffffff}, bienvenido a {FFBF00}Creative Roleplay{ffffff}\n\
			Para registrar en el servidor coloca una contraseña:\n", NombreOriginal(playerid));
			Dialog_Show(playerid, ShowRegistro, DIALOG_STYLE_INPUT, "Registro de cuenta", gformat, "Registrar", "Salir");
		}
		return 1;
	}
	if (usuario_registro[playerid] == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No has ingresado correctamente al servidor!");
        Kick(playerid);
        return 1;
 	}
	SetPlayerSpawn(playerid);
	OnDuty[playerid] = 0;
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	SyncPlayerTime(playerid);

	if (InfoPlayer[playerid][pJobSkin] != 0) SetPlayerSkin(playerid, InfoPlayer[playerid][pJobSkin]);
	else SetPlayerSkin(playerid, InfoPlayer[playerid][pSkin]);

	//toys
	Loop(listitem, 7, 0) if (InfoPlayer[playerid][ptColocado][listitem] != 0)
	{
		SetPlayerAttachedObject(playerid, listitem, InfoPlayer[playerid][ptModelo][listitem], InfoPlayer[playerid][ptHueso][listitem], InfoPlayer[playerid][ptPosX][listitem], InfoPlayer[playerid][ptPosY][listitem], InfoPlayer[playerid][ptPosZ][listitem],
		InfoPlayer[playerid][ptRotX][listitem], InfoPlayer[playerid][ptRotY][listitem], InfoPlayer[playerid][ptRotZ][listitem], InfoPlayer[playerid][ptScaleX][listitem], InfoPlayer[playerid][ptScaleY][listitem], InfoPlayer[playerid][ptScaleZ][listitem],
		SetColorToy(InfoPlayer[playerid][ptColor][listitem]));
	}

	//armas
	new ManoDer = InfoPlayer[playerid][pManoDerecha], ManoIzq = InfoPlayer[playerid][pManoIzquierda], Espalda = InfoPlayer[playerid][pEspalda];
	if (ManoDer > 0)
	{
		PonerObjeto(playerid, 1, ManoDer);
		if (InfoInventario[ManoDer][IDArma] > 0)
		{
			GivePlayerWeapon(playerid, InfoInventario[ManoDer][IDArma], InfoPlayer[playerid][pManoDerechaCant]);
		}
	}
	if (ManoIzq > 0) { PonerObjeto(playerid, 2, ManoIzq); }
	if (Espalda > 0) { PonerObjeto(playerid, 3, Espalda); }

	if (InfoPlayer[playerid][pUsoMascara] != 0) // load mascara
	{
		SetPlayerName(playerid, NombreJugador(playerid));
		SetPlayerAttachedObject(playerid, 0, 19036, 2, 0.090156, 0.045901, -0.005574, 90.110733, 81.638343, 4.973568, 0.887882, 1.139873, 1.000000);
	}
	return 1;
}

Dialog:ShowIngreso(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	OnPasswordChecked(playerid, 1, inputtext);
	return 1;
}

forward OnPasswordChecked(playerid, type, password[]);
public OnPasswordChecked(playerid, type, password[])
{
    switch (type)
    {
        case 1:
        {
            new Salted_Key[65];
            SHA256_PassHash(password, InfoPlayer[playerid][pSalt], Salted_Key, 65);
            if (strcmp(Salted_Key, InfoPlayer[playerid][pClave]) == 0)
			{
				ClearChat(playerid);
				// ahora de esta manera carga la cuenta. 30-01-2020
				new query[170];
				mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE ID = '%d'", InfoPlayer[playerid][pID]);
				mysql_query(DBcreative, query);
				if (cache_num_rows() > 0)
				{
					reg_string(0, "IP", InfoPlayer[playerid][pIP], 18);
					reg_int(0, "JotoOtaku", InfoPlayer[playerid][pAdmin]);
					reg_string(0, "Apodo", InfoPlayer[playerid][pApodo], 12);
					reg_int(0, "EncFac", InfoPlayer[playerid][pEncFac]);
					reg_string(0, "PreguntaSeguridad", InfoPlayer[playerid][pPreguntaSeguridad], 256);
					reg_string(0, "RespuestaSeguridad", InfoPlayer[playerid][pRespuestaSeguridad], 256);
					reg_float(0, "PosicionX", InfoPlayer[playerid][pPosicionX]);
					reg_float(0, "PosicionY", InfoPlayer[playerid][pPosicionY]);
					reg_float(0, "PosicionZ", InfoPlayer[playerid][pPosicionZ]);
					reg_float(0, "PosicionR", InfoPlayer[playerid][pPosicionR]);
					reg_int(0, "Interior", InfoPlayer[playerid][pInterior]);
					reg_int(0, "VirtualWorld", InfoPlayer[playerid][pVirtualWorld]);
					reg_float(0, "Vida", InfoPlayer[playerid][pVida]);
					reg_float(0, "Chaleco", InfoPlayer[playerid][pChaleco]);
					reg_int(0, "Skin", InfoPlayer[playerid][pSkin]);
					reg_int(0, "Nivel", InfoPlayer[playerid][pNivel]);
					reg_int(0, "Experiencia", InfoPlayer[playerid][pExperiencia]);
					reg_int(0, "HorasOn", InfoPlayer[playerid][pHorasOn]);
					reg_int(0, "Sexo", InfoPlayer[playerid][pSexo]);
					reg_int(0, "Edad", InfoPlayer[playerid][pEdad]);
					reg_int(0, "Ciudad", InfoPlayer[playerid][pCiudad]);
					reg_int(0, "Acento", InfoPlayer[playerid][pAcento]);
					reg_int(0, "EstiloPelea", InfoPlayer[playerid][pEstiloPelea]);
					reg_int(0, "BolosUwU", InfoPlayer[playerid][pDinero]);
					reg_int(0, "BanescoOwO", InfoPlayer[playerid][pBanco]);
					reg_int(0, "LiderFaccion", InfoPlayer[playerid][pLider]);
					reg_int(0, "MiembroFaccion", InfoPlayer[playerid][pMiembro]);
					reg_int(0, "Rango", InfoPlayer[playerid][pRango]);
					reg_int(0, "Bolsillo_1", InfoPlayer[playerid][pBolsillo][0]);
					reg_int(0, "Cantidad_bolsillo_1", InfoPlayer[playerid][pBolsilloCant][0]);
					reg_int(0, "Bolsillo_2", InfoPlayer[playerid][pBolsillo][1]);
					reg_int(0, "Cantidad_bolsillo_2", InfoPlayer[playerid][pBolsilloCant][1]);
					reg_int(0, "Bolsillo_3", InfoPlayer[playerid][pBolsillo][2]);
					reg_int(0, "Cantidad_bolsillo_3", InfoPlayer[playerid][pBolsilloCant][2]);
					reg_int(0, "Bolsillo_4", InfoPlayer[playerid][pBolsillo][3]);
					reg_int(0, "Cantidad_bolsillo_4", InfoPlayer[playerid][pBolsilloCant][3]);
					reg_int(0, "Bolsillo_5", InfoPlayer[playerid][pBolsillo][4]);
					reg_int(0, "Cantidad_bolsillo_5", InfoPlayer[playerid][pBolsilloCant][4]);
					reg_int(0, "Bolsillo_6", InfoPlayer[playerid][pBolsillo][5]);
					reg_int(0, "Cantidad_bolsillo_6", InfoPlayer[playerid][pBolsilloCant][5]);
					reg_int(0, "Bolsillo_7", InfoPlayer[playerid][pBolsillo][6]);
					reg_int(0, "Cantidad_bolsillo_7", InfoPlayer[playerid][pBolsilloCant][6]);
					reg_int(0, "Bolsillo_8", InfoPlayer[playerid][pBolsillo][7]);
					reg_int(0, "Cantidad_bolsillo_8", InfoPlayer[playerid][pBolsilloCant][7]);
					reg_int(0, "Bolsillo_9", InfoPlayer[playerid][pBolsillo][8]);
					reg_int(0, "Cantidad_bolsillo_9", InfoPlayer[playerid][pBolsilloCant][8]);
					reg_int(0, "Bolsillo_10", InfoPlayer[playerid][pBolsillo][9]);
					reg_int(0, "Cantidad_bolsillo_10", InfoPlayer[playerid][pBolsilloCant][9]);
					reg_int(0, "Mano_derecha", InfoPlayer[playerid][pManoDerecha]);
					reg_int(0, "Cantidad_mano_derecha", InfoPlayer[playerid][pManoDerechaCant]);
					reg_int(0, "Mano_izquierda", InfoPlayer[playerid][pManoIzquierda]);
					reg_int(0, "Cantidad_mano_izquierda", InfoPlayer[playerid][pManoIzquierdaCant]);
					reg_int(0, "Espalda", InfoPlayer[playerid][pEspalda]);
					reg_int(0, "Cantidad_espalda", InfoPlayer[playerid][pEspaldaCant]);
					reg_int(0, "VIP", InfoPlayer[playerid][pVIP]);
					reg_int(0, "DiaVIP", InfoPlayer[playerid][pDiaVIP]);
					reg_int(0, "MesVIP", InfoPlayer[playerid][pMesVIP]);
					reg_int(0, "CoinsVIP", InfoPlayer[playerid][pCoinsVIP]);
					reg_int(0, "ChatVIP", InfoPlayer[playerid][pTogVIP]);
					reg_int(0, "DobleExp", InfoPlayer[playerid][pDobleExp]);
					reg_int(0, "Regalo", InfoPlayer[playerid][pRegalo]);
					reg_int(0, "Muerto", InfoPlayer[playerid][pMuerto]);
					reg_int(0, "Hospital", InfoPlayer[playerid][pHospital]);
					reg_int(0, "BalaCabeza", InfoPlayer[playerid][pBalaCabeza]);
					reg_int(0, "Jails", InfoPlayer[playerid][pJails]);
					reg_int(0, "Arrestos", InfoPlayer[playerid][pArrestos]);
					reg_int(0, "DudaBloqueado", InfoPlayer[playerid][pDudaBloqueado]);
					reg_int(0, "DudaAdvertencias", InfoPlayer[playerid][pDudaAdvertencias]);
					reg_int(0, "Advertencia", InfoPlayer[playerid][pAdvertencia]);
					reg_int(0, "Sancionado", InfoPlayer[playerid][pSancionado]);
					reg_int(0, "TiempoSancion", InfoPlayer[playerid][pTiempoSancion]);
					reg_string(0, "BySancion", InfoPlayer[playerid][pBySancion], MAX_PLAYER_NAME);
					reg_string(0, "RazonSancion", InfoPlayer[playerid][pRazonSancion], 128);
					reg_int(0, "Materiales", InfoPlayer[playerid][pMateriales]);
					reg_int(0, "Ganzuas", InfoPlayer[playerid][pGanzuas]);
					reg_int(0, "Telefono", InfoPlayer[playerid][pTelefono]);
					reg_int(0, "Velocimetro", InfoPlayer[playerid][pTogVelocimetro]);
					reg_int(0, "Casa", InfoPlayer[playerid][pCasa1]);
					reg_int(0, "Casa2", InfoPlayer[playerid][pCasa2]);
					reg_int(0, "Negocio", InfoPlayer[playerid][pNegocio1]);
					reg_int(0, "Negocio2", InfoPlayer[playerid][pNegocio2]);
					reg_int(0, "Licencia1", InfoPlayer[playerid][pLicencia][0]);
					reg_int(0, "Licencia2", InfoPlayer[playerid][pLicencia][1]);
					reg_int(0, "Licencia3", InfoPlayer[playerid][pLicencia][2]);
					reg_int(0, "Licencia4", InfoPlayer[playerid][pLicencia][3]);
					reg_int(0, "Licencia5", InfoPlayer[playerid][pLicencia][4]);
					reg_int(0, "Multicuenta", InfoPlayer[playerid][pMulticuenta]);
					reg_int(0, "Mascara", InfoPlayer[playerid][pMascara]);
					reg_int(0, "UsoMascara", InfoPlayer[playerid][pUsoMascara]);
					reg_int(0, "OtakuN_N", InfoPlayer[playerid][pBaneo]);
					reg_int(0, "BlockBug", InfoPlayer[playerid][pBlockBug]);
					reg_int(0, "BlockG", InfoPlayer[playerid][pTogGraffiti]);
					reg_int(0, "Documento", InfoPlayer[playerid][pDocumento]);
					reg_int(0, "Habilidad1", InfoPlayer[playerid][pHabilidad][0]);
					reg_int(0, "Habilidad2", InfoPlayer[playerid][pHabilidad][1]);
					reg_int(0, "Habilidad3", InfoPlayer[playerid][pHabilidad][2]);
					reg_int(0, "Habilidad4", InfoPlayer[playerid][pHabilidad][3]);
					reg_int(0, "Habilidad5", InfoPlayer[playerid][pHabilidad][4]);
					reg_int(0, "YaCobre", InfoPlayer[playerid][YaCobre]);
					reg_int(0, "Estrellas", InfoPlayer[playerid][pEstrellas]);
					reg_int(0, "LimiteRobos", InfoPlayer[playerid][pLimiteRobos]);
					reg_int(0, "NivelRolero", InfoPlayer[playerid][pNivelRolero]);
					reg_int(0, "PuntosRol", InfoPlayer[playerid][pPuntosRol]);
					reg_int(0, "NivelMuteoReport", InfoPlayer[playerid][pNivelMuteoReport]);
					reg_int(0, "AdvMuteoReport", InfoPlayer[playerid][pAdvMuteoReport]);
					reg_int(0, "TiempoMuteoReport", InfoPlayer[playerid][pTiempoMuteoReport]);
					reg_int(0, "Frecuencia_radio", InfoPlayer[playerid][pFrecuencia_radio]);
					reg_int(0, "TiempoRegalo", InfoPlayer[playerid][pTiempoRegalo]);
					reg_int(0, "TipoSpawn", InfoPlayer[playerid][pTipoSpawn]);
					reg_string(0, "AutoRespuestaSMS", InfoPlayer[playerid][pAutoRespuestaSMS], 128);
					reg_int(0, "BlockAD", InfoPlayer[playerid][pBlockAD]);
					reg_int(0, "AdvAD", InfoPlayer[playerid][pAdvAD]);
					reg_int(0, "Pescados", InfoPlayer[playerid][pPescados]);
					reg_int(0, "RecordPesoPes", InfoPlayer[playerid][pRecordPesoPes]);
					reg_string(0, "EstadoYo", InfoPlayer[playerid][pEstadoYo], 128);
					reg_string(0, "NombreContacto1", nombre_contacto[playerid][0], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto1", InfoPlayer[playerid][pNumeroContacto][0]);
					reg_string(0, "NombreContacto2", nombre_contacto[playerid][1], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto2", InfoPlayer[playerid][pNumeroContacto][1]);
					reg_string(0, "NombreContacto3", nombre_contacto[playerid][2], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto3", InfoPlayer[playerid][pNumeroContacto][2]);
					reg_string(0, "NombreContacto4", nombre_contacto[playerid][3], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto4", InfoPlayer[playerid][pNumeroContacto][3]);
					reg_string(0, "NombreContacto5", nombre_contacto[playerid][4], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto5", InfoPlayer[playerid][pNumeroContacto][4]);
					reg_string(0, "NombreContacto6", nombre_contacto[playerid][5], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto6", InfoPlayer[playerid][pNumeroContacto][5]);
					reg_string(0, "NombreContacto7", nombre_contacto[playerid][6], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto7", InfoPlayer[playerid][pNumeroContacto][6]);
					reg_string(0, "NombreContacto8", nombre_contacto[playerid][7], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto8", InfoPlayer[playerid][pNumeroContacto][7]);
					reg_string(0, "NombreContacto9", nombre_contacto[playerid][8], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto9", InfoPlayer[playerid][pNumeroContacto][8]);
					reg_string(0, "NombreContacto10", nombre_contacto[playerid][9], MAX_PLAYER_NAME);
					reg_int(0, "NumeroContacto10", InfoPlayer[playerid][pNumeroContacto][9]);
					reg_int(0, "JobSkin", InfoPlayer[playerid][pJobSkin]);
					reg_int(0, "RestriccionRobo", InfoPlayer[playerid][pRestriccionRobo]);
					reg_int(0, "FalsoDocumento", InfoPlayer[playerid][pFalsoDocumento]);
					reg_string(0, "FalsoNombre", InfoPlayer[playerid][pFalsoNombre], MAX_PLAYER_NAME);
					reg_string(0, "FechaRegistro", InfoPlayer[playerid][pFechaRegistro], 256);
					reg_string(0, "UltimaConexion", InfoPlayer[playerid][pUltimaConexion], 256);
					//accesorios
					new gformat[512];
					reg_string(0, "Toy1", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][0], InfoPlayer[playerid][ptHueso][0], InfoPlayer[playerid][ptPosX][0], InfoPlayer[playerid][ptPosY][0], InfoPlayer[playerid][ptPosZ][0], InfoPlayer[playerid][ptRotX][0],
					InfoPlayer[playerid][ptRotY][0], InfoPlayer[playerid][ptRotZ][0], InfoPlayer[playerid][ptScaleX][0], InfoPlayer[playerid][ptScaleY][0], InfoPlayer[playerid][ptScaleZ][0], InfoPlayer[playerid][ptColocado][0]);
					reg_string(0, "Toy2", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][1], InfoPlayer[playerid][ptHueso][1], InfoPlayer[playerid][ptPosX][1], InfoPlayer[playerid][ptPosY][1], InfoPlayer[playerid][ptPosZ][1], InfoPlayer[playerid][ptRotX][1],
					InfoPlayer[playerid][ptRotY][1], InfoPlayer[playerid][ptRotZ][1], InfoPlayer[playerid][ptScaleX][1], InfoPlayer[playerid][ptScaleY][1], InfoPlayer[playerid][ptScaleZ][1], InfoPlayer[playerid][ptColocado][1]);
					reg_string(0, "Toy3", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][2], InfoPlayer[playerid][ptHueso][2], InfoPlayer[playerid][ptPosX][2], InfoPlayer[playerid][ptPosY][2], InfoPlayer[playerid][ptPosZ][2], InfoPlayer[playerid][ptRotX][2],
					InfoPlayer[playerid][ptRotY][2], InfoPlayer[playerid][ptRotZ][2], InfoPlayer[playerid][ptScaleX][2], InfoPlayer[playerid][ptScaleY][2], InfoPlayer[playerid][ptScaleZ][2], InfoPlayer[playerid][ptColocado][2]);
					reg_string(0, "Toy4", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][3], InfoPlayer[playerid][ptHueso][3], InfoPlayer[playerid][ptPosX][3], InfoPlayer[playerid][ptPosY][3], InfoPlayer[playerid][ptPosZ][3], InfoPlayer[playerid][ptRotX][3],
					InfoPlayer[playerid][ptRotY][3], InfoPlayer[playerid][ptRotZ][3], InfoPlayer[playerid][ptScaleX][3], InfoPlayer[playerid][ptScaleY][3], InfoPlayer[playerid][ptScaleZ][3], InfoPlayer[playerid][ptColocado][3]);
					reg_string(0, "Toy5", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][4], InfoPlayer[playerid][ptHueso][4], InfoPlayer[playerid][ptPosX][4], InfoPlayer[playerid][ptPosY][4], InfoPlayer[playerid][ptPosZ][4], InfoPlayer[playerid][ptRotX][4],
					InfoPlayer[playerid][ptRotY][4], InfoPlayer[playerid][ptRotZ][4], InfoPlayer[playerid][ptScaleX][4], InfoPlayer[playerid][ptScaleY][4], InfoPlayer[playerid][ptScaleZ][4], InfoPlayer[playerid][ptColocado][4]);
					reg_string(0, "Toy6", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][5], InfoPlayer[playerid][ptHueso][5], InfoPlayer[playerid][ptPosX][5], InfoPlayer[playerid][ptPosY][5], InfoPlayer[playerid][ptPosZ][5], InfoPlayer[playerid][ptRotX][5],
					InfoPlayer[playerid][ptRotY][5], InfoPlayer[playerid][ptRotZ][5], InfoPlayer[playerid][ptScaleX][5], InfoPlayer[playerid][ptScaleY][5], InfoPlayer[playerid][ptScaleZ][5], InfoPlayer[playerid][ptColocado][5]);
					reg_string(0, "Toy7", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][6], InfoPlayer[playerid][ptHueso][6], InfoPlayer[playerid][ptPosX][6], InfoPlayer[playerid][ptPosY][6], InfoPlayer[playerid][ptPosZ][6], InfoPlayer[playerid][ptRotX][6],
					InfoPlayer[playerid][ptRotY][6], InfoPlayer[playerid][ptRotZ][6], InfoPlayer[playerid][ptScaleX][6], InfoPlayer[playerid][ptScaleY][6], InfoPlayer[playerid][ptScaleZ][6], InfoPlayer[playerid][ptColocado][6]);
					reg_string(0, "Toy8", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][7], InfoPlayer[playerid][ptHueso][7], InfoPlayer[playerid][ptPosX][7], InfoPlayer[playerid][ptPosY][7], InfoPlayer[playerid][ptPosZ][7], InfoPlayer[playerid][ptRotX][7],
					InfoPlayer[playerid][ptRotY][7], InfoPlayer[playerid][ptRotZ][7], InfoPlayer[playerid][ptScaleX][7], InfoPlayer[playerid][ptScaleY][7], InfoPlayer[playerid][ptScaleZ][7], InfoPlayer[playerid][ptColocado][7]);
					reg_string(0, "Toy9", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][8], InfoPlayer[playerid][ptHueso][8], InfoPlayer[playerid][ptPosX][8], InfoPlayer[playerid][ptPosY][8], InfoPlayer[playerid][ptPosZ][8], InfoPlayer[playerid][ptRotX][8],
					InfoPlayer[playerid][ptRotY][8], InfoPlayer[playerid][ptRotZ][8], InfoPlayer[playerid][ptScaleX][8], InfoPlayer[playerid][ptScaleY][8], InfoPlayer[playerid][ptScaleZ][8], InfoPlayer[playerid][ptColocado][8]);
					reg_string(0, "Toy10", gformat, 512);
					sscanf(gformat, "p<|>ddfffffffffd",
					InfoPlayer[playerid][ptModelo][9], InfoPlayer[playerid][ptHueso][9], InfoPlayer[playerid][ptPosX][9], InfoPlayer[playerid][ptPosY][9], InfoPlayer[playerid][ptPosZ][9], InfoPlayer[playerid][ptRotX][9],
					InfoPlayer[playerid][ptRotY][9], InfoPlayer[playerid][ptRotZ][9], InfoPlayer[playerid][ptScaleX][9], InfoPlayer[playerid][ptScaleY][9], InfoPlayer[playerid][ptScaleZ][9], InfoPlayer[playerid][ptColocado][9]);
					reg_int(0, "Cinturon_1", InfoPlayer[playerid][pCinturon][0]);
					reg_int(0, "Cantidad_cinturon_1", InfoPlayer[playerid][pCinturonCant][0]);
					reg_int(0, "Cinturon_2", InfoPlayer[playerid][pCinturon][1]);
					reg_int(0, "Cantidad_cinturon_2", InfoPlayer[playerid][pCinturonCant][1]);
					reg_int(0, "Cinturon_3", InfoPlayer[playerid][pCinturon][2]);
					reg_int(0, "Cantidad_cinturon_3", InfoPlayer[playerid][pCinturonCant][2]);
					reg_int(0, "Cinturon_4", InfoPlayer[playerid][pCinturon][3]);
					reg_int(0, "Cantidad_cinturon_4", InfoPlayer[playerid][pCinturonCant][3]);
					reg_int(0, "Cinturon_5", InfoPlayer[playerid][pCinturon][4]);
					reg_int(0, "Cantidad_cinturon_5", InfoPlayer[playerid][pCinturonCant][4]);
					reg_int(0, "Cinturon_6", InfoPlayer[playerid][pCinturon][5]);
					reg_int(0, "Cantidad_cinturon_6", InfoPlayer[playerid][pCinturonCant][5]);
					reg_int(0, "ColorToy1", InfoPlayer[playerid][ptColor][0]);
					reg_int(0, "ColorToy2", InfoPlayer[playerid][ptColor][1]);
					reg_int(0, "ColorToy3", InfoPlayer[playerid][ptColor][2]);
					reg_int(0, "ColorToy4", InfoPlayer[playerid][ptColor][3]);
					reg_int(0, "ColorToy5", InfoPlayer[playerid][ptColor][4]);
					reg_int(0, "ColorToy6", InfoPlayer[playerid][ptColor][5]);
					reg_int(0, "ColorToy7", InfoPlayer[playerid][ptColor][6]);
					reg_int(0, "ColorToy8", InfoPlayer[playerid][ptColor][7]);
					reg_int(0, "ColorToy9", InfoPlayer[playerid][ptColor][8]);
					reg_int(0, "ColorToy10", InfoPlayer[playerid][ptColor][9]);
					reg_int(0, "Contrato", InfoPlayer[playerid][pContrato]);
					reg_int(0, "Adiccion_1", InfoPlayer[playerid][pAdiccion][0]);
					reg_int(0, "Adiccion_2", InfoPlayer[playerid][pAdiccion][1]);
					reg_int(0, "Adiccion_3", InfoPlayer[playerid][pAdiccion][2]);
					reg_int(0, "Droga_tipo", InfoPlayer[playerid][pDrogaTipo]);
					reg_int(0, "Droga_tiempo", InfoPlayer[playerid][pDrogaTiempo]);
					reg_int(0, "Droga_power", InfoPlayer[playerid][pDrogaPower]);
					reg_int(0, "AbstinenceEffect", InfoPlayer[playerid][pAbstinenceEffect]);
					reg_int(0, "AbstinenceTime", InfoPlayer[playerid][pAbstinenceTime]);
					reg_int(0, "TogManos", InfoPlayer[playerid][pTogManos]);
					reg_int(0, "TogCajero", InfoPlayer[playerid][pTogCajero]);
					reg_int(0, "TogAnuncios", InfoPlayer[playerid][pTogAnuncios]);
					reg_int(0, "TogTelefono", InfoPlayer[playerid][pTogTelefono]);
					reg_int(0, "TimerAnuncios", InfoPlayer[playerid][pTimerAnuncios]);
					reg_int(0, "TogOOC", InfoPlayer[playerid][pTogOOC]);
					reg_int(0, "TogMusic", InfoPlayer[playerid][pTogMusic]);
					reg_int(0, "TogRadio", InfoPlayer[playerid][pTogRadio]);
					reg_int(0, "TogPortatil", InfoPlayer[playerid][pTogPortatil]);
					reg_int(0, "TogFaccion", InfoPlayer[playerid][pTogFaccion]);
					reg_int(0, "RepartoViajes", InfoPlayer[playerid][pRepartoViajes]);
					cache_unset_active();
				}
				// detector de bug MySQL (en caso de que exista algún día) 30-01-2020
				if (InfoPlayer[playerid][pNivel] == 0)
				{
					printf("[debug] Cuenta %d (%s) no cargó, Nivel: %d", InfoPlayer[playerid][pID], InfoPlayer[playerid][pNombre_Apellido], InfoPlayer[playerid][pNivel]);
					Kick(playerid);
					return 1;
				}
				// detector de si tiene pregunta de seguridad:
				if (!strcmp(InfoPlayer[playerid][pPreguntaSeguridad], "ninguna", true))
				{
					new dialog[512] =
					"{EBEBEB}Desde el {FF2F2F}24/02/2020{EBEBEB}, cada cuenta tendrá una medida extra de seguridad.\n\
					Sigue los pasos a continuación, te recomendamos tomar nota de todo esto o memorizarlo.\n\n\
					Presiona '{FFBF00}continuar{EBEBEB}' para mostrarte un listado de opciones a elegir  para tu {FF2F2F}Pregunta de seguridad{EBEBEB}.\n";
					Dialog_Show(playerid, ShowPregunta, DIALOG_STYLE_MSGBOX, "Pregunta de seguridad", dialog, "Continuar", "Salir");
					return 1;
				}
				//seguridad 24/02/2020
				new ex_ip[18];
				GetPlayerIp(playerid, ex_ip, sizeof ex_ip);
				if (strcmp(ex_ip, InfoPlayer[playerid][pIP], true))
				{
					IntentosRespuesta[playerid] = 3;
					new dialog[1580], gformat[250];
					strcat(dialog, "{EBEBEB}Nuestro sistema ha detectado que la {FF2F2F}IP{EBEBEB} que estás usando es distinta a la de tu última sesión.\n");
					strcat(dialog, "{EBEBEB}Para continuar con la sesión de tu cuenta, necesitaremos que respondas la pregunta de seguridad.\n\n");
					format(gformat, sizeof gformat, "{EBEBEB}Pregunta de seguridad: {00CC00}%s\n\n", InfoPlayer[playerid][pPreguntaSeguridad]);
					strcat(dialog, gformat);
					format(gformat, sizeof gformat, "{EBEBEB}Si te equivocas puedes intentarlo {FFBF00}%d{EBEBEB} veces más.\n", IntentosRespuesta[playerid]);
					strcat(dialog, gformat);
					Dialog_Show(playerid, ShowRespuesta, DIALOG_STYLE_INPUT, "Medida de seguridad", dialog, "Continuar", "Salir");
					return 1;
				}
				//otro:
				usuario_registro[playerid] = 1;
				InsideMainMenu[playerid] = false;
				mmaguebo_abusadol[playerid] = 0;
				Loop(x, 2, 0) { TextDrawShowForPlayer(playerid, TD_Account[x]); }
				PlayerTextDrawSetPreviewModel(playerid, TD_AccountSkin[playerid], InfoPlayer[playerid][pSkin]);
				PlayerTextDrawShow(playerid, TD_AccountSkin[playerid]);
				Loop(x, 4, 0) { TextDrawHideForPlayer(playerid, TDLogin[x]); }
				SetTimerEx("CargarCuenta", 4000, false, "d", playerid);
			}
			else
			{
				if (intentos_load[playerid] == 3) return Kick(playerid);
				ClearChat(playerid);
				intentos_load[playerid] += 1;
				new gformat[512];
				format(gformat, sizeof gformat, "Contraseña incorrecta, intentos restantes: {b00000}%d{cccccc}.", 3-intentos_load[playerid]);
				SendClientMessage(playerid, 0xccccccff, gformat);
				format(gformat, sizeof gformat, "{ffffff}Hola {FFBF00}%s{ffffff}, bienvenido de vuelta a {FFBF00}Creative Roleplay{ffffff}\n\
				Para ingresar en el servidor coloca tu contraseña:\n", NombreOriginal(playerid));
				Dialog_Show(playerid, ShowIngreso, DIALOG_STYLE_PASSWORD, "Inicio de sesión", gformat, "Ingresar", "Salir");
			}
		}
		case 2:
		{
			new Salted_Key[65];
			SHA256_PassHash(password, InfoPlayer[playerid][pSalt], Salted_Key, 65);
			if (strcmp(Salted_Key, InfoPlayer[playerid][pClave]) == 0)
			{
				Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Nueva contraseña", "{cccccc}Introduce la nueva contraseña:", "Cambiar", "Salir");
			}
			else
			{
				SendClientMessage(playerid, 0xccccccff, "Contraseña incorrecta, intenta de nuevo.");
				Dialog_Show(playerid, ConfirmarPass, DIALOG_STYLE_PASSWORD, "Cambio de contraseña", "{cccccc}Introduce tu contraseña actual:", "Continuar", "Salir");
			}
		}
	}
    return 1;
}

Dialog:ShowRespuesta(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	if (!strcmp(InfoPlayer[playerid][pRespuestaSeguridad], inputtext, true))
	{
		usuario_registro[playerid] = 1;
		InsideMainMenu[playerid] = false;
		mmaguebo_abusadol[playerid] = 0;
		Loop(x, 2, 0) { TextDrawShowForPlayer(playerid, TD_Account[x]); }
		PlayerTextDrawSetPreviewModel(playerid, TD_AccountSkin[playerid], InfoPlayer[playerid][pSkin]);
		PlayerTextDrawShow(playerid, TD_AccountSkin[playerid]);
		Loop(x, 4, 0) { TextDrawHideForPlayer(playerid, TDLogin[x]); }
		SetTimerEx("CargarCuenta", 4000, false, "d", playerid);
	}
	else
	{
		IntentosRespuesta[playerid]--;
		if (IntentosRespuesta[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GENERAL, "Has sido expulsado del servidor, no respondiste la pregunta de seguridad correctamente.");
			SetTimerEx("TimerKICK", 1000, false, "d", playerid);
			IntentosRespuesta[playerid] = 0;
			return 1;
		}
		SendClientMessage(playerid, COLOR_GENERAL, "Respuesta incorrecta, intenta de nuevo.");
		new dialog[1580], gformat[250];
		strcat(dialog, "{EBEBEB}Nuestro sistema ha detectado que la {FF2F2F}IP{EBEBEB} que estás usando es distinta a la de tu última sesión.\n");
		strcat(dialog, "{EBEBEB}Para continuar con la sesión de tu cuenta, necesitaremos que respondas la pregunta de seguridad.\n\n");
		format(gformat, sizeof gformat, "{EBEBEB}Pregunta de seguridad: {00CC00}%s\n\n", InfoPlayer[playerid][pPreguntaSeguridad]);
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "{EBEBEB}Si te equivocas puedes intentarlo {FFBF00}%d{EBEBEB} veces más.\n", IntentosRespuesta[playerid]);
		strcat(dialog, gformat);
		Dialog_Show(playerid, ShowRespuesta, DIALOG_STYLE_INPUT, "Medida de seguridad", dialog, "Continuar", "Salir");
	}
	return 1;
}

Dialog:ShowPregunta(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	new dialog[1028];
	strcat(dialog, "1. ¿Cuál es el apellido de soltera de mi madre?\n");
	strcat(dialog, "2. ¿Cuál es el nombre de mi mascota?\n");
	strcat(dialog, "3. ¿Cómo se llama mi primer amor?\n");
	strcat(dialog, "4. ¿Cuál es la fecha del cumpleaños de mi hermano(a)?\n");
	strcat(dialog, "5. ¿En qué colegio estudie en primaria?\n");
	strcat(dialog, "6. ¿Cuál es el nombre de mi mejor amigo?");
	Dialog_Show(playerid, Show2Pregunta, DIALOG_STYLE_LIST, "Lista de preguntas", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:Show2Pregunta(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	switch (listitem)
	{
		case 0: alm(InfoPlayer[playerid][pPreguntaSeguridad], "¿Cuál es el apellido de soltera de mi madre?");
		case 1: alm(InfoPlayer[playerid][pPreguntaSeguridad], "¿Cuál es el nombre de mi mascota?");
		case 2: alm(InfoPlayer[playerid][pPreguntaSeguridad], "¿Cómo se llama mi primer amor?");
		case 3: alm(InfoPlayer[playerid][pPreguntaSeguridad], "¿Cuál es la fecha del cumpleaños de mi hermano(a)?");
		case 4: alm(InfoPlayer[playerid][pPreguntaSeguridad], "¿En qué colegio estudie en primaria?");
		case 5: alm(InfoPlayer[playerid][pPreguntaSeguridad], "¿Cuál es el nombre de mi mejor amigo?");
	}
	new dialog[1028], gformat[250];
	strcat(dialog, "{EBEBEB}Bien has escogido como pregunta de seguridad:\n");
	format(gformat, sizeof gformat, "{FF2F2F}%s\n\n", InfoPlayer[playerid][pPreguntaSeguridad]);
	strcat(dialog, gformat);
	strcat(dialog, "{EBEBEB}Ahora introduce la {00CCFF}respuesta de seguridad{EBEBEB}, recuerda tener esto de memoria,\n\
	{EBEBEB}dado que en un futuro la necesitarás para ingresar a tu cuenta.\n");
	Dialog_Show(playerid, Show3Pregunta, DIALOG_STYLE_INPUT, "Respuesta de seguridad", dialog, "Continuar", "Volver");
	return 1;
}

Dialog:Show3Pregunta(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		alm(InfoPlayer[playerid][pPreguntaSeguridad], "ninguna");
		new dialog[1028];
		strcat(dialog, "1. ¿Cuál es el apellido de soltera de mi madre?\n");
		strcat(dialog, "2. ¿Cuál es el nombre de mi mascota?\n");
		strcat(dialog, "3. ¿Cómo se llama mi primer amor?\n");
		strcat(dialog, "4. ¿Cuál es la fecha del cumpleaños de mi hermano(a)?\n");
		strcat(dialog, "5. ¿En qué colegio estudie en primaria?\n");
		strcat(dialog, "6. ¿Cuál es el nombre de mi mejor amigo?");
		Dialog_Show(playerid, Show2Pregunta, DIALOG_STYLE_LIST, "Lista de preguntas", dialog, "Continuar", "Salir");
		return 1;
	}
	if (strlen(inputtext) < 5)
	{
		SendClientMessage(playerid, 0xccccccff, "No puedes tener una respuesta con menos de 4 carácteres.");
		new dialog[1028], gformat[250];
		strcat(dialog, "{EBEBEB}Bien has escogido como pregunta de seguridad:\n");
		format(gformat, sizeof gformat, "{FF2F2F}%s\n\n", InfoPlayer[playerid][pPreguntaSeguridad]);
		strcat(dialog, gformat);
		strcat(dialog, "{EBEBEB}Ahora introduce la {00CCFF}respuesta de seguridad{EBEBEB}, recuerda tener esto de memoria,\n\
		{EBEBEB}dado que en un futuro la necesitarás para ingresar a tu cuenta.\n");
		Dialog_Show(playerid, Show3Pregunta, DIALOG_STYLE_INPUT, "Respuesta de seguridad", dialog, "Continuar", "Volver");
		return 1;
	}
	if (strlen(inputtext) > 33)
	{
		SendClientMessage(playerid, 0xccccccff, "No puedes tener una respuesta con más de 32 carácteres.");
		new dialog[1028], gformat[250];
		strcat(dialog, "{EBEBEB}Bien has escogido como pregunta de seguridad:\n");
		format(gformat, sizeof gformat, "{FF2F2F}%s\n\n", InfoPlayer[playerid][pPreguntaSeguridad]);
		strcat(dialog, gformat);
		strcat(dialog, "{EBEBEB}Ahora introduce la {00CCFF}respuesta de seguridad{EBEBEB}, recuerda tener esto de memoria,\n\
		{EBEBEB}dado que en un futuro la necesitarás para ingresar a tu cuenta.\n");
		Dialog_Show(playerid, Show3Pregunta, DIALOG_STYLE_INPUT, "Respuesta de seguridad", dialog, "Continuar", "Volver");
		return 1;
	}
	alm(InfoPlayer[playerid][pRespuestaSeguridad], inputtext);
	new dialog[1028], gformat[250];
	strcat(dialog, "{EBEBEB}Perfecto, para terminar verifica que esté todo en orden.\n\n");
	format(gformat, sizeof gformat, "{00CC00}Pregunta de seguridad: {EBEBEB}%s\n", InfoPlayer[playerid][pPreguntaSeguridad]);
	strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{00CCFF}Respuesta de seguridad: {EBEBEB}%s\n\n", InfoPlayer[playerid][pRespuestaSeguridad]);
	strcat(dialog, gformat);
	strcat(dialog, "{EBEBEB}Si todo está bien presiona '{FF2F2F}Confirmar{EBEBEB}' para ingresar al servidor.\n");
	Dialog_Show(playerid, Show4Pregunta, DIALOG_STYLE_MSGBOX, "Confirmación de seguridad", dialog, "Continuar", "Volver");
	return 1;
}

Dialog:Show4Pregunta(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		alm(InfoPlayer[playerid][pRespuestaSeguridad], "ninguna");
		new dialog[1028], gformat[250];
		strcat(dialog, "{EBEBEB}Bien has escogido como pregunta de seguridad:\n");
		format(gformat, sizeof gformat, "{FF2F2F}%s\n\n", InfoPlayer[playerid][pPreguntaSeguridad]);
		strcat(dialog, gformat);
		strcat(dialog, "{EBEBEB}Ahora introduce la {00CCFF}respuesta de seguridad{EBEBEB}, recuerda tener esto de memoria,\n\
		{EBEBEB}dado que en un futuro la necesitarás para ingresar a tu cuenta.\n");
		Dialog_Show(playerid, Show3Pregunta, DIALOG_STYLE_INPUT, "Respuesta de seguridad", dialog, "Continuar", "Volver");
		return 1;
	}
	usuario_registro[playerid] = 1;
	InsideMainMenu[playerid] = false;
	mmaguebo_abusadol[playerid] = 0;
	Loop(x, 2, 0) { TextDrawShowForPlayer(playerid, TD_Account[x]); }
	PlayerTextDrawSetPreviewModel(playerid, TD_AccountSkin[playerid], InfoPlayer[playerid][pSkin]);
	PlayerTextDrawShow(playerid, TD_AccountSkin[playerid]);
	Loop(x, 4, 0) { TextDrawHideForPlayer(playerid, TDLogin[x]); }
	SetTimerEx("CargarCuenta", 4000, false, "d", playerid);
	new offquery[512];
	mysql_format(DBcreative, offquery, sizeof offquery, "UPDATE cuentas SET PreguntaSeguridad = '%e', RespuestaSeguridad = '%e' WHERE ID = '%d'", InfoPlayer[playerid][pPreguntaSeguridad], InfoPlayer[playerid][pRespuestaSeguridad], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, offquery);
	return 1;
}

forward CargarCuenta(playerid);
public CargarCuenta(playerid)
{
	TogglePlayerSpectating(playerid, false);
	StopAudioStreamForPlayer(playerid);
	ClearChat(playerid);
	new gformat[256], ex_ip[18];
	GetPlayerIp(playerid, ex_ip, sizeof ex_ip);
	ResetPlayerMoney(playerid);
	TotalLogin++;
	if (InfoPlayer[playerid][pBaneo] >= 2)
	{
		SetPlayerName(playerid, "BannedPlayer");
		SendClientMessage(playerid, 0xccccccff, "Acceso {b00000}denegado{cccccc}, estás baneado permanente del servidor.");
		Kick(playerid);
		return 1;
	}
	usuario_registro[playerid] = 2;
	format(gformat, sizeof gformat, "Hola {FFBF00}%s{ffffff}, te vimos por última vez: {FFBF00}%s{ffffff}.", NombreOriginal(playerid), InfoPlayer[playerid][pUltimaConexion]);
	SendClientMessage(playerid, 0xffffffff, gformat);
	alm(InfoPlayer[playerid][pIP], ex_ip);
	guardar_string_mysql("cuentas", "IP", InfoPlayer[playerid][pID], ex_ip);
	state_on[playerid] = 3; // logeado
	if (InfoPlayer[playerid][pHospital] != 0) GoToHospital(playerid);
	if (InfoPlayer[playerid][pDudaBloqueado] == 1) SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
	//mensaje admin:
	if (GetPlayerAdmin(playerid, 1) != 0)
	{
		format(gformat, sizeof gformat, "SERVER:{EBEBEB} Logeaste con rango '{FFBF00}%s{EBEBEB}' en la administración.", GetAdminName(playerid));
		SendClientMessage(playerid, COLOR_GENERAL, gformat);
	}
	if (InfoPlayer[playerid][pPosicionX] == 0.0 && InfoPlayer[playerid][pPosicionY] == 0.0 && InfoPlayer[playerid][pPosicionZ] == 0.0)
	{
		InfoPlayer[playerid][pPosicionX] = 2105.0334;
		InfoPlayer[playerid][pPosicionY] = -1473.9088;
		InfoPlayer[playerid][pPosicionZ] = 24.1237;
		KillEMSQueue(playerid);
		timer_herido[playerid] = 0;
		dar_vida(playerid, 100);
		SendClientMessage(playerid, COLOR_WHITE, "desbuggg.");
	}
	SetPlayerPos(playerid, InfoPlayer[playerid][pPosicionX], InfoPlayer[playerid][pPosicionY], InfoPlayer[playerid][pPosicionZ]);
	SetPlayerFacingAngle(playerid, InfoPlayer[playerid][pPosicionR]);
	SetPlayerInterior(playerid, InfoPlayer[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid, InfoPlayer[playerid][pVirtualWorld]);
	Streamer_UpdateEx(playerid, InfoPlayer[playerid][pPosicionX], InfoPlayer[playerid][pPosicionY], InfoPlayer[playerid][pPosicionZ]);
	SetCameraBehindPlayer(playerid);
	SetPlayerHealth(playerid, InfoPlayer[playerid][pVida]);
	SetPlayerArmour(playerid, InfoPlayer[playerid][pChaleco]);
	SetPlayerScore(playerid, InfoPlayer[playerid][pNivel]);
 	SetPlayerFightingStyle(playerid, InfoPlayer[playerid][pEstiloPelea]);
	TextDrawShowForPlayer(playerid, TD_fechahora);
	SetPlayerWantedLevel(playerid, InfoPlayer[playerid][pEstrellas]);
	SyncPlayerTime(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);
	PreloadAnimations(playerid);
	if (InfoPlayer[playerid][pVIP] >= 3 && InfoPlayer[playerid][pHabilidad][0] < 3)
	{
		InfoPlayer[playerid][pHabilidad][0] = 3;
		guardar_int_mysql("cuentas", "Habilidad1", InfoPlayer[playerid][pID], 3);
		SendClientMessage(playerid, COLOR_YELLOW, "[MODVIP]:{FFFFFF} Ahora tienes nivel máximo de Vendedor de Armas.");
	}
	Load_Vehicles(playerid);
	ActualizarEstado(playerid); //actualizar estado 27/04/2020
	revisar_viapiuwu(playerid); //revisa vip
	if (InfoPlayer[playerid][pJobSkin] != 0) SetPlayerSkin(playerid, InfoPlayer[playerid][pJobSkin]), SendClientMessage(playerid, COLOR_GENERAL, "Llevas puesto un skin de trabajo/faccion.");
	else SetPlayerSkin(playerid, InfoPlayer[playerid][pSkin]);

	if (InfoPlayer[playerid][pDrogaTipo] != 0)
	{
		if (InfoPlayer[playerid][pAdiccion][0] >= 10 || InfoPlayer[playerid][pAdiccion][1] >= 10 || InfoPlayer[playerid][pAdiccion][2] >= 10)
		{
			if (InfoPlayer[playerid][pAbstinenceTime] != 0) GiveAbstinence(playerid);
			else random_abstinence[playerid] = SetTimerEx("RandomAbstinence", 60000*15, false, "i", playerid);
		}
		if (InfoPlayer[playerid][pDrogaTipo] == 3) SetPlayerWeather(playerid, -66);
		else
		{
			if (InfoPlayer[playerid][pDrogaTipo] == 4) //efectos marihuana
			{
				Loop(x, 3, 0) { TextDrawShowForPlayer(playerid, TDmariguana[x]); }
			}
			SetPlayerWeather(playerid, 124);
		}
		SendClientMessage(playerid, 0x9ACD32AA, "Sigues bajos los efectos de alguna droga.");
	}

	SetTimerEx("hidecargar_cuenta", 2000, false, "d", playerid);
	return 1;
}

forward hidecargar_cuenta(playerid);
public hidecargar_cuenta(playerid)
{
	Loop(x, 2, 0) { TextDrawHideForPlayer(playerid, TD_Account[x]); }
	PlayerTextDrawHide(playerid, TD_AccountSkin[playerid]);
	return 1;
}

forward revisar_viapiuwu(playerid);
public revisar_viapiuwu(playerid)
{
	new year, month, day, query[280];
	getdate(year, month, day);
	if (InfoPlayer[playerid][pVIP] == 0)
	{
		InfoPlayer[playerid][pDiaVIP] = -1;
		InfoPlayer[playerid][pMesVIP] = -1;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET VIP = '%d', DiaVIP = '%d', MesVIP = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pVIP], InfoPlayer[playerid][pDiaVIP], InfoPlayer[playerid][pMesVIP], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
	}
	else
	{
		if (day >= InfoPlayer[playerid][pDiaVIP] && month >= InfoPlayer[playerid][pMesVIP])
		{
			InfoPlayer[playerid][pDiaVIP] = -1;
			InfoPlayer[playerid][pMesVIP] = -1;
			InfoPlayer[playerid][pVIP] = 0;
			SendClientMessage(playerid, 0x0CA7B8FF, "Tu beneficio VIP ha expirado, puedes hacer una renovación ahora mismo.");
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET VIP = '%d', DiaVIP = '%d', MesVIP = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pVIP], InfoPlayer[playerid][pDiaVIP], InfoPlayer[playerid][pMesVIP], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
			return 1;
		}
		format(query, sizeof query, "Sigues con beneficio VIP %s. (Expira el %d de %s)", GetNameVIP(InfoPlayer[playerid][pVIP]), InfoPlayer[playerid][pDiaVIP], GetMonth(InfoPlayer[playerid][pMesVIP]));
		SendClientMessage(playerid, 0x0CA7B8FF, query);
	}
	return 1;
}

Dialog:ShowRegistro(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	new gformat[512];
	ClearChat(playerid);
	if (strlen(inputtext) < 5)
	{
		SendClientMessage(playerid, 0xccccccff, "No puedes tener una contraseña con menos de 4 carácteres.");
		format(gformat, sizeof gformat, "{ffffff}Hola {FFBF00}%s{ffffff}, bienvenido a {FFBF00}Creative Roleplay{ffffff}\n\
		Para registrar en el servidor coloca una contraseña:\n", NombreOriginal(playerid));
		Dialog_Show(playerid, ShowRegistro, DIALOG_STYLE_INPUT, "Registro de cuenta", gformat, "Registrar", "Salir");
		return 1;
	}
	if (strlen(inputtext) > 24)
	{
		SendClientMessage(playerid, 0xccccccff, "No puedes tener una contraseña con más de 24 carácteres.");
		format(gformat, sizeof gformat, "{ffffff}Hola {FFBF00}%s{ffffff}, bienvenido a {FFBF00}Creative Roleplay{ffffff}\n\
		Para registrar en el servidor coloca una contraseña:\n", NombreOriginal(playerid));
		Dialog_Show(playerid, ShowRegistro, DIALOG_STYLE_INPUT, "Registro de cuenta", gformat, "Registrar", "Salir");
		return 1;
	}
	InsideMainMenu[playerid] = false;
	OnPasswordHashed(playerid, 1, inputtext);
	return 1;
}

forward OnPasswordHashed(playerid, type, password[]);
public OnPasswordHashed(playerid, type, password[])
{
	for (new i = 0; i < 10; i++)
	{
		InfoPlayer[playerid][pSalt][i] = random(79) + 47;
	}
	InfoPlayer[playerid][pSalt][10] = 0;
	SHA256_PassHash(password, InfoPlayer[playerid][pSalt], InfoPlayer[playerid][pClave], 65);
	switch (type)
	{
	    case 1:
	    {
			PreguntaTestRol(playerid, 1, 0);
	    }
	    case 2:
	    {
			new query[256];
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Clave = '%e', Salt = '%e' WHERE ID = '%d'", InfoPlayer[playerid][pClave], InfoPlayer[playerid][pSalt], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
	    }
	}
    return 1;

}

Dialog:ShowSexo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		InfoPlayer[playerid][pSexo] = 1;
		Dialog_Show(playerid, ShowEdad, DIALOG_STYLE_INPUT, "Edad", "Masculino{cccccc}, ahora escribe la edad de tu personaje:", "Continuar", "Volver");
	}
	else
	{
		InfoPlayer[playerid][pSexo] = 2;
		Dialog_Show(playerid, ShowEdad, DIALOG_STYLE_INPUT, "Edad", "Femenino{cccccc}, ahora escribe la edad de tu personaje:", "Continuar", "Volver");
	}
	return 1;
}

Dialog:ShowEdad(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, ShowSexo, DIALOG_STYLE_MSGBOX, "Sexo", "{cccccc}Escoge el sexo de tu personaje:", "Masculino", "Femenino");
	if (strval(inputtext) < 16 || strval(inputtext) > 80)
	{
		SendClientMessage(playerid, 0xccccccff, "Edad mínima: 16 - Edad máxima: 80.");
		Dialog_Show(playerid, ShowEdad, DIALOG_STYLE_INPUT, "Edad", "{cccccc}Escribe la edad de tu personaje:", "Continuar", "Volver");
		return 1;
	}
	InfoPlayer[playerid][pEdad] = strval(inputtext);
	Dialog_Show(playerid, ShowLlegada, DIALOG_STYLE_MSGBOX, "Llegada a la ciudad", "{cccccc}¿Cómo llegaste a la ciudad de Los Santos?", "En avión", "En Tren");
	return 1;
}

Dialog:ShowLlegada(playerid, response, listitem, inputtext[])
{
	ClearChat(playerid);
	if (response)
	{
		InfoPlayer[playerid][pCiudad] = 1;
		SendClientMessage(playerid, COLOR_GENERAL, "[Teléfono]:{FFFFFF} Bien, has llegado a Los Santos en avión, le recibiremos en el Aeropuerto en breve.");
	}
	else
	{
		InfoPlayer[playerid][pCiudad] = 2;
		SendClientMessage(playerid, COLOR_GENERAL, "[Teléfono]:{FFFFFF} Bien, has llegado a Los Santos en tren, le recibiremos en Unity en breve.");
	}
	SetTimerEx("crear_cuenta", 4000, false, "d", playerid);
	return 1;
}

forward crear_cuenta(playerid);
public crear_cuenta(playerid)
{
	TogglePlayerSpectating(playerid, false);
	StopAudioStreamForPlayer(playerid);
	if (InfoPlayer[playerid][pCiudad] == 1)
	{
		InfoPlayer[playerid][pPosicionX] = 1971.1675;
		InfoPlayer[playerid][pPosicionY] = -2237.1450;
		InfoPlayer[playerid][pPosicionZ] = 13.4659;
		InfoPlayer[playerid][pPosicionR] = 2.0172;
		InfoPlayer[playerid][pInterior] = 0;
		InfoPlayer[playerid][pVirtualWorld] = 0;
	}
	else
	{
		InfoPlayer[playerid][pPosicionX] = 1772.9576;
		InfoPlayer[playerid][pPosicionY] = -1920.9810;
		InfoPlayer[playerid][pPosicionZ] = 13.5518;
		InfoPlayer[playerid][pPosicionR] = 309.0634;
		InfoPlayer[playerid][pInterior] = 0;
		InfoPlayer[playerid][pVirtualWorld] = 0;
	}
	if (InfoPlayer[playerid][pSexo] == 1)
	{
		InfoPlayer[playerid][pSkin] = 26;
		SetPlayerSkin(playerid, 26);
	}
	else
	{
		InfoPlayer[playerid][pSkin] = 41;
		SetPlayerSkin(playerid, 41);
	}
	InfoPlayer[playerid][pVida] = 100;
	SetPlayerHealth(playerid, 100);
	usuario_registro[playerid] = 2;
	mmaguebo_abusadol[playerid] = 0;
	ClearChat(playerid);
	new gformat[256];
	Loop(x, 4, 0) { TextDrawHideForPlayer(playerid, TDLogin[x]); }
	format(gformat, sizeof gformat, "Hola {FFBF00}%s{EBEBEB}, registraste con éxito en {FFBF00}Creative Roleplay{EBEBEB}.", NombreJugador(playerid));
	SendClientMessage(playerid, 0xEBEBEBFF, gformat);
	SendClientMessage(playerid, 0xEBEBEBFF, "Puedes usar {FFBF00}/gps{EBEBEB} para ubicar lugares de la ciudad, si tienes dudas usa {FFBF00}/soporte{EBEBEB}.");
	TextDrawShowForPlayer(playerid, TD_fechahora);
	TotalRegister++;
	new newip[18];
	GetPlayerIp(playerid, newip, sizeof newip);
	alm(InfoPlayer[playerid][pIP], newip);
	InfoPlayer[playerid][pPuntosRol] = 2;
	InfoPlayer[playerid][pNivel] = 1;
	SetPlayerScore(playerid, InfoPlayer[playerid][pNivel]);
	state_on[playerid] = 3; // logeado
	new DineroInicial = 25000; // Stats de Inicio.
	InfoPlayer[playerid][pDinero] = DineroInicial;
	GivePlayerMoney(playerid, DineroInicial);
	SetPosEx(playerid, InfoPlayer[playerid][pPosicionX], InfoPlayer[playerid][pPosicionY], InfoPlayer[playerid][pPosicionZ], InfoPlayer[playerid][pPosicionR], InfoPlayer[playerid][pInterior], InfoPlayer[playerid][pVirtualWorld], 0);
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);
	//ShowModelSelectionMenu(playerid, skinlist, "Selecciona un skin");
	InfoPlayer[playerid][pFechaRegistro] = FechaHoy();
	InfoPlayer[playerid][pUltimaConexion] = FechaHoy();
	new query[2056];
	mysql_format(DBcreative, query, sizeof query, "INSERT INTO cuentas (Nombre_Apellido, Clave, Salt, IP, PosicionX, PosicionY, PosicionZ, PosicionR, Interior, VirtualWorld, Skin, Nivel, Sexo, Edad, Ciudad, BolosUwU, PuntosRol, FechaRegistro, UltimaConexion) \
	VALUES ('%e', '%e', '%e', '%e', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%e', '%e')",
	NombreOriginal(playerid),
	InfoPlayer[playerid][pClave],
	InfoPlayer[playerid][pSalt],
	InfoPlayer[playerid][pIP],
	InfoPlayer[playerid][pPosicionX],
	InfoPlayer[playerid][pPosicionY],
	InfoPlayer[playerid][pPosicionZ],
	InfoPlayer[playerid][pPosicionR],
	InfoPlayer[playerid][pInterior],
	InfoPlayer[playerid][pVirtualWorld],
	InfoPlayer[playerid][pSkin],
	InfoPlayer[playerid][pNivel],
	InfoPlayer[playerid][pSexo],
	InfoPlayer[playerid][pEdad],
	InfoPlayer[playerid][pCiudad],
	DineroInicial,
	InfoPlayer[playerid][pPuntosRol],
	InfoPlayer[playerid][pFechaRegistro],
	InfoPlayer[playerid][pUltimaConexion]);
	mysql_tquery(DBcreative, query, "CreatePlayerAccount", "i", playerid);
	return 1;
}

forward CreatePlayerAccount(playerid);
public CreatePlayerAccount(playerid)
{
	InfoPlayer[playerid][pID] = cache_insert_id();
	cache_unset_active();
	InfoPlayer[playerid][pDocumento] = 2000000+InfoPlayer[playerid][pID];
	guardar_int_mysql("cuentas", "Documento", InfoPlayer[playerid][pID], InfoPlayer[playerid][pDocumento]);
	return 1;
}

reset_InfoPlayer(playerid)
{
	InfoPlayer[playerid][pID] = -1;
	alm(InfoPlayer[playerid][pNombre_Apellido], NombreOriginal(playerid));
	alm(InfoPlayer[playerid][pNombre_Temporal], "");
	alm(InfoPlayer[playerid][pNombre_PD], "");
	InfoPlayer[playerid][pClave][0] = EOS;
	InfoPlayer[playerid][pSalt][0] = EOS;
	alm(InfoPlayer[playerid][pIP], "127.0.0.1");
	InfoPlayer[playerid][pAdmin] = 0;
	alm(InfoPlayer[playerid][pApodo], "niub");
	alm(InfoPlayer[playerid][pPreguntaSeguridad], "ninguna");
	alm(InfoPlayer[playerid][pRespuestaSeguridad], "ninguna");
	InfoPlayer[playerid][pEncFac] = 0;
	InfoPlayer[playerid][pPosicionX] = 0.0;
	InfoPlayer[playerid][pPosicionY] = 0.0;
	InfoPlayer[playerid][pPosicionZ] = 0.0;
	InfoPlayer[playerid][pPosicionR] = 0.0;
	InfoPlayer[playerid][pInterior] = 0;
	InfoPlayer[playerid][pVirtualWorld] = 0;
	InfoPlayer[playerid][pVida] = 100.0;
	InfoPlayer[playerid][pChaleco] = 0.0;
	InfoPlayer[playerid][pSkin] = 289;
	InfoPlayer[playerid][pNivel] = 0;
	InfoPlayer[playerid][pExperiencia] = 0;
	InfoPlayer[playerid][pHorasOn] = 0;
	InfoPlayer[playerid][pSexo] = 1;
	InfoPlayer[playerid][pEdad] = 16;
	InfoPlayer[playerid][pCiudad] = 1;
	InfoPlayer[playerid][pAcento] = 1;
	InfoPlayer[playerid][pEstiloPelea] = 4;
	InfoPlayer[playerid][pDinero] = 0;
	InfoPlayer[playerid][pBanco] = 0;
	InfoPlayer[playerid][pLider] = 0;
	InfoPlayer[playerid][pMiembro] = 0;
	InfoPlayer[playerid][pRango] = 0;
	Loop(x, 10, 0)
	{
		InfoPlayer[playerid][pBolsillo][x] = 0;
		InfoPlayer[playerid][pBolsilloCant][x] = 0;
        InfoPlayer[playerid][ptModelo][x] = 0;
        InfoPlayer[playerid][ptHueso][x] = 0;
        InfoPlayer[playerid][ptPosX][x] = 0.0;
        InfoPlayer[playerid][ptPosY][x] = 0.0;
        InfoPlayer[playerid][ptPosZ][x] = 0.0;
        InfoPlayer[playerid][ptRotX][x] = 0.0;
        InfoPlayer[playerid][ptRotY][x] = 0.0;
        InfoPlayer[playerid][ptRotZ][x] = 0.0;
        InfoPlayer[playerid][ptScaleX][x] = 1;
        InfoPlayer[playerid][ptScaleY][x] = 1;
        InfoPlayer[playerid][ptScaleZ][x] = 1;
        InfoPlayer[playerid][ptColocado][x] = 0;
        InfoPlayer[playerid][ptColor][x] = -1;
	}
	InfoPlayer[playerid][pManoDerecha] = 0;
	InfoPlayer[playerid][pManoDerechaCant] = 0;
	InfoPlayer[playerid][pManoIzquierda] = 0;
	InfoPlayer[playerid][pManoIzquierdaCant] = 0;
	InfoPlayer[playerid][pEspalda] = 0;
	InfoPlayer[playerid][pEspaldaCant] = 0;
	InfoPlayer[playerid][pVIP] = 0;
	InfoPlayer[playerid][pDiaVIP] = -1;
	InfoPlayer[playerid][pMesVIP] = -1;
	InfoPlayer[playerid][pCoinsVIP] = 0;
	InfoPlayer[playerid][pTogVIP] = 1;
	InfoPlayer[playerid][pDobleExp] = 0;
	InfoPlayer[playerid][pRegalo] = 0;
	InfoPlayer[playerid][pMuerto] = 0;
	InfoPlayer[playerid][pHospital] = 0;
	InfoPlayer[playerid][pBalaCabeza] = 0;
	InfoPlayer[playerid][pJails] = 0;
	InfoPlayer[playerid][pArrestos] = 0;
	InfoPlayer[playerid][pDudaBloqueado] = 0;
	InfoPlayer[playerid][pDudaAdvertencias] = 0;
	InfoPlayer[playerid][pAdvertencia] = 0;
	InfoPlayer[playerid][pSancionado] = 0;
	InfoPlayer[playerid][pTiempoSancion] = 0;
	alm(InfoPlayer[playerid][pBySancion], "none");
	alm(InfoPlayer[playerid][pRazonSancion], "none");
	InfoPlayer[playerid][pMateriales] = 0;
	InfoPlayer[playerid][pGanzuas] = 0;
	InfoPlayer[playerid][pTelefono] = 0;
	InfoPlayer[playerid][pTogVelocimetro] = 1;
	InfoPlayer[playerid][pCasa1] = -1;
	InfoPlayer[playerid][pCasa2] = -1;
	InfoPlayer[playerid][pNegocio1] = -1;
	InfoPlayer[playerid][pNegocio2] = -1;
	Loop(x, 5, 0) { InfoPlayer[playerid][pLicencia][x] = 0; }
	InfoPlayer[playerid][pMulticuenta] = 0;
	InfoPlayer[playerid][pMascara] = 0;
	InfoPlayer[playerid][pUsoMascara] = 0;
	InfoPlayer[playerid][pBaneo] = 0;
	InfoPlayer[playerid][pBlockBug] = 0;
	InfoPlayer[playerid][pTogGraffiti] = 0;
	InfoPlayer[playerid][pDocumento] = 0;
	Loop(x, 5, 0) { InfoPlayer[playerid][pHabilidad][x] = 0; }
	InfoPlayer[playerid][YaCobre] = 0;
	InfoPlayer[playerid][pEstrellas] = 0;
	InfoPlayer[playerid][pLimiteRobos] = 0;
	InfoPlayer[playerid][pNivelRolero] = 0;
	InfoPlayer[playerid][pPuntosRol] = 0;
	InfoPlayer[playerid][pNivelMuteoReport] = 0;
	InfoPlayer[playerid][pAdvMuteoReport] = 0;
	InfoPlayer[playerid][pTiempoMuteoReport] = 0;
	InfoPlayer[playerid][pFrecuencia_radio] = 0;
	InfoPlayer[playerid][pTiempoRegalo] = 0;
	InfoPlayer[playerid][pTipoSpawn] = 0;
	alm(InfoPlayer[playerid][pAutoRespuestaSMS], "none");
	InfoPlayer[playerid][pBlockAD] = 0;
	InfoPlayer[playerid][pAdvAD] = 0;
	InfoPlayer[playerid][pPescados] = 0;
	InfoPlayer[playerid][pRecordPesoPes] = 0;
	alm(InfoPlayer[playerid][pEstadoYo], "");
	DestroyDynamic3DTextLabelEx(InfoPlayer[playerid][pNameTag]);
	Loop(x, 10, 0)
	{
		alm(nombre_contacto[playerid][x], "none");
		InfoPlayer[playerid][pNumeroContacto][x] = 0;
	}
	InfoPlayer[playerid][pJobSkin] = 0;
	InfoPlayer[playerid][pRestriccionRobo] = 0;
	InfoPlayer[playerid][pFalsoDocumento] = 0;
	alm(InfoPlayer[playerid][pFalsoNombre], "none");
	alm(InfoPlayer[playerid][pFechaRegistro], "none");
	alm(InfoPlayer[playerid][pUltimaConexion], "none");
	Loop(x, 6, 0)
	{
		InfoPlayer[playerid][pCinturon][x] = 0;
		InfoPlayer[playerid][pCinturonCant][x] = 0;
	}
	InfoPlayer[playerid][pContrato] = -1;
	Loop(x, 3, 0) { InfoPlayer[playerid][pAdiccion][x] = 0; }
	InfoPlayer[playerid][pDrogaTipo] = 0;
	InfoPlayer[playerid][pDrogaTiempo] = 0;
	InfoPlayer[playerid][pDrogaPower] = 0;
	InfoPlayer[playerid][pAbstinenceEffect] = 0;
	InfoPlayer[playerid][pAbstinenceTime] = 0;
	InfoPlayer[playerid][pTogTelefono] = 1;
	InfoPlayer[playerid][pTogManos] = 1;
	InfoPlayer[playerid][pTogCajero] = 0;
	InfoPlayer[playerid][pTogAnuncios] = 0;
	InfoPlayer[playerid][pTogTelefono] = 1;
	InfoPlayer[playerid][pTimerAnuncios] = 0;
	InfoPlayer[playerid][pTogOOC] = 1;
	InfoPlayer[playerid][pTogMusic] = 1;
	InfoPlayer[playerid][pTogRadio] = 1;
	InfoPlayer[playerid][pTogPortatil] = 1;
	InfoPlayer[playerid][pTogFaccion] = 1;
	InfoPlayer[playerid][pRepartoViajes] = 0;
}

public OnVehicleDeath(vehicleid)
{
	LockStatus[vehicleid] = 0;
	new VehV = verificar_id_vehiculo(vehicleid);
	if (VehV != -1)
	{
		if (InfoVehiculo[VehV][vModeloNeon] != 0 && InfoVehiculo[VehV][vOnNeon] != 0)
		{
			DestroyDynamicObject(InfoVehiculo[VehV][vObjetoNeonL]);
			DestroyDynamicObject(InfoVehiculo[VehV][vObjetoNeonR]);
		}
		Loop(x, 5, 0) if (InfoVehiculo[VehV][vObjModelo][x] != 0) { DestroyDynamicObject(InfoVehiculo[VehV][vTuneo][x]); }
	}
    arr_Engine{vehicleid} = 0;
  	return 1;
}

Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[156],
		i_dateTime[2][3],
		File: fileGformat = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileGformat, sz_logEntry);
	return fclose(fileGformat);
}

forward BajarDrogas(playerid, veh, id);
public BajarDrogas(playerid, veh, id)
{
	new count;
	if (veh == 1)
	{
		InfoNegocio[id][nCountQVeh1]--;
		count = InfoNegocio[id][nCountQVeh1];
		if (InfoNegocio[id][nCountQVeh1] == 5) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh1][4]);
		if (InfoNegocio[id][nCountQVeh1] == 4) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh1][3]);
		if (InfoNegocio[id][nCountQVeh1] == 3) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh1][2]);
		if (InfoNegocio[id][nCountQVeh1] == 2) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh1][1]);
		if (InfoNegocio[id][nCountQVeh1] == 1) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh1][0]);
	}
	else if (veh == 2)
	{
		InfoNegocio[id][nCountQVeh2]--;
		count = InfoNegocio[id][nCountQVeh2];
		if (InfoNegocio[id][nCountQVeh2] == 5) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh2][4]);
		if (InfoNegocio[id][nCountQVeh2] == 4) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh2][3]);
		if (InfoNegocio[id][nCountQVeh2] == 3) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh2][2]);
		if (InfoNegocio[id][nCountQVeh2] == 2) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh2][1]);
		if (InfoNegocio[id][nCountQVeh2] == 1) DestroyDynamicObject(InfoNegocio[id][nBarrilVeh2][0]);
	}
	Streamer_Update(playerid);
	if (count == 0) // por devolver
	{
		new pagoFabrica = Random(60000, 93000), pagoEmpleado = Random(7500, 9723), gformat[230];
		format(gformat, sizeof gformat, "Entrega con éxito, la fábrica recibió {00CC00}$%s{FFFFFF} y a tus bolsillos unos {00CC00}$%s{FFFFFF} dólares.", diner_coma(pagoFabrica), diner_coma(pagoEmpleado));
		SendClientMessage(playerid, 0xFFFFFFFF, gformat);
		InfoNegocio[id][nDinero] += pagoFabrica;
		UpdateDineroGuardado(id);
		mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE negocios SET BolosUwU = '%d' WHERE ID = '%d'", InfoNegocio[id][nDinero], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, gformat);
		GivePlayerCash(playerid, pagoEmpleado, "entrega exitosa (fabrica drogas)");
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, true);
		SendClientMessage(playerid, 0xFFFFFFFF, "Regresa a la fábrica para devolver la {3399FF}camioneta{FFFFFF} y recibir algo más de dinero.");
		EnViajeDrogas[playerid] = 2;
		SetPlayerCheckpoint(playerid, InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ], 10.0);
		return 1;
	}
	//recogiendo
	SetTimerEx("BajarDrogas", 3000, false, "iii", playerid, veh, id);
	return 1;
}

forward RecogerQuimicos(playerid, veh, id);
public RecogerQuimicos(playerid, veh, id)
{
	new count;
	new vehicleid;
	if (veh == 1) { vehicleid = InfoNegocio[id][nVehiculo][0]; InfoNegocio[id][nCountQVeh1]++; count = InfoNegocio[id][nCountQVeh1]; }
	else if (veh == 2) { vehicleid = InfoNegocio[id][nVehiculo][1]; InfoNegocio[id][nCountQVeh2]++; count = InfoNegocio[id][nCountQVeh2]; }
	DarBarril(id, veh, count);
	UsandoVehFabrica[playerid] = vehicleid;
	Streamer_Update(playerid);
	if (count == 5) // por llevar
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, true);
		SendClientMessage(playerid, 0xFFFFFFFF, "Regresa a la fábrica para devolver los {3399FF}químicos{FFFFFF}.");
		EnViajeQuimicos[playerid] = 2;
		SetPlayerCheckpoint(playerid, InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ], 10.0);
		return 1;
	}
	//recogiendo
	SetTimerEx("RecogerQuimicos", 3000, false, "iii", playerid, veh, id);
	return 1;
}

DarBarril(id, veh, count)
{
	if (veh == 1)
	{
		new vehicleid = InfoNegocio[id][nVehiculo][0];
		switch (count)
		{
		    case 1:
			{
				InfoNegocio[id][nBarrilVeh1][0] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				InfoNegocio[id][nBarrilVeh1][1] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				InfoNegocio[id][nBarrilVeh1][2] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				InfoNegocio[id][nBarrilVeh1][3] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				InfoNegocio[id][nBarrilVeh1][4] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][0], vehicleid, 0.394999, -1.084999, 0.230000, 0.000000, 0.000000, 0.000000);
			}
			case 2:
			{
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][1], vehicleid, -0.519999, -1.084999, 0.199500, 0.000000, 0.000000, 0.000000);
		    }
		    case 3:
			{
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][2], vehicleid, -0.049999, -1.729998, 0.230000, 0.000000, 0.000000, 0.000000);
		    }
		    case 4:
			{
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][3], vehicleid, 0.429999, -2.320005, 0.165000, 0.000000, 0.000000, 0.000000);
		    }
		    case 5:
			{
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][4], vehicleid, -0.554999, -2.285004, 0.220000, 0.000000, 0.000000, 0.000000);
		    }
		}
	}
	else if (veh == 2)
	{
		new vehicleid = InfoNegocio[id][nVehiculo][1];
		switch (count)
		{
		    case 1:
			{
				InfoNegocio[id][nBarrilVeh2][0] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				InfoNegocio[id][nBarrilVeh2][1] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				InfoNegocio[id][nBarrilVeh2][2] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				InfoNegocio[id][nBarrilVeh2][3] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				InfoNegocio[id][nBarrilVeh2][4] = CreateDynamicObject(3632,0.0000000,0.0000000,-1000.0000000,0.0000000,0.0000000,0.0000000,0,0);
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][0], vehicleid, 0.394999, -1.084999, 0.230000, 0.000000, 0.000000, 0.000000);
			}
			case 2:
			{
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][1], vehicleid, -0.519999, -1.084999, 0.199500, 0.000000, 0.000000, 0.000000);
		    }
		    case 3:
			{
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][2], vehicleid, -0.049999, -1.729998, 0.230000, 0.000000, 0.000000, 0.000000);
		    }
		    case 4:
			{
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][3], vehicleid, 0.429999, -2.320005, 0.165000, 0.000000, 0.000000, 0.000000);
		    }
		    case 5:
			{
				AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][4], vehicleid, -0.554999, -2.285004, 0.220000, 0.000000, 0.000000, 0.000000);
		    }
		}
	}
	return 1;
}

forward RecibirPaquete(playerid);
public RecibirPaquete(playerid)
{
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, true);
	new id_casa = RepartoCasa[playerid], gformat[240];
	SetPlayerCheckpoint(playerid, InfoCasa[id_casa][cExteriorX], InfoCasa[id_casa][cExteriorY], InfoCasa[id_casa][cExteriorZ], 5.0);
	format(gformat, sizeof gformat, "Cogiste el paquete de {FFFFFF}%s{FBC74F}, el lugar de entrega fue marcado en el radar.", GetNameReparto(RepartoID[playerid]));
	SendClientMessage(playerid, 0xFBC74FFF, gformat);
	SetPVarInt(playerid, "EnCheckPoint", 4);
	RemovePlayerAttachedObject(playerid, 7);
	InfoPlayer[playerid][pManoDerecha] = 55;
	InfoPlayer[playerid][pManoDerechaCant] = RepartoID[playerid];
	PonerObjeto(playerid, 1, 55);
	return 1;
}

//
public OnPlayerEnterCheckpoint(playerid)
{
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    new carid = GetPlayerVehicleID(playerid), string[187];
	if (GetPVarInt(playerid, "EnCheckPoint") == 3) //recoge paquete negocio
	{
		new gformat[170], id_neg = RepartoNegocio[playerid];
		if (!IsPlayerInRangeOfPoint(playerid, 6.0, InfoNegocio[id_neg][nExteriorX], InfoNegocio[id_neg][nExteriorY], InfoNegocio[id_neg][nExteriorZ]))
		{
			format(gformat, sizeof gformat, "El paquete está en el negocio %s, se te volvió a marcar en el radar.", InfoNegocio[id_neg][nNombre]);
			SendClientMessage(playerid, 0xFFFF00FF, gformat);
			SetPlayerCheckpoint(playerid, InfoNegocio[id_neg][nExteriorX], InfoNegocio[id_neg][nExteriorY], InfoNegocio[id_neg][nExteriorZ], 5.0);
			SetPVarInt(playerid, "EnCheckPoint", 3);
			return 1;
		}
		if (InfoPlayer[playerid][pManoDerecha] != 0)
		{
			SendClientMessage(playerid, 0xFFFF00FF, "Debes tener la mano derecha vacía para tomar el paquete.");
			return 1;
		}
		DeletePVar(playerid, "EnCheckPoint");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid, false);
		SetPVarInt(playerid, "Congelado", 1);
		SetTimerEx("RecibirPaquete", 10000, false, "d", playerid);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~w~recibiendo ~p~paquete...", 11000, 3);
	}
	else if (GetPVarInt(playerid, "EnCheckPoint") == 4) //entrega casa
	{
		new gformat[260], id_casa = RepartoCasa[playerid], pago = RepartoPago[playerid], propina;
		if (!IsPlayerInRangeOfPoint(playerid, 6.0, InfoCasa[id_casa][cExteriorX], InfoCasa[id_casa][cExteriorY], InfoCasa[id_casa][cExteriorZ]))
		{
			SendClientMessage(playerid, 0xFFFF00FF, "No estás en el lugar de entrega, se te volvió a marcar en el radar.");
			SetPlayerCheckpoint(playerid, InfoCasa[id_casa][cExteriorX], InfoCasa[id_casa][cExteriorY], InfoCasa[id_casa][cExteriorZ], 5.0);
			SetPVarInt(playerid, "EnCheckPoint", 4);
			return 1;
		}
		if (InfoPlayer[playerid][pManoDerecha] != 55)
		{
			SendClientMessage(playerid, 0xFFFF00FF, "Debes tener el paquete que cogiste del negocio en tu mano derecha para entregarlo.");
			return 1;
		}
		InfoPlayer[playerid][pManoDerecha] = 0;
		InfoPlayer[playerid][pManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
		//clear cps
		DeletePVar(playerid, "EnCheckPoint");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
		//habilidad
		if (InfoPlayer[playerid][pVIP] != 0) InfoPlayer[playerid][pHabilidad][1] += 2;
		else InfoPlayer[playerid][pHabilidad][1]++;
		guardar_int_mysql("cuentas", "Habilidad2", InfoPlayer[playerid][pID], InfoPlayer[playerid][pHabilidad][1]);
		//pago
		switch (NivelHabilidad(playerid, 1))
		{
		    case 1: propina = Random(120, 250);
		    case 2: propina = Random(300, 400);
		    case 3: propina = Random(400, 500);
		    case 4: propina = Random(500, 740);
		    case 5: propina = Random(740, 1150);
		}
		format(gformat, sizeof gformat, "Recibiste {49B01E}$%s{FFFFFF} del reparto, más {49B01E}$%s{FFFFFF} de propina ({FFBF00}pago extra por habilidad{FFFFFF}).", diner_coma(pago/2), diner_coma(propina));
		SendClientMessage(playerid, 0xFFFFFFFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "Te recordamos que la mitad del pago fue enviado a la empresa en la que trabajas, menos la propina.");
		new pago_total = propina+(pago/2);
		GivePlayerCash(playerid, pago_total, "pago repartos");
		new neg = IsPlayerContrato(playerid, 6);
		if (neg != -1)
		{
			if (InfoNegocio[neg][nVenta] != 0)
			{
				InfoNegocio[neg][nDinero] += pago/2;
				guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
			}
		}
		//clear reparto
		RepartoID[playerid] = -1;
		RepartoCasa[playerid] = -1;
		RepartoNegocio[playerid] = -1;
		RepartoPago[playerid] = 0;
		InfoPlayer[playerid][pRepartoViajes]++;
		guardar_int_mysql("cuentas", "RepartoViajes", InfoPlayer[playerid][pID], InfoPlayer[playerid][pRepartoViajes]);
	}
	if (LlegandoLlamadoMecanico[playerid] != 0)
	{
		DisablePlayerCheckpoint(playerid);
	    LlegandoLlamadoMecanico[playerid] = 0;
		SendClientMessage(playerid, 0x00CC00FF, "Llegaste a la posición del llamado.");
	}
	if (EnViajeDrogas[playerid] == 1)
	{
		if (!EnEntregaDrogas(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No estás en el punto de descargar drogas.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes estar como conductor.");
		new vehid = EsVehFabrica(carid), id = IsPlayerContrato(playerid, 12);
		if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ninguna fábrica de drogas.");
		if (vehid == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo de fábrica.");
		if (vehid != id) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo de tu fábrica.");
		if (carid == InfoNegocio[id][nVehiculo][0])
		{
			DisablePlayerCheckpoint(playerid);
			InfoNegocio[id][nCountQVeh1] = 6;
			SetTimerEx("BajarDrogas", 3000, false, "iii", playerid, 1, id);
		}
		else if (carid == InfoNegocio[id][nVehiculo][1])
		{
			DisablePlayerCheckpoint(playerid);
			InfoNegocio[id][nCountQVeh2] = 6;
			SetTimerEx("BajarDrogas", 3000, false, "iii", playerid, 2, id);
		}
		SendClientMessage(playerid, 0xFFFFFFFF, "Se está {FFBF00}descargando{FFFFFF} la camioneta con las {3399FF}cajas de drogas{FFFFFF}, espera.");
		TogglePlayerControllable(playerid, false);
		SetPVarInt(playerid, "IsFrozen", 1);
	}
	else if (EnViajeDrogas[playerid] == 2)
	{
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes estar como conductor.");
		new vehid = EsVehFabrica(carid), id = IsPlayerContrato(playerid, 12);
		if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ninguna fábrica de drogas.");
		if (vehid == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo de fábrica.");
		if (vehid != id) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo de tu fábrica.");
		new pago = Random(1200, 2130);
		format(string, sizeof string, "Recibiste {00CC00}$%s{FFFFFF} por entregar la {FFBF00}camioneta{FFFFFF} a la fábrica.", diner_coma(pago));
		SendClientMessage(playerid, 0xFFFFFFFF, string);
		GivePlayerCash(playerid, pago, "devolver camioneta (fabrica drogas)");
		SetVehicleToRespawn(carid);
		SetPosEx(playerid, -2185.1226, -243.5894, 548.9390, 255.7332, InfoNegocio[id][nInteriorInt], InfoNegocio[id][nInteriorVW], 1);
		SetCameraBehindPlayer(playerid);
		EnViajeDrogas[playerid] = 0;
		UsandoVehFabrica[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if (EnViajeQuimicos[playerid] == 1)
	{
		if (!EnRecogerQuimicos(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No estás en el punto de recoger químicos.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes estar como conductor.");
		new vehid = EsVehFabrica(carid), id = IsPlayerContrato(playerid, 12);
		if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ninguna fábrica de drogas.");
		if (vehid == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo de fábrica.");
		if (vehid != id) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo de tu fábrica.");
		if (carid == InfoNegocio[id][nVehiculo][0])
		{
			DisablePlayerCheckpoint(playerid);
			InfoNegocio[id][nCountQVeh1] = 0;
			SetTimerEx("RecogerQuimicos", 3000, false, "iii", playerid, 1, id);
		}
		else if (carid == InfoNegocio[id][nVehiculo][1])
		{
			DisablePlayerCheckpoint(playerid);
			InfoNegocio[id][nCountQVeh2] = 0;
			SetTimerEx("RecogerQuimicos", 3000, false, "iii", playerid, 2, id);
		}
		SendClientMessage(playerid, 0xFFFFFFFF, "Se está {FFBF00}cargando{FFFFFF} la camioneta con los {3399FF}químicos{FFFFFF}, espera.");
		TogglePlayerControllable(playerid, false);
		SetPVarInt(playerid, "IsFrozen", 1);
	}
	else if (EnViajeQuimicos[playerid] == 2)
	{
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes estar como conductor.");
		new vehid = EsVehFabrica(carid), id = IsPlayerContrato(playerid, 12);
		if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ninguna fábrica de drogas.");
		if (vehid == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo de fábrica.");
		if (vehid != id) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo de tu fábrica.");
		//veh 1
		new count = 0;
		if (carid == InfoNegocio[id][nVehiculo][0])
		{
			Loop(e, 5, 0) if (IsValidDynamicObject(InfoNegocio[id][nBarrilVeh1][e]))
			{
				DestroyDynamicObject(InfoNegocio[id][nBarrilVeh1][e]);
				count++;
			}
			InfoNegocio[id][nCountQVeh1] = 0;
		}
		//veh 2
		if (carid == InfoNegocio[id][nVehiculo][1])
		{
			Loop(e, 5, 0) if (IsValidDynamicObject(InfoNegocio[id][nBarrilVeh2][e]))
			{
				DestroyDynamicObject(InfoNegocio[id][nBarrilVeh2][e]);
				count++;
			}
			InfoNegocio[id][nCountQVeh2] = 0;
		}
		new pago = 1000, quimis = count*20;
		switch (count)
		{
			case 1: pago += Random(500, 700);
			case 2: pago += Random(800, 1100);
			case 3: pago += Random(1200, 1400);
			case 4: pago += Random(1500, 2000);
			case 5: pago += Random(2400, 3000);
		}
		format(string, sizeof string, "Recibiste {00CC00}$%s{FFFFFF} por entregar {FFBF00}%d barriles{FFFFFF} de {3399FF}químicos{FFFFFF}.", diner_coma(pago), count);
		SendClientMessage(playerid, 0xFFFFFFFF, string);
		GivePlayerCash(playerid, pago, "entrega barriles (fabrica drogas)");
		SetVehicleToRespawn(carid);
		SetPosEx(playerid, -2185.1226, -243.5894, 548.9390, 255.7332, InfoNegocio[id][nInteriorInt], InfoNegocio[id][nInteriorVW], 1);
		SetCameraBehindPlayer(playerid);
		InfoNegocio[id][nRecorridosQuimicos]++;
		if (InfoNegocio[id][nRecorridosQuimicos] == 3)
		{
			InfoNegocio[id][nTimeNecesitaQuimicos] = 120;
			guardar_int_mysql("negocios", "TimeNecesitaQuimicos", InfoNegocio[id][nID_sql], InfoNegocio[id][nTimeNecesitaQuimicos]);
			InfoNegocio[id][nRecorridosQuimicos] = 0;
		}
		InfoNegocio[id][nQuimicos] += quimis;
		guardar_int_mysql("negocios", "Quimicos", InfoNegocio[id][nID_sql], InfoNegocio[id][nQuimicos]);
		UpdateQuimicos(id);
		EnViajeQuimicos[playerid] = 0;
		UsandoVehFabrica[playerid] = 0;
	}
	if(GetPVarInt(playerid,"TrackCar") != 0)
	{
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "TrackCar");
		return 1;
	}
	if(EMSCallTime[playerid] > 0 && EMSAccepted[playerid] < 999)
	{
	    if(GetPVarInt(EMSAccepted[playerid], "EstaCrack") == 1)
	    {
			ApplyAnimation(EMSAccepted[playerid], "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
			dar_chaleco(EMSAccepted[playerid],0);
	    	EMSAccepted[playerid] = 999;
	    	GameTextForPlayer(playerid, "~w~Llegaste", 5000, 1);
	    	EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
		else
		{
            EMSAccepted[playerid] = 999;
		    GameTextForPlayer(playerid, "~r~Paciente ha muerto", 5000, 1);
		    EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (IsPlayerNPC(playerid)) return 1;
	new string[256], engine, lights, alarm, doors, bonnet, boot, objective, vehicleid = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	//spec
	if (GettingSpectated[playerid] != 999)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = 999;
	        Spectate[spectator] = 999;
		}
		if (newstate == PLAYER_STATE_DRIVER && GetPlayerAdmin(playerid, 1) == 1 || newstate == PLAYER_STATE_PASSENGER && GetPlayerAdmin(playerid, 1) == 1)
		{
	        TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID( playerid );
			PlayerSpectateVehicle( spectator, carid );
			SetPVarInt(spectator, "SpecState", newstate);
	    }
	    else if(newstate == PLAYER_STATE_ONFOOT && GetPlayerAdmin(playerid, 1) == 1)
	    {
	        TogglePlayerSpectating(spectator, true);
		   	PlayerSpectatePlayer( spectator, playerid );
		   	SetPlayerInterior( spectator, GetPlayerInterior( playerid ) );
			SetPVarInt(spectator, "SpecState", newstate);
	    }
	}
	//pasajero
	if (newstate == PLAYER_STATE_PASSENGER)
	{
		if (GetPVarInt(playerid, "ToBeEjected") >= 1)
		{
			SetPVarInt(playerid, "ToBeEjected", 0);
			RemovePlayerFromVehicle(playerid);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y+1, Z);
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
			return 1;
		}
		gLastCar[playerid] = vehicleid;
	}
	//deja conductor
	if (oldstate == PLAYER_STATE_DRIVER)
	{
		hide_velocimetro(playerid);
	}
	//conductor
	if (newstate == PLAYER_STATE_DRIVER)
	{
		if (GetPVarInt(playerid, "ToBeEjected") >= 1)
		{
			SetPVarInt(playerid, "ToBeEjected", 0);
			RemovePlayerFromVehicle(playerid);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y+1, Z);
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
			return 1;
		}
		if (vehicleid != 0) mostrar_velocimetro(playerid, vehicleid);
		SetVehicleParamsEx(vehicleid, arr_Engine{vehicleid}, lights, alarm, doors, bonnet, boot, objective);
		if (Vehiculo_Renta(vehicleid))
		{
			new id = verificar_id_vehiculo(vehicleid);
			if (InfoVehiculo[id][vRentaTiempo] != 0) //rentado
			{
				if (llaves_renta(playerid, vehicleid) != 0) format(string, sizeof string, "Tienes las llaves de {FFFFFF}%s{FF9B6A} rentado. (Tiempo restante %d minutos)", GetVehicleName(vehicleid), InfoVehiculo[id][vRentaTiempo]);
				else format(string, sizeof string, "Este {FFFFFF}%s{FF9B6A} está rentado por {FFFFFF}%s{FF9B6A}.", GetVehicleName(vehicleid), InfoVehiculo[id][vRentaDueno]);
				SendClientMessage(playerid, 0xFF9B6AFF, string);
			}
			else //por rentar
			{
				format(string, sizeof string, "Este %s esta disponible, su renta por 60 minutos es de 3,000$. (/rentarveh)", GetVehicleName(vehicleid));
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			}
		}
   		gLastCar[playerid] = vehicleid;
		//fábrica
		if (EsVehFabrica(vehicleid))
		{
			new id = EsVehFabrica(vehicleid);
			if (InfoPlayer[playerid][pNegocio1] == id || InfoPlayer[playerid][pNegocio2] == id || InfoPlayer[playerid][pContrato] == id)
			{
				format(string, sizeof string, "Tienes las llaves de la {FFFFFF}%s{00BF00}.", GetVehicleName(vehicleid));
				SendClientMessage(playerid, 0x00BF00FF, string);
			}
			else
			{
				format(string, sizeof string, "Esta {FFFFFF}%s{00BF00} es de una fábrica, ten cuidado.", GetVehicleName(vehicleid));
				SendClientMessage(playerid, 0x00BF00FF, string);
			}
		}
		//usuarios
		Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid && InfoVehiculo[id][vTipo] == 0 && InfoVehiculo[id][vNegocio] == 0)
		{
			if (llaves_vehiculo(playerid, vehicleid) != -1)
			{
				format(string, sizeof string, "Eres el dueño de este {FFFFFF}%s{00BF00}.", GetVehicleName(vehicleid));
				SendClientMessage(playerid, 0x00BF00FF, string);
				if (InfoVehiculo[id][vMulta] != 0)
				{
					format(string, sizeof string, "[ATENCIÓN]:{FFFFFF} La policía dejó una multa de $%s en tu vehículo. Debes pagar el mismo en {5ABAFF}DGT{FFFFFF}.", diner_coma(InfoVehiculo[id][vMulta]));
					SendClientMessage(playerid, COLOR_RED, string);
				}
				return 1;
			}
			if (InfoVehiculo[id][vLlavePrestada] == playerid)
			{
				format(string, sizeof string, "Tienes las llaves de este {FFFFFF}%s{00BF00} ({FFFFFF}dueño %s{00BF00}).", GetVehicleName(vehicleid), InfoVehiculo[id][vPropietario]);
				SendClientMessage(playerid, 0x00BF00FF, string);
				return 1;
			}
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			format(string, sizeof string, "[Advertencia]:{FFFFFF} Este %s es de %s.", GetVehicleName(vehicleid), InfoVehiculo[id][vPropietario]);
			SendClientMessage(playerid, 0xFFBF00FF, string);
			if ((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)) SendClientMessage(playerid, COLOR_GREY, "El motor está apagado, puedes usar ganzúas para encenderlo. (/puente)");
			return 1;
		}
	}
	return 1;
}

EsVehFabrica(vehicleid)
{
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nVehiculo][0] == vehicleid)
	{
		return id;
	}
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nVehiculo][1] == vehicleid)
	{
		return id;
	}
	return 0;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	hide_velocimetro(playerid);
	if (GetPlayerState(playerid) == 1) return 1;
	if (Seatbelt[playerid] == 1)
	{
		if (IsABike(vehicleid)) cmd_me(playerid, "pone las manos en su casco, y se lo quita");
		else cmd_me(playerid, "pone las manos en su cinturón, y se lo quita");
		Seatbelt[playerid] = 0;
	}
	return 1;
}

Show_cuenta(playerid, playerid2)
{
	if (!IsPlayerConnected(playerid) && !IsPlayerConnected(playerid2)) return 1;
	new hide_acoount[3500], gformat[320], gindice[128];
	//tabla inicial
	strcat(hide_acoount, "Tipo\tEstadística\n");
	//estadísticas
	//id
	format(gformat, sizeof gformat, "{3A7EE4}ID DB\t{FFFFFF}%d\n", InfoPlayer[playerid2][pID]);
	strcat(hide_acoount, gformat);
	//nombre
	format(gformat, sizeof gformat, "{3A7EE4}Nombre\t{FFFFFF}%s\n", InfoPlayer[playerid2][pNombre_Apellido]);
	strcat(hide_acoount, gformat);
	//edad
	format(gformat, sizeof gformat, "{3A7EE4}Edad\t{FFFFFF}%d\n", InfoPlayer[playerid2][pEdad]);
	strcat(hide_acoount, gformat);
	//sexo
	new mSexo[10];
	if (InfoPlayer[playerid2][pSexo] == 1) alm(mSexo, "Hombre");
	else alm(mSexo, "Mujer");
	format(gformat, sizeof gformat, "{3A7EE4}Sexo\t{FFFFFF}%s\n", mSexo);
	strcat(hide_acoount, gformat);
	//nivel
	format(gformat, sizeof gformat, "{3A7EE4}Nivel\t{FFFFFF}%d\n", InfoPlayer[playerid2][pNivel]);
	strcat(hide_acoount, gformat);
	//próximo nivel
	new nxtlevel = InfoPlayer[playerid2][pNivel]+1;
	new exp = InfoPlayer[playerid2][pExperiencia], expamount = nxtlevel*explevel;
	format(gformat, sizeof gformat, "{3A7EE4}Próximo nivel\t{FFFFFF}[%d/%d]\n", exp, expamount);
	strcat(hide_acoount, gformat);
	//horas conectado
	format(gformat, sizeof gformat, "{3A7EE4}Horas jugando\t{FFFFFF}%d\n", InfoPlayer[playerid2][pHorasOn]);
	strcat(hide_acoount, gformat);
	//dinero
	if (GetPlayerCash(playerid2) >= 0)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Dinero\t{00C600}$%s\n", diner_coma(GetPlayerCash(playerid2)));
		strcat(hide_acoount, gformat);
	}
	else
	{
		format(gformat, sizeof gformat, "{3A7EE4}Dinero\t{FD1717}$%s\n", diner_coma(GetPlayerCash(playerid2)));
		strcat(hide_acoount, gformat);
	}
	//banco
	if (InfoPlayer[playerid2][pBanco] >= 0)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Cuenta bancaria\t{00C600}$%s\n", diner_coma(InfoPlayer[playerid2][pBanco]));
		strcat(hide_acoount, gformat);
	}
	else
	{
		format(gformat, sizeof gformat, "{3A7EE4}Cuenta bancaria\t{FD1717}$%s\n", diner_coma(InfoPlayer[playerid2][pBanco]));
		strcat(hide_acoount, gformat);
	}
	//teléfono
	if (InfoPlayer[playerid2][pTelefono] != 0)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Número de teléfono\t{FFFFFF}%d\n", InfoPlayer[playerid2][pTelefono]);
		strcat(hide_acoount, gformat);
	}
	else strcat(hide_acoount, "{3A7EE4}Número de teléfono\t{FD1717}No tienes\n");
	//facción
	if (InfoPlayer[playerid2][pMiembro] != 0)
	{
		new id = InfoPlayer[playerid2][pMiembro];
		//facción logo
		format(gformat, sizeof gformat, "{3A7EE4}Facción\t{FFBF00}%s\n", InfoFaccion[id][fLogo]);
		strcat(hide_acoount, gformat);
		//facción rango
		format(gformat, sizeof gformat, "{3A7EE4}Rango\t{FFBF00}%s {FFFFFF}(%d)\n", fac_rango[id][InfoPlayer[playerid2][pRango]-1], InfoPlayer[playerid2][pRango]);
		strcat(hide_acoount, gformat);
	}
	else strcat(hide_acoount, "{3A7EE4}Facción\t{FD1717}No tienes\n");
	//contrato
	if (InfoPlayer[playerid2][pContrato] != -1)
	{
	    new neg = InfoPlayer[playerid2][pContrato];
		format(gformat, sizeof gformat, "{3A7EE4}Empleo\t{F2F81D}%s (%d)\n", GetNameContrato(neg), neg);
		strcat(hide_acoount, gformat);
	}
	else strcat(hide_acoount, "{3A7EE4}Empleo\t{FD1717}No tienes\n");
	//vida
	format(gformat, sizeof gformat, "{3A7EE4}Vida\t{FFFFFF}%.1f\n", InfoPlayer[playerid2][pVida]);
	strcat(hide_acoount, gformat);
	//chaleco
	format(gformat, sizeof gformat, "{3A7EE4}Chaleco\t{FFFFFF}%.1f\n", InfoPlayer[playerid2][pChaleco]);
	strcat(hide_acoount, gformat);
	//interior
	format(gformat, sizeof gformat, "{3A7EE4}Interior\t{FFFFFF}%d\n", InfoPlayer[playerid2][pInterior]);
	strcat(hide_acoount, gformat);
	//virtualworld
	format(gformat, sizeof gformat, "{3A7EE4}Mundo\t{FFFFFF}%d\n", InfoPlayer[playerid2][pVirtualWorld]);
	strcat(hide_acoount, gformat);
	//skin
	format(gformat, sizeof gformat, "{3A7EE4}Skin\t{FFFFFF}%d\n", InfoPlayer[playerid2][pSkin]);
	strcat(hide_acoount, gformat);
	//casa 1
	if (InfoPlayer[playerid2][pCasa1] != -1)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Casa (1)\t{FFFFFF}%d\n", InfoPlayer[playerid2][pCasa1]);
		strcat(hide_acoount, gformat);
	}
	else strcat(hide_acoount, "{3A7EE4}Casa (1)\t{FD1717}No tienes\n");
	//casa 2
	if (InfoPlayer[playerid2][pCasa2] != -1)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Casa (2)\t{FFFFFF}%d\n", InfoPlayer[playerid2][pCasa2]);
		strcat(hide_acoount, gformat);
	}
	else strcat(hide_acoount, "{3A7EE4}Casa (2)\t{FD1717}No tienes\n");
	//negocio 1
	if (InfoPlayer[playerid2][pNegocio1] != -1)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Negocio (1)\t{FFFFFF}%d\n", InfoPlayer[playerid2][pNegocio1]);
		strcat(hide_acoount, gformat);
	}
	else strcat(hide_acoount, "{3A7EE4}Negocio (1)\t{FD1717}No tienes\n");
	//negocio 2
	if (InfoPlayer[playerid2][pNegocio2] != -1)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Negocio (2)\t{FFFFFF}%d\n", InfoPlayer[playerid2][pNegocio2]);
		strcat(hide_acoount, gformat);
	}
	else strcat(hide_acoount, "{3A7EE4}Negocio (2)\t{FD1717}No tienes\n");
	//garaje
	if (getPlayerGaragesID(playerid2) != 0)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Garaje\t{FFFFFF}%d\n", getPlayerGaragesID(playerid2));
		strcat(hide_acoount, gformat);
	}
	else strcat(hide_acoount, "{3A7EE4}Garaje\t{FD1717}No tienes\n");
	//arrestos ic
	format(gformat, sizeof gformat, "{3A7EE4}Arrestos IC\t{FFFFFF}%d\n", InfoPlayer[playerid2][pArrestos]);
	strcat(hide_acoount, gformat);
	//arrestos ooc
	format(gformat, sizeof gformat, "{3A7EE4}Arrestos OOC\t{FFFFFF}%d\n", InfoPlayer[playerid2][pJails]);
	strcat(hide_acoount, gformat);
	//tiempo sanción
	if (InfoPlayer[playerid2][pSancionado] != 0)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Tiempo sanción\t{FFFFFF}%d segundos\n", InfoPlayer[playerid2][pTiempoSancion]);
		strcat(hide_acoount, gformat);
	}
	//advertencias
	format(gformat, sizeof gformat, "{3A7EE4}Advertencias\t{FFFFFF}%d / {B00000}3\n", InfoPlayer[playerid2][pAdvertencia]);
	strcat(hide_acoount, gformat);
	//Nivel de rol
	new nROL[24];
	switch (InfoPlayer[playerid2][pNivelRolero])
	{
		case 1: nROL = "Básico";
		case 2: nROL = "Audaz";
		case 3: nROL = "Avanzado";
		case 4: nROL = "Experto";
		case 5: nROL = "Profesional";
		case 6: nROL = "Maestro";
		default: nROL = "Ninguno";
	}
	format(gformat, sizeof gformat, "{3A7EE4}Nivel de rol\t{C9CE06}%s {FFFFFF}(%d)\n", nROL, InfoPlayer[playerid2][pPuntosRol]);
	strcat(hide_acoount, gformat);
	//fecha de registro
	format(gformat, sizeof gformat, "{3A7EE4}Fecha registro\t{FFFFFF}%s\n", InfoPlayer[playerid2][pFechaRegistro]);
	strcat(hide_acoount, gformat);
	//vip
	if (InfoPlayer[playerid2][pVIP] != 0)
	{
		format(gformat, sizeof gformat, "{3A7EE4}VIP\t{C93CCE}%s {FFFFFF}(Día: %d | Mes: %d)\n", GetNameVIP(InfoPlayer[playerid2][pVIP]), InfoPlayer[playerid2][pDiaVIP], InfoPlayer[playerid2][pMesVIP]);
		strcat(hide_acoount, gformat);
	}
	//coins vip
	if (InfoPlayer[playerid2][pCoinsVIP] != 0)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Coins VIP\t{FFFFFF}%d\n", InfoPlayer[playerid2][pCoinsVIP]);
		strcat(hide_acoount, gformat);
	}
	//horas extras
	if (InfoPlayer[playerid2][pDobleExp] != 0)
	{
		format(gformat, sizeof gformat, "{3A7EE4}Horas (x2)\t{FFFFFF}%d\n", InfoPlayer[playerid2][pDobleExp]);
		strcat(hide_acoount, gformat);
	}
	//indice
	if (playerid2 != playerid) format(gindice, sizeof gindice, "{3A7EE4}Estadísticas de %s", InfoPlayer[playerid2][pNombre_Apellido]);
	else alm(gindice, "{3A7EE4}Estadísticas");
	//diálogo
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, gindice, hide_acoount, "Ok", "");
	return 1;
}

public OnGameModeExit()
{
    djson_GameModeExit();
    //***SISTEMA AFK***
    for(new i = 0; i < MAX_PLAYERS; i++)
   	{
  	 	KillTimer(Timer[i]);
  	 	TextDrawHideForAll(Text:Messageafk);
  	 	TextDrawDestroy(Text:Messageafk);
	}
    return 1;
}

LoadStuff()
{
	new arrCoords[8][64];
	new strFromFile2[128];
	new File: file = fopen("Archivos_INI/stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		FondosAnuncios = strval(arrCoords[2]);
		TaxValue = strval(arrCoords[3]);
		TaxAnuncios = strval(arrCoords[4]);
		if(Tax < 0) Tax = 0;
		if(TaxValue < 0) TaxValue = 0;
		if(FondosAnuncios < 0) FondosAnuncios = 0;
		if(TaxAnuncios < 0) TaxAnuncios = 0;
		Blood = strval(arrCoords[5]);
		Fuel = strval(arrCoords[6]);
		txtcost = strval(arrCoords[7]);
		fclose(file);
		print("Cargado de objetos correctamente.");
	}
	else
	{
	    printf("LoadStuff() has found an error and has to be closed");
	    printf("Error: No file \"stuff.ini\" found!");
	    GameModeExit();
	}
	return 1;
}

SaveStuff()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d", Jackpot,Tax,FondosAnuncios,TaxValue,TaxAnuncios,Blood,Fuel,txtcost);
	new File: file2 = fopen("Archivos_INI/stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

LoadServerStats()
{
	#define SERVER_STATS "Archivos_INI/serverstat.ini"

	if(!fexist(SERVER_STATS)) return 1;

	new	File: fileGformat = fopen("Archivos_INI/serverstat.ini", io_read), sz_FileStr[256];
    print("Server Stats cargado correctamente");
	fread(fileGformat, sz_FileStr);
	sscanf(sz_FileStr, "p<,>iiiiiiiiiii", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister, MaxPlayersConnected, MPDay, MPMonth, MPYear, MPHour, MPMinute, TotalUptime);
	return fclose(fileGformat);
}

SaveServerStats()
{
	new sz_FileStr[256], File: fileGformat = fopen(SERVER_STATS, io_write);
	format(sz_FileStr, sizeof(sz_FileStr), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,TotalUptime);
	fwrite(fileGformat, sz_FileStr);
	#undef SERVER_STATS
	return fclose(fileGformat);
}


saveUbicaciones(slot)
{
    new lfile[24];
	format(lfile, 24, UBICACIONES, slot);
	if (!fexist(lfile)) fcreate(lfile); // If not existing
	new INI:File = INI_Open(lfile);
	INI_SetTag(File,"UbicacionesData");
	INI_WriteString(File,"Ubicacion", InfoGPS[slot][uNombre]);
	INI_WriteFloat(File,"ExteriorX", InfoGPS[slot][uPosicion][0]);
	INI_WriteFloat(File,"ExteriorY", InfoGPS[slot][uPosicion][1]);
	INI_WriteFloat(File,"ExteriorZ", InfoGPS[slot][uPosicion][2]);
	INI_Close(File);
	return 1;
}
loadGPS()
{
    new lfile[24];
	for(new iIndex = 0; iIndex < sizeof(InfoGPS); iIndex++)
	{
		format(lfile, 24, UBICACIONES, iIndex);
		INI_ParseFile(lfile, "loadgps_data", .bExtra = true, .extra = iIndex );
	}
	print("[script] Lista de ubicaciones cargada correctamente");
	return 1;
}

funcion loadgps_data(id, name[], value[])
{
    INI_String("Ubicacion", InfoGPS[id][uNombre],30);
    INI_Float("ExteriorX", InfoGPS[id][uPosicion][0]);
    INI_Float("ExteriorY", InfoGPS[id][uPosicion][1]);
    INI_Float("ExteriorZ", InfoGPS[id][uPosicion][2]);
	return 1;
}

// Garajes.
saveGarages(iIndex)
{
    new gfile[64];
	format(gfile, 64, GARAGES_FILE, iIndex);
	if (!fexist(gfile)) fcreate(gfile); // If not existing
	new INI:File = INI_Open(gfile);
	INI_SetTag(File,"GarageData");
	INI_WriteInt(File,"Tipo", InfoGarages[iIndex][gType]);
	INI_WriteString(File,"Nombre", InfoGarages[iIndex][gName]);
	INI_WriteString(File,"Dueño", InfoGarages[iIndex][gOwner]);
	INI_WriteFloat(File,"ExteriorX", InfoGarages[iIndex][gExteriorPos][0]);
	INI_WriteFloat(File,"ExteriorY", InfoGarages[iIndex][gExteriorPos][1]);
	INI_WriteFloat(File,"ExteriorZ", InfoGarages[iIndex][gExteriorPos][2]);
	INI_WriteFloat(File,"ExteriorAngulo", InfoGarages[iIndex][gExteriorPos][3]);
	INI_WriteFloat(File,"InteriorX", InfoGarages[iIndex][gInteriorPos][0]);
	INI_WriteFloat(File,"InteriorY", InfoGarages[iIndex][gInteriorPos][1]);
	INI_WriteFloat(File,"InteriorZ", InfoGarages[iIndex][gInteriorPos][2]);
	INI_WriteFloat(File,"InteriorAngulo", InfoGarages[iIndex][gInteriorPos][3]);
	INI_WriteInt(File,"Interior", InfoGarages[iIndex][gInterior]);
	INI_WriteInt(File,"Precio", InfoGarages[iIndex][gPrice]);
	INI_WriteInt(File,"Nivel", InfoGarages[iIndex][gLevel]);
	INI_WriteInt(File,"Locked", InfoGarages[iIndex][gLocked]);
	INI_Close(File);
	return 1;
}

loadGarages()
{
    new gfile[64];
    new strings[280];
	for(new iIndex = 0; iIndex < sizeof(InfoGarages); iIndex++)
	{
		format(gfile, 64, GARAGES_FILE, iIndex);
		INI_ParseFile(gfile, "loadgarages_data", .bExtra = true, .extra = iIndex );
		if (InfoGarages[iIndex][gExteriorPos][0] != 0.0) //fix 30-01-2020
		{
			switch(InfoGarages[iIndex][gLocked])
			{
				case 1:
				{ // Garages Icono
	       			if(!strcmp("Sin Dueño", InfoGarages[iIndex][gOwner])){format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
					iIndex, TipoGarage(iIndex), InfoGarages[iIndex][gPrice], InfoGarages[iIndex][gLevel]);}
					else{format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n\n{FF0000}[Garaje Cerrado]",
					iIndex, TipoGarage(iIndex), InfoGarages[iIndex][gName], InfoGarages[iIndex][gOwner]);}
				}
				case 0:{
				    if(!strcmp("Sin Dueño", InfoGarages[iIndex][gOwner])){format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
					iIndex, TipoGarage(iIndex), InfoGarages[iIndex][gPrice], InfoGarages[iIndex][gLevel]);}
					else{format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
					iIndex, TipoGarage(iIndex), InfoGarages[iIndex][gName], InfoGarages[iIndex][gOwner]);}
				}
			}
			InfoGarages[iIndex][gLabelID] = CreateDynamic3DTextLabel(strings, -1, InfoGarages[iIndex][gExteriorPos][0], InfoGarages[iIndex][gExteriorPos][1], InfoGarages[iIndex][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			InfoGarages[iIndex][gPickupID] = CreateDynamicPickup(19522, 23, InfoGarages[iIndex][gExteriorPos][0], InfoGarages[iIndex][gExteriorPos][1], InfoGarages[iIndex][gExteriorPos][2], 0, 0, -1, 250);
		}
	}
	print("[CRP] Garages cargados correctamente.");
	return 1;
}
funcion loadgarages_data(id, name[], value[])
{
    INI_Int("Tipo", InfoGarages[id][gType]);
    INI_String("Nombre", InfoGarages[id][gName],48);
    INI_String("Dueño", InfoGarages[id][gOwner],MAX_PLAYER_NAME);
    INI_Float("ExteriorX", InfoGarages[id][gExteriorPos][0]);
    INI_Float("ExteriorY", InfoGarages[id][gExteriorPos][1]);
    INI_Float("ExteriorZ", InfoGarages[id][gExteriorPos][2]);
    INI_Float("ExteriorAngulo", InfoGarages[id][gExteriorPos][3]);
    INI_Float("InteriorX", InfoGarages[id][gInteriorPos][0]);
    INI_Float("InteriorY", InfoGarages[id][gInteriorPos][1]);
    INI_Float("InteriorZ", InfoGarages[id][gInteriorPos][2]);
    INI_Float("InteriorAngulo", InfoGarages[id][gInteriorPos][3]);
    INI_Int("Interior", InfoGarages[id][gInterior]);
    INI_Int("Precio", InfoGarages[id][gPrice]);
    INI_Int("Nivel", InfoGarages[id][gLevel]);
    INI_Int("Locked", InfoGarages[id][gLocked]);
	return 1;
}

AntiDeAMX()
{
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

public OnGameModeInit()
{
	AntiDeAMX();

	DBcreative = mysql_connect(sql_host, sql_user, sql_password, sql_database);

	if (mysql_errno() != 0)
	{
    	print("No se pudo establecer la conexión a la base de datos.");
		SendRconCommand("exit");
    	return 1;
	}
	else
	{
    	print("Conexión MySQL con éxito.");
	}

	mysql_tquery(DBcreative, "SELECT * FROM `vehiculos` ORDER BY `ID` ASC", "CargarVehiculos");
	mysql_tquery(DBcreative, "SELECT * FROM `casas` ORDER BY `ID` ASC", "CargarCasas");
	mysql_tquery(DBcreative, "SELECT * FROM `negocios` ORDER BY `ID` ASC", "CargarNegocios");
	mysql_tquery(DBcreative, "SELECT * FROM `puertas` ORDER BY `ID` ASC", "CargarPuertas");
	mysql_tquery(DBcreative, "SELECT * FROM `facciones` ORDER BY `ID` ASC", "CargarFacciones");				// (15/02/2020)
	mysql_tquery(DBcreative, "SELECT * FROM `actores` ORDER BY `ID` ASC", "CargarActores");					// (02/03/2020)
	mysql_tquery(DBcreative, "SELECT * FROM `objetos_admin` ORDER BY `ID` ASC", "CargarObjetosAdmin");      // (06/03/2020)
	mysql_tquery(DBcreative, "SELECT * FROM `cajeros` ORDER BY `ID` ASC", "CargarCajeros");                 // (14/03/2020)
	mysql_tquery(DBcreative, "SELECT * FROM `graffitis` ORDER BY `ID` ASC", "CargarGraffitis");             // (20/04/2020)

	alm(AnunceString1, "none");
	alm(AnunceString2, "none");
	alm(AnunceString3, "none");
	alm(AnunceString4, "none");

	//configuración
	djson_GameModeInit();
    AllowInteriorWeapons(true);
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
    EnableStuntBonusForAll(false);
    DisableInteriorEnterExits();
    ManualVehicleEngineAndLights();
    SetNameTagDrawDistance(20.0);
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 2000);

	SendRconCommand("mapname Los Santos");
	SendRconCommand("language Español - Spanish");
	SendRconCommand("weburl www.cr-rp.com");
	SendRconCommand("gamemodetext Roleplay en Español");
	SendRconCommand("hostname [0.3.7] Creative Roleplay | www.cr-rp.com (v"#version_actual")");

	//****************Sistema AFK*****************
	Messageafk = TextDrawCreate(1.000000,435.000000,"  ");
   	TextDrawAlignment(Messageafk,0);
   	TextDrawBackgroundColor(Messageafk,0x000000ff);
   	TextDrawFont(Messageafk,2);
   	TextDrawLetterSize(Messageafk,0.598999,1.300000);
	TextDrawSetOutline(Messageafk,1);
   	TextDrawSetProportional(Messageafk,1);
   	TextDrawSetShadow(Messageafk,1);

	LoadStuff();
	LoadServerStats();
	loadGPS();
	loadGarages(); // Garajes.

	bars = LoadModelSelectionMenu("mSelection/bars.txt");

	ClearReports();

	mapeos_total();
	add_mapeos_edinson();

	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	GiftAllowed = 1;

	Loop(v, MAX_VEHICLES, 0) { veh_gasolina[v] = 200; }
	Loop(i, MAX_OBJETOS_S, 0) { InfoSuelo[i][DropLabel] = CreateDynamic3DTextLabel("dropid", -1, -1178.1569, 58.9069, 1.9609, 1.0, .worldid = 1+777, .interiorid = i); }

	// camello
	new ActorCamello[4];
	ActorCamello[0] = CreateDynamicActor(29, 2526.8215, -1641.3239, 13.9997, 336.4544, true, 100.0, 0, 0);
	ActorCamello[1] = CreateDynamicActor(28, 2474.8921, -1324.3365, 27.5433, 290.1262, true, 100.0, 0, 0);
	ActorCamello[2] = CreateDynamicActor(29, 1935.6304, -1060.5109, 24.4119, 216.1305, true, 100.0, 0, 0);
	ActorCamello[3] = CreateDynamicActor(28, 833.7507, -1528.7776, 13.6607, 162.5782, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(ActorCamello[0], "COP_AMBIENT", "Coplook_watch", 4.1, 0, 1, 1, 1, 1);
	ApplyDynamicActorAnimation(ActorCamello[1], "COP_AMBIENT", "Coplook_watch", 4.1, 0, 1, 1, 1, 1);
	ApplyDynamicActorAnimation(ActorCamello[2], "COP_AMBIENT", "Coplook_watch", 4.1, 0, 1, 1, 1, 1);
	ApplyDynamicActorAnimation(ActorCamello[3], "COP_AMBIENT", "Coplook_watch", 4.1, 0, 1, 1, 1, 1);
	CreateDynamic3DTextLabel("/camello", 0xE6DE48FF, 2526.8215, -1641.3239, 13.9997, 5.0);
	CreateDynamic3DTextLabel("/camello", 0xE6DE48FF, 2474.8921, -1324.3365, 27.5433, 5.0);
	CreateDynamic3DTextLabel("/camello", 0xE6DE48FF, 1935.6304, -1060.5109, 24.4119, 5.0);
	CreateDynamic3DTextLabel("/camello", 0xE6DE48FF, 833.7507, -1528.7776, 13.6607, 5.0);

	// Textdraw's by EdinsonWalker
	TD_Anuncio[0] = TextDrawCreate(533.288879, 405.249786, "");
	TextDrawLetterSize(TD_Anuncio[0], 0.177136, 0.859163);
	TextDrawAlignment(TD_Anuncio[0], 3);
	TextDrawColor(TD_Anuncio[0], -1);
	TextDrawSetShadow(TD_Anuncio[0], 0);
	TextDrawSetOutline(TD_Anuncio[0], 1);
	TextDrawBackgroundColor(TD_Anuncio[0], 255);
	TextDrawFont(TD_Anuncio[0], 1);
	TextDrawSetProportional(TD_Anuncio[0], 1);

	TD_Anuncio[1] = TextDrawCreate(533.288879, 392.999877, "");
	TextDrawLetterSize(TD_Anuncio[1], 0.177136, 0.859163);
	TextDrawAlignment(TD_Anuncio[1], 3);
	TextDrawColor(TD_Anuncio[1], -1);
	TextDrawSetShadow(TD_Anuncio[1], 0);
	TextDrawSetOutline(TD_Anuncio[1], 1);
	TextDrawBackgroundColor(TD_Anuncio[1], 255);
	TextDrawFont(TD_Anuncio[1], 1);
	TextDrawSetProportional(TD_Anuncio[1], 1);

	TD_Anuncio[2] = TextDrawCreate(533.288879, 380.166687, "");
	TextDrawLetterSize(TD_Anuncio[2], 0.177136, 0.859163);
	TextDrawAlignment(TD_Anuncio[2], 3);
	TextDrawColor(TD_Anuncio[2], -1);
	TextDrawSetShadow(TD_Anuncio[2], 0);
	TextDrawSetOutline(TD_Anuncio[2], 1);
	TextDrawBackgroundColor(TD_Anuncio[2], 255);
	TextDrawFont(TD_Anuncio[2], 1);
	TextDrawSetProportional(TD_Anuncio[2], 1);

	TD_Anuncio[3] = TextDrawCreate(533.288879, 367.916625, "");
	TextDrawLetterSize(TD_Anuncio[3], 0.177136, 0.859163);
	TextDrawAlignment(TD_Anuncio[3], 3);
	TextDrawColor(TD_Anuncio[3], -1);
	TextDrawSetShadow(TD_Anuncio[3], 0);
	TextDrawSetOutline(TD_Anuncio[3], 1);
	TextDrawBackgroundColor(TD_Anuncio[3], 255);
	TextDrawFont(TD_Anuncio[3], 1);
	TextDrawSetProportional(TD_Anuncio[3], 1);

	TD_Anuncio[4] = TextDrawCreate(533.288879, 356.249908, "");
	TextDrawLetterSize(TD_Anuncio[4], 0.177136, 0.859163);
	TextDrawAlignment(TD_Anuncio[4], 3);
	TextDrawColor(TD_Anuncio[4], -1);
	TextDrawSetShadow(TD_Anuncio[4], 0);
	TextDrawSetOutline(TD_Anuncio[4], 1);
	TextDrawBackgroundColor(TD_Anuncio[4], 255);
	TextDrawFont(TD_Anuncio[4], 1);
	TextDrawSetProportional(TD_Anuncio[4], 1);

	TDmariguana[0] = TextDrawCreate(-12.588244, -6.583353, "medio");
	TextDrawLetterSize(TDmariguana[0], 0.000000, 53.247062);
	TextDrawTextSize(TDmariguana[0], 646.000000, 0.000000);
	TextDrawAlignment(TDmariguana[0], 1);
	TextDrawColor(TDmariguana[0], -1);
	TextDrawUseBox(TDmariguana[0], 1);
	TextDrawBoxColor(TDmariguana[0], 106);
	TextDrawSetShadow(TDmariguana[0], 0);
	TextDrawBackgroundColor(TDmariguana[0], 255);
	TextDrawFont(TDmariguana[0], 1);
	TextDrawSetProportional(TDmariguana[0], 1);

	TDmariguana[1] = TextDrawCreate(-0.352934, 0.416626, "arriba");
	TextDrawLetterSize(TDmariguana[1], 0.000000, 13.200011);
	TextDrawTextSize(TDmariguana[1], 671.000000, 0.000000);
	TextDrawAlignment(TDmariguana[1], 1);
	TextDrawColor(TDmariguana[1], -1);
	TextDrawUseBox(TDmariguana[1], 1);
	TextDrawBoxColor(TDmariguana[1], 255);
	TextDrawSetShadow(TDmariguana[1], 0);
	TextDrawBackgroundColor(TDmariguana[1], 255);
	TextDrawFont(TDmariguana[1], 2);
	TextDrawSetProportional(TDmariguana[1], 1);

	TDmariguana[2] = TextDrawCreate(-8.352933, 327.666625, "abajo");
	TextDrawLetterSize(TDmariguana[2], 0.000000, 13.200011);
	TextDrawTextSize(TDmariguana[2], 660.000000, 0.000000);
	TextDrawAlignment(TDmariguana[2], 1);
	TextDrawColor(TDmariguana[2], -1);
	TextDrawUseBox(TDmariguana[2], 1);
	TextDrawBoxColor(TDmariguana[2], 255);
	TextDrawSetShadow(TDmariguana[2], 0);
	TextDrawBackgroundColor(TDmariguana[2], 255);
	TextDrawFont(TDmariguana[2], 2);
	TextDrawSetProportional(TDmariguana[2], 1);

	TDLogin[0] = TextDrawCreate(240.529586, 55.250041, "");
	TextDrawTextSize(TDLogin[0], 90.000000, 90.000000);
	TextDrawAlignment(TDLogin[0], 1);
	TextDrawColor(TDLogin[0], -4259585);
	TextDrawSetShadow(TDLogin[0], 0);
	TextDrawFont(TDLogin[0], 5);
	TextDrawSetProportional(TDLogin[0], 0);
	TextDrawSetPreviewModel(TDLogin[0], 560);
	TextDrawBackgroundColor(TDLogin[0], 0x00000000);
	TextDrawSetPreviewRot(TDLogin[0], -10.000000, 4.000000, -40.000000, 1.000000);
	TextDrawSetPreviewVehCol(TDLogin[0], 1, 1);

	TDLogin[1] = TextDrawCreate(348.294006, 37.750015, "");
	TextDrawTextSize(TDLogin[1], 90.000000, 90.000000);
	TextDrawAlignment(TDLogin[1], 1);
	TextDrawColor(TDLogin[1], -1);
	TextDrawSetShadow(TDLogin[1], 0);
	TextDrawFont(TDLogin[1], 5);
	TextDrawSetProportional(TDLogin[1], 0);
	TextDrawSetPreviewModel(TDLogin[1], 92);
	TextDrawBackgroundColor(TDLogin[1], 0x00000000);
	TextDrawSetPreviewRot(TDLogin[1], 0.000000, 0.000000, 35.000000, 1.000000);

	TDLogin[2] = TextDrawCreate(247.176803, 59.333370, "Creative");
	TextDrawLetterSize(TDLogin[2], 0.644706, 2.509997);
	TextDrawAlignment(TDLogin[2], 1);
	TextDrawColor(TDLogin[2], -4259585);
	TextDrawSetShadow(TDLogin[2], 0);
	TextDrawSetOutline(TDLogin[2], 1);
	TextDrawBackgroundColor(TDLogin[2], 255);
	TextDrawFont(TDLogin[2], 3);
	TextDrawSetProportional(TDLogin[2], 1);

	TDLogin[3] = TextDrawCreate(297.059082, 79.166656, "RolePlay");
	TextDrawLetterSize(TDLogin[3], 0.644706, 2.509997);
	TextDrawAlignment(TDLogin[3], 1);
	TextDrawColor(TDLogin[3], -1);
	TextDrawSetShadow(TDLogin[3], 0);
	TextDrawSetOutline(TDLogin[3], 1);
	TextDrawBackgroundColor(TDLogin[3], 255);
	TextDrawFont(TDLogin[3], 3);
	TextDrawSetProportional(TDLogin[3], 1);


	velocimetro_nice[0] = TextDrawCreate(538.470458, 358.073455, "box_principal");
	TextDrawLetterSize(velocimetro_nice[0], 0.000000, 4.964698);
	TextDrawTextSize(velocimetro_nice[0], 613.000000, 0.000000);
	TextDrawAlignment(velocimetro_nice[0], 1);
	TextDrawColor(velocimetro_nice[0], -1);
	TextDrawUseBox(velocimetro_nice[0], 1);
	TextDrawBoxColor(velocimetro_nice[0], 572662218);
	TextDrawSetShadow(velocimetro_nice[0], 0);
	TextDrawBackgroundColor(velocimetro_nice[0], 255);
	TextDrawFont(velocimetro_nice[0], 1);
	TextDrawSetProportional(velocimetro_nice[0], 1);

	velocimetro_nice[1] = TextDrawCreate(538.470458, 358.073455, "box_bici");
	TextDrawLetterSize(velocimetro_nice[1], 0.000000, 3.599988);
	TextDrawTextSize(velocimetro_nice[1], 613.000000, 0.000000);
	TextDrawAlignment(velocimetro_nice[1], 1);
	TextDrawColor(velocimetro_nice[1], -1);
	TextDrawUseBox(velocimetro_nice[1], 1);
	TextDrawBoxColor(velocimetro_nice[1], 572662218);
	TextDrawSetShadow(velocimetro_nice[1], 0);
	TextDrawBackgroundColor(velocimetro_nice[1], 255);
	TextDrawFont(velocimetro_nice[1], 1);
	TextDrawSetProportional(velocimetro_nice[1], 1);

	velocimetro_nice[2] = TextDrawCreate(580.823364, 366.271942, "km/h");
	TextDrawLetterSize(velocimetro_nice[2], 0.255939, 1.530820);
	TextDrawAlignment(velocimetro_nice[2], 1);
	TextDrawColor(velocimetro_nice[2], -1);
	TextDrawSetShadow(velocimetro_nice[2], 0);
	TextDrawSetOutline(velocimetro_nice[2], 1);
	TextDrawBackgroundColor(velocimetro_nice[2], 255);
	TextDrawFont(velocimetro_nice[2], 2);
	TextDrawSetProportional(velocimetro_nice[2], 1);

	TD_Load[0] = TextDrawCreate(-14.000000, -15.955551, "box");
	TextDrawLetterSize(TD_Load[0], 0.000000, 51.749965);
	TextDrawTextSize(TD_Load[0], 657.000000, 0.000000);
	TextDrawAlignment(TD_Load[0], 1);
	TextDrawColor(TD_Load[0], -1);
	TextDrawUseBox(TD_Load[0], 1);
	TextDrawBoxColor(TD_Load[0], 0x000000FF);
	TextDrawSetShadow(TD_Load[0], 0);
	TextDrawBackgroundColor(TD_Load[0], 255);
	TextDrawFont(TD_Load[0], 1);
	TextDrawSetProportional(TD_Load[0], 0);

	TD_Load[1] = TextDrawCreate(623.000000, 415.866729, "C_a_r_g_a_n_d_o_._._.");
	TextDrawLetterSize(TD_Load[1], 0.525499, 2.041777);
	TextDrawAlignment(TD_Load[1], 3);
	TextDrawColor(TD_Load[1], -1);
	TextDrawSetShadow(TD_Load[1], 0);
	TextDrawSetOutline(TD_Load[1], 1);
	TextDrawBackgroundColor(TD_Load[1], 255);
	TextDrawFont(TD_Load[1], 0);
	TextDrawSetProportional(TD_Load[1], 1);

	TD_Account[0] = TextDrawCreate(246.500000, 127.777786, "box");
	TextDrawLetterSize(TD_Account[0], 0.000000, 20.200004);
	TextDrawTextSize(TD_Account[0], 386.000000, 0.000000);
	TextDrawAlignment(TD_Account[0], 1);
	TextDrawColor(TD_Account[0], -1);
	TextDrawUseBox(TD_Account[0], 1);
	TextDrawBoxColor(TD_Account[0], 714);
	TextDrawSetShadow(TD_Account[0], 0);
	TextDrawBackgroundColor(TD_Account[0], 255);
	TextDrawFont(TD_Account[0], 1);
	TextDrawSetProportional(TD_Account[0], 1);

	TD_Account[1] = TextDrawCreate(317.000000, 274.000091, "Cargando_datos~n~de_tu_cuenta");
	TextDrawLetterSize(TD_Account[1], 0.400000, 1.600000);
	TextDrawAlignment(TD_Account[1], 2);
	TextDrawColor(TD_Account[1], COLOR_GENERAL);
	TextDrawSetShadow(TD_Account[1], 0);
	TextDrawSetOutline(TD_Account[1], 1);
	TextDrawBackgroundColor(TD_Account[1], 255);
	TextDrawFont(TD_Account[1], 3);
	TextDrawSetProportional(TD_Account[1], 1);

	TD_fechahora = TextDrawCreate(635.000000, 3.333309, "00:00_PM_-_00_de_diciembre_del_0000");
	TextDrawLetterSize(TD_fechahora, 0.185999, 1.456888);
	TextDrawAlignment(TD_fechahora, 3);
	TextDrawColor(TD_fechahora, -1);
	TextDrawSetShadow(TD_fechahora, 0);
	TextDrawSetOutline(TD_fechahora, 1);
	TextDrawBackgroundColor(TD_fechahora, 255);
	TextDrawFont(TD_fechahora, 2);
	TextDrawSetProportional(TD_fechahora, 1);

	txtAnimHelper =
	TextDrawCreate(610.0, 400.0, "Presione (ESPACIO) ~w~Para Detener La Animacion");
    TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0);
	TextDrawSetOutline(txtAnimHelper,1);
	TextDrawBackgroundColor(txtAnimHelper,255);
	TextDrawColor(txtAnimHelper,0x00C200FF);
	TextDrawAlignment(txtAnimHelper,3);

	// CocheVS
	CocheVS[0] = TextDrawCreate(213.000000, 73.000000, "box");
	TextDrawLetterSize(CocheVS[0], 0.000000, 28.962997);
	TextDrawTextSize(CocheVS[0], 423.000000, 0.000000);
	TextDrawAlignment(CocheVS[0], 1);
	TextDrawColor(CocheVS[0], -1);
	TextDrawUseBox(CocheVS[0], 1);
	TextDrawBoxColor(CocheVS[0], 209);
	TextDrawSetShadow(CocheVS[0], 0);
	TextDrawBackgroundColor(CocheVS[0], 135);
	TextDrawFont(CocheVS[0], 1);
	TextDrawSetProportional(CocheVS[0], 1);

	CocheVS[1] = TextDrawCreate(246.666748, 316.493621, "Regresar");
	TextDrawLetterSize(CocheVS[1], 0.319999, 1.409185);
	TextDrawTextSize(CocheVS[1], 20.400000, 49.000000);
	TextDrawAlignment(CocheVS[1], 2);
	TextDrawColor(CocheVS[1], -1);
	TextDrawUseBox(CocheVS[1], 1);
	TextDrawBoxColor(CocheVS[1], 336860415);
	TextDrawSetShadow(CocheVS[1], 0);
	TextDrawSetOutline(CocheVS[1], 1);
	TextDrawBackgroundColor(CocheVS[1], 255);
	TextDrawFont(CocheVS[1], 1);
	TextDrawSetProportional(CocheVS[1], 1);
	TextDrawSetSelectable(CocheVS[1], true);

	CocheVS[2] = TextDrawCreate(389.933349, 316.218139, "Comprar");
	TextDrawLetterSize(CocheVS[2], 0.319999, 1.409185);
	TextDrawTextSize(CocheVS[2], 20.000000, 49.000000);
	TextDrawAlignment(CocheVS[2], 2);
	TextDrawColor(CocheVS[2], -1);
	TextDrawUseBox(CocheVS[2], 1);
	TextDrawBoxColor(CocheVS[2], 336860415);
	TextDrawSetShadow(CocheVS[2], 0);
	TextDrawSetOutline(CocheVS[2], 1);
	TextDrawBackgroundColor(CocheVS[2], 255);
	TextDrawFont(CocheVS[2], 1);
	TextDrawSetProportional(CocheVS[2], 1);
	TextDrawSetSelectable(CocheVS[2], true);

	// mapicon's

	//puntos de referencia
	CreateDynamicMapIcon(1997.3848,-2330.7671,15.8119, 5, 0, 0, 0, -1, 500.0); // AERO
	CreateDynamicMapIcon(982.1611,-1161.3580,25.0972, 52, 0, 0, 0, -1, 500.0); // Banco de LS
	CreateDynamicMapIcon(1310.8230,-1360.2109,37.8764, 25, 0, 0, 0, -1, 500.0); // Casino LS
	CreateDynamicMapIcon(1294.7615,-988.5920,32.6953, 23, 0, 0, 0, -1, 500.0); // Mercado Donde se compra c4 LS

	// 3d label's
	CreateDynamic3DTextLabel("Para reparaciones y gasolina\nEscribe {FFBF00}/tallerpd{EBEBEB} aquí", 0xEBEBEBFF, 1549.3959, -1698.3270, 5.8906, 8.0, .worldid = 0, .interiorid = 0); // tallerpd
	CreateDynamicPickup(1366, 1, 1549.3959, -1698.3270, 5.8906, 0, 0); // tallerpd

	// facción lspd
	CreateDynamic3DTextLabel("Vestuario - Equipamiento", 0xE6DE48FF, 1563.139038,-1660.670166,4990.585937, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1); // VW y Interior.
	CreateDynamic3DTextLabel("Sala de Camáras", 0xE6DE48FF, 1570.088134,-1643.076782,4990.585937, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Habitación Sur", 0xE6DE48FF, 1570.116943,-1648.917724,4990.585937, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Habitación Norte", 0xE6DE48FF, 1570.086181,-1660.694946,4990.585937, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("- LSPD -\nAsuntos Internos", 0xE6DE48FF, 1562.799682,-1654.848266,4995.400024, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("- Oficina -\n Coronel LSPD", 0xE6DE48FF, 1570.060913,-1654.852294,4995.400024, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("- Oficina -\n Sub-Cronel LSPD", 0xE6DE48FF, 1570.115234,-1643.015380,4995.400024, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Sala de reuniones", 0xE6DE48FF, 1569.175537,-1697.985839,4990.585937, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Recursos Humanos", 0xE6DE48FF, 1568.017700,-1709.321289,4995.420043, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Escuela de Cadetes", 0xE6DE48FF, 1565.713256,-1700.902709,4995.400024, 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Ascensor Sector Norte\n{FFFFFF}Presiona [F]", COLOR_WHITE, 1554.664062,-1709.667602,4995.55, 3.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Ascensor Sector Norte\n{FFFFFF}Presiona [F]", COLOR_WHITE, 1554.664062,-1709.667602,4990.760253, 3.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Ascensor Sector Norte\n{FFFFFF}Presiona [F]", COLOR_WHITE, 1525.365966,-1677.872680,5.890625, 3.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0);
	CreateDynamic3DTextLabel("Ascensor Sector Sur\n{FFFFFF}Presiona [F]", COLOR_WHITE, 1555.022094,-1648.046508,4995.55, 3.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Ascensor Sector Sur\n{FFFFFF}Presiona [F]", COLOR_WHITE, 1555.022094,-1648.046508,4990.700195, 3.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Ascensor Sector Sur\n{FFFFFF}Presiona [F]", COLOR_WHITE, 1555.0,-1648.085815,4985.34, 3.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);
	CreateDynamic3DTextLabel("Acreditación para entrar en prisión\n[CMD] /autorizar [ID] - /arrestar [ID]", 0x13D269FF, 1559.655151,-1649.434326,4990.585937, 4.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,1);

	//vip
	CreateDynamic3DTextLabel("Para abrir el Locker.\n{FFFFFF}Usa /viplocker",                                               	 COLOR_WHITE,798.4911,-1416.1251,1016.4688+0.6,4.0);/// VIP locker room
	CreateDynamic3DTextLabel("/regalo\n{FFFFFF}para ver el interior.",                                                           COLOR_WHITE,798.0074,-1419.0095,1016.4688+0.8,8.0);/// VIP Lounge

	//mercado negro
	CreateDynamic3DTextLabel("Mercado negro\nUtiliza: {FFBF00}/mccomprar",			0xEBEBEBFF, 1296.2917,-989.3190,32.6953,8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0);

	//faccs
	CreateDynamic3DTextLabel("Control de Celdas\n{FFFFFF}Presiona [F]",  														 COLOR_YELLOW, 303.62,-1622.30,87.5,8.0);// NUEVO FBI. (Presione "F")
	CreateDynamic3DTextLabel("[!] {ffffff}''/creararma''",                          						        	 COLOR_GENERAL, 1403.3466,169.7050,1002.5013,8.0);
	CreateDynamic3DTextLabel("[!] {ffffff}''/aprender''",                                							     COLOR_GENERAL, 1401.1886,174.4594,1002.5007,8.0);
	CreateDynamic3DTextLabel("Escribe /ap - /cp\n{FFFFFF}Celda N1",                                                  			 COLOR_YELLOW,1452.379394,-1506.422851,1604.029,3.0);// ap judicial 1
	CreateDynamic3DTextLabel("Escribe /ap - /cp\n{FFFFFF}Celda N2",                                                  			 COLOR_YELLOW,1443.875610,-1524.978759,1604.029,3.0);// ap judicial 2
	CreateDynamic3DTextLabel("Control de Celdas\n{FFFFFF}Presiona [F]",                                                  		 COLOR_YELLOW,1425.134399,-1481.341186,1617.292480,2.5);// ap judicial 3

	//Comandos
	CreateDynamic3DTextLabel("Depósito\n/embargar", 							                                                 COLOR_WHITE, 1636.041259,-1811.950317,13.524469+0.6, 10.0);
	CreateDynamic3DTextLabel("Multas\n{FFFFFF}Usa /pagarm", 					                  								 COLOR_WHITE, 240.4770,112.7777,1003.2188+0.6, 8.0); // Pagar Multas MAP LSPD.
	CreateDynamic3DTextLabel("Multas\n{FFFFFF}Usa /pagarm", 					                  								 COLOR_WHITE, 358.2679,182.0734,1008.3828, 8.0); // Pagar Multas DGT.
	CreateDynamic3DTextLabel("Deseas vender tú coche\n{FFFFFF}Usa /vendercoche.",                                                COLOR_WHITE, 358.2679,186.2302,1008.3828, 8.0); // /vendercoche.
	CreateDynamic3DTextLabel("Sitio de arresto LSPD\n{FFFFFF}Usa /arrestar.",                                                    COLOR_WHITE,1559.3228,-1693.7491,5.8970+0.6,4.0);// Arresto LSPD
	CreateDynamic3DTextLabel("Sitio de arresto FBI\n{FFFFFF}Usa /arrestar.",                                                     COLOR_WHITE,299.9566,-1529.9164,24.9219,8.0); // Arresto FBI.
	CreateDynamic3DTextLabel("Sitio de arresto SASD\n{FFFFFF}Usa /arrestar.",											 COLOR_WHITE,613.3228,-589.1623,17.2266+0.6,4.0);///arrest(LSPD)

	CreateDynamic3DTextLabel("Presiona\n{FFFFFF}F Para entrar.",                                                                 COLOR_YELLOW,1564.8464,-1666.1444,28.3956+0.6,4.0); //LSPD Roof enter
	CreateDynamic3DTextLabel("Para aprender algún estilo de pelea\n{FFFFFF}Usa /apelear",                                        COLOR_WHITE, 767.6719,13.6320,1000.7010,8.0); //GYM LS
	CreateDynamic3DTextLabel("Para aprender algún estilo de pelea\n{FFFFFF}Usa /apelear",                                        COLOR_WHITE, 769.00,-47.39,1000.59,8.0); // GYM SF
	CreateDynamic3DTextLabel("GYM Ganton Garage\n{FFFFFF}Usa /entrar",                                                           COLOR_YELLOW,2281.1748,-1724.4528,13.2521+0.6,8.0);
	CreateDynamic3DTextLabel("Sube a una bicicleta\npara {FFFFFF}rentarla",		                                                 0x9ACD32AA,1727.5811,-1865.1080,13.5730+0.5,6.0); //Renk Bike
	CreateDynamic3DTextLabel("Para adquirir licencias\n{FFFFFF}Usa /comprarlicencia", 			                     			 COLOR_WHITE, 1407.6,-1921.669311,1227.8+0.6, 7.5); // /comprarlicencias UNI
	CreateDynamic3DTextLabel("Solicitud de licencias\n{FFFFFF}/comprarlicencia", 			                     			 	 COLOR_WHITE, 1564.0000, -1676.8358, 4989.5386+0.6, 2.5); // /comprarlicencias LSPD

	//gasolineras
	CreateDynamic3DTextLabel("Punto de Gasolina\nUtiliza {00C200}/llenar\n{FFFFFF}Uso exclusivo para vehículos embargados",       COLOR_WHITE,1628.361938,-1808.970458,13.521308+0.6,4.0); // Depósito. (/llenar)
	CreateDynamic3DTextLabel("Punto de Gasolina\nUtiliza {00C200}/llenar\n{FFFFFF}Uso exclusivo para helicópteros",         COLOR_WHITE,1880.558105,-2304.451660,14.119070+0.6,4.0); // Aeropuerto. (/llenar)

	//otros
	CreateDynamic3DTextLabel("Banco Central de Los Santos\nUtiliza {FFBF00}/banco",	0xEBEBEBFF, 985.7003, -1171.2474, 24.9037, 8.0);
	CreateDynamicPickup(1239, 1, 985.7003, -1171.2474, 24.9037);

	//prisión
	fen1 = CreateDynamicObject(969,1417.90002441,-1554.90002441,4334.70019531,0.00000000,269.74975586,358.50000000); //object(electricgate) (1)
	fen2 = CreateDynamicObject(969,1425.90002441,-1555.00000000,4334.70019531,0.00000000,269.74743652,359.49755859); //object(electricgate) (2)
	fen3 = CreateDynamicObject(969,1429.50000000,-1554.80004883,4334.70019531,0.00000000,269.74731445,359.49462891); //object(electricgate) (3)
	fen4 = CreateDynamicObject(969,1422.19995117,-1567.00000000,4334.60009766,0.00000000,269.74743652,179.99456787); //object(electricgate) (4)
	fen5 = CreateDynamicObject(969,1414.80004883,-1566.69995117,4334.60009766,0.00000000,269.74182129,179.99450684); //object(electricgate) (5)
	fen6 = CreateDynamicObject(969,1430.19995117,-1566.69995117,4334.70019531,0.00000000,269.74182129,179.99450684); //object(electricgate) (6)
	JDoor1 = CreateButton(1418.19995117,-1555.09997559,4340.79980469, 0.0);
	JDoor2 = CreateButton(1426.00000000,-1555.09997559,4340.79980469, 0.0);
	JDoor3 = CreateButton(1429.80004883,-1554.90002441,4340.79980469, 0.0);
	JDoor4 = CreateButton(1425.80004883,-1566.50000000,4340.79980469, 180);
	JDoor5 = CreateButton(1433.80004883,-1566.40002441,4340.79980469, 180);
	JDoor6 = CreateButton(1418.09997559,-1566.40002441,4340.79980469, 180);

	//prisión qsyo judicial
	PJBT = CreateButton(1440.47095, -1469.90955, 1616.74414, 180);
	PJDOOR = CreateDynamicObject(1495, 1440.71216, -1469.97485, 1615.26636,   0.00000, 0.00000, 0.00000);
	PJBT2 = CreateButton(1422.5317, -1469.8695, 1617.8890, 180);
	PJDOOR2 = CreateDynamicObject(1495, 1422.93811, -1469.96814, 1616.24707,   0.00000, 0.00000, 0.00000);
	PJBT3 = CreateButton(1425.13538, -1481.79163, 1617.80505, 180.0);
	// (Prisión Judicial).
	PJCELDA = CreateDynamicObject(19303, 1436.45630, -1479.50000, 1617.51892,   0.00000, 0.00000, 0.00000);
	PJCELDA2 = CreateDynamicObject(19303, 1432.98425, -1479.50000, 1617.51892,   0.00000, 0.00000, 0.00000);
	PJCELDA3 = CreateDynamicObject(5856, 1451.96338, -1507.66687, 1605.03467,   0.00000, 0.00000, 90.00000);
	PJCELDA4 = CreateDynamicObject(5856, 1444.35950, -1523.42847, 1605.03467,   0.00000, 0.00000, 90.00000);

	//SAEM
	saem1 = CreateDynamicObject(980, 2457.80, -2254.76, 26.90,   0.00, 0.00, 45.17); // Cerrada
	saem2 = CreateDynamicObject(980, 2338.10571, -2353.88281, 15.2,   0.0, 0.0, 44.0); // Cerrada
	saem3 = CreateDynamicObject(980, 2273.59570, -2663.29053, 15.2,   0.0, 0.0, 90.0); // Cerrada
	saemSF = CreateDynamicObject(980, -1529.04, 482.44, 9.06,   0.00, 0.00, 0.00);// puerta sf
	saemLV = CreateDynamicObject(980, 135.24150, 1941.01294, 20.59000,   0.00000, 0.00000, 0.00000); // LV cerrada.
	saemLV2 = CreateDynamicObject(980, 348.98410, 1801.11804, 20.27390,   0.00000, 358.25000, 41.75000); // LV cerrada.

	//SASD
	ObjSD_derecha = CreateDynamicObject(1536, 253.22101, 108.32223, 1002.21582,   0.00000, 0.00000, 90.00000);
	sd_derecha1 = CreateButton(253.44921875,110.59960938,1003.79998779,90.00000000);
	sd_derecha2 = CreateButton(253.00000000,110.59960938,1003.79998779,270.00000000);

	ObjSD_izquierda = CreateDynamicObject(1536, 239.62317, 116.85412, 1002.21582,   0.00000, 0.00000, 90.00000);
	sd_izquierda1 = CreateButton(239.79492188,116.18457031,1003.87286377,90.00000000);
	sd_izquierda2 = CreateButton(239.32031250,116.27441406,1003.87286377,270.00000000);

	//LSPD
	depositoembargo = CreateDynamicObject(980, 1620.6500244,-1861.5996094,15.3000002,0.0000000,0.0000000,179.9945068); //object(airportgate) (3)
	porton_lspd = CreateDynamicObject(980, 1546.19897, -1627.59656, 15.28090, 0.00000, 0.00000, 90.00000);

	//peajes
	peaje1 = CreateDynamicObject(976, 35.25729, -1516.96399, 4.24860,   0.00000, 0.00000, 270.00000);
	peaje2 = CreateDynamicObject(976, 67.85014, -1545.88879, 4.02450,   0.00000, 0.00000, 89.10002);

	//comandos
	CreateDynamicPickup(1239, 1, 240.4770, 112.7777, 1003.2188); // Pagar Multas LS
	CreateDynamicPickup(1240, 1, 1636.041259, -1811.950317, 13.524469); // Embargar
	CreateDynamicPickup(1252, 1, 1628.361938, -1808.970458, 13.521308); // / Gasolinera única - Depósito.
	CreateDynamicPickup(1252, 1, 1880.558105, -2304.451660, 14.119070); // / Gasolinera única - Aeropuerto.
	CreateDynamicPickup(1247, 1, 1559.3228, -1693.7491, 5.8970); // Arresto LSPD
	CreateDynamicPickup(1247, 1, 299.9566, -1529.9164, 24.9219); // Arresto FBI
	CreateDynamicPickup(1247, 1, 613.3228, -589.1623, 17.2266); // Arresto SASD
	CreateDynamicPickup(1239, 1, 767.6719, 13.6320, 1000.7010); // GYM LS

	new tmphour, tmpminute, tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	SetWorldTime(tmphour);
	return 1;
}

EndEffectDroug(playerid, d_tipo)
{
	new si_no = 0;
	if (d_tipo == 1 || d_tipo == 2 || d_tipo == 3) si_no = 1; // cocaína, crack, metanfetamina
	else
	{
		Loop(x, 3, 0) { TextDrawHideForPlayer(playerid, TDmariguana[x]); }
	}
	SendClientMessage(playerid, 0x00B0C4FF, "Los efectos de la droga culminaron.");
	SetPlayerWeather(playerid, ClimaGeneral);
	InfoPlayer[playerid][pDrogaTipo] = 0;
	InfoPlayer[playerid][pDrogaTiempo] = 0;
	InfoPlayer[playerid][pDrogaPower] = 0;
	new query[512];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Droga_tipo = 0, Droga_tiempo = 0, Droga_power = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	if (si_no == 1)
	{
		if(InfoPlayer[playerid][pAdiccion][0] >= 10 || InfoPlayer[playerid][pAdiccion][1] >= 10 || InfoPlayer[playerid][pAdiccion][2] >= 10)
			random_abstinence[playerid] = SetTimerEx("RandomAbstinence", 60000*15, false, "i", playerid);
	}
}

funcion RandomAbstinence(playerid)
{
    // En un futuro, hacer que las probabilidades de obtener abstinencia sean mayores, mientras mayor sea el nivel de adicción
    new abstinence = random(11)+1;
    switch(abstinence)
    {
        case 1,5,6,10: random_abstinence[playerid] = SetTimerEx("RandomAbstinence", 60000*15, false, "i", playerid);
        case 2,9: abstinence_power[playerid] = 1, GiveAbstinence(playerid);
        case 3,8: abstinence_power[playerid] = 2, GiveAbstinence(playerid);
        case 4: abstinence_power[playerid] = 3, GiveAbstinence(playerid);
        case 7: abstinence_power[playerid] = 4, GiveAbstinence(playerid);
    }
    return 1;
}

funcion GiveAbstinence(playerid)
{
    if (InfoPlayer[playerid][pAbstinenceEffect] == 0)
    {
        switch (abstinence_power[playerid])
        {
            case 1: InfoPlayer[playerid][pAbstinenceTime] = 10;
            case 2: InfoPlayer[playerid][pAbstinenceTime] = 15;
            case 3: InfoPlayer[playerid][pAbstinenceTime] = 20;
            case 4: InfoPlayer[playerid][pAbstinenceTime] = 25;
        }
        InfoPlayer[playerid][pAbstinenceEffect] = 1;
    }
	new query[256];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET AbstinenceEffect = '%d', AbstinenceTime = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pAbstinenceEffect], InfoPlayer[playerid][pAbstinenceTime], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
    SendClientMessage(playerid, 0xFF6347AA, "Estás adicto a alguna droga y la abstinencia te consume.");
    SendClientMessage(playerid, 0x822828FF, "Puedes aguantar el efecto, consumir una droga a la que eres adicto.");
    return 1;
}

forward timer_minuto();
public timer_minuto()
{
	//resta de gasolina
	Loop(v, MAX_VEHICLES, 0) if (GetVehicleModel(v))
	{
		new modelid = GetVehicleModel(v);
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);
		switch (modelid)
		{
			case 520, 476, 593, 553, 513, 512, 577, 592, 511, 539, 464, 519: veh_gasolina[v] = 200;
			case 509, 481, 510: veh_gasolina[v] = 200, arr_Engine{v} = 1, SetVehicleParamsEx(v, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		}
		if (engine == VEHICLE_PARAMS_ON)
		{
			if (veh_gasolina[v] != 0)
			{
				veh_gasolina[v]--;
				if (veh_gasolina[v] == 0) SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
			}
			if (arr_Engine{v} == 0) SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		}
	}
	//
	Loop(id, totalvehiculos, 1)
	{
		//sistema renta
		if (InfoVehiculo[id][vRentaTiempo] != 0)
		{
		    new vehicleid = InfoVehiculo[id][vIG_id];
			if (InfoVehiculo[id][vRentaTiempo] > 0) InfoVehiculo[id][vRentaTiempo]--;
			if (InfoVehiculo[id][vRentaTiempo] == 3)
			{
				foreach(new p: Player) if (IsPlayerInVehicle(p, vehicleid))
				{
					SendClientMessage(p, COLOR_YELLOW, "Le quedan sólo tres minutos de renta a este vehículo.");
				}
			}
			if (InfoVehiculo[id][vRentaTiempo] == 0)
			{
				foreach(new p: Player) if (IsPlayerInVehicle(p, vehicleid))
				{
					StopAudioStreamForPlayer(p);
					SendClientMessage(p, COLOR_GENERAL, "El vehículo en el que estabas fue respawneado, su tiempo de renta termino.");
				}
				InfoVehiculo[id][vRentaTiempo] = 0;
				alm(InfoVehiculo[id][vRentaDueno], "none");
				SetVehicleToRespawn(vehicleid);
			}
		}
	}
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] == 12)
	{
		if (InfoNegocio[id][nTimeNecesitaQuimicos] != 0)
		{
			InfoNegocio[id][nTimeNecesitaQuimicos]--;
			guardar_int_mysql("negocios", "TimeNecesitaQuimicos", InfoNegocio[id][nID_sql], InfoNegocio[id][nTimeNecesitaQuimicos]);
			if (InfoNegocio[id][nTimeNecesitaQuimicos] == 0) InfoNegocio[id][nRecorridosQuimicos] = 0;
		}
		Loop(x, 5, 0) if (InfoNegocio[id][nTimeCocinando][x] != 0)
		{
			InfoNegocio[id][nTimeCocinando][x]--;
			new gfolmat[64];
			format(gfolmat, sizeof gfolmat, "TimeCocinando%d", x+1);
			guardar_int_mysql("negocios", gfolmat, InfoNegocio[id][nID_sql], InfoNegocio[id][nTimeCocinando][x]);
			UpdateMesasProduccion(id);
		}
	}
    new hour,minuite,second;
    if(PayDayLeft >= 1)
	{
	    PayDayLeft--;
	}
	else
	{
        PayDayLeft = 60;
	}
	if(PayDaySecond >= 1)
	{
	    PayDaySecond--;
	}
	else
	{
        PayDaySecond = 120;
	}
	gettime(hour, minuite, second);
	FixHour(hour);
	hour = shifthour;
	if (PayDayLeft == 0) PayDay();
	if (PayDaySecond == 0) PayDay2();
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		if (InfoPlayer[playerid][pTimerAnuncios] != 0)
		{
			InfoPlayer[playerid][pTimerAnuncios]--;
			guardar_int_mysql("cuentas", "TimerAnuncios", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTimerAnuncios]);
		}
		if (InfoPlayer[playerid][pTogCajero] != 0)
		{
			InfoPlayer[playerid][pTogCajero]--;
			guardar_int_mysql("cuentas", "TogCajero", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogCajero]);
		}
		SubirRol(playerid);
		if (InfoPlayer[playerid][pRestriccionRobo] != 0)
		{
			InfoPlayer[playerid][pRestriccionRobo]--;
			guardar_int_mysql("cuentas", "RestriccionRobo", InfoPlayer[playerid][pID], InfoPlayer[playerid][pRestriccionRobo]);
		}
		// drogas
		if (InfoPlayer[playerid][pAbstinenceEffect] == 1)
		{
			SetPlayerDrunkLevel(playerid, 5000);
			if (InfoPlayer[playerid][pAbstinenceTime] > 0) InfoPlayer[playerid][pAbstinenceTime]--;
			else
			{
				InfoPlayer[playerid][pAbstinenceEffect] = 0;
				InfoPlayer[playerid][pAbstinenceTime] = 0;
				if (InfoPlayer[playerid][pAdiccion][0] >= 2) InfoPlayer[playerid][pAdiccion][0] -= 2;
				if (InfoPlayer[playerid][pAdiccion][1] >= 2) InfoPlayer[playerid][pAdiccion][1] -= 2;
				if (InfoPlayer[playerid][pAdiccion][2] >= 2) InfoPlayer[playerid][pAdiccion][2] -= 2;
				SendClientMessage(playerid, 0x9ACD32AA, "Lograste aguantar el efecto de la abstinencia, bajaste un poco la adicción.");
				if (InfoPlayer[playerid][pDrogaTipo] != 0) random_abstinence[playerid] = SetTimerEx("RandomAbstinence", 60000*15, false, "i", playerid);
				new	query[1000];
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Adiccion_1 = '%d', Adiccion_2 = '%d', Adiccion_3 = '%d', AbstinenceEffect = 0, AbstinenceTime = 0 WHERE ID = '%d'",
				InfoPlayer[playerid][pAdiccion][0], InfoPlayer[playerid][pAdiccion][1], InfoPlayer[playerid][pAdiccion][2], InfoPlayer[playerid][pID]);
				mysql_tquery(DBcreative, query);
			}
		}
		if (InfoPlayer[playerid][pDrogaTipo] != 0)
		{
			if (InfoPlayer[playerid][pDrogaTiempo] == 0) EndEffectDroug(playerid, InfoPlayer[playerid][pDrogaTipo]);
			if (InfoPlayer[playerid][pDrogaTiempo] > 0) InfoPlayer[playerid][pDrogaTiempo]--;
			guardar_int_mysql("cuentas", "Droga_tiempo", InfoPlayer[playerid][pID], InfoPlayer[playerid][pDrogaTiempo]);
		}
	}
}

stock GetClosestPlayer(p1){
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(Player, x){
		if(x != p1){
			dis2 = GetDistanceBetweenPlayers(x,p1);
			if(dis2 < dis && dis2 != -1.00){
				dis = dis2;
				player = x;
			}
		}
	}
	return player;
}
funcion SubirNivel(playerid)
{
	if (InfoPlayer[playerid][pNivel] != 0)
	{
		if (InfoPlayer[playerid][pExperiencia] >= ((4 * InfoPlayer[playerid][pNivel]) + (4)))
		{
			new string[256];
			new nxtlevel = InfoPlayer[playerid][pNivel]+1;
			new expamount = nxtlevel*explevel;
			format(string, sizeof string, "[AVISO]: Subiste de nivel automáticamente, ahora eres nivel %d.", nxtlevel);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof string, "~g~~h~Nivel %d!", InfoPlayer[playerid][pNivel] + 1);
			GameTextForPlayer(playerid, string, 8000, 1);
			PlayerPlaySound(playerid, 10214, 0.0, 0.0, 0.0);
			InfoPlayer[playerid][pNivel]++;
			SetPlayerScore(playerid, InfoPlayer[playerid][pNivel]);
			InfoPlayer[playerid][pExperiencia] = InfoPlayer[playerid][pExperiencia]-expamount;
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Nivel = '%d', Experiencia = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pNivel], InfoPlayer[playerid][pExperiencia], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, string);
		}
	}
	return 1;
}
funcion SubirRol(playerid)
{
	if(InfoPlayer[playerid][pPuntosRol] >=1 && InfoPlayer[playerid][pPuntosRol] <=10)
	{
		InfoPlayer[playerid][pNivelRolero] = 1; // Básico.
	}
	else if(InfoPlayer[playerid][pPuntosRol] > 10 && InfoPlayer[playerid][pPuntosRol] <=20)
	{
		InfoPlayer[playerid][pNivelRolero] = 2; // Audaz.
	}
	else if(InfoPlayer[playerid][pPuntosRol] > 21 && InfoPlayer[playerid][pPuntosRol] <=30)
	{
		InfoPlayer[playerid][pNivelRolero] = 3; // Avanzado.
	}
	else if(InfoPlayer[playerid][pPuntosRol] > 31 && InfoPlayer[playerid][pPuntosRol] <=40)
	{
		InfoPlayer[playerid][pNivelRolero] = 4; // Experto.
	}
	else if(InfoPlayer[playerid][pPuntosRol] > 41 && InfoPlayer[playerid][pPuntosRol] <=50)
	{
		InfoPlayer[playerid][pNivelRolero] = 5; // Profesional.
	}
	else if(InfoPlayer[playerid][pPuntosRol] > 50)
	{
		InfoPlayer[playerid][pNivelRolero] = 6; // Maestro.
	}
 	else {InfoPlayer[playerid][pNivelRolero] = 0;}
 	guardar_int_mysql("cuentas", "NivelRolero", InfoPlayer[playerid][pID], InfoPlayer[playerid][pNivelRolero]);
}

funcion PayDay()
{
	PayDayLeft = 60;
	TotalUptime += 1;
	GiftAllowed = 1;
	SaveStuff();
	SaveServerStats();
	PaydayOn = 1;
	SetTimer("PayDayOOF", 180000, false);
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		InfoPlayer[playerid][YaCobre] = 0;
		SendClientMessage(playerid, COLOR_GENERAL,"[!]{FFFFFF} ¡Hora de pago! Utiliza el comando {FFBF00}/payday{FFFFFF} para obtener tu salario.");
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		InfoPlayer[playerid][pHorasOn]++;
		InfoPlayer[playerid][pRepartoViajes] = 0;
		new query[320];
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET YaCobre = 0, HorasOn = '%d', RepartoViajes = 0 WHERE ID = '%d'", InfoPlayer[playerid][pHorasOn], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
	}
	return 1;
}

forward PayDay2();
public PayDay2()
{
	new query[175];
	SaveStuff();
	SaveServerStats();
	PayDaySecond = 120;
	//pago automático:
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nVenta] != 0)
	{
	    new pagoG = neg_automatico[InfoNegocio[id][nTipo]];
		if (pagoG != 0)
		{
			if (InfoNegocio[id][nProductos] >= 20)
			{
				InfoNegocio[id][nProductos] -= 20;
				InfoNegocio[id][nDinero] += pagoG;
				mysql_format(DBcreative, query, sizeof query, "UPDATE negocios SET BolosUwU = '%d', Productos = '%d' WHERE ID = '%d'", InfoNegocio[id][nDinero], InfoNegocio[id][nProductos], InfoNegocio[id][nID_sql]);
				mysql_tquery(DBcreative, query);
				foreach(Player, playerid) if (usuario_registro[playerid] == 2)
				{
					if (InfoPlayer[playerid][pNegocio1] == id)
					{
						format(query, sizeof query, "Notificación:{FFFFFF} tu negocio (1) {0080C0}%s{FFFFFF}, ha generado en dos horas {00CC00}$%s{FFFFFF} dólares.", InfoNegocio[id][nNombre], diner_coma(pagoG));
						SendClientMessage(playerid, 0x0080C0FF, query);
					}
					if (InfoPlayer[playerid][pNegocio2] == id)
					{
						format(query, sizeof query, "Notificación:{FFFFFF} tu negocio (2) {0080C0}%s{FFFFFF}, ha generado en dos horas {00CC00}$%s{FFFFFF} dólares.", InfoNegocio[id][nNombre], diner_coma(pagoG));
						SendClientMessage(playerid, 0x0080C0FF, query);
					}
				}
			}
		}
	}
	return 1;
}

funcion PayDayOOF()
{
    PaydayOn = 0;
}

stock ini_GetKey( line[] )
{
	new keyRes[128];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[128];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

forward ClosedLSPDPuerta(id);
public ClosedLSPDPuerta(id)
{
	if (id == 0) SetDynamicObjectRot(lspdPuerta[0], 0.0, 0.0, 90.0);
	if (id == 1) SetDynamicObjectRot(lspdPuerta[1], 0.0, 0.0, -90.0);
	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	if (buttonid == lspdBoton[0] || buttonid == lspdBoton[1])
    {
		if (!member_faccion(playerid, 1)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo policias.");
		SetDynamicObjectRot(lspdPuerta[0], 0.0, 0.0, 190.0);
        SetTimerEx("ClosedLSPDPuerta", 6000, false, "d", 0);
    }
	if (buttonid == lspdBoton[2] || buttonid == lspdBoton[3])
    {
		if (!member_faccion(playerid, 1)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo policias.");
		SetDynamicObjectRot(lspdPuerta[1], 0.0, 0.0, -190.0);
        SetTimerEx("ClosedLSPDPuerta", 6000, false, "d", 1);
    }
   	if(buttonid == PJBT)
    {
        if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
        MoveDynamicObject(PJDOOR,1439.3900, -1469.97485, 1615.26636, 3.5); // Primer acceso.
        SetTimer("CloseDoorPJ", 5000, 0);
    }
   	if(buttonid == PJBT2)
    {
        if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
        MoveDynamicObject(PJDOOR2,1421.6000, -1469.96814, 1616.24707, 3.5); // Segundo acceso.
        SetTimer("CloseDoorPJ2", 5000, 0);
    }
   	if(buttonid == PJBT3)
    {
        if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
		Dialog_Show(playerid,ShowCeldas,DIALOG_STYLE_LIST,
		"Prisión Judicial","Abrir Celda N1 - (Cierre automático)\nAbrir Celda N2 - (Cierre automático)","Aceptar","Salir");
    } // 1425.13538, -1481.79163, 1617.80505
	if(buttonid == JDoor1)
    {
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
        MoveDynamicObject(fen1,1417.90002441,-1554.90002441,4330.50000000,6);
        SetTimer("CloseCell1", 5000, 0);
    }
    if(buttonid == JDoor2)
    {
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
        MoveDynamicObject(fen2,1425.90002441,-1555.00000000,4330.50000000,6);
        SetTimer("CloseCell2", 5000, 0);
    }
    if(buttonid == JDoor3)
    {
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
        MoveDynamicObject(fen3,1429.50000000,-1554.80004883,4330.50000000,6);
        SetTimer("CloseCell3", 5000, 0);
    }
    if(buttonid == JDoor4)
    {
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
        MoveDynamicObject(fen4,1422.19995117,-1567.00000000,4330.50000000,6);
        SetTimer("CloseCell4", 5000, 0);
    }
    if(buttonid == JDoor5) // FIX a 6
    {
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
        MoveDynamicObject(fen6,1430.19995117,-1566.69995117,4330.50000000,6);
        SetTimer("CloseCell5", 5000, 0);
    }
    if(buttonid == JDoor6)
    {
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
        MoveDynamicObject(fen5,1414.80004883,-1566.69995117,4330.50000000,6);
        SetTimer("CloseCell6", 5000, 0);
    }
   	if(buttonid == courtbuttons[0])
	{
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[3])
	{
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[1])
	{
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == courtbuttons[2])
	{
		if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros de la ley policial.");
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == FBILobbyRightBTN[0] || buttonid == FBILobbyRightBTN[1])
	{
		if (!member_faccion(playerid, 2)) return SendClientMessage(playerid,COLOR_GREY, "Acceso denegado; Sólo miembros del FBI.");
		MoveDynamicObject(FBILobbyRight,303.84756470,-1521.62988281,-46.13965225,4);
		SetTimer("CloseFBILobbyRight", 2500, 0);
	}
	//sheriff
	if (buttonid == sd_izquierda1)
	{
		if (!member_faccion(playerid, 4)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo miembros de Sheriff.");
		MoveDynamicObject(ObjSD_izquierda, 239.6232, 115.3600, 1002.2158, 4);
		SetTimer("ClosedSDizquierda", 3000, false);
	}
	else if (buttonid == sd_izquierda2)
	{
		if (!member_faccion(playerid, 4)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo miembros de Sheriff.");
		MoveDynamicObject(ObjSD_izquierda, 239.6232, 115.3600, 1002.2158, 4);
		SetTimer("ClosedSDizquierda", 3000, false);
	}
	else if (buttonid == sd_derecha1)
	{
		if (!member_faccion(playerid, 4)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo miembros de Sheriff.");
	    MoveDynamicObject(ObjSD_derecha, 253.2210, 106.8200, 1002.2158, 4);
		SetTimer("ClosedSDderecha", 3000, false);
	}
	else if (buttonid == sd_derecha2)
	{
		if (!member_faccion(playerid, 4)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo miembros de Sheriff.");
 		MoveDynamicObject(ObjSD_derecha, 253.2210, 106.8200, 1002.2158, 4);
		SetTimer("ClosedSDderecha", 3000, false);
	}
	return false;
}

Dialog:ShowCeldas(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			MoveDynamicObject(PJCELDA, 1438.1360, -1479.50000, 1617.51892, 1.5); // Abierto.
			SetTimer("CloseDoorPJCELDA", 9000, 0);
			cmd_me(playerid, "pulsa un botón y abre la celda 1");
		}
		case 1:
		{
			MoveDynamicObject(PJCELDA2, 1434.6080, -1479.50000, 1617.51892, 1.5); // Abierto.
			SetTimer("CloseDoorPJCELDA2", 9000, 0);
			cmd_me(playerid, "pulsa un botón y abre la celda 2");
		}
	}
	return 1;
}

Dialog:ShowElevador1LSPD(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			SetPosEx(playerid, 1554.822021,-1648.085815,4995.55, -90.0, 1, 1, 1);
			SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en la primera planta, ubicación de las Oficinas y Asuntos Internos.");
		}
		case 1:
		{
			SetPosEx(playerid, 1555.0,-1648.085815,4985.34, -90.0, 1, 1, 1);
			SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en la prisión de LSPD.");
		}
	}
	return 1;
}

Dialog:ShowElevador2LSPD(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			SetPosEx(playerid, 1554.630126,-1709.477050,4995.55, -90.0, 1, 1, 1);
			SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en la primera planta, ubicación de Recursos Humanos y Escuela de Cadetes.");
		}
		case 1:
		{
			SetPosEx(playerid, 1525.365966,-1677.872680,5.890625, -90.0, 0, 0, 1);
			SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en el garage de LSPD, recuerde pedir permiso antes de usar una patrulla.");
		}
	}
	return 1;
}

// EMS
KillEMSQueue(playerid)
{
	SetPVarInt(playerid, "mueltito", 0);
	SetPVarInt(playerid, "EstaCrack", 0);
    StopLoopingAnim(playerid);
    TogglePlayerControllable(playerid, true);
	DeletePVar(playerid, "IsFrozen");
	dar_vida(playerid, 50);
	InfoPlayer[playerid][pMuerto] = 0;
	ActualizarEstado(playerid);
	timer_herido[playerid] = 0;
    player_weapon[playerid] = -1;
	player_asesino[playerid] = -1;
	guardar_int_mysql("cuentas", "Muerto", InfoPlayer[playerid][pID], 0);
	guardar_int_mysql("cuentas", "Hospital", InfoPlayer[playerid][pID], 0);
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
    foreach(Player, i)
	{
		if(InfoBoombox[i][BB_area]) if(areaid == InfoBoombox[i][BB_area])
		{
			new station[256];
			GetPVarString(i, "BBStation", station, sizeof(station));
			if (!isnull(station) && InfoPlayer[playerid][pTogMusic] == 1)
			{
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "*** Comienzas a oír música proveniente de un equipo de sonido ***");
				PlayStream(playerid, station, InfoBoombox[i][BB_x], InfoBoombox[i][BB_y], InfoBoombox[i][BB_z], 30.0, 1);
			}
			return 1;
		}
	}
	return 1;
}

stock PlayStream(playerid, url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "MusBB")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "MusBB", 1);
	PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

forward StopStream(playerid);
public StopStream(playerid)
{
	DeletePVar(playerid, "MusBB");
	StopAudioStreamForPlayer(playerid);
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	foreach(Player, i)
	{
		if(InfoBoombox[i][BB_area]) if(areaid == InfoBoombox[i][BB_area])
		{
			StopStream(playerid);
			return 1;
		}
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid,Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,Float:fRotX, Float:fRotY, Float:fRotZ,Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	if (EditandoObjetoJ[playerid] == 2)
	{
		if (InfoPlayer[playerid][pEspalda] == 0)
		{
			EditandoObjetoJ[playerid] = 0;
			SendClientMessage(playerid, COLOR_GREY, "No tienes ningún arma que editar.");
			return 1;
		}
		if (!response)
		{
			SetPlayerAttachedObject(playerid, 9, modelid, InfoPlayer[playerid][ptHueso][7], InfoPlayer[playerid][ptPosX][7], InfoPlayer[playerid][ptPosY][7], InfoPlayer[playerid][ptPosZ][7], InfoPlayer[playerid][ptRotX][7], InfoPlayer[playerid][ptRotY][7], InfoPlayer[playerid][ptRotZ][7], 1.000000, 1.000000, 1.000000);
			SendClientMessage(playerid, 0xefefefff, "Cancelaste la edición del arma.");
			EditandoObjetoJ[playerid] = 0;
			return 1;
		}
		InfoPlayer[playerid][ptPosX][7] = fOffsetX;
	    InfoPlayer[playerid][ptPosY][7] = fOffsetY;
	    InfoPlayer[playerid][ptPosZ][7] = fOffsetZ;
	    InfoPlayer[playerid][ptRotX][7] = fRotX;
	    InfoPlayer[playerid][ptRotY][7] = fRotY;
	    InfoPlayer[playerid][ptRotZ][7] = fRotZ;
		InfoPlayer[playerid][ptScaleX][7] = 1.000000;
		InfoPlayer[playerid][ptScaleX][7] = 1.000000;
		InfoPlayer[playerid][ptScaleX][7] = 1.000000;

		RemovePlayerAttachedObject(playerid, 9);

		SetPlayerAttachedObject(playerid, 9, modelid, InfoPlayer[playerid][ptHueso][7], InfoPlayer[playerid][ptPosX][7], InfoPlayer[playerid][ptPosY][7], InfoPlayer[playerid][ptPosZ][7], InfoPlayer[playerid][ptRotX][7], InfoPlayer[playerid][ptRotY][7], InfoPlayer[playerid][ptRotZ][7], 1.000000, 1.000000, 1.000000);

		EditandoObjetoJ[playerid] = 0;
		ActualizarToy(playerid, 7);

		SendClientMessage(playerid, COLOR_GENERAL, "Posiciones guardadas, si deseas editar otra vez escribe /arma ajustar.");
		return 1;
	}
	new x = slotselection[playerid], gformat[264];
	InfoPlayer[playerid][ptPosX][x] = fOffsetX;
    InfoPlayer[playerid][ptPosY][x] = fOffsetY;
    InfoPlayer[playerid][ptPosZ][x] = fOffsetZ;
    InfoPlayer[playerid][ptRotX][x] = fRotX;
    InfoPlayer[playerid][ptRotY][x] = fRotY;
    InfoPlayer[playerid][ptRotZ][x] = fRotZ;

    InfoPlayer[playerid][ptScaleX][x] = fScaleX;
    if (fScaleX < 0.1) InfoPlayer[playerid][ptScaleX][x] = 0.1;
 	else if (fScaleX > 1.5) InfoPlayer[playerid][ptScaleX][x] = 1.5;

    InfoPlayer[playerid][ptScaleY][x] = fScaleY;
 	if (fScaleY < 0.1) InfoPlayer[playerid][ptScaleY][x] = 0.1;
 	else if (fScaleY > 1.5) InfoPlayer[playerid][ptScaleY][x] = 1.5;

 	InfoPlayer[playerid][ptScaleZ][x] = fScaleZ;
 	if (fScaleZ < 0.1) InfoPlayer[playerid][ptScaleZ][x] = 0.1;
 	else if (fScaleZ > 1.5) InfoPlayer[playerid][ptScaleZ][x] = 1.5;

	SetPlayerAttachedObject(playerid, x, InfoPlayer[playerid][ptModelo][x], InfoPlayer[playerid][ptHueso][x], InfoPlayer[playerid][ptPosX][x], InfoPlayer[playerid][ptPosY][x], InfoPlayer[playerid][ptPosZ][x],
	InfoPlayer[playerid][ptRotX][x], InfoPlayer[playerid][ptRotY][x], InfoPlayer[playerid][ptRotZ][x], InfoPlayer[playerid][ptScaleX][x], InfoPlayer[playerid][ptScaleY][x], InfoPlayer[playerid][ptScaleZ][x],
	SetColorToy(InfoPlayer[playerid][ptColor][x]));
	InfoPlayer[playerid][ptColocado][x] = 1;
	ActualizarToy(playerid, x);
	format(gformat, sizeof gformat, "Posiciones de tu {FFBF00}%s{FFFFFF} actualizadas. Si quieres editar otro toy, usa: {FFBF00}/toys{FFFFFF}.", GetNameToy(playerid, x));
	SendClientMessage(playerid, 0xFFFFFFFF, gformat);
	slotselection[playerid] = -1;
	Editing[playerid] = 0;
    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	return 1;
}
	
IsVehicleBusy(vehicleid) // The_Chaoz ¿?¿?¿
{
    for(new i; i<GetMaxPlayers(); i++)
    	if(IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid))
    		return 1;
    return 0;
}

SendVIPMessage(color, gformat[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		if (InfoPlayer[playerid][pVIP] != 0 || GetPlayerAdmin(playerid, 1) == 1)
		{
			if (InfoPlayer[playerid][pTogVIP] == 1)
				SendSplitMessage(playerid, color, gformat);
		}
	}
}

SendAllICMessage(color, string[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoPlayer[playerid][pTogAnuncios] == 0)
	{
		SendSplitMessage(playerid, color, string);
	}
}

SendAllMessage(color, string[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoPlayer[playerid][pTogOOC] == 1)
	{
		SendSplitMessage(playerid, color, string);
	}
}

GetMiembrosFaccion(id)
{
	new query[160];

	mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE MiembroFaccion = '%d'", id);
	mysql_query(DBcreative, query);

	return cache_num_rows();
}

GetEmpleadosFabrica(id)
{
	new query[160];

	mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE Contrato = '%d'", id);
	mysql_query(DBcreative, query);

	return cache_num_rows();
}

LlavesNegocio(playerid, id)
{
	if (InfoPlayer[playerid][pNegocio1] == id) return 1;
	if (InfoPlayer[playerid][pNegocio2] == id) return 2;
	return 0;
}

stock Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)//by: whoever
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	switch(IsPlayerInAnyVehicle(playerid))
	{
	    case 0: GetPlayerFacingAngle(playerid, a);
	    case 1: GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

AnibleVeh(id)
{
	if (InfoVehiculo[id][vTipo] == 1) return 1;
	if (InfoVehiculo[id][vTipo] == 2) return 1;
	if (InfoVehiculo[id][vTipo] == 3) return 1;
	if (InfoVehiculo[id][vTipo] == 4) return 1;
	return 0;
}

//desde aquí empiezan los comandos.
CMD:identidad(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 4)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de LSPD, FBI o SASD.");
	new string[256];
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /identidad (Nombre_Apellido)");
	if (!isnull(InfoPlayer[playerid][pNombre_Temporal])) return SendClientMessage(playerid, COLOR_GREY, "Tienes activado el /adminnombre, sacátelo primero.");
	if (!isnull(InfoPlayer[playerid][pNombre_PD])) //quitar
	{
	    //función
		alm(InfoPlayer[playerid][pNombre_PD], "");
		SetPlayerName(playerid, InfoPlayer[playerid][pNombre_Apellido]);
		//mensaje
		format(string, sizeof string, "Tu nombre a sido cambiado al anterior: {5ABAFF}%s{FFFFFF}.", InfoPlayer[playerid][pNombre_Apellido]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else //poner
	{
		if (!IsValidRoleplayName(params)) return SendClientMessage(playerid, COLOR_GREY, "Nombre inválido, sigue el formato: Nombre_Apellido.");
		if (verificar_cuenta(params) != 0) return SendClientMessage(playerid, COLOR_WHITE, "Ese nombre ya está registrado.");
	    //función
		alm(InfoPlayer[playerid][pNombre_PD], params);
		SetPlayerName(playerid, InfoPlayer[playerid][pNombre_PD]);
		//mensaje
		format(string, sizeof string, "** %s(%d) está temporalmente con el nombre '%s'.", InfoPlayer[playerid][pNombre_Apellido], playerid, params);
		SendFaccionMessage(InfoPlayer[playerid][pMiembro], 0x989898FF, string);
		format(string, sizeof string, "Estás temporalmente con el nombre de {5ABAFF}%s{FFFFFF}.", params);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof string, "%s está usando temporalmente el nombre %s", InfoPlayer[playerid][pNombre_Apellido], params);
		Log("LOGS/Identidad.log", string);
	}
	return 1;
}
CMD:mascarapd(playerid, params[]) return cmd_identidad(playerid, params);
CMD:mascarasd(playerid, params[]) return cmd_identidad(playerid, params);

CMD:uniformes(playerid)
{
	new neg = IsPlayerContrato(playerid, 13);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ninguna clínica.");
	if (!IsPlayerInRangeOfPoint(playerid, 4.0, -2288.0708, 89.1743, -5.3042)) return SendClientMessage(playerid, COLOR_GREY, "No estás en el lugar de uniformes de la clínica.");
	new skins_clinica[7];
	skins_clinica[0] = 274, skins_clinica[1] = 275, skins_clinica[2] = 276, skins_clinica[3] = 277, skins_clinica[4] = 278, skins_clinica[5] = 279, skins_clinica[6] = 308;
	ShowModelSelectionMenuEx(playerid, skins_clinica, sizeof skins_clinica, "Uniformes", Clinica_Skin, -11.0, 0.0, -55.0, 1.0);
	return 1;
}

CMD:curar(playerid, params[])
{
	new neg = IsPlayerContrato(playerid, 13);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ninguna clínica.");
	if (InfoPlayer[playerid][pTriageTime] != 0) return SendClientMessage(playerid, COLOR_GREY, "Debes esperar 2 minutos para hacer esto de nuevo.");
	new gformat[190], playerid2, precio;
	if (sscanf(params, "ud", playerid2, precio)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /curar (JugadorID) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (playerid == playerid2) return SendClientMessage(playerid, COLOR_GREY, "* No te puedes curar tu mismo.");
	if (IsPlayerInAnyVehicle(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador está dentro de un vehículo.");
	new minimocost = 500, maximocost = 1200;
	if (precio < minimocost || precio > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por curar es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	CulandoPrecio[playerid2] = precio;
	CulandoCliente[playerid2] = playerid;
	CulandoNegocio[playerid2] = neg;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece servició médico (100 HP) por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio médico presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), diner_coma(precio));
	Dialog_Show(playerid2, CulandoBebe, DIALOG_STYLE_MSGBOX, "HP", gdsdu, "Continuar", "Salir");
	return 1;
}

Dialog:CulandoBebe(playerid, response, listitem, inputtext[])
{
	new medico = CulandoCliente[playerid], costo = CulandoPrecio[playerid], neg = CulandoNegocio[playerid], gformat[234];
	if (!IsPlayerConnectedEx(medico))
	{
		CulandoPrecio[playerid] = 0;
		CulandoCliente[playerid] = -1;
		CulandoNegocio[playerid] = -1;
		SendClientMessage(playerid, COLOR_GREY, "* El médico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		CulandoPrecio[playerid] = 0;
		CulandoCliente[playerid] = -1;
		CulandoNegocio[playerid] = -1;
		format(gformat, sizeof gformat, "* %s rechazó el servicio médico.", NombreJugador(playerid));
		SendClientMessage(medico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste el servicio médico.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		CulandoPrecio[playerid] = 0;
		CulandoCliente[playerid] = -1;
		CulandoNegocio[playerid] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(medico, COLOR_GREY, "* Se canceló la oferta, porque el paciente no tiene dinero suficiente.");
		return 1;
	}
	dar_vida(playerid, 100.0);
	format(gformat, sizeof gformat, "da servicio médico a %s", NombreJugador(playerid));
	cmd_me(medico, gformat);
	GivePlayerCash(playerid, -costo, "servicio médico");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio médico de %s.", diner_coma(costo/2), NombreJugador(playerid));
	SendClientMessage(medico, COLOR_GREEN, gformat);
	GivePlayerCash(medico, costo/2, "servicio médico");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	InfoPlayer[medico][pTriageTime] = 120;
	CulandoPrecio[playerid] = 0;
	CulandoCliente[playerid] = -1;
	CulandoNegocio[playerid] = -1;
	return 1;
}

CMD:cjob(playerid, params[])
{
	new id = InfoPlayer[playerid][pContrato], string[512];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes ningún empleo.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /cjob (Texto)");
	format(string, sizeof string, "{FDAD35}[%s] %s:{FFFFFF} %s", GetNameContrato(id), NombreOriginal(playerid), params);
	SendEmpleoMessage(id, 0xFFFFFFFF, string);
	return 1;
}

CMD:rjob(playerid, params[])
{
	new id = InfoPlayer[playerid][pContrato], string[512];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes ningún empleo.");
	if (InfoPlayer[playerid][pTogRadio] == 0) return SendClientMessage(playerid, COLOR_GREY, "Posees la radio de facción apagada, escribe /togradio.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /rjob (Texto)");
	format(string, sizeof string, "** [CH: %d] %s: %s", id, NombreJugador(playerid), params);
	SendRadioEmpleoMessage(id, COLOR_RADIO, string);
	format(string, sizeof string, "%s por radio: %s", NombreJugador(playerid), params);
	ProxExDetector(3.5, playerid, string, 0x95939300, 0x95939300, 0x95939300, 0x95939300, 0x95939300);
	return 1;
}

CMD:cancelarreparto(playerid)
{
	new gformat[170];
	if (RepartoID[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes ningún reparto pendiente, usa /repartos.");
	//clear cps
	DeletePVar(playerid, "EnCheckPoint");
	DisablePlayerCheckpoint(playerid);
	//habilidad
	if (InfoPlayer[playerid][pHabilidad][1] != 0)
	{
		InfoPlayer[playerid][pHabilidad][1]--;
		guardar_int_mysql("cuentas", "Habilidad2", InfoPlayer[playerid][pID], InfoPlayer[playerid][pHabilidad][1]);
		format(gformat, sizeof gformat, "Cancelaste el reparto. Perdiste un punto de habilidad de repartos, ahora tienes %d de progreso.", InfoPlayer[playerid][pHabilidad][1]);
	}
	else alm(gformat, "Cancelaste el reparto.");
	SendClientMessage(playerid, 0xE81700FF, gformat);
	//clear reparto
	RepartoID[playerid] = -1;
	RepartoCasa[playerid] = -1;
	RepartoNegocio[playerid] = -1;
	RepartoPago[playerid] = 0;
	TimerRepartos[playerid] = gettime();
	return 1;
}

CMD:repartos(playerid)
{
	new neg = IsPlayerContrato(playerid, 6), string[190];
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ninguna empresa de repartos.");
	if (InfoPlayer[playerid][pRepartoViajes] >= 10) return SendClientMessage(playerid, COLOR_GREY, "* Ya has realizado diez repartos, espera el próximo PayDay.");
	if (RepartoID[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes un reparto pendiente, puedes usar /cancelarreparto. (Nota: pierdes habilidad de repartos)");
	if (!CheckTimer(120, TimerRepartos[playerid]))
	{
		CrearReparto(playerid);
		new negocio = RepartoNegocio[playerid];
		new casa = RepartoCasa[playerid];
		new pago = RepartoPago[playerid];
		new sInfo[270], sDialog[1028], lugarcasa[128+20], lugalre[128];
		Get2DZone(lugalre, MAX_ZONE_NAME, InfoCasa[casa][cExteriorX], InfoCasa[casa][cExteriorY], InfoCasa[casa][cExteriorZ]);
		format(lugarcasa, sizeof lugarcasa, "%s - %d", lugalre, casa);
		format(sInfo, sizeof sInfo, "{ffffff}Debes recoger el paquete en el negocio:\n{FFBF00}%s - %d\n\n", InfoNegocio[negocio][nNombre], negocio); strcat(sDialog, sInfo);
		format(sInfo, sizeof sInfo, "{ffffff}Luego entregar el paquete en la casa:\n{A851FF}%s\n\n", lugarcasa); strcat(sDialog, sInfo);
		format(sInfo, sizeof sInfo, "{ffffff}Tipo de paquete:\n{00A2FF}%s\n\n", GetNameReparto(RepartoID[playerid])); strcat(sDialog, sInfo);
		format(sInfo, sizeof sInfo, "{ffffff}Pago aproximado:\n{49B01E}$%s{ffffff}\n\nEl pago puede aumentar en base a la habilidad de repartidor.\n", diner_coma(pago)); strcat(sDialog, sInfo);
		Dialog_Show(playerid, ShowRepartos, DIALOG_STYLE_MSGBOX, "{FFBF00}Información de reparto:", sDialog, "Tomar", "Cancelar");
	}
	else
	{
		format(string, sizeof string, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(120, TimerRepartos[playerid]));
		SendClientMessage(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

CMD:inforeparto(playerid)
{
	new neg = IsPlayerContrato(playerid, 6);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ninguna empresa de repartos.");
	if (RepartoID[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes un reparto pendiente.");
	new negocio = RepartoNegocio[playerid];
	new casa = RepartoCasa[playerid];
	new pago = RepartoPago[playerid];
	new sInfo[270], sDialog[1028], lugarcasa[128+20], lugalre[128];
	Get2DZone(lugalre, MAX_ZONE_NAME, InfoCasa[casa][cExteriorX], InfoCasa[casa][cExteriorY], InfoCasa[casa][cExteriorZ]);
	format(lugarcasa, sizeof lugarcasa, "%s - %d", lugalre, casa);
	format(sInfo, sizeof sInfo, "{ffffff}Debes recoger el paquete en el negocio:\n{FFBF00}%s - %d\n\n", InfoNegocio[negocio][nNombre], negocio); strcat(sDialog, sInfo);
	format(sInfo, sizeof sInfo, "{ffffff}Luego entregar el paquete en la casa:\n{A851FF}%s\n\n", lugarcasa); strcat(sDialog, sInfo);
	format(sInfo, sizeof sInfo, "{ffffff}Tipo de paquete:\n{00A2FF}%s\n\n", GetNameReparto(RepartoID[playerid])); strcat(sDialog, sInfo);
	format(sInfo, sizeof sInfo, "{ffffff}Pago aproximado:\n{49B01E}$%s{ffffff}\n\nEl pago puede aumentar en base a la habilidad de repartidor.\n", diner_coma(pago)); strcat(sDialog, sInfo);
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Información de tu reparto:", sDialog, "Cerrar", "");
	return 1;
}
CMD:repartoactual(playerid) return cmd_inforeparto(playerid);

Dialog:ShowRepartos(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		TimerRepartos[playerid] = gettime();
	    RepartoID[playerid] = -1;
		SendClientMessage(playerid, -1, "Cancelaste el reparto actual, puedes hacer uno nuevo en 120 segundos.");
		return 1;
	}
	new gformat[256], id_neg = RepartoNegocio[playerid];
	format(gformat, sizeof gformat, "Debes recoger el {4A76EA}reparto{EBEBEB} del negocio {4A76EA}%s{EBEBEB}, el lugar fue marcado en el radar.", InfoNegocio[id_neg][nNombre]);
	SendClientMessage(playerid, 0xEBEBEBFF, gformat);
	SendClientMessage(playerid, 0xEBEBEBFF, "El paquete puede ser entregado en un vehículo de la empresa, propio o hasta a pie.");
	SetPlayerCheckpoint(playerid, InfoNegocio[id_neg][nExteriorX], InfoNegocio[id_neg][nExteriorY], InfoNegocio[id_neg][nExteriorZ], 5.0);
	SetPVarInt(playerid, "EnCheckPoint", 3);
	return 1;
}

GetNameReparto(id)
{
	new numeReparto[64];
	switch (id)
	{
		case 1: alm(numeReparto, "Pizza de jamón y queso");
		case 2: alm(numeReparto, "Caja de zapatos");
		case 3: alm(numeReparto, "Revistas HOT xxx");
		case 4: alm(numeReparto, "Kit de cargadores");
		case 5: alm(numeReparto, "Juguetes de diversión");
		case 6: alm(numeReparto, "Botellas de ron");
		case 7: alm(numeReparto, "Cables y controles de PS4");
		case 8: alm(numeReparto, "Juego de herramientas");
		case 9: alm(numeReparto, "Teléfono nuevo S10");
		case 10: alm(numeReparto, "Pelucas falsas");
		case 11: alm(numeReparto, "Paquete de 6 donas");
		case 12: alm(numeReparto, "Kit de hamburguesas");
		case 13: alm(numeReparto, "2 Kg de pollo");
		case 14: alm(numeReparto, "Ropa gucci");
	}
	return numeReparto;
}

CrearReparto(playerid)
{
	new azar_reparto = Random(1, 14);
	new azar_casa = Random(1, totalcasas);
	new azar_pago = 500;
	switch (azar_reparto)
	{
		case 1: azar_pago = Random(940, 1640);
		case 2: azar_pago = Random(1020, 1940);
		case 3: azar_pago = Random(900, 1800);
		case 4: azar_pago = Random(1020, 1880);
		case 5: azar_pago = Random(960, 1360);
		case 6: azar_pago = Random(1420, 2000);
		case 7: azar_pago = Random(1480, 2400);
		case 8: azar_pago = Random(1300, 2500);
		case 9: azar_pago = Random(1550, 2800);
		case 10: azar_pago = Random(810, 1300);
		case 11: azar_pago = Random(850, 1569);
		case 12: azar_pago = Random(864, 1690);
		case 13: azar_pago = Random(880, 2000);
		case 14: azar_pago = Random(1530, 2200);
	}
	if (InfoCasa[azar_casa][cTipo] != 0 && InfoCasa[azar_casa][cExteriorInt] == 0 && InfoCasa[azar_casa][cExteriorVW] == 0)
	{
		RepartoNegocio[playerid] = GetNegocioReparto(azar_reparto);
		RepartoID[playerid] = azar_reparto;
		RepartoCasa[playerid] = azar_casa;
		RepartoPago[playerid] = azar_pago;
		return 1;
	}
	CrearReparto(playerid);
	return 1;
}

GetNegocioReparto(reparto)
{
	new id = -1;
	new tipo_neg = 1;
	switch (reparto)
	{
		case 1: tipo_neg = 3;
		case 2: tipo_neg = 2;
		case 3: tipo_neg = 7;
		case 4: tipo_neg = 5;
		case 5: tipo_neg = 7;
		case 6: tipo_neg = 8;
		case 7: tipo_neg = 6;
		case 8: tipo_neg = 1;
		case 9: tipo_neg = 1;
		case 10: tipo_neg = 2;
		case 11: tipo_neg = 3;
		case 12: tipo_neg = 3;
		case 13: tipo_neg = 3;
		case 14: tipo_neg = 2;
	}
	//azar
	new azar_negocio = Random(1, totalnegocios);
	Loop(x, totalnegocios, azar_negocio) if (InfoNegocio[x][nTipo] == tipo_neg)
	{
		id = x;
		break;
	}
	//si no consigue nada, pues que lo detecte asi
	if (id == -1)
	{
		Loop(x, totalnegocios, 1) if (InfoNegocio[x][nTipo] == tipo_neg)
		{
			id = x;
			break;
		}
	}
	return id;
}

CMD:panel(playerid)
{
	new dialog[2056], gformat[195];
	format(gformat, sizeof gformat, "{EBEBEB}Status teléfono\t%s\n", (InfoPlayer[playerid][pTogTelefono]) ? ("{54C822}Encendido") : ("{E81700}Apagado")); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EBEBEB}Movimiento de manos\t%s\n", (InfoPlayer[playerid][pTogManos]) ? ("{54C822}Activado") : ("{E81700}Desactivado")); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EBEBEB}Visualización de anuncios\t%s\n", (InfoPlayer[playerid][pTogAnuncios]) ? ("{E81700}No") : ("{54C822}Sí")); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EBEBEB}Visualización de velocimetro\t%s\n", (InfoPlayer[playerid][pTogVelocimetro]) ? ("{54C822}Sí") : ("{E81700}No")); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EBEBEB}Mensajes administrativos\t%s\n", (InfoPlayer[playerid][pTogOOC]) ? ("{54C822}Habilitados") : ("{E81700}Deshabilitados")); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EBEBEB}Mensajes de radio o whatsapp\t%s\n", (InfoPlayer[playerid][pTogRadio]) ? ("{54C822}Habilitados") : ("{E81700}Deshabilitados")); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EBEBEB}Reproductor de música\t%s\n", (InfoPlayer[playerid][pTogMusic]) ? ("{54C822}Activado") : ("{E81700}Desactivado")); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EBEBEB}Audio de radio portátil\t%s\n", (InfoPlayer[playerid][pTogPortatil]) ? ("{54C822}Activado") : ("{E81700}Desactivado")); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EBEBEB}Mensajes de facción\t%s\n", (InfoPlayer[playerid][pTogFaccion]) ? ("{54C822}Habilitados") : ("{E81700}Deshabilitados")); strcat(dialog, gformat);
	if (InfoPlayer[playerid][pVIP] != 0 || GetPlayerAdmin(playerid, 1) != 0)
	{
		format(gformat, sizeof gformat, "{EBEBEB}Mensajes del canal VIP\t%s\n", (InfoPlayer[playerid][pTogVIP]) ? ("{54C822}Habilitados") : ("{E81700}Deshabilitados")); strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowPanel, DIALOG_STYLE_TABLIST, "Configuración de cuenta", dialog, "Cambiar", "Salir");
	return 1;
}

CMD:togfaccion(playerid)
{
	if (InfoPlayer[playerid][pTogFaccion] != 0)
	{
		InfoPlayer[playerid][pTogFaccion] = 0;
		StopAudioStreamForPlayer(playerid);
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {E81700}no verás{EBEBEB} los mensajes de facción.");
	}
	else
	{
		InfoPlayer[playerid][pTogFaccion] = 1;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {54C822}puedes ver{EBEBEB} los mensajes de facción.");
	}
	guardar_int_mysql("cuentas", "TogFaccion", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogFaccion]);
	return 1;
}
CMD:togfac(playerid) return cmd_togfaccion(playerid);

Dialog:ShowPanel(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: cmd_togmovil(playerid), cmd_panel(playerid);
		case 1: cmd_togmanos(playerid), cmd_panel(playerid);
		case 2: cmd_togad(playerid), cmd_panel(playerid);
		case 3: cmd_velocimetro(playerid), cmd_panel(playerid);
		case 4: cmd_togooc(playerid), cmd_panel(playerid);
		case 5: cmd_radio(playerid), cmd_panel(playerid);
		case 6: cmd_togmusic(playerid), cmd_panel(playerid);
		case 7: cmd_togpr(playerid), cmd_panel(playerid);
		case 8: cmd_togfaccion(playerid), cmd_panel(playerid);
		case 9: cmd_togvip(playerid), cmd_panel(playerid);
	}
	return 1;
}

CMD:togooc(playerid)
{
	if (InfoPlayer[playerid][pTogOOC] != 0)
	{
		InfoPlayer[playerid][pTogOOC] = 0;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {E81700}no verás{EBEBEB} los mensajes administrativos ooc.");
	}
	else
	{
		InfoPlayer[playerid][pTogOOC] = 1;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {54C822}puees ver{EBEBEB} los mensajes administrativos ooc.");
	}
	guardar_int_mysql("cuentas", "TogOOC", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogOOC]);
	return 1;
}

CMD:togphone(playerid)
{
	if (InfoPlayer[playerid][pTogTelefono] != 0)
	{
		InfoPlayer[playerid][pTogTelefono] = 0;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora tu teléfono está {E81700}apagado{EBEBEB}, ahora no podrás recibir llamadas o mensajes.");
	}
	else
	{
		InfoPlayer[playerid][pTogTelefono] = 1;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora tu teléfono está {54C822}encendido{EBEBEB}, ahora podrás recibir llamadas o mensajes.");
	}
	guardar_int_mysql("cuentas", "TogTelefono", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogTelefono]);
	return 1;
}
CMD:togmovil(playerid) return cmd_togphone(playerid);

CMD:togmanos(playerid)
{
	if (InfoPlayer[playerid][pTogManos] != 0)
	{
		InfoPlayer[playerid][pTogManos] = 0;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora tienes {E81700}desactivado{EBEBEB} el movimiento de manos cuando escribes en el chat ic.");
	}
	else
	{
		InfoPlayer[playerid][pTogManos] = 1;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora tienes {54C822}activado{EBEBEB} el movimiento de manos cuando escribes en el chat ic.");
	}
	guardar_int_mysql("cuentas", "TogManos", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogManos]);
	return 1;
}

CMD:togad(playerid)
{
	if (InfoPlayer[playerid][pTogAnuncios] != 0)
	{
		new numer = PlayerViewAnunce[playerid];
		if (numer != 0)
		{
			Loop(x, numer, 0) { TextDrawShowForPlayer(playerid, TD_Anuncio[x]); }
		}
		InfoPlayer[playerid][pTogAnuncios] = 0;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {54C822}puedes ver{EBEBEB} los anuncios de la parte inferior.");
	}
	else
	{
	    Loop(x, 5, 0) { TextDrawHideForPlayer(playerid, TD_Anuncio[x]); }
		InfoPlayer[playerid][pTogAnuncios] = 1;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {E81700}no verás{EBEBEB} los anuncios de la parte inferior.");
	}
	guardar_int_mysql("cuentas", "TogAnuncios", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogAnuncios]);
	return 1;
}
CMD:togads(playerid) return cmd_togad(playerid);
CMD:toganuncio(playerid) return cmd_togad(playerid);
CMD:toganuncios(playerid) return cmd_togad(playerid);

CMD:velocimetro(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes ser el conductor de un vehículo.");
	if (InfoPlayer[playerid][pTogVelocimetro] == 0)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora puedes {54C822}puedes ver{EBEBEB} el velocimetro.");
		InfoPlayer[playerid][pTogVelocimetro] = 1;
		mostrar_velocimetro(playerid, vehicleid);
	}
	else
	{
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {E81700}no verás{EBEBEB} el velocimetro.");
		InfoPlayer[playerid][pTogVelocimetro] = 0;
		hide_velocimetro(playerid);
	}
	guardar_int_mysql("cuentas", "Velocimetro", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogVelocimetro]);
	return 1;
}
CMD:togvelocimetro(playerid) return cmd_velocimetro(playerid);

CMD:togmusic(playerid)
{
	if (InfoPlayer[playerid][pTogMusic] != 0)
	{
		InfoPlayer[playerid][pTogMusic] = 0;
		StopAudioStreamForPlayer(playerid);
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {E81700}no escucharás{EBEBEB} los audios de música.");
	}
	else
	{
		InfoPlayer[playerid][pTogMusic] = 1;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {54C822}puedes escuchar{EBEBEB} los audios de música.");
	}
	guardar_int_mysql("cuentas", "TogMusic", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogMusic]);
	return 1;
}

CMD:radio(playerid)
{
	if (InfoPlayer[playerid][pTogRadio] != 0)
	{
		InfoPlayer[playerid][pTogRadio] = 0;
		StopAudioStreamForPlayer(playerid);
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {E81700}no verás{EBEBEB} los mensajes de radio o whatsapp.");
	}
	else
	{
		InfoPlayer[playerid][pTogRadio] = 1;
		SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {54C822}puedes ver{EBEBEB} los mensajes de radio o whatsapp.");
	}
	guardar_int_mysql("cuentas", "TogRadio", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogRadio]);
	return 1;
}
CMD:togradio(playerid) return cmd_radio(playerid);
CMD:togrd(playerid) return cmd_radio(playerid);
CMD:togwsp(playerid) return cmd_radio(playerid);

CMD:togpr(playerid)
{
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	new string[195];
	if (InfoPlayer[playerid][pTogPortatil] != 0)
	{
		InfoPlayer[playerid][pTogPortatil] = 0;
		SendClientMessage(playerid, 0xEBEBEBFF, "Has {E81700}apagado{EBEBEB} tu radio portátil.");
	}
	else
	{
		InfoPlayer[playerid][pTogPortatil] = 1;
		if (InfoPlayer[playerid][pFrecuencia_radio] != 0) format(string, sizeof string, "Has {54C822}encendido{EBEBEB} tu radio portátil, frecuencia sincronizada %d khz.", InfoPlayer[playerid][pFrecuencia_radio]);
		else format(string, sizeof string, "Has {54C822}encendido{EBEBEB} tu radio portátil.");
		SendClientMessage(playerid, 0xEBEBEBFF, string);
	}
	guardar_int_mysql("cuentas", "TogPortatil", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogPortatil]);
	return 1;
}
CMD:togportatil(playerid) return cmd_togpr(playerid);

CMD:togvip(playerid)
{
	if (InfoPlayer[playerid][pVIP] > 0 || GetPlayerAdmin(playerid, 1) != 0)
	{
		if (InfoPlayer[playerid][pTogVIP] == 0)
		{
			InfoPlayer[playerid][pTogVIP] = 1;
			SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {54C822}puedes ver{EBEBEB} los mensajes del canal vip.");
		}
		else
		{
			InfoPlayer[playerid][pTogVIP] = 0;
			SendClientMessage(playerid, 0xEBEBEBFF, "Ahora {E81700}no verás{EBEBEB} los mensajes del canal vip.");
		}
		guardar_int_mysql("cuentas", "ChatVIP", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogVIP]);
		return 1;
	}
	SendClientMessage(playerid, -1, "No tienes acceso a este comando.");
	return 1;
}

CMD:togadmin(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (!AdminChat[playerid])
	{
		AdminChat[playerid] = 1;
		SendClientMessage(playerid, COLOR_YELLOW, "Canal de administración desactivado.");
	}
	else
	{
		AdminChat[playerid] = 0;
		SendClientMessage(playerid, COLOR_YELLOW, "Canal de administración activado.");
	}
	return 1;
}
CMD:togac(playerid) return cmd_togadmin(playerid);

CMD:togpm(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (!HidePM[playerid])
	{
		HidePM[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Privados bloqueados.");
	}
	else
	{
		HidePM[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Privados habilitados.");
	}
	return 1;
}
CMD:togmp(playerid) return cmd_togpm(playerid);

CMD:irtrabajo(playerid)
{
	new id = InfoPlayer[playerid][pContrato];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No tienes ningún trabajo o empleo.");
	SendClientMessage(playerid, COLOR_YELLOW, "Se te marcó en el mapa el lugar donde trabajas.");
	SetPlayerCheckpoint(playerid, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ], 3.0);
	return 1;
}
CMD:irjob(playerid) return cmd_irtrabajo(playerid);
CMD:gotjob(playerid) return cmd_irtrabajo(playerid);

CMD:renunciar(playerid)
{
	new id = InfoPlayer[playerid][pContrato], gformat[250];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No tienes ningún trabajo o empleo.");
	format(gformat, sizeof gformat, "* Renunciaste tu puesto de %s en %s.", GetNameContrato(id), InfoNegocio[id][nNombre]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
	InfoPlayer[playerid][pContrato] = -1;
	guardar_int_mysql("cuentas", "Contrato", InfoPlayer[playerid][pID], InfoPlayer[playerid][pContrato]);
	return 1;
}

CMD:telefono(playerid)
{
	if (InfoPlayer[playerid][pTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes un número telefónico.");
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	if (InfoPlayer[playerid][pTiempoSancion] != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás en prisión.");
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás herido.");
	new gformat[249], gdialog[480];
	format(gformat, sizeof gformat, "{7777FF}%s\n", FechaHoy()); strcat(gdialog, gformat);
	strcat(gdialog, "{FFFFFF}Marcar un número\n");
	strcat(gdialog, "Enviar un mensaje\n");
	strcat(gdialog, "Aplicaciones\n");
	if (InfoPlayer[playerid][pTogTelefono] != 0) strcat(gdialog, "{E81700}Apagar {FFFFFF}teléfono\n");
	else strcat(gdialog, "{54C822}Encender {FFFFFF}teléfono\n");
	format(gformat, sizeof gformat, "Número telefónico: {FFBF00}%d", InfoPlayer[playerid][pTelefono]);
	Dialog_Show(playerid, MenuTelefono, DIALOG_STYLE_LIST, gformat, gdialog, "Continuar", "Salir");
	return 1;
}
CMD:celular(playerid) return cmd_telefono(playerid);

Dialog:MenuTelefono(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: cmd_celular(playerid);
		case 1: Dialog_Show(playerid, MarcarNumero, DIALOG_STYLE_INPUT, "Opción: {FFBF00}Marcar un número", "{FFFFFF}Introduce el numero:", "Llamar", "Volver");
		case 2: Dialog_Show(playerid, SMSSend, DIALOG_STYLE_INPUT, "Opción: {FFBF00}Enviar mensaje", "{FFFFFF}Introduce el numero:", "Continuar", "Volver");
		case 3:
		{
			if (IsPlayerContrato(playerid, 6) != -1) Dialog_Show(playerid, MenuAplicaciones, DIALOG_STYLE_LIST, "Opción: {FFBF00}Aplicaciones", "- Contactos\n- Transferencias express\n- Empleos disponibles\n- {00CC00}Repartos disponibles", "Continuar", "Volver");
			else Dialog_Show(playerid, MenuAplicaciones, DIALOG_STYLE_LIST, "Opción: {FFBF00}Aplicaciones", "- Contactos\n- Transferencias express\n- Empleos disponibles", "Continuar", "Volver");
		}
		case 4: //status
		{
			cmd_togmovil(playerid);
			cmd_celular(playerid);
		}
	}
	return 1;
}

Dialog:MarcarNumero(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_celular(playerid);
	new string[128];
	if (isnull(inputtext) || !isnumeric(inputtext)) return Dialog_Show(playerid, MarcarNumero, DIALOG_STYLE_INPUT, "Opción: {FFBF00}Marcar un número", "{FFFFFF}Introduce el numero:", "Llamar", "Volver");
	format(string, sizeof string, "%d", strval(inputtext));
	cmd_llamar(playerid, string);
	return 1;
}

Dialog:SMSSend(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_celular(playerid);
	if (GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, COLOR_GREY, "* Debes tener al menos 2$ dólares en bolsillos para enviar mensajes.");
	if (isnull(inputtext) || !isnumeric(inputtext)) return Dialog_Show(playerid, SMSSend, DIALOG_STYLE_INPUT, "Opción: {FFBF00}Enviar mensaje", "{FFFFFF}Introduce el numero:", "Continuar", "Volver");
	new string[128];
	format(string, sizeof string, "%d", strval(inputtext));
	NumeroMensaje[playerid] = strval(inputtext);
	Dialog_Show(playerid, SMS2Send, DIALOG_STYLE_INPUT, "Opción: {FFBF00}Enviar mensaje", "{FFFFFF}Introduce el texto que vas a enviar:", "Enviar", "Volver");
	return 1;
}

Dialog:SMS2Send(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, SMSSend, DIALOG_STYLE_INPUT, "Opción: {FFBF00}Enviar mensaje", "{FFFFFF}Introduce el numero:", "Continuar", "Volver");
	if (isnull(inputtext)) return Dialog_Show(playerid, SMS2Send, DIALOG_STYLE_INPUT, "Opción: {FFBF00}Enviar mensaje", "{FFFFFF}Introduce el texto que vas a enviar:", "Enviar", "Volver");
	if (GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, COLOR_GREY, "* Debes tener al menos 2$ dólares en bolsillos para enviar mensajes.");
	new phonenumb = NumeroMensaje[playerid], text[256];
	new string[240];
	alm(text, inputtext);
	foreach(new i: Player) if (IsPlayerConnectedEx(i))
	{
		if (InfoPlayer[i][pTelefono] == phonenumb && phonenumb != 0)
		{
			new playerid2 = i;
			if (InfoPlayer[playerid2][pTogTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* Mensaje no enviado, teléfono apagado.");
			format(string, sizeof string, "SMS de %d: %s", InfoPlayer[playerid][pTelefono], text);
			SendClientMessage(playerid2, 0xFFEA5FFF, string);
			format(string, sizeof string, "SMS a %d: %s", phonenumb, text);
			SendClientMessage(playerid, 0xEBEBEBFF, string);
			PlayerAudio(playerid, 1053, 10.0);
			PlayerAudio(playerid2, 20804, 10.0);
			GivePlayerCash(playerid, -2, "costo de sms");
			cmd_me(playerid, "envía un mensaje de texto");
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "* El número que ha marcado no existe o no está disponible.");
	return 1;
}

CMD:empleos(playerid)
{
	if (InfoPlayer[playerid][pTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes un número telefónico.");
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	if (InfoPlayer[playerid][pTiempoSancion] != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás en prisión.");
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás herido.");
	Dialog_Show(playerid, JobTelefono, DIALOG_STYLE_LIST, "Opción: {FFBF00}Empleos disponibles", "- Repartidor\n- Mecánico\n- Médico", "Continuar", "Volver");
	return 1;
}
CMD:trabajos(playerid) return cmd_empleos(playerid);

Dialog:MenuAplicaciones(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_celular(playerid);
	switch (listitem)
	{
		case 0: cmd_agenda(playerid);
		case 1: cmd_transferir(playerid);
		case 2: cmd_empleos(playerid);
		case 3: cmd_repartos(playerid);
	}
	return 1;
}

Dialog:JobTelefono(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		if (IsPlayerContrato(playerid, 6) != -1) Dialog_Show(playerid, MenuAplicaciones, DIALOG_STYLE_LIST, "Opción: {FFBF00}Aplicaciones", "- Contactos\n- Transferencias express\n- Empleos disponibles\n- {00CC00}Repartos disponibles", "Continuar", "Volver");
		else Dialog_Show(playerid, MenuAplicaciones, DIALOG_STYLE_LIST, "Opción: {FFBF00}Aplicaciones", "- Contactos\n- Transferencias express\n- Empleos disponibles", "Continuar", "Volver");
		return 1;
	}
	new gformat[294];
	if (InfoPlayer[playerid][pContrato] != -1)
	{
	    new neg = InfoPlayer[playerid][pContrato];
		if (InfoNegocio[neg][nTipo] == 0)
		{
		    InfoPlayer[playerid][pContrato] = -1;
			guardar_int_mysql("cuentas", "Contrato", InfoPlayer[playerid][pID], InfoPlayer[playerid][pContrato]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "El negocio/empresa donde trabajabas ya no existe, ahora puedes conseguir otro.");
		    return 1;
		}
		format(gformat, sizeof gformat, "* Te encuentras trabajando en '%s' como %s, usa /renunciar.", InfoNegocio[neg][nNombre], GetNameContrato(neg));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
		return 1;
	}
	new dialog[3084], tipo = -1, Count = 0, gformat4[320];
	switch (listitem)
	{
		case 0: tipo = 6;
		case 1: tipo = 9;
		case 2: tipo = 13;
	}
 	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] == tipo && InfoNegocio[id][nEmpleo] == 1)
	{
		format(gformat4, sizeof gformat4, "%s\n", InfoNegocio[id][nNombre]);
		strcat(dialog, gformat4);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "idAplsdci%d", Count);
		SetPVarInt(playerid, gformat2, id);
		Count++;
	}
	if (Count == 0)
	{
		format(gformat, sizeof gformat, "* No hay negocios/empresas que busquen empleados como %s.", IsNameContrato(tipo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
	    return 1;
	}
	Dialog_Show(playerid, Job2Telefono, DIALOG_STYLE_LIST, IsNameContrato(tipo), dialog, "Unirse", "Volver");
	return 1;
}

Dialog:Job2Telefono(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_empleos(playerid);
	new ID = listitem, gformat[40], gstring[220];
	format(gformat, sizeof gformat, "idAplsdci%d", ID);
	new neg = GetPVarInt(playerid, gformat);
	//notificación
	foreach(Player, playerid2) if (usuario_registro[playerid2] == 2)
	{
		if (InfoPlayer[playerid2][pNegocio1] == neg)
		{
			format(gstring, sizeof gstring, "Notificación:{FFFFFF} %s es tu nuevo empleado en tu negocio (1) {FFBF00}%s", NombreOriginal(playerid), InfoNegocio[neg][nNombre]);
			SendClientMessage(playerid2, 0x54C822FF, gstring);
		}
		if (InfoPlayer[playerid2][pNegocio2] == neg)
		{
			format(gstring, sizeof gstring, "Notificación:{FFFFFF} %s es tu nuevo empleado en tu negocio (2) {FFBF00}%s", NombreOriginal(playerid), InfoNegocio[neg][nNombre]);
			SendClientMessage(playerid2, 0x54C822FF, gstring);
		}
	}
	new type = InfoNegocio[neg][nTipo];
	format(gstring, sizeof gstring, "Ahora formas parte de {FFBF00}%s{FFFFFF} como {54C822}%s{FFFFFF}.", InfoNegocio[neg][nNombre], IsNameContrato(type));
	SendClientMessage(playerid, 0xFFFFFFFF, gstring);
	SendClientMessage(playerid, 0xFFFFFFFF, "Para más información ({FFBF00}/ayuda contrato{FFFFFF}), puedes usar {FFBF00}/renunciar{FFFFFF} para dejar el empleo.");
	InfoPlayer[playerid][pContrato] = neg;
	guardar_int_mysql("cuentas", "Contrato", InfoPlayer[playerid][pID], InfoPlayer[playerid][pContrato]);
	return 1;
}

CMD:graffiti(playerid)
{
	if (!member_faccion(playerid, 7)) return SendClientMessage(playerid, COLOR_GREY, "No formas parte de una pandilla.");
	if (no_tiene_manos(playerid, 36) == 0) return 1;
	new dialog[2048];
	strcat(dialog, "{F80101}INFORMACIÓN:\n");
	strcat(dialog, "{EBEBEB}Se utiliza una plantilla especial BBcode para el formato de mensajes usando un sistema (c).\n\n");
	strcat(dialog, "{EBEBEB}	(n) Para una nueva línea.\n");
	strcat(dialog, "{EBEBEB}	Colores: {0000FF}(a): Azul, {FFFFFF}(b): Blanco, {FFFF00}(am): Amarillo, {00C200}(v): Verde\n");
	strcat(dialog, "{EBEBEB}	{EBEBEB}(ne): Negro, {FFBF00}(na): Naranja, {FF0000}(r): Rojo, {00FFFF}(ce): Celeste\n\n");
	strcat(dialog, "{EBEBEB}[USO] Esto hará que (v){00C200}palabra{EBEBEB}(b) sea verde y el resto blanco.\n\n");
	strcat(dialog, "{EBEBEB}- Trate de que su texto no sea tan largo. El máximo es de 60 caracteres.\n");
	Dialog_Show(playerid, GraffitiPersonalizado, DIALOG_STYLE_INPUT, "Escribe lo que quieras", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:GraffitiPersonalizado(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (strlen(inputtext) > 60 || strlen(inputtext) < 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "Su graffiti personalizadono puede tener menos de 4 o más de 60 carácteres.");
		return cmd_graffiti(playerid);
	}
	SetPVarInt(playerid, "LetraGraffiti", 10);
	SetPVarInt(playerid, "SetraGraffiti", 10);
	SetPVarString(playerid, "TextoGraffiti", inputtext);
	new text[256];
	format(text, sizeof text, "Graffiti actual: {EBEBEB}%s", inputtext);
	SendClientMessage(playerid, 0xFFBF00FF, text);
	SendClientMessage(playerid, 0xA9D159FF, "Ahora puedes pintar cualquier punto de graffiti, sólo rocia la pared con tu spray!");
	return 1;
}

CMD:vergraffitis(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new pro[500], pro2[3024], tgraffitis = 0;
	//indice
	strcat(pro2, "(id) Mensaje\tCreador\tFecha\n");
	Loop(id, MAX_GRAFFITIS, 1) if (InfoGraffiti[id][gr_PosX])
	{
	    if (InfoGraffiti[id][gr_Fecha] == 0) format(pro, sizeof pro, "{EBEBEB}(%d) Sin pintar uwu\n", id);
		else format(pro, sizeof pro, "{EBEBEB}(%d) %.20s\t{FFBF00}%s\t{00CC00}%s\n", id, InfoGraffiti[id][gr_Mensaje], InfoGraffiti[id][gr_Creador], Segundos_tiempo(gettime() - InfoGraffiti[id][gr_Fecha]));
		strcat(pro2, pro);
		format(pro, sizeof pro, "e_graffiti%d", tgraffitis);
		SetPVarInt(playerid, pro, id);
		tgraffitis++;
	}
	if (tgraffitis != 0) Dialog_Show(playerid, AdminGraffiti, DIALOG_STYLE_TABLIST_HEADERS, "Graffitis", pro2, "Continuar", "Salir");
	else Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Graffitis", "{EBEBEB}No hay ningún graffiti creados.", "Cerrar", "");
	SetPVarInt(playerid, "z_graffs", 1);
	return 1;
}
CMD:graffitis(playerid) return cmd_vergraffitis(playerid);

Dialog:AdminGraffiti(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (GetPVarInt(playerid, "z_graffs") == 1)
	{
		new ID = listitem, StrPVar[40];
		format(StrPVar, sizeof StrPVar, "e_graffiti%d", ID);
		new i = GetPVarInt(playerid, StrPVar);
		if (InfoPlayer[playerid][pAdmin] < 1) return Dialog_Show(playerid, AdminGraffiti, DIALOG_STYLE_LIST, "Graffitis", "Ir", "Continuar", "Volver");
		else Dialog_Show(playerid, AdminGraffiti, DIALOG_STYLE_LIST, "Graffitis", "Ir\nEditar coordenadas\nLimpiar\nBorrar coordenadas", "Continuar", "Volver");
		SetPVarInt(playerid, "z_graffs", 2);
		SetPVarInt(playerid, "grafs", i);
		return 1;
	}
	else if (GetPVarInt(playerid, "z_graffs") == 2)
	{
		if (!response) return cmd_vergraffitis(playerid);
		new i = GetPVarInt(playerid, "grafs");
		new gformat[512];
		switch (listitem)
		{
			case 0: // ir
				SetPosEx(playerid, InfoGraffiti[i][gr_PosX], InfoGraffiti[i][gr_PosY], InfoGraffiti[i][gr_PosZ], 0.0, InfoGraffiti[i][gr_Interior], InfoGraffiti[i][gr_VirtualWorld], 1);
			case 1: // editar
			{
				edicion_sql_actual[playerid] = i;
				EditDynamicObject(playerid, InfoGraffiti[i][gr_Objeto]);
				InfoPlayer[playerid][pEditingMode] = 13;
			}
			case 2: // limpiar
			{
				alm(InfoGraffiti[i][gr_Mensaje], "ninguno");
				alm(InfoGraffiti[i][gr_Creador], "ninguno");
				InfoGraffiti[i][gr_Fecha] = 0;
				DestroyDynamicObject(InfoGraffiti[i][gr_Objeto]);
				InfoGraffiti[i][gr_Objeto] = CreateDynamicObject(18665, InfoGraffiti[i][gr_PosX], InfoGraffiti[i][gr_PosY], InfoGraffiti[i][gr_PosZ], InfoGraffiti[i][gr_RotX], InfoGraffiti[i][gr_RotY], InfoGraffiti[i][gr_RotZ], -1, 0, -1, 6000.0);
				mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE graffitis SET Mensaje = '%e', Creador = '%e', Fecha = '%d' WHERE ID = '%d'", InfoGraffiti[i][gr_Mensaje], InfoGraffiti[i][gr_Creador], InfoGraffiti[i][gr_Fecha], InfoGraffiti[i][grID_sql]);
				mysql_tquery(DBcreative, gformat);
				Streamer_Update(playerid);
			}
			case 3: // borrar
			{
				alm(InfoGraffiti[i][gr_Mensaje], "ninguno");
				alm(InfoGraffiti[i][gr_Creador], "ninguno");
				InfoGraffiti[i][gr_Fecha] = 0;
				InfoGraffiti[i][gr_PosX] = 0.0;
				InfoGraffiti[i][gr_PosY] = 0.0;
				InfoGraffiti[i][gr_PosZ] = 0.0;
				InfoGraffiti[i][gr_RotX] = 0.0;
				InfoGraffiti[i][gr_RotY] = 0.0;
				InfoGraffiti[i][gr_RotZ] = 0.0;
			    InfoGraffiti[i][gr_Interior] = 0;
			    InfoGraffiti[i][gr_VirtualWorld] = 0;
				InfoGraffiti[i][gr_Fecha] = 0;
				DestroyDynamicObject(InfoGraffiti[i][gr_Objeto]);
				new query[1024];
				mysql_format(DBcreative, query, sizeof query, "UPDATE graffitis SET Mensaje = '%e', Creador = '%e', Fecha = '%d', PotX = 0.0, PotY = 0.0, PotZ = 0.0, RotX = 0.0, RotY = 0.0, RotZ = 0.0, Interior = 0, VirtualWorld = 0 WHERE ID = '%d'",
				InfoGraffiti[i][gr_Mensaje], InfoGraffiti[i][gr_Creador], InfoGraffiti[i][gr_Fecha], InfoGraffiti[i][grID_sql]);
				mysql_tquery(DBcreative, query);
				format(gformat, sizeof gformat, "Borraste el graffiti ID %d, SQL vacía: %d", i, InfoGraffiti[i][grID_sql]);
				SendClientMessage(playerid, -1, gformat);
				Streamer_Update(playerid);
			}
		}
	}
	return 1;
}

CMD:creargraffiti(playerid)
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (InfoPlayer[playerid][pEditingMode] != 0) return SendClientMessage(playerid, COLOR_GREY, "Estás editando un objeto.");
	new objeto = -1;
	Loop(a, MAX_GRAFFITIS, 1) if (InfoGraffiti[a][gr_PosX] == 0.0)
	{
		objeto = a;
		break;
	}
	if (objeto == -1) return SendClientMessage(playerid, COLOR_GREY, "Se alcanzó el límite de graffitis. (Max: 50)");
	GetPlayerPos(playerid, InfoGraffiti[objeto][gr_PosX], InfoGraffiti[objeto][gr_PosY], InfoGraffiti[objeto][gr_PosZ]);
	InfoGraffiti[objeto][gr_Interior] = GetPlayerInterior(playerid);
	InfoGraffiti[objeto][gr_VirtualWorld] = GetPlayerVirtualWorld(playerid);
	InfoGraffiti[objeto][gr_Objeto] = CreateDynamicObject(18665, InfoGraffiti[objeto][gr_PosX], InfoGraffiti[objeto][gr_PosY], InfoGraffiti[objeto][gr_PosZ], 0.0, 0.0, 0.0, InfoGraffiti[objeto][gr_VirtualWorld], InfoGraffiti[objeto][gr_Interior], -1, 6000.0);
	EditDynamicObject(playerid, InfoGraffiti[objeto][gr_Objeto]);
	edicion_sql_actual[playerid] = objeto;
	InfoPlayer[playerid][pEditingMode] = 13;
	SendClientMessage(playerid, -1, "Mantén presionado {589DA0}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara y editar mejor el graffiti.");
	return 1;
}

CMD:tallerpd(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1549.3959, -1698.3270, 5.8906)) return SendClientMessage(playerid, COLOR_GREY, "* No estás cerca del taller policial.");
	if (!member_faccion(playerid, 1, 4)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de LSPD o SASD.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Debes ser el conductor un vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!Vehiculo_LSPD(vehicleid) && !Vehiculo_SASD(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "* Debes estar dentro de un vehículo LSPD o SASD.");
	Dialog_Show(playerid, TallerPolicial, DIALOG_STYLE_LIST, "{D6E1EB}Taller policial", "Motor + Carrocería\n200 litros de gasolina", "Seleccionar", "Salir");
	return 1;
}

Dialog:TallerPolicial(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1549.3959, -1698.3270, 5.8906)) return SendClientMessage(playerid, COLOR_GREY, "* No estás cerca del taller policial.");
	if (!member_faccion(playerid, 1, 4)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de LSPD o SASD.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Debes ser el conductor un vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!Vehiculo_LSPD(vehicleid) && !Vehiculo_SASD(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "* Debes estar dentro de un vehículo LSPD o SASD.");
	switch (listitem)
	{
		case 0: //reparación
		{
			new Float: cvida;
			GetVehicleHealth(vehicleid, cvida);
			if (cvida >= 990.0) return SendClientMessage(playerid, COLOR_GREY, "* El health (/dl) del vehículo pasa los 990.");
			RepairVehicle(vehicleid);
			if (GetVehicleModel(vehicleid) == 528 || GetVehicleModel(vehicleid) == 427) SetVehicleHealth(vehicleid, 5000.0);
			else SetVehicleHealth(vehicleid, 1000.0);
			cmd_me(playerid, "pide al mecánico policial que repare su vehículo");
		}
		case 1:
		{
			if (veh_gasolina[vehicleid] >= 199) return SendClientMessage(playerid, COLOR_GREY, "* El tanque de gasolina del vehículo no aguanta más de 200 litros.");
			veh_gasolina[vehicleid] = 200;
			Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
			{
				InfoVehiculo[v][vGasolina] = veh_gasolina[vehicleid];
				guardar_int_mysql("vehiculos", "Gasolina", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vGasolina]);
				break;
			}
			cmd_me(playerid, "pide al mecánico policial que llene de combustible su vehículo");
		}
	}
	return 1;
}

CMD:veh_sirena(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new vehicleid, string[160], Float: vehx, Float: vehy, Float: vehz, Float: vehr;
	if (sscanf(params, "d", vehicleid)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /veh_sirena (VehiculoID) [para saber ID exacta acercate al vehículo con /dl]");
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		if (AnibleVeh(v) == 0) return SendClientMessage(playerid, COLOR_GREY, "Sólo puedes agregar sirena en vehículos LSPD/FBI/SAEM/SASD.");
		if (InfoVehiculo[v][vSirena] == 0)
		{
			format(string, sizeof string, "Colocaste sonido de sirena en el %s de %s.", GetNameVehicle(InfoVehiculo[v][vModelo]), InfoVehiculo[v][vPropietario]);
			InfoVehiculo[v][vSirena] = 1;
		}
		else
		{
			format(string, sizeof string, "Retiraste sonido de sirena del %s de %s.", GetNameVehicle(InfoVehiculo[v][vModelo]), InfoVehiculo[v][vPropietario]);
			InfoVehiculo[v][vSirena] = 0;
		}
		SendClientMessage(playerid, COLOR_YELLOW, string);
		guardar_int_mysql("vehiculos", "Sirena", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vSirena]);
		GetVehicleHealth(vehicleid, InfoVehiculo[v][vVida]);
		GetVehicleDamageStatus(vehicleid, InfoVehiculo[v][vDanioSuperficie], InfoVehiculo[v][vDanioPuertas], InfoVehiculo[v][vDanioLuces], InfoVehiculo[v][vDanioRuedas]);
		GetVehiclePos(vehicleid, vehx, vehy, vehz);
		GetVehicleZAngle(vehicleid, vehr);
		DestroyVehicle(vehicleid);
		InfoVehiculo[v][vIG_id] = CreateVehicle(InfoVehiculo[v][vModelo], vehx, vehy, vehz, vehr, InfoVehiculo[v][vColor_1], InfoVehiculo[v][vColor_2], -1, InfoVehiculo[v][vSirena]);
		new v_vehicleid = InfoVehiculo[v][vIG_id];
		if (InfoVehiculo[v][vSeguro] != 0) LockPlayerVehicle(v_vehicleid);
		if (InfoVehiculo[v][vPaintJob] != -1) ChangeVehiclePaintjob(v_vehicleid, InfoVehiculo[v][vPaintJob]);
		LinkVehicleToInterior(v_vehicleid, InfoVehiculo[v][vInterior]);
		SetVehicleExVirtualWorld(v_vehicleid, InfoVehiculo[v][vVirtualWorld]);
		if (InfoVehiculo[v][vModelo] == 528 || InfoVehiculo[v][vModelo] == 427) SetVehicleHealth(v_vehicleid, 5000.0);
		else SetVehicleHealth(v_vehicleid, InfoVehiculo[v][vVida]);
		UpdateVehicleDamageStatus(v_vehicleid, InfoVehiculo[v][vDanioSuperficie], InfoVehiculo[v][vDanioPuertas], InfoVehiculo[v][vDanioLuces], InfoVehiculo[v][vDanioRuedas]);
		Loop(m, MAX_MODIFICACIONES, 0) { AddVehicleComponent(v_vehicleid, InfoVehiculo[v][vModificacion][m]); }
		if (!isnull(InfoVehiculo[v][vCallSign]))
		{
			DestroyDynamic3DTextLabel(InfoVehiculo[v][vOnCallSign]);
			InfoVehiculo[v][vOnCallSign] = CreateDynamic3DTextLabel(InfoVehiculo[v][vCallSign], 0xEBEBEBFF, -1.0, -2.8, 0.0, 30.0, INVALID_PLAYER_ID, v_vehicleid);
		}
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Ese vehículo no está spawneado o no existe.");
	return 1;
}

CMD:adminfac(playerid)
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	SendClientMessage(playerid, COLOR_YELLOW, "/facciones - /crearfaccion - /statusfacc - /facchat - /supervisar - /hacerlider - /hacersublider");
	SendClientMessage(playerid, COLOR_YELLOW, "/borrarfaccion - /darmiembro - /limpiarfaccion - /editarfnombre - /editarfequipo - /qfaccoff");
	SendClientMessage(playerid, COLOR_YELLOW, "/editarfaccion - /editarflogo - /editarflider - /editarfsublider - /editarfskin");
	return 1;
}
CMD:adminfacciones(playerid) return cmd_adminfac(playerid);

CMD:borraranuncios(playerid)
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new count = 0, string[190];
	if (strcmp(AnunceString1, "none", true) == 0) { } else { count++; }
	if (strcmp(AnunceString2, "none", true) == 0) { } else { count++; }
	if (strcmp(AnunceString3, "none", true) == 0) { } else { count++; }
	if (strcmp(AnunceString4, "none", true) == 0) { } else { count++; }
	if (count != 0)
	{
		AnunceID = 0;
		alm(AnunceString1, "none");
		alm(AnunceString2, "none");
		alm(AnunceString3, "none");
		alm(AnunceString4, "none");
		Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2))
		{
			PlayerViewAnunce[playerid2] = 0;
			Loop(x, 5, 0) { TextDrawHideForPlayer(playerid2, TD_Anuncio[x]); }
		}
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) borró %d anuncios.", NombreOriginal(playerid), playerid, count);
		SendAdminMessage(0xFFFFFFFF, string);
		DiferenciaAnuncio = gettime();
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "* No hay ningún anuncio publicado.");
	return 1;
}

CMD:ad(playerid)
{
	if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_GREY, "* Debes jugar al menos dos horas el servidor para enviar anuncios.");
	if (InfoPlayer[playerid][pBlockAD] == 1) return SendClientMessage(playerid, COLOR_GREY, "* Estás bloqueado del sistema de anuncios, contacta un administrador sobre esto.");
	if (InfoPlayer[playerid][pSancionado] != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás en prisión.");
	new string[190], d_anuncie[1028];
	if (InfoPlayer[playerid][pTimerAnuncios] != 0)
	{
		format(string, sizeof string, "Debes esperar %d minutos para enviar otro anuncio.", InfoPlayer[playerid][pTimerAnuncios]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	if (GetPlayerCash(playerid) < TaxAnuncios) return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	if (!CheckTimer(60, DiferenciaAnuncio))
	{
		strcat(d_anuncie, "Tipo\tUso\n");
		strcat(d_anuncie, "{FFBF00}COMERCIO\t{EBEBEB}Compras/ventas/alquileres o similares.\n");
		strcat(d_anuncie, "{FFBF00}EVENTOS\t{EBEBEB}Para anunciar eventos.\n");
		strcat(d_anuncie, "{FFBF00}SORTEOS\t{EBEBEB}Para anunciar sorteos.\n");
		strcat(d_anuncie, "{FFBF00}EMPLEOS\t{EBEBEB}Para buscar o ofrecer empleo.\n");
		strcat(d_anuncie, "{FFBF00}SERVICIOS\t{EBEBEB}Para buscar o ofrecer servicios.");
		Dialog_Show(playerid, ShowAnuncio, DIALOG_STYLE_TABLIST_HEADERS, "Elige el tipo de anuncio a enviar", d_anuncie, "Continuar", "Salir");
	}
	else
	{
		format(string, sizeof string, "Faltan %d segundos para poder enviar otro anuncio global.", CheckTimer(60, DiferenciaAnuncio));
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	return 1;
}
CMD:ads(playerid) return cmd_ad(playerid);
CMD:anuncio(playerid) return cmd_ad(playerid);
CMD:anuncios(playerid) return cmd_ad(playerid);

Dialog:ShowAnuncio(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new tipo = listitem+1, string[512];
	new name_tipo[32];
	switch (tipo)
	{
		case 1: name_tipo = "Comercio";
		case 2: name_tipo = "Eventos";
		case 3: name_tipo = "Sorteos";
		case 4: name_tipo = "Empleos";
		case 5: name_tipo = "Servicios";
	}
	if (GetPlayerCash(playerid) < TaxAnuncios) return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	tipo_anuncio[playerid] = tipo;
	format(string, sizeof string, "{EBEBEB}Bien has elegido el tipo {FFBF00}%s{EBEBEB}.\n\nA continuación escribe el enunciado a publicar:", name_tipo);
	Dialog_Show(playerid, Show2Anuncio, DIALOG_STYLE_INPUT, "Anuncio global", string, "Enviar", "Volver");
	return 1;
}

Dialog:Show2Anuncio(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_ads(playerid);
	if (!strlen(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No escribiste nada, intentalo de nuevo.");
	if (strlen(inputtext) > 65 || strlen(inputtext) < 10)
	{
		SendClientMessage(playerid, COLOR_GREY, "* No puedes escribir un anuncio con menos de 10 carácteres ni mayor a 64 carácteres.");
		return 1;
	}
	if (!IsValidCaracterAnunce(inputtext))
	{
		SendClientMessage(playerid, COLOR_GREY, "* Su anuncio sólo puede contener letras, números y estos simbolos '[].,_()$'.");
		return 1;
	}
	if (GetPlayerCash(playerid) < TaxAnuncios) return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	new tipo = tipo_anuncio[playerid], name_tipo[64], string[512];
	switch (tipo)
	{
		case 1: name_tipo = "~g~~h~[Comercio LS]~w~~h~~h~";
		case 2: name_tipo = "~p~[Eventos LS]~w~~h~~h~";
		case 3: name_tipo = "~r~~h~[Sorteos LS]~w~~h~~h~";
		case 4: name_tipo = "~y~[Empleos LS]~w~~h~~h~";
		case 5: name_tipo = "~b~~h~~h~[Servicios LS]~w~~h~~h~";
	}
	format(string, sizeof string, "%s%s ~g~~h~~h~Móvil: %d", name_tipo, inputtext, InfoPlayer[playerid][pTelefono]);
	RegistrarAnuncio(string); // register anunce
	DiferenciaAnuncio = gettime();
	format(string, sizeof string, "Anuncio por %s (ID: %d)", NombreOriginal(playerid), playerid);
	SendAdminMessage(0xF7FE2EFF, string);
	GivePlayerCash(playerid, -TaxAnuncios, "anuncio");
	FondosAnuncios += TaxAnuncios;
	InfoPlayer[playerid][pTimerAnuncios] = 10;
	guardar_int_mysql("cuentas", "TimerAnuncios", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTimerAnuncios]);
	return 1;
}

RegistrarAnuncio(string[])
{
	TextDrawSetStringEx(TD_Anuncio[0], string);
	if (AnunceID == 0)
	{
		if (strcmp(AnunceString1, "none", true) == 0)
		{
			alm(AnunceString1, string);
		}
		else
		{
			TextDrawSetStringEx(TD_Anuncio[1], AnunceString1);
			TextDrawSetStringEx(TD_Anuncio[2], AnunceString2);
			TextDrawSetStringEx(TD_Anuncio[3], AnunceString3);
			TextDrawSetStringEx(TD_Anuncio[4], AnunceString4);
			alm(AnunceString4, AnunceString3);
			alm(AnunceString3, AnunceString2);
			alm(AnunceString2, AnunceString1);
			alm(AnunceString1, string);
		}
		AnunceID = 1;
	}
	else if (AnunceID == 1)
	{
		if (strcmp(AnunceString2, "none", true) == 0)
		{
			TextDrawSetStringEx(TD_Anuncio[1], AnunceString1);
			alm(AnunceString2, AnunceString1);
			alm(AnunceString1, string);
		}
		else
		{
			TextDrawSetStringEx(TD_Anuncio[1], AnunceString1);
			TextDrawSetStringEx(TD_Anuncio[2], AnunceString2);
			TextDrawSetStringEx(TD_Anuncio[3], AnunceString3);
			TextDrawSetStringEx(TD_Anuncio[4], AnunceString4);
			alm(AnunceString4, AnunceString3);
			alm(AnunceString3, AnunceString2);
			alm(AnunceString2, AnunceString1);
			alm(AnunceString1, string);
		}
		AnunceID = 2;
	}
	else if (AnunceID == 2)
	{
		if (strcmp(AnunceString3, "none", true) == 0)
		{
			TextDrawSetStringEx(TD_Anuncio[1], AnunceString1);
			TextDrawSetStringEx(TD_Anuncio[2], AnunceString2);
			alm(AnunceString3, AnunceString2);
			alm(AnunceString2, AnunceString1);
			alm(AnunceString1, string);
		}
		else
		{
			TextDrawSetStringEx(TD_Anuncio[1], AnunceString1);
			TextDrawSetStringEx(TD_Anuncio[2], AnunceString2);
			TextDrawSetStringEx(TD_Anuncio[3], AnunceString3);
			TextDrawSetStringEx(TD_Anuncio[4], AnunceString4);
			alm(AnunceString4, AnunceString3);
			alm(AnunceString3, AnunceString2);
			alm(AnunceString2, AnunceString1);
			alm(AnunceString1, string);
		}
		AnunceID = 3;
	}
	else if (AnunceID == 3)
	{
		if (strcmp(AnunceString4, "none", true) == 0)
		{
			TextDrawSetStringEx(TD_Anuncio[1], AnunceString1);
			TextDrawSetStringEx(TD_Anuncio[2], AnunceString2);
			TextDrawSetStringEx(TD_Anuncio[3], AnunceString3);
			alm(AnunceString4, AnunceString3);
			alm(AnunceString3, AnunceString2);
			alm(AnunceString2, AnunceString1);
			alm(AnunceString1, string);
		}
		else
		{
			TextDrawSetStringEx(TD_Anuncio[1], AnunceString1);
			TextDrawSetStringEx(TD_Anuncio[2], AnunceString2);
			TextDrawSetStringEx(TD_Anuncio[3], AnunceString3);
			TextDrawSetStringEx(TD_Anuncio[4], AnunceString4);
			alm(AnunceString4, AnunceString3);
			alm(AnunceString3, AnunceString2);
			alm(AnunceString2, AnunceString1);
			alm(AnunceString1, string);
		}
		AnunceID = 4;
	}
	else if (AnunceID == 4)
	{
		TextDrawSetStringEx(TD_Anuncio[1], AnunceString1);
		TextDrawSetStringEx(TD_Anuncio[2], AnunceString2);
		TextDrawSetStringEx(TD_Anuncio[3], AnunceString3);
		TextDrawSetStringEx(TD_Anuncio[4], AnunceString4);
		alm(AnunceString4, AnunceString3);
		alm(AnunceString3, AnunceString2);
		alm(AnunceString2, AnunceString1);
		alm(AnunceString1, string);
		AnunceID = 0;
	}
	Loop(playerid, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid))
	{
		new numer = PlayerViewAnunce[playerid];
		if (numer != 5)
		{
			PlayerViewAnunce[playerid]++;
			if (InfoPlayer[playerid][pTogAnuncios] == 0)
				TextDrawShowForPlayer(playerid, TD_Anuncio[numer]);
		}
	}
    return 1;
}

stock IsValidCaracterAnunce(const password[])
{
    for(new i = 0; password[i] != EOS; ++i)
    {
        switch(password[i])
        {
            case '0'..'9', 'A'..'Z', 'a'..'z', '.', ',', '(', ')', '[', ']', ' ', '_', '$', 'ñ': continue;
            default: return 0;
        }
    }
    return 1;
}

CMD:irllamado(playerid, params[])
{
	new id = IsPlayerContrato(playerid, 9);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ningún taller mecánico.");
	if (LlegandoLlamadoMecanico[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "* Ya estás en un llamado de mecánico.");
	new playerid2, gformat[190];
	if (sscanf(params, "u", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /irllamado (JugadorID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (EnLlamadoMecanico[playerid2] == 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no solicita un mecánico.");
	Loop(playerid3, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid3) && PermisosContrato(playerid3, id) != 0)
	{
		format(gformat, sizeof gformat, "* %s aceptó el llamado de %s.", NombreJugador(playerid), NombreJugador(playerid2));
		SendClientMessage(playerid3, COLOR_LIGHTBLUE, gformat);
	}
	format(gformat, sizeof gformat, "* El mecánico %s aceptó tu llamado, espera en tu posición.", NombreJugador(playerid));
	SendClientMessage(playerid2, COLOR_LIGHTGREEN, gformat);
	new Float: PosOwO[3];
	GetPlayerPos(playerid2, PosOwO[0], PosOwO[1], PosOwO[2]);
	SetPlayerCheckpoint(playerid, PosOwO[0], PosOwO[1], PosOwO[2], 5.0);
	EnLlamadoMecanico[playerid2] = 0;
    LlegandoLlamadoMecanico[playerid] = 1;
	return 1;
}

CMD:mecanicos(playerid)
{
	new dialog_taller[2056], gformat[256], iCount = 0;
	if (EnLlamadoMecanico[playerid] != 0)
	{
		format(gformat, sizeof gformat, "* Ya has solicitado un mecánico, espera %d segundos para solicitar otro.", EnLlamadoMecanico[playerid]);
		SendClientMessage(playerid, COLOR_GREY, gformat);
		return 1;
	}
	strcat(dialog_taller, "Taller\tEmpleados en servicio\n");
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] == 9)
	{
		format(gformat, sizeof gformat, "{EFEFEF}%s\t{00CC00}%d\n", InfoNegocio[id][nNombre], CountEmpleados(id));
		strcat(dialog_taller, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "idTallers%d", iCount);
		SetPVarInt(playerid, gformat2, id);
		iCount++;
	}
	if (iCount == 0) return SendClientMessage(playerid, COLOR_WHITE, "No hay ningún taller existente.");
	Dialog_Show(playerid, ServiciosMecanicos, DIALOG_STYLE_TABLIST_HEADERS, "Talleres de la ciudad", dialog_taller, "Llamar", "Salir");
	return 1;
}

Dialog:ServiciosMecanicos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40], gstring[220];
	format(gformat, sizeof gformat, "idTallers%d", ID);
	new neg = GetPVarInt(playerid, gformat);
	if (CountEmpleados(neg) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No hay ningún empleado en servicio en ese taller.");
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2) && PermisosContrato(playerid2, neg) != 0)
	{
		format(gstring, sizeof gstring, "** %s solicita un mecánico en su posición. (/irllamado %d) **", NombreJugador(playerid), playerid);
		SendClientMessage(playerid2, COLOR_LIGHTBLUE, gstring);
	}
	format(gstring, sizeof gstring, "Has solicitado un mecánico del taller %s.", InfoNegocio[neg][nNombre]);
	SendClientMessage(playerid, COLOR_LIGHTRED, gstring);
	EnLlamadoMecanico[playerid] = 120;
	return 1;
}

CMD:mostrarprecios(playerid, params[])
{
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (InfoNegocio[id][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio no es un taller mecánico.");
	if (PermisosContrato(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en este taller mecánico.");
	new playerid2, dialog_taller[2056], gformat[256];
	if (sscanf(params, "u", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /mostrarprecios (JugadorID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	strcat(dialog_taller, "Servicio\tCosto máximo\n");
	format(gformat, sizeof gformat, "{EFEFEF}Pintura\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioPintura]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}PaintJob\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioPaintJob]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Reparación\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioReparacion]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Gasolina\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioGasolina]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Llantas\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioLlantas]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Nitro\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioNitro]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Hidráulica\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioHyd]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Tunning carroceria\t{00CC00}$%s", diner_coma(InfoNegocio[id][nPrecioTuneo]));
	strcat(dialog_taller, gformat);
	Dialog_Show(playerid2, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, "Precios del taller:", dialog_taller, "Cerrar", "");
	format(gformat, sizeof gformat, "le muestra los precios del taller a %s", NombreJugador(playerid2));
	if (playerid != playerid2) cmd_me(playerid, gformat);
	return 1;
}

CMD:tuneo(playerid, params[])
{
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (InfoNegocio[id][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio no es un taller mecánico.");
 	if (PermisosContrato(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en este taller mecánico.");
	new playerid2, costo, gformat[190];
	if (sscanf(params, "ud", playerid2, costo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /tuneo (JugadorID) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (TallerMecanico[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador tiene una oferta de servicio mecánico pendiente.");
	if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no esta dentro de un vehículo como conductor.");
	new vehicleid = GetPlayerVehicleID(playerid2);
	if (!eEnvcvehs(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo se le puede tunear la carrocería.");
	new minimocost = MinimoPrecioTaller(8), maximocost = InfoNegocio[id][nPrecioTuneo];
	if (costo < minimocost || costo > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por tuneo es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	TallerCliente[playerid] = playerid2;
	TallerMecanico[playerid2] = playerid;
	TallerCosto[playerid2] = costo;
	ID_Taller_Cobro[playerid2] = id;
	ID_Veh_Cobro[playerid2] = vehicleid;
	Dialog_Show(playerid, Show_TuneoMecanico, DIALOG_STYLE_LIST, "Menú de Tuneo", "- Chasis X-Flow\n- Chasis Alien", "Continuar", "Salir");
	return 1;
}
CMD:tunear(playerid, params[]) return cmd_tuneo(playerid, params);

Dialog:Show_TuneoMecanico(playerid, response, listitem, inputtext[])
{
	new cliente = TallerCliente[playerid];
	new costo = TallerCosto[cliente], vehicleid = ID_Veh_Cobro[cliente], gformat[234];
	if (!IsPlayerConnectedEx(cliente))
	{
		TallerCliente[playerid] = -1;
		SendClientMessage(playerid, COLOR_GREY, "* El cliente se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerCliente[playerid] = -1;
		TallerMecanico[cliente] = -1;
		TallerCosto[cliente] = 0;
		ID_Taller_Cobro[cliente] = -1;
		ID_Veh_Cobro[cliente] = 0;
		format(gformat, sizeof gformat, "* %s canceló el servicio de tuneo.", NombreJugador(playerid));
		SendClientMessage(cliente, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Cancelaste el servicio de tuneo.");
		return 1;
	}
	if (GetPlayerCash(cliente) < costo)
	{
		TallerCliente[playerid] = -1;
		TallerMecanico[cliente] = -1;
		TallerCosto[cliente] = 0;
		ID_Taller_Cobro[cliente] = -1;
		ID_Veh_Cobro[cliente] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(cliente, COLOR_GREY, gformat);
		SendClientMessage(playerid, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	new name_tuneo[32];
	switch (listitem)
	{
		case 0: alm(name_tuneo, "Chasis X-Flow");
		case 1: alm(name_tuneo, "Chasis Alien");
	}
	TallerColor1[cliente] = listitem;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece tuneo '%s' para tu {FFBF00}%s{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), name_tuneo, GetVehicleName(vehicleid), diner_coma(costo));
	Dialog_Show(cliente, VentaTuneo, DIALOG_STYLE_MSGBOX, "Chasis nuevo", gdsdu, "Continuar", "Salir");
	return 1;
}

Dialog:VentaTuneo(playerid, response, listitem, inputtext[])
{
	new mecanico = TallerMecanico[playerid], costo = TallerCosto[playerid], neg = ID_Taller_Cobro[playerid], vehicleid = ID_Veh_Cobro[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* El mecánico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* %s rechazó el servicio de tuneo.", NombreJugador(playerid));
		SendClientMessage(mecanico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste el servicio de tuneo.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(mecanico, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	new name_tuneo[32];
	switch (TallerColor1[playerid])
	{
		case 0: alm(name_tuneo, "Chasis X-Flow");
		case 1: alm(name_tuneo, "Chasis Alien");
	}
	AplicarTuneo(vehicleid, TallerColor1[playerid]);
	if (EsteVehEs(playerid, vehicleid) > -1) { ActualizarMods(EsteVehEs(playerid, vehicleid)); }
	format(gformat, sizeof gformat, "coloca %s al vehículo %s de %s", name_tuneo, GetVehicleName(vehicleid), NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "servicio tuneo");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio de %s de %s.", diner_coma(costo/2), name_tuneo, NombreJugador(playerid));
	SendClientMessage(mecanico, COLOR_GREEN, gformat);
	GivePlayerCash(mecanico, costo/2, "servicio tuneo");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	TallerMecanico[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
	return 1;
}

AplicarTuneo(idcar, type)
{
	if (type == 0)
	{
		switch (GetVehicleModel(idcar))
		{
			case 560:
			{
				AddVehicleComponent(idcar, 1030);
				AddVehicleComponent(idcar, 1033);
				AddVehicleComponent(idcar, 1140);
				AddVehicleComponent(idcar, 1170);
				AddVehicleComponent(idcar, 1029);
				AddVehicleComponent(idcar, 1139);
			}
			case 562:
			{
				AddVehicleComponent(idcar, 1039);
				AddVehicleComponent(idcar, 1035);
				AddVehicleComponent(idcar, 1148);
				AddVehicleComponent(idcar, 1172);
				AddVehicleComponent(idcar, 1037);
				AddVehicleComponent(idcar, 1146);
			}
			case 565:
			{
				AddVehicleComponent(idcar, 1048);
				AddVehicleComponent(idcar, 1053);
				AddVehicleComponent(idcar, 1050);
				AddVehicleComponent(idcar, 1151);
				AddVehicleComponent(idcar, 1152);
				AddVehicleComponent(idcar, 1045);
			}
			case 559:
			{
				AddVehicleComponent(idcar, 1070);
				AddVehicleComponent(idcar, 1068);
				AddVehicleComponent(idcar, 1158);
				AddVehicleComponent(idcar, 1161);
				AddVehicleComponent(idcar, 1173);
				AddVehicleComponent(idcar, 1066);
			}
			case 561:
			{
				AddVehicleComponent(idcar, 1057);
				AddVehicleComponent(idcar, 1061);
				AddVehicleComponent(idcar, 1060);
				AddVehicleComponent(idcar, 1156);
				AddVehicleComponent(idcar, 1157);
				AddVehicleComponent(idcar, 1059);
			}
			case 558:
			{
				AddVehicleComponent(idcar, 1093);
				AddVehicleComponent(idcar, 1091);
				AddVehicleComponent(idcar, 1163);
				AddVehicleComponent(idcar, 1167);
				AddVehicleComponent(idcar, 1165);
				AddVehicleComponent(idcar, 1089);
			}
		}
	}
	else if (type == 1)
	{
		switch (GetVehicleModel(idcar))
		{
			case 560:
			{
				AddVehicleComponent(idcar, 1026);
				AddVehicleComponent(idcar, 1032);
				AddVehicleComponent(idcar, 1138);
				AddVehicleComponent(idcar, 1141);
				AddVehicleComponent(idcar, 1169);
				AddVehicleComponent(idcar, 1028);
			}
			case 562:
			{
				AddVehicleComponent(idcar, 1036);
				AddVehicleComponent(idcar, 1038);
				AddVehicleComponent(idcar, 1149);
				AddVehicleComponent(idcar, 1171);
				AddVehicleComponent(idcar, 1034);
				AddVehicleComponent(idcar, 1147);
			}
			case 565:
			{
				AddVehicleComponent(idcar, 1047);
				AddVehicleComponent(idcar, 1054);
				AddVehicleComponent(idcar, 1049);
				AddVehicleComponent(idcar, 1150);
				AddVehicleComponent(idcar, 1153);
				AddVehicleComponent(idcar, 1046);
			}
			case 559:
			{
				AddVehicleComponent(idcar, 1069);
				AddVehicleComponent(idcar, 1067);
				AddVehicleComponent(idcar, 1162);
				AddVehicleComponent(idcar, 1159);
				AddVehicleComponent(idcar, 1160);
				AddVehicleComponent(idcar, 1065);
			}
			case 561:
			{
				AddVehicleComponent(idcar, 1056);
				AddVehicleComponent(idcar, 1055);
				AddVehicleComponent(idcar, 1058);
				AddVehicleComponent(idcar, 1154);
				AddVehicleComponent(idcar, 1153);
				AddVehicleComponent(idcar, 1064);
			}
			case 558:
			{
				AddVehicleComponent(idcar, 1094);
				AddVehicleComponent(idcar, 1088);
				AddVehicleComponent(idcar, 1164);
				AddVehicleComponent(idcar, 1168);
				AddVehicleComponent(idcar, 1166);
				AddVehicleComponent(idcar, 1092);
			}
		}
	}
	return 1;
}

CMD:hyd(playerid, params[])
{
	new neg = EnNegocio(playerid);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (InfoNegocio[neg][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio no es un taller mecánico.");
 	if (PermisosContrato(playerid, neg) == 0) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en este taller mecánico.");
	new playerid2, costo, gformat[190];
	if (sscanf(params, "ud", playerid2, costo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /hyd (JugadorID) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (TallerMecanico[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador tiene una oferta de servicio mecánico pendiente.");
	if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no esta dentro de un vehículo como conductor.");
	new vehicleid = GetPlayerVehicleID(playerid2);
	if (Valid_Vehicle_Nitro(GetVehicleModel(vehicleid)) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo no admite componente Hydraulics.");
	if (tiene_componente(1087, vehicleid) != 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo ya tiene componente Hydraulics.");
	new minimocost = MinimoPrecioTaller(7), maximocost = InfoNegocio[neg][nPrecioHyd];
	if (costo < minimocost || costo > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por Hydraulics es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	TallerMecanico[playerid2] = playerid;
	TallerCosto[playerid2] = costo;
	ID_Taller_Cobro[playerid2] = neg;
	ID_Veh_Cobro[playerid2] = vehicleid;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece Hydraulics para tu {FFBF00}%s{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), GetVehicleName(vehicleid), diner_coma(costo));
	Dialog_Show(playerid2, VentaHydraulics, DIALOG_STYLE_MSGBOX, "Hydraulics", gdsdu, "Continuar", "Salir");
	return 1;
}

Dialog:VentaHydraulics(playerid, response, listitem, inputtext[])
{
	new mecanico = TallerMecanico[playerid], costo = TallerCosto[playerid], neg = ID_Taller_Cobro[playerid], vehicleid = ID_Veh_Cobro[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* El mecánico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* %s rechazó el servicio de Hydraulics.", NombreJugador(playerid));
		SendClientMessage(mecanico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste el servicio de Hydraulics.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(mecanico, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	AddVehicleComponent(vehicleid, 1087);
	if (EsteVehEs(playerid, vehicleid) > -1) { ActualizarMods(EsteVehEs(playerid, vehicleid)); }
	format(gformat, sizeof gformat, "coloca Hydraulics al vehículo %s de %s", GetVehicleName(vehicleid), NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "servicio hydraulics");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio de Hydraulics de %s.", diner_coma(costo/2), NombreJugador(playerid));
	SendClientMessage(mecanico, COLOR_GREEN, gformat);
	GivePlayerCash(mecanico, costo/2, "servicio hydraulics");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	TallerMecanico[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
	return 1;
}

CMD:nitro(playerid, params[])
{
	new neg = EnNegocio(playerid);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (InfoNegocio[neg][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio no es un taller mecánico.");
 	if (PermisosContrato(playerid, neg) == 0) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en este taller mecánico.");
	new playerid2, costo, gformat[190];
	if (sscanf(params, "ud", playerid2, costo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /nitro (JugadorID) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (TallerMecanico[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador tiene una oferta de servicio mecánico pendiente.");
	if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no esta dentro de un vehículo como conductor.");
	new vehicleid = GetPlayerVehicleID(playerid2);
	if (Valid_Vehicle_Nitro(GetVehicleModel(vehicleid)) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo no admite componente nitro.");
	if (tiene_componente(1008, vehicleid) != 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo ya tiene componente nitro.");
	new minimocost = MinimoPrecioTaller(6), maximocost = InfoNegocio[neg][nPrecioNitro];
	if (costo < minimocost || costo > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por nitro es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	TallerMecanico[playerid2] = playerid;
	TallerCosto[playerid2] = costo;
	ID_Taller_Cobro[playerid2] = neg;
	ID_Veh_Cobro[playerid2] = vehicleid;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece nitro para tu {FFBF00}%s{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), GetVehicleName(vehicleid), diner_coma(costo));
	Dialog_Show(playerid2, VentaNitro, DIALOG_STYLE_MSGBOX, "Nitrous x5", gdsdu, "Continuar", "Salir");
	return 1;
}

Dialog:VentaNitro(playerid, response, listitem, inputtext[])
{
	new mecanico = TallerMecanico[playerid], costo = TallerCosto[playerid], neg = ID_Taller_Cobro[playerid], vehicleid = ID_Veh_Cobro[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* El mecánico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* %s rechazó el servicio de nitro.", NombreJugador(playerid));
		SendClientMessage(mecanico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste el servicio de nitro.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(mecanico, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	AddVehicleComponent(vehicleid, 1008);
	if (EsteVehEs(playerid, vehicleid) > -1) { ActualizarMods(EsteVehEs(playerid, vehicleid)); }
	format(gformat, sizeof gformat, "coloca Nitrous x5 al vehículo %s de %s", GetVehicleName(vehicleid), NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "servicio nitro");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio de Nitrous x5 de %s.", diner_coma(costo/2), NombreJugador(playerid));
	SendClientMessage(mecanico, COLOR_GREEN, gformat);
	GivePlayerCash(mecanico, costo/2, "servicio nitro");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	TallerMecanico[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
	return 1;
}

tiene_componente(componente, vehicleid)
{
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return 0;
	Loop(x, MAX_MODIFICACIONES, 0)
	{
		if (InfoVehiculo[id][vModificacion][x] == componente)
			return 1;
	}
	return 0;
}

CMD:llantas(playerid, params[])
{
	new neg = EnNegocio(playerid);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (InfoNegocio[neg][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio no es un taller mecánico.");
 	if (PermisosContrato(playerid, neg) == 0) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en este taller mecánico.");
	new playerid2, costo, gformat[190];
	if (sscanf(params, "ud", playerid2, costo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /llantas (JugadorID) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (TallerMecanico[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador tiene una oferta de servicio mecánico pendiente.");
	if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no esta dentro de un vehículo como conductor.");
	new vehicleid = GetPlayerVehicleID(playerid2);
	if (EstaEnAvion(vehicleid) || EstaEnBote(vehicleid) || EnMotos_Bicis(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "* No puedes colocar llantas en ese tipo de vehículo.");
	new minimocost = MinimoPrecioTaller(5), maximocost = InfoNegocio[neg][nPrecioLlantas];
	if (costo < minimocost || costo > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por llantas es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	TallerCliente[playerid] = playerid2;
	TallerMecanico[playerid2] = playerid;
	TallerCosto[playerid2] = costo;
	ID_Taller_Cobro[playerid2] = neg;
	ID_Veh_Cobro[playerid2] = vehicleid;
	Dialog_Show(playerid, Show_LlantasMecanico, DIALOG_STYLE_LIST, "Menú de llantas",
	"- Offroad Wheels\n\
	- Shadow Wheels\n\
	- Mega Wheels\n\
	- Rimshine Wheels\n\
	- Wires Wheels\n\
	- Classic Wheels\n\
	- Twist Wheels\n\
	- Cutter Wheels\n\
	- Stitch Wheels\n\
	- Grove Wheels\n\
	- Import Wheels\n\
	- Dollar Wheels\n\
	- Trance Wheels\n\
	- Atomic Wheels\n\
	- Ahab Wheels\n\
	- Virtual Wheels\n\
	- Access Wheels", "Continuar", "Salir");
	return 1;
}

Dialog:Show_LlantasMecanico(playerid, response, listitem, inputtext[])
{
	new cliente = TallerCliente[playerid];
	new costo = TallerCosto[cliente], vehicleid = ID_Veh_Cobro[cliente], gformat[234];
	if (!IsPlayerConnectedEx(cliente))
	{
		TallerCliente[playerid] = -1;
		SendClientMessage(playerid, COLOR_GREY, "* El cliente se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerCliente[playerid] = -1;
		TallerMecanico[cliente] = -1;
		TallerCosto[cliente] = 0;
		ID_Taller_Cobro[cliente] = -1;
		ID_Veh_Cobro[cliente] = 0;
		format(gformat, sizeof gformat, "* %s canceló el servicio de las llantas.", NombreJugador(playerid));
		SendClientMessage(cliente, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Cancelaste el servicio de las llantas.");
		return 1;
	}
	if (GetPlayerCash(cliente) < costo)
	{
		TallerCliente[playerid] = -1;
		TallerMecanico[cliente] = -1;
		TallerCosto[cliente] = 0;
		ID_Taller_Cobro[cliente] = -1;
		ID_Veh_Cobro[cliente] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(cliente, COLOR_GREY, gformat);
		SendClientMessage(playerid, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	new name_llantas[32], rin = -1;
	switch (listitem)
	{
		case 0: rin = 1025, alm(name_llantas, "Offroad Wheels");
		case 1: rin = 1073, alm(name_llantas, "Shadow Wheels");
		case 2: rin = 1074, alm(name_llantas, "Mega Wheels");
		case 3: rin = 1075, alm(name_llantas, "Rimshine Wheels");
		case 4: rin = 1076, alm(name_llantas, "Wires Wheels");
		case 5: rin = 1077, alm(name_llantas, "Classic Wheels");
		case 6: rin = 1078, alm(name_llantas, "Twist Wheels");
		case 7: rin = 1079, alm(name_llantas, "Cutter Wheels");
		case 8: rin = 1080, alm(name_llantas, "Stitch Wheels");
		case 9: rin = 1081, alm(name_llantas, "Grove Wheels");
		case 10: rin = 1082, alm(name_llantas, "Import Wheels");
		case 11: rin = 1083, alm(name_llantas, "Dollar Wheels");
		case 12: rin = 1084, alm(name_llantas, "Trance Wheels");
		case 13: rin = 1085, alm(name_llantas, "Atomic Wheels");
		case 14: rin = 1096, alm(name_llantas, "Ahab Wheels");
		case 15: rin = 1097, alm(name_llantas, "Virtual Wheels");
		case 16: rin = 1098, alm(name_llantas, "Access Wheels");
	}
	if (tiene_componente(rin, vehicleid) != 0)
	{
		TallerCliente[playerid] = -1;
		TallerMecanico[cliente] = -1;
		TallerCosto[cliente] = 0;
		ID_Taller_Cobro[cliente] = -1;
		ID_Veh_Cobro[cliente] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* Ese juego de llantas ya está instalado.");
		return 1;
	}
	TallerColor1[cliente] = listitem;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece llantas '%s' para tu {FFBF00}%s{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), name_llantas, GetVehicleName(vehicleid), diner_coma(costo));
	Dialog_Show(cliente, VentaLlantas, DIALOG_STYLE_MSGBOX, "Llantas nuevas", gdsdu, "Continuar", "Salir");
	return 1;
}

Dialog:VentaLlantas(playerid, response, listitem, inputtext[])
{
	new mecanico = TallerMecanico[playerid], costo = TallerCosto[playerid], neg = ID_Taller_Cobro[playerid], vehicleid = ID_Veh_Cobro[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* El mecánico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* %s rechazó el servicio de llantas.", NombreJugador(playerid));
		SendClientMessage(mecanico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste el servicio de llantas.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(mecanico, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	new name_llantas[32], rin = -1;
	switch (TallerColor1[playerid])
	{
		case 0: rin = 1025, alm(name_llantas, "Offroad Wheels");
		case 1: rin = 1073, alm(name_llantas, "Shadow Wheels");
		case 2: rin = 1074, alm(name_llantas, "Mega Wheels");
		case 3: rin = 1075, alm(name_llantas, "Rimshine Wheels");
		case 4: rin = 1076, alm(name_llantas, "Wires Wheels");
		case 5: rin = 1077, alm(name_llantas, "Classic Wheels");
		case 6: rin = 1078, alm(name_llantas, "Twist Wheels");
		case 7: rin = 1079, alm(name_llantas, "Cutter Wheels");
		case 8: rin = 1080, alm(name_llantas, "Stitch Wheels");
		case 9: rin = 1081, alm(name_llantas, "Grove Wheels");
		case 10: rin = 1082, alm(name_llantas, "Import Wheels");
		case 11: rin = 1083, alm(name_llantas, "Dollar Wheels");
		case 12: rin = 1084, alm(name_llantas, "Trance Wheels");
		case 13: rin = 1085, alm(name_llantas, "Atomic Wheels");
		case 14: rin = 1096, alm(name_llantas, "Ahab Wheels");
		case 15: rin = 1097, alm(name_llantas, "Virtual Wheels");
		case 16: rin = 1098, alm(name_llantas, "Access Wheels");
	}
	AddVehicleComponent(vehicleid, rin);
	if (EsteVehEs(playerid, vehicleid) > -1) { ActualizarMods(EsteVehEs(playerid, vehicleid)); }
	format(gformat, sizeof gformat, "coloca %s al vehículo %s de %s", name_llantas, GetVehicleName(vehicleid), NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "servicio llantas");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio de %s de %s.", diner_coma(costo/2), name_llantas, NombreJugador(playerid));
	SendClientMessage(mecanico, COLOR_GREEN, gformat);
	GivePlayerCash(mecanico, costo/2, "servicio llantas");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	TallerMecanico[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
	return 1;
}

CMD:gasolina(playerid, params[])
{
 	new neg = IsPlayerContrato(playerid, 9);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ningún taller mecánico.");
	new playerid2, costo, gformat[190];
	if (sscanf(params, "ud", playerid2, costo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /gasolina (JugadorID) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (TallerMecanico[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador tiene una oferta de servicio mecánico pendiente.");
	if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no esta dentro de un vehículo como conductor.");
	new vehicleid = GetPlayerVehicleID(playerid2);
	if (veh_gasolina[vehicleid] >= 199) return SendClientMessage(playerid, COLOR_GREY, "* El tanque de gasolina del vehículo no aguanta más de 200 litros.");
	new minimocost = MinimoPrecioTaller(4), maximocost = InfoNegocio[neg][nPrecioGasolina];
	if (costo < minimocost || costo > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por gasolina es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	TallerMecanico[playerid2] = playerid;
	TallerCosto[playerid2] = costo;
	ID_Taller_Cobro[playerid2] = neg;
	ID_Veh_Cobro[playerid2] = vehicleid;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece gasolina para tu {FFBF00}%s{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), GetVehicleName(vehicleid), diner_coma(costo));
	Dialog_Show(playerid2, VentaGasolina, DIALOG_STYLE_MSGBOX, "Gasolina", gdsdu, "Continuar", "Salir");
	return 1;
}

Dialog:VentaGasolina(playerid, response, listitem, inputtext[])
{
	new mecanico = TallerMecanico[playerid], costo = TallerCosto[playerid], neg = ID_Taller_Cobro[playerid], vehicleid = ID_Veh_Cobro[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* El mecánico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* %s rechazó la gasolina.", NombreJugador(playerid));
		SendClientMessage(mecanico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste la gasolina.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(mecanico, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	veh_gasolina[vehicleid] = 200;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		InfoVehiculo[v][vGasolina] = veh_gasolina[vehicleid];
		guardar_int_mysql("vehiculos", "Gasolina", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vGasolina]);
		break;
	}
	format(gformat, sizeof gformat, "llena de combustible el vehículo %s de %s", GetVehicleName(vehicleid), NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "servicio gasolina");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio de gasolina (200 litros) de %s.", diner_coma(costo/2), NombreJugador(playerid));
	SendClientMessage(mecanico, COLOR_GREEN, gformat);
	GivePlayerCash(mecanico, costo/2, "servicio gasolina");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	TallerMecanico[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
	return 1;
}

CMD:reparar(playerid, params[])
{
 	new neg = IsPlayerContrato(playerid, 9);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en ningún taller mecánico.");
	new playerid2, costo, gformat[190];
	if (sscanf(params, "ud", playerid2, costo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /reparar (JugadorID) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (TallerMecanico[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador tiene una oferta de servicio mecánico pendiente.");
	if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no esta dentro de un vehículo como conductor.");
	new vehicleid = GetPlayerVehicleID(playerid2), Float: cvida;
	GetVehicleHealth(vehicleid, cvida);
	if (cvida >= 999.0) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo no necesita reparación.");
	new minimocost = MinimoPrecioTaller(3), maximocost = InfoNegocio[neg][nPrecioReparacion];
	if (costo < minimocost || costo > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por reparación es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	TallerMecanico[playerid2] = playerid;
	TallerCosto[playerid2] = costo;
	ID_Taller_Cobro[playerid2] = neg;
	ID_Veh_Cobro[playerid2] = vehicleid;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece reparar tu {FFBF00}%s{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), GetVehicleName(vehicleid), diner_coma(costo));
	Dialog_Show(playerid2, VentaReparacion, DIALOG_STYLE_MSGBOX, "Reparación", gdsdu, "Continuar", "Salir");
	return 1;
}

Dialog:VentaReparacion(playerid, response, listitem, inputtext[])
{
	new mecanico = TallerMecanico[playerid], costo = TallerCosto[playerid], neg = ID_Taller_Cobro[playerid], vehicleid = ID_Veh_Cobro[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* El mecánico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* %s rechazó la reparación.", NombreJugador(playerid));
		SendClientMessage(mecanico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste la reparación.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		TallerMecanico[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(mecanico, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	RepairVehicle(vehicleid);
	if (GetVehicleModel(vehicleid) == 528 || GetVehicleModel(vehicleid) == 427) SetVehicleHealth(vehicleid, 5000.0);
	else SetVehicleHealth(vehicleid, 1000.0);
	format(gformat, sizeof gformat, "repara el vehículo %s de %s", GetVehicleName(vehicleid), NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "servicio reparación");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio de reparación de %s.", diner_coma(costo/2), NombreJugador(playerid));
	SendClientMessage(mecanico, COLOR_GREEN, gformat);
	GivePlayerCash(mecanico, costo/2, "servicio reparación");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	TallerMecanico[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
	return 1;
}

CMD:pintura(playerid, params[])
{
	new neg = EnNegocio(playerid);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (InfoNegocio[neg][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio no es un taller mecánico.");
 	if (PermisosContrato(playerid, neg) == 0) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en este taller mecánico.");
	new playerid2, color1, color2, costo, gformat[190];
	if (sscanf(params, "uddd", playerid2, color1, color2, costo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /pintura (JugadorID) (Color1) (Color2) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (TallerMecanico[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador tiene una oferta de servicio mecánico pendiente.");
	if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no esta dentro de un vehículo como conductor.");
	new vehicleid = GetPlayerVehicleID(playerid2);
	if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes pintar vehículos de facciones legales.");
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo no es compatible para cambiar color.");
	if (color1 < 0 || color1 > 254) { SendClientMessage(playerid, COLOR_GREY, "* El color 1 no puede superar el ID 254."); return 1; }
	if (color2 < 0 || color2 > 254) { SendClientMessage(playerid, COLOR_GREY, "* El color 2 no puede superar el ID 254."); return 1; }
	new minimocost = MinimoPrecioTaller(1), maximocost = InfoNegocio[neg][nPrecioPintura];
	if (costo < minimocost || costo > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por pintura es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	TallerMecanico[playerid2] = playerid;
	TallerColor1[playerid2] = color1;
	TallerColor2[playerid2] = color2;
	TallerCosto[playerid2] = costo;
	ID_Taller_Cobro[playerid2] = neg;
	ID_Veh_Cobro[playerid2] = vehicleid;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece cambiar la pintura (%d | %d) de tu {FFBF00}%s{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), color1, color2, InfoVehiculo[id][vNombre], diner_coma(costo));
	Dialog_Show(playerid2, VentaPintura, DIALOG_STYLE_MSGBOX, "Cambio de pintura", gdsdu, "Continuar", "Salir");
	return 1;
}

Dialog:VentaPintura(playerid, response, listitem, inputtext[])
{
	new mecanico = TallerMecanico[playerid], color1 = TallerColor1[playerid], color2 = TallerColor2[playerid], costo = TallerCosto[playerid], neg = ID_Taller_Cobro[playerid];
	new vehicleid = ID_Veh_Cobro[playerid], gformat[234];
	if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes pintar vehículos de facciones legales.");
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo no es compatible para cambiar color.");
	if (!IsPlayerConnectedEx(mecanico))
	{
		TallerMecanico[playerid] = -1;
		TallerColor1[playerid] = -1;
		TallerColor2[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* El mecánico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerMecanico[playerid] = -1;
		TallerColor1[playerid] = -1;
		TallerColor2[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* %s rechazó el cambio de pintura.", NombreJugador(playerid));
		SendClientMessage(mecanico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste el cambio de pintura.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		TallerMecanico[playerid] = -1;
		TallerColor1[playerid] = -1;
		TallerColor2[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(mecanico, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	InfoVehiculo[id][vColor_1] = color1;
	InfoVehiculo[id][vColor_2] = color2;
	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE vehiculos SET Color_1 = '%d', Color_2 = '%d' WHERE ID = '%d'", InfoVehiculo[id][vColor_1], InfoVehiculo[id][vColor_2], InfoVehiculo[id][vID_sql]);
	mysql_tquery(DBcreative, gformat);
	format(gformat, sizeof gformat, "cambió la pintura del %s de %s", InfoVehiculo[id][vNombre], NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	ChangeVehicleColor(vehicleid, color1, color2);
	GivePlayerCash(playerid, -costo, "servicio pintura");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio de pintura de %s.", diner_coma(costo/2), NombreJugador(playerid));
	SendClientMessage(mecanico, COLOR_GREEN, gformat);
	GivePlayerCash(mecanico, costo/2, "servicio pintura");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	TallerMecanico[playerid] = -1;
	TallerColor1[playerid] = -1;
	TallerColor2[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
	return 1;
}

CMD:paintjob(playerid, params[])
{
	new neg = EnNegocio(playerid);
	if (neg == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (InfoNegocio[neg][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio no es un taller mecánico.");
 	if (PermisosContrato(playerid, neg) == 0) return SendClientMessage(playerid, COLOR_GREY, "No trabajas en este taller mecánico.");
	new playerid2, color1, costo, gformat[190];
	if (sscanf(params, "udd", playerid2, color1, costo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /paintjob (JugadorID) (PaintJob [3 para remover]) (Precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador muy lejos de ti.");
	if (TallerMecanico[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador tiene una oferta de servicio mecánico pendiente.");
	if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no esta dentro de un vehículo como conductor.");
	new vehicleid = GetPlayerVehicleID(playerid2);
	if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes pintar vehículos de facciones legales.");
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo no es compatible para cambiar color.");
	if (color1 < 0 || color1 > 6) { SendClientMessage(playerid, COLOR_GREY, "* El paintjob no puede superar el ID 6."); return 1; }
	if (IsVehiclePaintjobCompatible(InfoVehiculo[id][vModelo]) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo no es compatible con paintjob.");
	new minimocost = MinimoPrecioTaller(2), maximocost = InfoNegocio[neg][nPrecioPaintJob];
	if (costo < minimocost || costo > maximocost)
	{
		format(gformat, sizeof gformat, "El cobro mínimo por paintjob es de $%s y el máximo de $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
		return 1;
	}
	TallerMecanico[playerid2] = playerid;
	TallerColor1[playerid2] = color1;
	TallerCosto[playerid2] = costo;
	ID_Taller_Cobro[playerid2] = neg;
	ID_Veh_Cobro[playerid2] = vehicleid;
	new gdsdu[512];
	format(gdsdu, sizeof gdsdu, "{FFBF00}%s{EBEBEB} te ofrece cambiar el paitjob (%d) de tu {FFBF00}%s{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
	Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), color1, InfoVehiculo[id][vNombre], diner_coma(costo));
	Dialog_Show(playerid2, VentaPaintJob, DIALOG_STYLE_MSGBOX, "Cambio de paintjob", gdsdu, "Continuar", "Salir");
	return 1;
}

IsVehiclePaintjobCompatible(model)
{
	switch(model)
	{
		case 483: return 1;
		case 534: return 3;
		case 535: return 3;
		case 536: return 3;
		case 558: return 3;
		case 559: return 3;
		case 560: return 3;
		case 561: return 3;
		case 562: return 3;
		case 565: return 3;
		case 567: return 3;
		case 575: return 2;
		case 576: return 3;

		default:
			return 0;
	}

	return 0;
}

Dialog:VentaPaintJob(playerid, response, listitem, inputtext[])
{
	new mecanico = TallerMecanico[playerid], color1 = TallerColor1[playerid], costo = TallerCosto[playerid], neg = ID_Taller_Cobro[playerid];
	new vehicleid = ID_Veh_Cobro[playerid], gformat[234];
	if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes pintar vehículos de facciones legales.");
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* Ese vehículo no es compatible para cambiar color.");
	if (!IsPlayerConnectedEx(mecanico))
	{
		TallerMecanico[playerid] = -1;
		TallerColor1[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "* El mecánico se desconectó, se cancelo la operación.");
		return 1;
	}
	if (!response)
	{
		TallerMecanico[playerid] = -1;
		TallerColor1[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* %s rechazó el cambio de paintjob.", NombreJugador(playerid));
		SendClientMessage(mecanico, 0xEBEBEBFF, gformat);
		SendClientMessage(playerid, 0xEBEBEBFF, "* Rechazaste el cambio de paintjob.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		TallerMecanico[playerid] = -1;
		TallerColor1[playerid] = -1;
		TallerCosto[playerid] = 0;
		ID_Taller_Cobro[playerid] = -1;
		ID_Veh_Cobro[playerid] = 0;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, COLOR_GREY, gformat);
		SendClientMessage(mecanico, COLOR_GREY, "* Se canceló la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	InfoVehiculo[id][vPaintJob] = color1;
	guardar_int_mysql("vehiculos", "PaintJob", InfoVehiculo[id][vID_sql], InfoVehiculo[id][vPaintJob]);
	ChangeVehiclePaintjob(vehicleid, color1);
	format(gformat, sizeof gformat, "cambió el paintjob del %s de %s", InfoVehiculo[id][vNombre], NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "servicio paintjob");
	format(gformat, sizeof gformat, "Ganaste $%s del servicio de paintjob de %s.", diner_coma(costo/2), NombreJugador(playerid));
	SendClientMessage(mecanico, COLOR_GREEN, gformat);
	GivePlayerCash(mecanico, costo/2, "servicio paintjob");
	if (InfoNegocio[neg][nVenta] != 0)
	{
		InfoNegocio[neg][nDinero] += costo/2;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[neg][nID_sql], InfoNegocio[neg][nDinero]);
	}
	TallerMecanico[playerid] = -1;
	TallerColor1[playerid] = -1;
	TallerCosto[playerid] = 0;
	ID_Taller_Cobro[playerid] = -1;
	ID_Veh_Cobro[playerid] = 0;
	return 1;
}

new IDOpcionPrecio[MAX_PLAYERS];
CMD:cambiarprecios(playerid)
{
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este negocio.");
	if (InfoNegocio[id][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Tu negocio no es un taller mecánico.");
	new dialog_taller[2056], gformat[256];
	strcat(dialog_taller, "Servicio\tCosto máximo\n");
	format(gformat, sizeof gformat, "{EFEFEF}Pintura\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioPintura]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}PaintJob\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioPaintJob]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Reparación\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioReparacion]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Gasolina\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioGasolina]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Llantas\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioLlantas]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Nitro\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioNitro]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Hidráulica\t{00CC00}$%s\n", diner_coma(InfoNegocio[id][nPrecioHyd]));
	strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Tunning carroceria\t{00CC00}$%s", diner_coma(InfoNegocio[id][nPrecioTuneo]));
	strcat(dialog_taller, gformat);
	Dialog_Show(playerid, ChangePrecioTaller, DIALOG_STYLE_TABLIST_HEADERS, "Precios del taller:", dialog_taller, "Continuar", "Salir");
    IDOpcionPrecio[playerid] = -1;
	return 1;
}

Dialog:ChangePrecioTaller(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este negocio.");
	if (InfoNegocio[id][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Tu negocio no es un taller mecánico.");
	new nametip[32], tipo = listitem+1, valor = 0, dialog_precio[512], gtitulo[128];
	switch (tipo)
	{
		case 1: alm(nametip, "Pintura"), valor = InfoNegocio[id][nPrecioPintura];
		case 2: alm(nametip, "PaintJob"), valor = InfoNegocio[id][nPrecioPaintJob];
		case 3: alm(nametip, "Reparación"), valor = InfoNegocio[id][nPrecioReparacion];
		case 4: alm(nametip, "Gasolina"), valor = InfoNegocio[id][nPrecioGasolina];
		case 5: alm(nametip, "Llantas"), valor = InfoNegocio[id][nPrecioLlantas];
		case 6: alm(nametip, "Nitro"), valor = InfoNegocio[id][nPrecioNitro];
		case 7: alm(nametip, "Hidráulica"), valor = InfoNegocio[id][nPrecioHyd];
		case 8: alm(nametip, "Tunning carroceria"), valor = InfoNegocio[id][nPrecioTuneo];
	}
    IDOpcionPrecio[playerid] = tipo;
	format(dialog_precio, sizeof dialog_precio,
	"{EBEBEB}El precio actual del servicio {FFBF00}%s{EBEBEB} es {00CC00}$%s{EBEBEB}\n\n\
	Introduce el nuevo monto $ máximo del servicio.\n", nametip, diner_coma(valor));
	format(gtitulo, sizeof gtitulo, "{EBEBEB}Nuevo precio de {FFBF00}%s", nametip);
	Dialog_Show(playerid, Change2PrecioTaller, DIALOG_STYLE_INPUT, gtitulo, dialog_precio, "Continuar", "Volver");
	return 1;
}

Dialog:Change2PrecioTaller(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este negocio.");
	if (InfoNegocio[id][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* Tu negocio no es un taller mecánico.");
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números, vuelve a intentarlo");
	new nametip[32], tipo = IDOpcionPrecio[playerid], valor = strval(inputtext), gformat[320];
	new minimocost = MinimoPrecioTaller(tipo), maximocost = MinimoPrecioTaller(tipo)*3;
	if (valor < minimocost || valor > maximocost)
	{
	    format(gformat, sizeof gformat, "Sólo puedes colocar de mínimo $%s y máximo $%s.", diner_coma(minimocost), diner_coma(maximocost));
		SendClientMessage(playerid, COLOR_RED, gformat);
	    return 1;
	}
	switch (tipo)
	{
		case 1: alm(nametip, "Pintura"), InfoNegocio[id][nPrecioPintura] = valor;
		case 2: alm(nametip, "PaintJob"), InfoNegocio[id][nPrecioPaintJob] = valor;
		case 3: alm(nametip, "Reparación"), InfoNegocio[id][nPrecioReparacion] = valor;
		case 4: alm(nametip, "Gasolina"), InfoNegocio[id][nPrecioGasolina] = valor;
		case 5: alm(nametip, "Llantas"), InfoNegocio[id][nPrecioLlantas] = valor;
		case 6: alm(nametip, "Nitro"), InfoNegocio[id][nPrecioNitro] = valor;
		case 7: alm(nametip, "Hidráulica"), InfoNegocio[id][nPrecioHyd] = valor;
		case 8: alm(nametip, "Tunning carroceria"), InfoNegocio[id][nPrecioTuneo] = valor;
	}
	IDOpcionPrecio[playerid] = -1;
	format(gformat, sizeof gformat, "El nuevo costo del servicio {5EAEFF}%s{EBEBEB} es de {00CC00}$%s", nametip, diner_coma(valor));
	SendClientMessage(playerid, 0xEBEBEBFF, gformat);
	ActualizarPrecioNegocio(id);
	return 1;
}

MinimoPrecioTaller(tipo)
{
	new valore = 0;
	switch (tipo)
	{
		case 1: valore = 500;
		case 2: valore = 700;
		case 3: valore = 1000;
		case 4: valore = 200;
		case 5: valore = 4000;
		case 6: valore = 8000;
		case 7: valore = 5000;
		case 8: valore = 12000;
	}
	return valore;
}

CMD:taller(playerid)
{
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en el interior de ningún negocio.");
	if (InfoNegocio[id][nTipo] != 9) return SendClientMessage(playerid, COLOR_GREY, "* No estás dentro de un taller mecánico.");
	if (CountEmpleados(id) != 0) return SendClientMessageEx(playerid, 0x5EAEFFFF, "* Se encuentran %d mecánicos de este taller conectados, si no ves ninguno en el taller usa /mecanicos.", CountEmpleados(id));
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Usted no es el conductor del vehículo.");
	new dialog_taller[1028], gformat[170], reparacion = InfoNegocio[id][nPrecioReparacion], gasolina = InfoNegocio[id][nPrecioGasolina], pintura = InfoNegocio[id][nPrecioPintura];
	strcat(dialog_taller, "Servicio\tPrecio\n");
	new Float: cvida, idcoche = GetPlayerVehicleID(playerid);
	GetVehicleHealth(idcoche, cvida);
	new pagar, Percent_damage = floatround(cvida);
	pagar = (920-Percent_damage);
	//reparacion
	if (pagar <= 0) format(gformat, sizeof gformat, "{EFEFEF}Reparación\t{fff000}no necesita\n");
	else format(gformat, sizeof gformat, "{EFEFEF}Reparación\t{00CC00}$%s\n", diner_coma(reparacion-pagar));
	strcat(dialog_taller, gformat);
	//pintura
	format(gformat, sizeof gformat, "{EFEFEF}Pintura\t{00CC00}$%s\n", diner_coma(pintura));
	strcat(dialog_taller, gformat);
	//gasolina
	if (veh_gasolina[idcoche] >= 200) format(gformat, sizeof gformat, "{EFEFEF}Gasolina: 40 litros\t{fff000}no necesita\n");
	else format(gformat, sizeof gformat, "{EFEFEF}Gasolina: 100 litros\t{00CC00}$%s\n", diner_coma(gasolina));
	strcat(dialog_taller, gformat);
	//indice
	Dialog_Show(playerid, ShowTallerDinamico, DIALOG_STYLE_TABLIST_HEADERS, "Taller dinámico", dialog_taller, "Continuar", "Salir");
	return 1;
}

NoEstaEnTaller(playerid)
{
	new id = EnNegocio(playerid);
	if (id == -1) { SendClientMessage(playerid, COLOR_GREY, "* No estás en el interior de ningún negocio."); return 1; }
	if (InfoNegocio[id][nTipo] != 9) { SendClientMessage(playerid, COLOR_GREY, "* No estás dentro de un taller mecánico."); return 1; }
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) { SendClientMessage(playerid, COLOR_GREY, "* Usted no es el conductor del vehículo."); return 1; }
	return 0;
}

Dialog:ShowTallerDinamico(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (NoEstaEnTaller(playerid) == 1) return 1;
	new id = EnNegocio(playerid);
	new vehicleid = GetPlayerVehicleID(playerid), string[190];
	new reparacion = InfoNegocio[id][nPrecioReparacion], gasolina = InfoNegocio[id][nPrecioGasolina], pintura = InfoNegocio[id][nPrecioPintura];
	switch (listitem)
	{
		case 0: //reparación
		{
			new Float: cvida;
			GetVehicleHealth(vehicleid, cvida);
			new pagar, Percent_damage = floatround(cvida);
			if (Percent_damage >= 920) return SendClientMessage(playerid, COLOR_GREY, "* El health (/dl) del vehículo pasa los 920.");
			pagar = (920-Percent_damage);
			if (GetPlayerCash(playerid) < reparacion-pagar) { format(string, sizeof string, "* No tienes suficiente dinero ($%s).", diner_coma(reparacion-pagar)); SendClientMessage(playerid, COLOR_GREY, string); return 1; }
			new cobro = reparacion-pagar;
			RepairVehicle(vehicleid);
			if (GetVehicleModel(vehicleid) == 528 || GetVehicleModel(vehicleid) == 427) SetVehicleHealth(vehicleid, 5000.0);
			else SetVehicleHealth(vehicleid, 920.0);
			GivePlayerCash(playerid, -cobro, "servicio reparación (npc)");
			cmd_me(playerid, "paga por la reparación de su vehículo");
			if (InfoNegocio[id][nVenta] != 0)
			{
				InfoNegocio[id][nDinero] += cobro;
				guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[id][nID_sql], InfoNegocio[id][nDinero]);
			}
		}
		case 1:
		{
			if (GetPlayerCash(playerid) < pintura) { format(string, sizeof string, "* No tienes suficiente dinero ($%s).", diner_coma(pintura)); SendClientMessage(playerid, COLOR_GREY, string); return 1; }
			ShowVehColor(playerid, "", 1); //color
		}
		case 2:
		{
			if (GetPlayerCash(playerid) < gasolina) { format(string, sizeof string, "* No tienes suficiente dinero ($%s).", diner_coma(gasolina)); SendClientMessage(playerid, COLOR_GREY, string); return 1; }
			if (veh_gasolina[vehicleid] >= 199) return SendClientMessage(playerid, COLOR_GREY, "* El tanque de gasolina del vehículo no aguanta más de 200 litros.");
			GivePlayerCash(playerid, -gasolina, "servicio gasolina (npc)");
			veh_gasolina[vehicleid] += 100;
			if (veh_gasolina[vehicleid] >= 200) veh_gasolina[vehicleid] = 200;
			Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
			{
				InfoVehiculo[v][vGasolina] = veh_gasolina[vehicleid];
				guardar_int_mysql("vehiculos", "Gasolina", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vGasolina]);
				break;
			}
			cmd_me(playerid, "paga por el combustible de su vehículo");
			if (InfoNegocio[id][nVenta] != 0)
			{
				InfoNegocio[id][nDinero] += gasolina;
				guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[id][nID_sql], InfoNegocio[id][nDinero]);
			}
		}
	}
	return 1;
}

ShowVehColor(playerid, msg[] = "", color)
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	new color_string[3256];
	if (strlen(msg)) format(color_string, sizeof(color_string), "{E74C3C}%s\n\n", msg);
	for(new i; i < sizeof(ColorList); i++) format(color_string, sizeof(color_string), "%s{%06x}%03d %s", color_string, ColorList[i] >>> 8, i, ((i+1) % 10 == 0) ? ("\n") : (""));
	if (color == 1) Dialog_Show(playerid, Change1ColorVeh, DIALOG_STYLE_INPUT, "{FFFFFF}Escoge el {3498DB}color UNO", color_string, "Continuar", "Salir");
	else if (color == 2)  Dialog_Show(playerid, Change2ColorVeh, DIALOG_STYLE_INPUT, "{FFFFFF}Escoge el {00cc00}color DOS", color_string, "Continuar", "Volver");
	return 1;
}

new colorvehselec[MAX_PLAYERS];

Dialog:Change1ColorVeh(playerid, response, listitem, inputtext[])
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	if (!response) return 1;
	new id = EnNegocio(playerid);
	new pintura = InfoNegocio[id][nPrecioPintura], string[170];
	if (GetPlayerCash(playerid) < pintura) { format(string, sizeof string, "* No tienes suficiente dinero ($%s).", diner_coma(pintura)); SendClientMessage(playerid, COLOR_GREY, string); return 1; }
	if (!isnumeric(inputtext)) return ShowVehColor(playerid, "ID del color inválido.", 1);
	new color = strval(inputtext);
	if(!(0 <= color <= sizeof(ColorList)-1)) return ShowVehColor(playerid, "ID del color inválido.", 1);
	colorvehselec[playerid] = color;
	ShowVehColor(playerid, "", 2);
	return 1;
}

Dialog:Change2ColorVeh(playerid, response, listitem, inputtext[])
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	if (!response) return ShowVehColor(playerid, "", 1); //color
	new id = EnNegocio(playerid);
	new pintura = InfoNegocio[id][nPrecioPintura], string[170];
	if (GetPlayerCash(playerid) < pintura) { format(string, sizeof string, "* No tienes suficiente dinero ($%s).", diner_coma(pintura)); SendClientMessage(playerid, COLOR_GREY, string); return 1; }
	if (!isnumeric(inputtext)) return ShowVehColor(playerid, "ID del color inválido.", 2);
	new color1 = colorvehselec[playerid], color2 = strval(inputtext);
	if(!(0 <= color2 <= sizeof(ColorList)-1)) return ShowVehColor(playerid, "ID del color inválido.", 2);
	new vehicleid = GetPlayerVehicleID(playerid);
	ChangeVehicleColor(vehicleid, color1, color2);
	GivePlayerCash(playerid, -pintura, "servicio pintura (npc)");
	SendClientMessage(playerid, ColorList[color1], "** Cambiaste el color del vehículo **");
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		InfoVehiculo[v][vColor_1] = color1;
		InfoVehiculo[v][vColor_2] = color2;
		guardar_int_mysql("vehiculos", "Color_1", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vColor_1]);
		guardar_int_mysql("vehiculos", "Color_2", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vColor_2]);
		break;
	}
	cmd_me(playerid, "paga por la pintura de su vehículo");
	if (InfoNegocio[id][nVenta] != 0)
	{
		InfoNegocio[id][nDinero] += pintura;
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[id][nID_sql], InfoNegocio[id][nDinero]);
	}
	return 1;
}


CountEmpleados(id)
{
	new count = 0;
	Loop(playerid, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid) && PermisosContrato(playerid, id) != 0)
	{
		count++;
	}
	return count;
}

CMD:botiquin(playerid, params[])
{
	if (no_tiene_manos(playerid, 53) == 0) return 1;
	new playerid2, string[190];
	if (sscanf(params, "u", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /botiquin (JugadorID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (!CercaDelMarica(3.5, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador no está cerca tuyo.");
	if (GetPVarInt(playerid2, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador está en estado herido.");
	if (InfoPlayer[playerid2][pVida] >= 80) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no necesita botiquin ahora mismo.");
	if (InfoPlayer[playerid][pManoDerecha] == 53) InfoPlayer[playerid][pManoDerechaCant]--;
	else InfoPlayer[playerid][pManoIzquierdaCant]--;
	ActualizarManos(playerid);
	if (playerid != playerid2)
	{
		TogglePlayerControllable(playerid, false);
		TogglePlayerControllable(playerid2, false);
		ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid2, "CRACK", "crckidle2", 4.1, 1, 1, 1, 0, 0, 1);
		SetCameraBehindPlayer(playerid2);
		format(string, sizeof string, "* %s le da primeros auxilios a %s con su botiquin.", NombreJugador(playerid), NombreJugador(playerid2));
		ProxDetector(20.0, playerid, string, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF);
	 	SetTimerEx("CurarBotiquin", 8000, false, "ii", playerid, playerid2);
 	}
 	else
 	{
		new Float: health = InfoPlayer[playerid][pVida];
		if (health >= 50) dar_vida(playerid, 100);
		else dar_vida(playerid, health + 50.0);
		format(string, sizeof string, "* %s se aplica primeros auxilios con su botiquin.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF);
 	}
	return 1;
}
CMD:hpsave(playerid, params[]) return cmd_botiquin(playerid, params);

funcion CurarBotiquin(playerid, playerid2)
{
	TogglePlayerControllable(playerid, true);
	TogglePlayerControllable(playerid2, true);
    ClearAnimations(playerid);
    ClearAnimations(playerid2);
	new Float: health = InfoPlayer[playerid2][pVida];
	if (health >= 50) dar_vida(playerid2, 100);
	else dar_vida(playerid2, health + 50.0);
	return 1;
}

CMD:teclas(playerid)
{
	SendClientMessage(playerid, -1, "q no voy hacer est0 jajasaldud0sss :vxdxd!!11");
	return 1;
}

CMD:vobjeto(playerid, params[])
{
	if (InfoPlayer[playerid][pVIP] != 3) return SendClientMessage(playerid, COLOR_WHITE, "* Debes ser mínimo VIP gold.");
	new vehicleid;
	if (sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /vobjeto (Opción) (VehiculoID)");
		SendClientMessage(playerid, COLOR_WHITE, "Opciones: agregar, editar, borrar");
		return 1;
	}
	if (!strcmp(params, "agregar", true, 7))
	{
		if (sscanf(params, "s[32]i", params, vehicleid)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /vobjeto agregar (VehiculoID)");
		if (vehicleid < 1 || vehicleid > MAX_VEHICLES) return SendClientMessage(playerid, COLOR_GREY, "* Vehículo inválido.");
		if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "* Vehículo inválido, intenta con otra ID.");
	 	if (GetDistancePlayerVeh(playerid, vehicleid) >= 6.0) return SendClientMessage(playerid, COLOR_GREY, "* Debes estar al menos 6 metros del vehículo seleccionado.");
 		new id = verificar_id_vehiculo(vehicleid);
		if (id == -1) return SendClientMessage(playerid, 0xebebebff, "* Este vehículo no es dinámico.");
		if (llaves_vehiculo(playerid, vehicleid) == -1) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este vehículo.");
		if (CountObjVeh(id) >= 3) return SendClientMessage(playerid, COLOR_GREY, "* No puedes instalar más de tres objetos en tu vehículo siendo VIP Oro.");
		ShowModelSelectionMenuEx(playerid, VehicleFurnObjs, sizeof VehicleFurnObjs, "Elige un objeto", Create_VehObject, 16.0, 0.0, -55.0);
		SetPVarInt(playerid, "FurnVehicleID", id);
	}
	else if (!strcmp(params, "editar", true, 6))
	{
		new slotuwu;
		if (sscanf(params, "s[32]ii", params, vehicleid, slotuwu)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /vobjeto editar (VehiculoID) (Slot)");
		if (vehicleid < 1 || vehicleid > MAX_VEHICLES) return SendClientMessage(playerid, COLOR_GREY, "* Vehículo inválido.");
		if (slotuwu < 1 || slotuwu > 5) return SendClientMessage(playerid, COLOR_GREY, "* Prueba entre 1 - 5.");
		if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "* Vehículo inválido, intenta con otra ID.");
	 	if (GetDistancePlayerVeh(playerid, vehicleid) >= 6.0) return SendClientMessage(playerid, COLOR_GREY, "* Debes estar al menos 6 metros del vehículo seleccionado.");
		new id = verificar_id_vehiculo(vehicleid);
		if (id == -1) return SendClientMessage(playerid, 0xebebebff, "* Este vehículo no es dinámico.");
		if (llaves_vehiculo(playerid, vehicleid) == -1) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este vehículo.");
		if (CountObjVeh(id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Este vehículo no tiene ningún objeto agregado.");
		new xd = slotuwu-1;
		if (InfoVehiculo[id][vObjModelo][xd] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes nada en ese slot.");
		DestroyDynamicObject(InfoVehiculo[id][vTuneo][xd]);
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new obj = CreatePlayerObject(playerid, InfoVehiculo[id][vObjModelo][xd], X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnModelo", InfoVehiculo[id][vObjModelo][xd]);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 2);
		EditPlayerObject(playerid, obj);
		SetPVarInt(playerid, "FurnVehicleID", id);
		SetPVarInt(playerid, "FurnSlotObj", xd);
	}
	else if (!strcmp(params, "borrar", true, 6))
	{
		new slotuwu;
		if (sscanf(params, "s[32]ii", params, vehicleid, slotuwu)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /vobjeto borrar (VehiculoID) (Slot)");
		if (vehicleid < 1 || vehicleid > MAX_VEHICLES) return SendClientMessage(playerid, COLOR_GREY, "* Vehículo inválido.");
		if (slotuwu < 1 || slotuwu > 5) return SendClientMessage(playerid, COLOR_GREY, "* Prueba entre 1 - 5.");
		if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "* Vehículo inválido, intenta con otra ID.");
	 	if (GetDistancePlayerVeh(playerid, vehicleid) >= 6.0) return SendClientMessage(playerid, COLOR_GREY, "* Debes estar al menos 6 metros del vehículo seleccionado.");
		new id = verificar_id_vehiculo(vehicleid);
		if (id == -1) return SendClientMessage(playerid, 0xebebebff, "* Este vehículo no es dinámico.");
		if (llaves_vehiculo(playerid, vehicleid) == -1) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este vehículo.");
		if (CountObjVeh(id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Este vehículo no tiene ningún objeto agregado.");
		new xd = slotuwu-1;
		if (InfoVehiculo[id][vObjModelo][xd] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes nada en ese slot.");
		DestroyDynamicObject(InfoVehiculo[id][vTuneo][xd]);
		InfoVehiculo[id][vObjModelo][xd] = 0;
		InfoVehiculo[id][vObjPosX][xd] = 0;
		InfoVehiculo[id][vObjPosY][xd] = 0;
		InfoVehiculo[id][vObjPosZ][xd] = 0;
		InfoVehiculo[id][vObjRotX][xd] = 0;
		InfoVehiculo[id][vObjRotY][xd] = 0;
		InfoVehiculo[id][vObjRotZ][xd] = 0;
		new query[1028];
		mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET ObjModelo_%d = '%d', ObjPosX_%d = '%f', ObjPosY_%d = '%f', ObjPosZ_%d = '%f', ObjRotX_%d = '%f', ObjRotY_%d = '%f', ObjRotZ_%d = '%f' WHERE ID = '%d'",
		xd+1, InfoVehiculo[id][vObjModelo][xd], xd+1, InfoVehiculo[id][vObjPosX][xd], xd+1, InfoVehiculo[id][vObjPosY][xd], xd+1, InfoVehiculo[id][vObjPosZ][xd], xd+1, InfoVehiculo[id][vObjRotX][xd], xd+1, InfoVehiculo[id][vObjRotY][xd], xd+1, InfoVehiculo[id][vObjRotZ][xd], InfoVehiculo[id][vID_sql]);
		mysql_tquery(DBcreative, query);
	}
	return 1;
}

CountObjVeh(id)
{
	new count = 0;
	Loop(x, 5, 0) if (InfoVehiculo[id][vObjModelo][x] != 0)
	{
		count++;
	}
	return count;
}

CMD:banco(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 985.7003, -1171.2474, 24.9037)) return SendClientMessage(playerid, COLOR_GREY, "* No estás en el Banco Central de Los Santos.");
	Dialog_Show(playerid, ShowBanco, DIALOG_STYLE_LIST, "{FFBF00}Banco", "Consultar saldo\nRetirar efectivo\nDepositar efectivo\nTransferir dinero", "Continuar", "Salir");
	return 1;
}

Dialog:ShowBanco(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			new gformat[170];
			format(gformat, sizeof gformat, "Tienes $%s en tu cuenta bancaria.", diner_coma(InfoPlayer[playerid][pBanco]));
			SendClientMessage(playerid, 0x0CA7B8FF, gformat);
		}
		case 1:
		{
			Dialog_Show(playerid, RetirarBancoEfectivo, DIALOG_STYLE_INPUT, "{FFBF00}Retirar efectivo", "{EBEBEB}Por favor, ingrese el monto a retirar:\n", "Retirar", "Volver");
		}
		case 2:
		{
			Dialog_Show(playerid, DepositarBancoEfectivo, DIALOG_STYLE_INPUT, "{FFBF00}Depositar efectivo", "{EBEBEB}Por favor, ingrese el monto a depositar:\n", "Depositar", "Volver");
		}
		case 3:
		{
			if (InfoPlayer[playerid][pHorasOn] < 3) return SendClientMessage(playerid, COLOR_GREY, "* Necesitas jugar al menos tres horas, para poder transferir dinero.");
            ConTransferir[playerid] = 1;
			Dialog_Show(playerid, TransferirBancoDinero, DIALOG_STYLE_INPUT, "{FFBF00}Transferencia (paso 1)", "{EBEBEB}Por favor, ingrese {FFBF00}ID del jugador{EBEBEB} que deseas transferir dinero:", "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:RetirarBancoEfectivo(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_banco(playerid);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	new dinero = strval(inputtext), string[170];
	if (dinero < 1 || dinero > 1000000) return SendClientMessage(playerid, COLOR_GREY, "* Máximo que puedes retirar más de $1,000,000.");
	if (dinero > InfoPlayer[playerid][pBanco]) return SendClientMessage(playerid, COLOR_GREY, "* No tienes esa cantidad en tu cuenta bancaria.");
	GivePlayerCash(playerid, dinero, "retiro de dinero banco");
	InfoPlayer[playerid][pBanco] -= dinero;
	format(string, sizeof string, "* Sacaste en efectivo $%s. Ahora tienes en tu cuenta bancaria $%s.", diner_coma(dinero), diner_coma(InfoPlayer[playerid][pBanco]));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	cmd_me(playerid, "hace una transacción bancaria");
	format(string, sizeof string, "[RETIRO BANCO] %s retiró $%s.", NombreDeCuenta(playerid), diner_coma(dinero));
	Log("LOGS/banco.log", string);
	guardar_int_mysql("cuentas", "BanescoOwO", InfoPlayer[playerid][pID], InfoPlayer[playerid][pBanco]);
	return 1;
}

Dialog:DepositarBancoEfectivo(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_banco(playerid);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	new dinero = strval(inputtext), string[170];
	if (dinero < 1 || dinero > 1000000) return SendClientMessage(playerid, COLOR_GREY, "* Máximo que puedes depositar más de $1,000,000.");
	if (dinero > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_GREY, "* No tienes esa cantidad en efectivo.");
	GivePlayerCash(playerid, -dinero, "deposito de dinero banco");
	InfoPlayer[playerid][pBanco] += dinero;
	format(string, sizeof string, "* Depositaste en efectivo $%s. Ahora tienes en tu cuenta bancaria $%s.", diner_coma(dinero), diner_coma(InfoPlayer[playerid][pBanco]));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	cmd_me(playerid, "hace una transacción bancaria");
	format(string, sizeof string, "[DEPOSITO BANCO] %s depositó $%s.", NombreDeCuenta(playerid), diner_coma(dinero));
	Log("LOGS/banco.log", string);
	guardar_int_mysql("cuentas", "BanescoOwO", InfoPlayer[playerid][pID], InfoPlayer[playerid][pBanco]);
	return 1;
}

Dialog:TransferirBancoDinero(playerid, response, listitem, inputtext[])
{
	if (ConTransferir[playerid] == 2)
	{
		if (!response)
	    {
   			if (IsPlayerContrato(playerid, 6) != -1) Dialog_Show(playerid, MenuAplicaciones, DIALOG_STYLE_LIST, "Opción: {FFBF00}Aplicaciones", "- Contactos\n- Transferencias express\n- Empleos disponibles\n- {00CC00}Repartos disponibles", "Continuar", "Volver");
			else Dialog_Show(playerid, MenuAplicaciones, DIALOG_STYLE_LIST, "Opción: {FFBF00}Aplicaciones", "- Contactos\n- Transferencias express\n- Empleos disponibles", "Continuar", "Volver");
			return 1;
		}
	}
	else { if (!response) return cmd_banco(playerid); }
	
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	new playerid2 = strval(inputtext);
	if (playerid == playerid2) return SendClientMessage(playerid, COLOR_GREY, "* No puedes transferirte dinero a ti mismo.");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador no conectado.");
	SetPVarInt(playerid,"JugadorATransferir",playerid2);
	Dialog_Show(playerid, TransferirBanco2Dinero, DIALOG_STYLE_INPUT, "{FFBF00}Transferencia (paso 2)", "{EBEBEB}Ahora ingresa el monto a transferir:", "Transferir", "Volver");
	return 1;
}

Dialog:TransferirBanco2Dinero(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	new playerid2 = GetPVarInt(playerid, "JugadorATransferir"), dinero = strval(inputtext), string[180];
	if (dinero > InfoPlayer[playerid][pBanco]) return SendClientMessage(playerid, COLOR_GREY, "* Cantidad incorrecta.");
	if (dinero < 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes transferir menos de 0.");
	InfoPlayer[playerid][pBanco] -= dinero;
	InfoPlayer[playerid2][pBanco] += dinero;
	format(string, sizeof string, "* Realizaste una transferencia de $%s a %s.", diner_coma(dinero), NombreJugador(playerid2));
	SendClientMessage(playerid, 0xEAEA00FF, string);
	format(string, sizeof string, "* Recibiste una transferencia de $%s de %s.", diner_coma(dinero), NombreJugador(playerid));
	SendClientMessage(playerid2, 0xFFFF04FF, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) hizo una transferencia de $%s a %s(%d).", NombreOriginal(playerid), playerid, diner_coma(dinero), NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[TRANSFERENCIA BANCO] %s transfirió $%s a %s.", NombreDeCuenta(playerid), diner_coma(dinero), NombreDeCuenta(playerid2));
	Log("LOGS/banco.log", string);
	guardar_int_mysql("cuentas", "BanescoOwO", InfoPlayer[playerid][pID], InfoPlayer[playerid][pBanco]);
	guardar_int_mysql("cuentas", "BanescoOwO", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pBanco]);
	DeletePVar(playerid, "JugadorATransferir");
	cmd_me(playerid, "hace una transacción bancaria");
	return 1;
}

new OBJ_Dinamita[MAX_PLAYERS];
CMD:dinamita(playerid)
{
	if (no_tiene_manos(playerid, 52) == 0) return 1;
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "* No puedes poner dinamita estando en un vehículo.");
	if (InfoPlayer[playerid][pManoDerecha] == 52)
	{
		InfoPlayer[playerid][pManoDerecha] = 0;
		InfoPlayer[playerid][pManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
	}
	else
	{
		InfoPlayer[playerid][pManoIzquierda] = 0;
		InfoPlayer[playerid][pManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid, 8);
	}
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetPosInFrontOfPlayer(playerid, x, y, 0.6);
	OBJ_Dinamita[playerid] = CreateDynamicObject(1654, x, y, z-0.8, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid) );
	SetTimerEx("DetonarDinamita", 12000, false, "ifff", OBJ_Dinamita[playerid], x, y, z);
	cmd_me(playerid,"coloca dinamita en el suelo");
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
	SendClientMessage(playerid, COLOR_YELLOW, "La dinamita explotará en 12 segundos.");
	Streamer_Update(playerid);
	return 1;
}

forward DetonarDinamita(object, Float:x, Float:y, Float:z);
public DetonarDinamita(object, Float:x, Float:y, Float:z)
{
	CreateExplosionEx(x, y, z, 0, 10.0);
	DestroyDynamicObject(object);
	return 1;
}

CreateExplosionEx(Float: x, Float: y, Float: z, type, Float: rango)
{
	Loop(playerid, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid))
	{
		new Float: damage, Float: rango2 = GetPlayerDistanceFromPoint(playerid, x, y, z);
		switch (floatround(rango2))
		{
			case 1: damage = 90;
			case 2: damage = 80;
			case 3: damage = 70;
			case 4: damage = 60;
			case 5: damage = 50;
			case 6: damage = 40;
			case 7: damage = 30;
			case 8: damage = 20;
			case 9: damage = 10;
			case 10: damage = 5;
		}
		BajarVida(playerid, damage);
	}
	CreateExplosion(x, y, z, type, rango);
	return 1;
}

new EnIDatm[MAX_PLAYERS];
CMD:cajero(playerid)
{
	new id = -1;
	Loop(x, MAX_CAJEROS, 1) if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoCajero[x][atmPotX], InfoCajero[x][atmPotY], InfoCajero[x][atmPotZ]) && InfoPlayer[playerid][pInterior] == InfoCajero[x][atmInterior] && InfoPlayer[playerid][pVirtualWorld] == InfoCajero[x][atmVirtualWorld])
	{
		id = x;
		break;
	}
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás cerca de ningún cajero.");
	Dialog_Show(playerid, ShowCajero, DIALOG_STYLE_LIST, "{FFBF00}Cajero", "Consultar saldo\nRetirar efectivo\nTransferir dinero", "Continuar", "Salir");
	EnIDatm[playerid] = id;
	return 1;
}
CMD:atm(playerid) return cmd_cajero(playerid);

Dialog:ShowCajero(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			new gformat[170];
			format(gformat, sizeof gformat, "Tienes $%s en tu cuenta bancaria.", diner_coma(InfoPlayer[playerid][pBanco]));
			SendClientMessage(playerid, 0x0CA7B8FF, gformat);
		}
		case 1:
		{
			if (InfoPlayer[playerid][pTogCajero] != 0)
			{
				new gformat[190];
				format(gformat, sizeof gformat, "* Debes esperar %d minutos para volver a retirar efectivo, puedes ir al banco sino quieres esperar.", InfoPlayer[playerid][pTogCajero]);
				SendClientMessage(playerid, COLOR_GREY, gformat);
			    return 1;
			}
			Dialog_Show(playerid, RetirarEfectivo, DIALOG_STYLE_INPUT, "{FFBF00}Retirar efectivo", "{EBEBEB}Por favor, ingrese el monto a retirar:\n\n{0CA7B8}El máximo a retirar es de $100,000 dólares por hora.", "Retirar", "Volver");
		}
		case 2:
		{
			if (InfoPlayer[playerid][pHorasOn] < 3) return SendClientMessage(playerid, COLOR_GREY, "* Necesitas jugar al menos tres horas, para poder transferir dinero.");
			Dialog_Show(playerid, TransferirDinero, DIALOG_STYLE_INPUT, "{FFBF00}Transferencia (paso 1)", "{EBEBEB}Por favor, ingrese {FFBF00}ID del jugador{EBEBEB} que deseas transferir dinero:", "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:RetirarEfectivo(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_cajero(playerid);
	new id = EnIDatm[playerid];
	if (InfoCajero[id][atmDinero] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No hay más efectivo en este cajero.");
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	new dinero = strval(inputtext), string[170];
	if (dinero < 1 || dinero > 100000) return SendClientMessage(playerid, COLOR_GREY, "* Máximo que puedes retirar por hora es $100,000.");
	if (dinero > InfoPlayer[playerid][pBanco]) return SendClientMessage(playerid, COLOR_GREY, "* No tienes esa cantidad en tu cuenta bancaria.");
	if (dinero > InfoCajero[id][atmDinero]) return SendClientMessage(playerid, COLOR_GREY, "* No hay esa cantidad de efectivo en este cajero automático.");
	GivePlayerCash(playerid, dinero, "retiro de dinero atm");
	InfoPlayer[playerid][pBanco] -= dinero;
	InfoCajero[id][atmDinero] -= dinero;
	guardar_int_mysql("cajeros", "BolosUwU", InfoCajero[id][atmID_sql], InfoCajero[id][atmDinero]);
	format(string, sizeof string, "* Sacaste en efectivo $%s. Ahora tienes en tu cuenta bancaria $%s.", diner_coma(dinero), diner_coma(InfoPlayer[playerid][pBanco]));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	cmd_me(playerid, "hace una transacción bancaria");
	format(string, sizeof string, "[RETIRO ATM] %s retiró $%s.", NombreDeCuenta(playerid), diner_coma(dinero));
	Log("LOGS/banco.log", string);
	guardar_int_mysql("cuentas", "BanescoOwO", InfoPlayer[playerid][pID], InfoPlayer[playerid][pBanco]);
	Label_cajero(id, 0);
	if (dinero >= 20000)
	{
		InfoPlayer[playerid][pTogCajero] = 60;
		guardar_int_mysql("cuentas", "TogCajero", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogCajero]);
	}
	return 1;
}

Dialog:TransferirDinero(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_cajero(playerid);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	new playerid2 = strval(inputtext);
	if (playerid == playerid2) return SendClientMessage(playerid, COLOR_GREY, "* No puedes transferirte dinero a ti mismo.");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador no conectado.");
	SetPVarInt(playerid,"JugadorATransferir",playerid2);
	Dialog_Show(playerid, Transferir2Dinero, DIALOG_STYLE_INPUT, "{FFBF00}Transferencia (paso 2)", "{EBEBEB}Ahora ingresa el monto a transferir:", "Transferir", "Salir");
	return 1;
}

Dialog:Transferir2Dinero(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	new playerid2 = GetPVarInt(playerid, "JugadorATransferir"), dinero = strval(inputtext), string[180];
	if (dinero > InfoPlayer[playerid][pBanco]) return SendClientMessage(playerid, COLOR_GREY, "* Cantidad incorrecta.");
	if (dinero < 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes transferir menos de 0.");
	InfoPlayer[playerid][pBanco] -= dinero;
	InfoPlayer[playerid2][pBanco] += dinero;
	format(string, sizeof string, "* Realizaste una transferencia de $%s a %s.", diner_coma(dinero), NombreJugador(playerid2));
	SendClientMessage(playerid, 0xEAEA00FF, string);
	format(string, sizeof string, "* Recibiste una transferencia de $%s de %s.", diner_coma(dinero), NombreJugador(playerid));
	SendClientMessage(playerid2, 0xFFFF04FF, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) hizo una transferencia de $%s a %s(%d).", NombreOriginal(playerid), playerid, diner_coma(dinero), NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[TRANSFERENCIA ATM] %s transfirió $%s a %s.", NombreDeCuenta(playerid), diner_coma(dinero), NombreDeCuenta(playerid2));
	Log("LOGS/banco.log", string);
	guardar_int_mysql("cuentas", "BanescoOwO", InfoPlayer[playerid][pID], InfoPlayer[playerid][pBanco]);
	guardar_int_mysql("cuentas", "BanescoOwO", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pBanco]);
	DeletePVar(playerid, "JugadorATransferir");
	cmd_me(playerid, "hace una transacción bancaria");
	return 1;
}

CMD:limpiarobjetov(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new vehicleid, sstring[186];
	if (sscanf(params, "i", vehicleid)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /limpiarobjetov (VehiculoID)");
	if (vehicleid < 1 || vehicleid > MAX_VEHICLES) return SendClientMessage(playerid, COLOR_GREY, "* Vehículo inválido.");
	if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "* Vehículo inválido, intenta con otra ID.");
	new id = verificar_id_vehiculo(vehicleid), iCount = 0;
	if (id == -1) return SendClientMessage(playerid, 0xebebebff, "* Este vehículo no es dinámico.");
	if (CountObjVeh(id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Este vehículo no tiene ningún objeto agregado.");
	Loop(xd, 5, 0) if (InfoVehiculo[id][vObjModelo][xd] != 0)
	{
	    iCount++;
		DestroyDynamicObject(InfoVehiculo[id][vTuneo][xd]);
		InfoVehiculo[id][vObjModelo][xd] = 0;
		InfoVehiculo[id][vObjPosX][xd] = 0;
		InfoVehiculo[id][vObjPosY][xd] = 0;
		InfoVehiculo[id][vObjPosZ][xd] = 0;
		InfoVehiculo[id][vObjRotX][xd] = 0;
		InfoVehiculo[id][vObjRotY][xd] = 0;
		InfoVehiculo[id][vObjRotZ][xd] = 0;
		new query[1028];
		mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET ObjModelo_%d = '%d', ObjPosX_%d = '%f', ObjPosY_%d = '%f', ObjPosZ_%d = '%f', ObjRotX_%d = '%f', ObjRotY_%d = '%f', ObjRotZ_%d = '%f' WHERE ID = '%d'",
		xd+1, InfoVehiculo[id][vObjModelo][xd], xd+1, InfoVehiculo[id][vObjPosX][xd], xd+1, InfoVehiculo[id][vObjPosY][xd], xd+1, InfoVehiculo[id][vObjPosZ][xd], xd+1, InfoVehiculo[id][vObjRotX][xd], xd+1, InfoVehiculo[id][vObjRotY][xd], xd+1, InfoVehiculo[id][vObjRotZ][xd], InfoVehiculo[id][vID_sql]);
		mysql_tquery(DBcreative, query);
	}
	format(sstring, sizeof sstring, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) limpió %d objetos VIP del vehículo ID %d.", NombreOriginal(playerid), playerid, iCount, vehicleid);
	SendAdminMessage(0xFFFFFFFF, sstring);
	return 1;
}

CMD:crearcajero(playerid)
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (InfoPlayer[playerid][pEditingMode] != 0) return SendClientMessage(playerid, COLOR_GREY, "Estás editando un objeto.");
	new query[1028];
	Loop(id, MAX_CAJEROS, 1) if (!InfoCajero[id][atmModelo])
	{
		InfoCajero[id][atmModelo] = 19324;
		InfoCajero[id][atmDinero] = 5000000;
		GetPlayerPos(playerid, InfoCajero[id][atmPotX], InfoCajero[id][atmPotY], InfoCajero[id][atmPotZ]);
		InfoCajero[id][atmInterior] = GetPlayerInterior(playerid);
		InfoCajero[id][atmVirtualWorld] = GetPlayerVirtualWorld(playerid);
		Label_cajero(id, 1);
		SendClientMessage(playerid, 0x90C3D4FF, "Creaste el cajero indicado, ahora editalo.");
		EditDynamicObject(playerid, InfoCajero[id][atmObject]);
		InfoPlayer[playerid][pEditingMode] = 74;
		edicion_sql_actual[playerid] = id;
		//opción idsql ya creada.
		if (InfoCajero[id][atmID_sql] != 0)
		{
			mysql_format(DBcreative, query, sizeof query, "UPDATE cajeros SET Modelo = '%d', BolosUwU = '%d', PotX = '%f', PotY = '%f', PotZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
			InfoCajero[id][atmModelo],
			InfoCajero[id][atmDinero],
			InfoCajero[id][atmPotX],
			InfoCajero[id][atmPotY],
			InfoCajero[id][atmPotZ],
			InfoCajero[id][atmRotX],
			InfoCajero[id][atmRotY],
			InfoCajero[id][atmRotZ],
			InfoCajero[id][atmInterior],
			InfoCajero[id][atmVirtualWorld],
			InfoCajero[id][atmID_sql]);
			mysql_tquery(DBcreative, query);
			id = MAX_CAJEROS;
			return 1;
		}
		mysql_format(DBcreative, query, sizeof query, "INSERT INTO cajeros (Modelo, BolosUwU, PotX, PotY, PotZ, RotX, RotY, RotZ, Interior, VirtualWorld) VALUES ('%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')",
		InfoCajero[id][atmModelo],
		InfoCajero[id][atmDinero],
		InfoCajero[id][atmPotX],
		InfoCajero[id][atmPotY],
		InfoCajero[id][atmPotZ],
		InfoCajero[id][atmRotX],
		InfoCajero[id][atmRotY],
		InfoCajero[id][atmRotZ],
		InfoCajero[id][atmInterior],
		InfoCajero[id][atmVirtualWorld]);
		mysql_tquery(DBcreative, query, "OnCajeroCreate", "i", id);
		id = MAX_CAJEROS;
	}
	return 1;
}

forward OnCajeroCreate(id);
public OnCajeroCreate(id)
{
	InfoCajero[id][atmID_sql] = cache_insert_id();
	cache_unset_active();
    return 1;
}

CMD:borrarcajero(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id, string[256];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /borrarcajero (CajeroID)");
	if (!InfoCajero[id][atmModelo]) return SendClientMessage(playerid, COLOR_GREY, "Id cajero invalida.");
	InfoCajero[id][atmModelo] = 0;
	InfoCajero[id][atmDinero] = 0;
	InfoCajero[id][atmPotX] = 0.0;
	InfoCajero[id][atmPotY] = 0.0;
	InfoCajero[id][atmPotZ] = 0.0;
	InfoCajero[id][atmRotX] = 0.0;
	InfoCajero[id][atmRotY] = 0.0;
	InfoCajero[id][atmRotZ] = 0.0;
	InfoCajero[id][atmInterior] = 0;
	InfoCajero[id][atmVirtualWorld] = 0;
	DestroyDynamicObject(InfoCajero[id][atmObject]);
	DestroyDynamic3DTextLabel(Text3D: InfoCajero[id][atmLabel]);
	new query[2048];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cajeros SET Modelo = 0, BolosUwU = 0, PotX = 0.0, PotY = 0.0, PotZ = 0.0, RotX = 0.0, RotY = 0.0, RotZ = 0.0, Interior = 0, VirtualWorld = 0 WHERE ID = '%d'", InfoCajero[id][atmID_sql]);
	mysql_tquery(DBcreative, query);
	format(string, sizeof string, "Borraste el cajero ID %d, SQL vacía: %d", id, InfoCajero[id][atmID_sql]);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:ircajero(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id, string[128];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /ircajero (CajeroID)");
	if (id < 1 || id >= MAX_CAJEROS) return SendClientMessage(playerid, COLOR_GREY, "ID de cajero erróneo.");
	if (!InfoCajero[id][atmModelo]) return SendClientMessage(playerid, COLOR_GREY, "Id cajero invalida.");
	SetPosEx(playerid, InfoCajero[id][atmPotX], InfoCajero[id][atmPotY], InfoCajero[id][atmPotZ], 0.0, InfoCajero[id][atmInterior], InfoCajero[id][atmVirtualWorld], 1);
	format(string, sizeof string, "Teleport al cajero ID %d.", id);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:reaparecer(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") == 0) return SendClientMessage(playerid, COLOR_GREY, "* No estás en estado herido o muerto.");
	new gformat[186];
	if (timer_herido[playerid] != 0)
	{
		format(gformat, sizeof gformat, "Puedes reaparecer en el hospital en %d segundos.", timer_herido[playerid]);
		SendClientMessage(playerid, 0x6DDC76FF, gformat);
		return 1;
	}
	GoToHospital(playerid);
	return 1;
}

CMD:camello(playerid)
{
	if (!EnCamellos(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No estás en el punto de descargar drogas.");
	new dialg_products[1028];
	strcat(dialg_products, "Producto\tValor\tUnidades\n");
	strcat(dialg_products, "{EBEBEB}Materiales\t{04B404}$2,800\t{FFBF00}100\n");
	strcat(dialg_products, "{EBEBEB}Cocaína\t{04B404}$1,650\t{FFBF00}10 gramos\n");
	strcat(dialg_products, "{EBEBEB}Crack\t{04B404}$1,426\t{FFBF00}15 gramos\n");
	strcat(dialg_products, "{EBEBEB}Marihuana\t{04B404}$2,500\t{FFBF00}30 gramos");
	Dialog_Show(playerid, ShowCamello, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Traficante", dialg_products, "Comprar", "Salir");
	return 1;
}

Dialog:ShowCamello(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new string[195];
	switch (listitem)
	{
		case 0:
		{
		    new precio = 2800;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}100 materiales{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			InfoPlayer[playerid][pMateriales] += 100;
			guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
			format(string, sizeof string, "Compraste 100 materiales por $2,800 dólares. Ahora tienes %d materiales.", InfoPlayer[playerid][pMateriales]);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			GivePlayerCash(playerid, -precio, "compra de materiales");
		}
		case 1:
		{
		    new precio = 1650;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}10 gramos de cocaína{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 46, 10) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste 10 gramos de cocaína por $1,650 dólares.");
			GivePlayerCash(playerid, -precio, "10gr de cocaina");
		}
		case 2:
		{
		    new precio = 1426;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}15 gramos de crack{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 44, 15) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste 15 gramos de crack por $1,426 dólares.");
			GivePlayerCash(playerid, -precio, "15gr de crack");
		}
		case 3:
		{
		    new precio = 2500;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}30 gramos de marihuana{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 43, 30) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste 30 gramos de marihuana por $2,500 dólares.");
			GivePlayerCash(playerid, -precio, "30gr de marihuana");
		}
	}
	return 1;
}

EnCamellos(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 2526.8215, -1641.3239, 13.9997)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 2474.8921, -1324.3365, 27.5433)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1935.6304, -1060.5109, 24.4119)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 833.7507, -1528.7776, 13.6607)) return 1;
	return 0;
}

CMD:equiposonido(playerid)
{
 	if (InfoBoombox[playerid][BB_obj]) return SendClientMessage(playerid, -1, "Escribe {FFBF00}/encender{FFFFFF} para cambiar la emisora o {FFBF00}/requipo{FFFFFF} para recoger tu estéreo.");
	if (no_tiene_manos(playerid, 51) == 0) return 1;
	foreach(Player, i)
	{
		if (InfoBoombox[i][BB_obj])
		{
			if (IsPlayerInRangeOfPoint(playerid, 30.0, InfoBoombox[i][BB_x], InfoBoombox[i][BB_y], InfoBoombox[i][BB_z]))
			{
				SendClientMessage(playerid, COLOR_GREY, "No puedes colocar tu boombox aquí, se encuentra uno cerca.");
				return 1;
			}
		}
	}
	if (InfoPlayer[playerid][pManoDerecha] == 51)
	{
		InfoPlayer[playerid][pManoDerecha] = 0;
		InfoPlayer[playerid][pManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
	}
	else
	{
		InfoPlayer[playerid][pManoIzquierda] = 0;
		InfoPlayer[playerid][pManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid, 8);
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
	new Float:X, Float:Y, Float:Z, Float:A, string[128];
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);
	InfoBoombox[playerid][BB_obj] = CreateDynamicObject(2103, X, Y, Z-1, 0.0, 0.0, A, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
	format(string, sizeof string, "Boombox de %s{EBEBEB}\n(/encender)", NombreOriginal(playerid));
	InfoBoombox[playerid][BB_label] = CreateDynamic3DTextLabel(string, COLOR_GENERAL, X, Y, Z-0.45, 20.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
	InfoBoombox[playerid][BB_area] = CreateDynamicSphere(X, Y, Z, 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	InfoBoombox[playerid][BB_x] = X;
	InfoBoombox[playerid][BB_y] = Y;
	InfoBoombox[playerid][BB_z] = Z;
	InfoBoombox[playerid][BB_int] = GetPlayerInterior(playerid);
	InfoBoombox[playerid][BB_vw] = GetPlayerVirtualWorld(playerid);
	SendClientMessage(playerid, 0xEBEBEBFF, "Boombox plantado, usa ({FFBF00}/encender{EBEBEB}) para configurar las opciones de radio.");
	Streamer_Update(playerid);
 	return 1;
}
CMD:boombox(playerid) return cmd_equiposonido(playerid);
CMD:esonido(playerid) return cmd_equiposonido(playerid);

forward ReproducirBoombox(playerid, music[]);
public ReproducirBoombox(playerid, music[])
{
	if(InfoBoombox[playerid][BB_obj])
	{
		foreach(Player, i) if (IsPlayerConnectedEx(i) && InfoPlayer[i][pTogMusic] == 1)
		{
			if(IsPlayerInDynamicArea(i, InfoBoombox[playerid][BB_area]))
			{
				PlayStream(i, music, InfoBoombox[playerid][BB_x], InfoBoombox[playerid][BB_y], InfoBoombox[playerid][BB_z], 30.0, 1);
			}
		}
		SetPVarString(playerid, "BBStation", music);
	}
	return 1;
}

CMD:encender(playerid)
{
	if (!InfoBoombox[playerid][BB_obj]) return SendClientMessage(playerid, COLOR_GREY, "No has colocado ningún boombox.");
	if (!IsPlayerInRangeOfPoint(playerid, 4.0, InfoBoombox[playerid][BB_x], InfoBoombox[playerid][BB_y], InfoBoombox[playerid][BB_z])) return SendClientMessage(playerid, COLOR_GREY, "No estás cerca de tu boombox.");
	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return SendClientMessage(playerid, COLOR_GREY, "Debes estar agachado.");
	Dialog_Show(playerid, ShowBoombox, DIALOG_STYLE_LIST, "{FFBF00}Boombox", "{F50000}Detener música{FFFFFF}\nRadios\nURL - Internet\n{00CC00}Recoger radio", "Continuar", "Salir");
	return 1;
}

CMD:requiposonido(playerid)
{
	if (!InfoBoombox[playerid][BB_obj]) return SendClientMessage(playerid, COLOR_GREY, "No has colocado ningún boombox.");
	if (!IsPlayerInRangeOfPoint(playerid, 4.0, InfoBoombox[playerid][BB_x], InfoBoombox[playerid][BB_y], InfoBoombox[playerid][BB_z])) return SendClientMessage(playerid, COLOR_GREY, "No estás cerca de tu boombox.");
	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return SendClientMessage(playerid, COLOR_GREY, "Debes estar agachado.");
	if (DarObjeto(playerid, 51, 1) == 2) return 1;
	foreach(Player, i) if (IsPlayerInDynamicArea(i, InfoBoombox[playerid][BB_area]))
	{
		StopStream(i);
	}
	InfoBoombox[playerid][BB_area] = 0;
	DestroyDynamicObject(InfoBoombox[playerid][BB_obj]);
	DestroyDynamic3DTextLabel(Text3D: InfoBoombox[playerid][BB_label]);
	InfoBoombox[playerid][BB_obj] = 0;
	InfoBoombox[playerid][BB_x] = 0.0;
	InfoBoombox[playerid][BB_y] = 0.0;
	InfoBoombox[playerid][BB_z] = 0.0;
	InfoBoombox[playerid][BB_int] = 0;
	InfoBoombox[playerid][BB_vw] = 0;
	DeletePVar(playerid, "BBStation");
	SendClientMessage(playerid, COLOR_YELLOW, "Recogiste tu boombox.");
	return 1;
}
CMD:requipo(playerid) return cmd_requiposonido(playerid);

Dialog:ShowBoombox(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch(listitem)
	{
		case 0:
		{
			if (InfoBoombox[playerid][BB_area])
			{
				foreach(Player, i)
				{
					if(IsPlayerInDynamicArea(i, InfoBoombox[playerid][BB_area]))
						StopStream(i);
				}
				DeletePVar(playerid, "BBStation");
			}
			SendClientMessage(playerid, COLOR_RED, "Apagaste tu equipo sonido.");
		}
		case 1:
		{
			new StationsDialog[1560];
			strcat(StationsDialog, "Radio\tGénero\n");
			strcat(StationsDialog, "{EBEBEB}Top Latino\t{FFBF00}Variado\n");
			strcat(StationsDialog, "{EBEBEB}Dubbase.FM\t{FFBF00}Dubstep\n");
			strcat(StationsDialog, "{EBEBEB}Soft Rock Cafe\t{FFBF00}Heavy Metal\n");
			strcat(StationsDialog, "{EBEBEB}Aural Moon\t{FFBF00}Punk\n");
			strcat(StationsDialog, "{EBEBEB}Idobi Radio\t{FFBF00}Electronic\n");
			strcat(StationsDialog, "{EBEBEB}www.Hot108.com\t{FFBF00}Hip Hop\n");
			strcat(StationsDialog, "{EBEBEB}Sensacion Peru\t{FFBF00}Pop\n");
			strcat(StationsDialog, "{EBEBEB}DEEGAY RADIO\t{FFBF00}Dance Pop\n");
			strcat(StationsDialog, "{EBEBEB}PaganMetalRadio\t{FFBF00}Extreme Metal\n");
			strcat(StationsDialog, "{EBEBEB}PulsRadio TRANCE\t{FFBF00}Eletronic\n");
			strcat(StationsDialog, "{EBEBEB}The Trip\t{FFBF00}Music Usa\n");
			strcat(StationsDialog, "{EBEBEB}Radio Hunter\t{FFBF00}Electrónica");
			Dialog_Show(playerid, EmisorasBoombox, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Radios", StationsDialog, "Continuar", "Volver");
		}
		case 2: Dialog_Show(playerid, UrlBoombox, DIALOG_STYLE_INPUT, "{FFBF00}URL internet", "{EBEBEB}Inserta un Stream ({FFBF00}www.offliberty.com{EBEBEB}) para reproducirlo", "Continuar", "Volver");
		case 3:
		{
			if (!IsPlayerInRangeOfPoint(playerid, 4.0, InfoBoombox[playerid][BB_x], InfoBoombox[playerid][BB_y], InfoBoombox[playerid][BB_z])) return SendClientMessage(playerid, COLOR_GREY, "No estás cerca de tu boombox.");
			if (DarObjeto(playerid, 51, 1) == 2) return 1;
			foreach(Player, i) if (IsPlayerInDynamicArea(i, InfoBoombox[playerid][BB_area]))
			{
				StopStream(i);
			}
			InfoBoombox[playerid][BB_area] = 0;
			DestroyDynamicObject(InfoBoombox[playerid][BB_obj]);
			DestroyDynamic3DTextLabel(Text3D: InfoBoombox[playerid][BB_label]);
			InfoBoombox[playerid][BB_obj] = 0;
			InfoBoombox[playerid][BB_x] = 0.0;
			InfoBoombox[playerid][BB_y] = 0.0;
			InfoBoombox[playerid][BB_z] = 0.0;
			InfoBoombox[playerid][BB_int] = 0;
			InfoBoombox[playerid][BB_vw] = 0;
			DeletePVar(playerid, "BBStation");
			SendClientMessage(playerid, COLOR_YELLOW, "Recogiste tu boombox.");
		}
	}
	return 1;
}

Dialog:EmisorasBoombox(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_encender(playerid);
	switch (listitem)
	{
		case 0: ReproducirBoombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1652147");
		case 1: ReproducirBoombox(playerid, "http://148.251.91.15:7004");
		case 2: ReproducirBoombox(playerid, "http://173.244.215.163:8380");
		case 3: ReproducirBoombox(playerid, "http://64.202.98.133:2010");
		case 4: ReproducirBoombox(playerid, "http://50.117.115.211:80");
		case 5: ReproducirBoombox(playerid, "http://108.61.30.179:4010");
		case 6: ReproducirBoombox(playerid, "http://50.7.64.226:80/frisky_mp3_hi");
		case 7: ReproducirBoombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1747543");
		case 8: ReproducirBoombox(playerid, "http://62.210.209.179:8030/stream");
		case 9: ReproducirBoombox(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1316323");
		case 10: ReproducirBoombox(playerid, "http://somafm.com/tags.pls");
		case 11: ReproducirBoombox(playerid, "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel");
	}
	return 1;
}

Dialog:UrlBoombox(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_encender(playerid);
	if (isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "No has introducido ningún URL.");
	ReproducirBoombox(playerid, inputtext);
	return 1;
}

CMD:arrastrar(playerid, params[])
{
	if (InfoPlayer[playerid][pHorasOn] < 10) return SendClientMessage(playerid, COLOR_GREY, "* Debes tener al menos 10 horas jugando el servidor.");
	new playerid2, gformat[160];
	if (sscanf(params, "u", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /arrastrar (PlayerID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (playerid == playerid2) return SendClientMessage(playerid, COLOR_GREY, "* No te vas arrastrar a ti mismo jasjajsa, ppendejoxxd");
	if (!CercaDelWeon(3.5, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Estás lejos del jugador.");
	if (EstaParaArrastrar(playerid2) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador debe estar en estado de herido/muerto/rendido/esposado.");
	new Float:p_x, Float:p_y, Float:p_z, interior = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, p_x, p_y, p_z);
	SetPosEx(playerid2, p_x, p_y+0.5, p_z, 0, interior, vw, 1);
	format(gformat, sizeof gformat, "* %s se aprovecha de tu estado y te arrastra hacía él.", NombreJugador(playerid));
	SendClientMessage(playerid2, 0x1EB032FF, gformat);
	format(gformat, sizeof gformat, "* Aprovechas del estado de %s para arrastrarlo hacía ti.", NombreJugador(playerid2));
	SendClientMessage(playerid, 0x1EB032FF, gformat);
	return 1;
}

EstaParaArrastrar(playerid)
{
	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_HANDSUP) return 1;
	if (GetPVarInt(playerid, "PlayerCuffed") == 1) return 1;
	if (GetPVarInt(playerid, "EstaCrack") != 0) return 1;
	return 0;
}

CMD:arma(playerid, params[])
{
	if (sscanf(params, "s[32]", params[0])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /arma (Colgar - Ajustar - Hueso - Tomar)");
	if (strcmp(params[0], "colgar", true) == 0) cmd_espalda(playerid);
	else if (strcmp(params[0], "ajustar", true) == 0) cmd_pespalda(playerid);
	else if (strcmp(params[0], "hueso", true) == 0)
	{
		if (EditandoObjetoJ[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Ya estás editando un arma.");
		new gformat[512];
		format(gformat, sizeof(gformat), "Columna vertebral\nCabeza\nBrazo izquierdo\nBrazo derecho\nMano izquierda\nMano derecha\nMuslo izquierdo\nMuslo derecho\n\
		Pie izquierdo\nPie derecho\nPantorrilla derecha\nPantorrilla izquierda\nAntebrazo izquierdo\nAntebrazo derecho\nClavícula izquierda\n\
		Clavícula derecha\nCuello\nMandíbula");
		Dialog_Show(playerid, EditHueso, DIALOG_STYLE_LIST, "Hueso", gformat, "Continuar", "Salir");
	}
	else if (strcmp(params[0], "tomar", true) == 0) cmd_qespalda(playerid);
	else SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /arma (Colgar - Ajustar - Hueso - Tomar)");
	return 1;
}

Dialog:EditHueso(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;

	InfoPlayer[playerid][ptHueso][7] = listitem + 1;
	SendClientMessage(playerid, COLOR_YELLOW, "Cambiaste el hueso de tu arma.");
	if (InfoPlayer[playerid][pEspalda] != 0)
	{
		RemovePlayerAttachedObject(playerid, 9);
		PonerObjeto(playerid, 3, InfoPlayer[playerid][pEspalda]);
	}
	return 1;
}

CMD:espalda(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás herido.");
	new string[256], manod = InfoPlayer[playerid][pManoDerecha];
	if (EditandoObjetoJ[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Ya estás editando un arma.");
	if (InfoPlayer[playerid][pEspalda] != 0) return SendClientMessage(playerid, COLOR_GREY, "Posees un arma colgada, debes usar (/arma tomar) para quitarla.");
	if (manod == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en tu mano derecha mano.");
	new weaponid = InfoInventario[manod][IDArma];
	if (!weaponid) return SendClientMessage(playerid, COLOR_GREY, "No estás sosteniendo un arma.");
	if (!IsObjectWearable(manod)) return SendClientMessage(playerid, COLOR_GREY, "Este objeto no puede ser editado.");
	format(string, sizeof string, "Te cuelgas tu %s.", GetNameObjeto(manod));
	SendClientMessage(playerid, 0xA7CE00FF, string);
	InfoPlayer[playerid][pEspalda] = manod, InfoPlayer[playerid][pEspaldaCant] = InfoPlayer[playerid][pManoDerechaCant];
	InfoPlayer[playerid][pManoDerecha] = 0, InfoPlayer[playerid][pManoDerechaCant] = 0;
	PonerObjeto(playerid, 3, manod);
	ResetPlayerWeapons(playerid);
	RemovePlayerAttachedObject(playerid, 7);
	new query[512];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Espalda = '%d', Cantidad_espalda = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'",
	InfoPlayer[playerid][pEspalda], InfoPlayer[playerid][pEspaldaCant], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	return 1;
}

CMD:pespalda(playerid)
{
	if (InfoPlayer[playerid][pEspalda] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada colgado en tu cuerpo.");
	new obj = InfoPlayer[playerid][pEspalda];
	new weaponid = InfoInventario[obj][IDArma];
	if (!weaponid) return SendClientMessage(playerid, COLOR_GREY, "No estás sosteniendo un arma.");
	if (!IsObjectWearable(obj)) return SendClientMessage(playerid, COLOR_GREY, "Esta arma no puede ser editada.");
	if (EditandoObjetoJ[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Ya estás editando un arma.");
	EditAttachedObject(playerid, 9);
	EditandoObjetoJ[playerid] = 2;
	SendClientMessage(playerid, -1, "Mantén presionado {FFBF00}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
	return 1;
}

IsObjectWearable(objectid)
{
	switch (objectid)
	{
		case 2..15: return 1;
		case 19..40: return 1;
		case 54: return 1;
	}
	return 0;
}

CMD:qespalda(playerid)
{
	new string[170], Espalda = InfoPlayer[playerid][pEspalda];
	if (Espalda == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes ningún arma colgada.");
	if (EditandoObjetoJ[playerid]) return SendClientMessage(playerid, COLOR_GREY, "No puedes tomar el arma mientras editas.");
	if (InfoPlayer[playerid][pManoDerecha] > 0 && InfoPlayer[playerid][pManoIzquierda] > 0) { SendClientMessage(playerid, COLOR_GREY, "Posees ambas manos ocupadas."); return 1; }
	if (InfoPlayer[playerid][pManoDerecha] == 0)
	{
		format(string, sizeof string, "Agarras tu %s.", GetNameObjeto(Espalda));
		SendClientMessage(playerid, 0xA7CE00FF, string);
		GivePlayerWeapon(playerid, InfoInventario[Espalda][IDArma], InfoPlayer[playerid][pEspaldaCant]);
		InfoPlayer[playerid][pManoDerecha] = Espalda;
		InfoPlayer[playerid][pManoDerechaCant] = InfoPlayer[playerid][pEspaldaCant];
		PonerObjeto(playerid, 1, Espalda);
	}
	else if (InfoPlayer[playerid][pManoIzquierda] == 0)
	{
		format(string, sizeof string, "Agarras tu %s.", GetNameObjeto(Espalda));
		SendClientMessage(playerid, 0xA7CE00FF, string);
		InfoPlayer[playerid][pManoIzquierda] = Espalda;
		InfoPlayer[playerid][pManoIzquierdaCant] = InfoPlayer[playerid][pEspaldaCant];
		PonerObjeto(playerid, 2, Espalda);
	}
	InfoPlayer[playerid][pEspalda] = 0, InfoPlayer[playerid][pEspaldaCant] = 0;
	RemovePlayerAttachedObject(playerid, 9);
	new query[1000];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Espalda = '%d', Cantidad_espalda = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
	InfoPlayer[playerid][pEspalda], InfoPlayer[playerid][pEspaldaCant], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	return 1;
}

CMD:altavoz(playerid)
{
	if (EnLlamada[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No te encuentras en una llamada.");
	if (Altavoz[playerid] == 0)
	{
		Altavoz[playerid] = 1;
		SendClientMessage(playerid, 0xA7CE00FF, "Altavoz activado.");
	}
	else
	{
		Altavoz[playerid] = 0;
		SendClientMessage(playerid, 0xA7CE00FF, "Altavoz desactivado.");
	}
	return 1;
}

CMD:llamar(playerid, params[])
{
	if (InfoPlayer[playerid][pTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes un número telefónico.");
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	if (InfoPlayer[playerid][pTiempoSancion] != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás en prisión.");
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás herido.");
	if (InfoPlayer[playerid][pTogTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* Tu teléfono se encuentra apagado, escribe /togphone para encenderlo.");
	if (EnLlamada[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "* Ya te encuentras en una llamada.");
	if (GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, COLOR_GREY, "* Debes tener al menos 3$ dólares en bolsillos para llamar.");
	new numero;
	if (sscanf(params, "d", numero)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /llamar (Número)");
	if (numero == 0) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /llamar (Número)");
	if (numero == InfoPlayer[playerid][pTelefono]) return SendClientMessage(playerid, COLOR_GREY, "* No te puedes llamar a tí mismo, acaso eres pendejo XDd.");
	cmd_me(playerid, "saca su móvil y marca unos números");
	llamar_numero(playerid, numero);
	return 1;
}

posee_telefono(playerid)
{
	if (InfoPlayer[playerid][pManoDerecha] == 50) return 1;
	if (InfoPlayer[playerid][pManoIzquierda] == 50) return 1;
	for (new x = 0; x < 10; x++)
		if (InfoPlayer[playerid][pBolsillo][x] == 50) return 1;
	for (new x = 0; x < 6; x++)
		if (InfoPlayer[playerid][pCinturon][x] == 50) return 1;
	return 0;
}

forward llamar_numero(playerid, numero);
public llamar_numero(playerid, numero)
{
	if (numero == InfoPlayer[playerid][pTelefono]) return SendClientMessage(playerid, COLOR_GREY, "* No te puedes llamar a tí mismo, acaso eres pendejo XDd.");
	new string[256];
	if (numero == 911) //emergencias
	{
		if (OnDuty[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes llamar a la estación estando de servicio.");

		EnLlamada[playerid] = 911;
		SetPVarInt(playerid, "en_emergencias", 0);

		SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: Emergencias, ¿qué servicio necesita? ¿PD o SD?");
		return 1;
	}
	new tlfencontrado = 0;
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2))
	{
		if (InfoPlayer[playerid2][pTelefono] == numero)
		{
			if (EnLlamada[playerid2] != 0 || PersonaEnLlamada[playerid2] != -1) { tlfencontrado = -1; break; }
			if (!posee_telefono(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* El teléfono seleccionado se encuentra apagado. (1)");
			if (InfoPlayer[playerid2][pTogTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* El teléfono seleccionado se encuentra apagado. (2)");
			tlfencontrado = 1;
			cmd_me(playerid2, "le suena el móvil");
			format(string, sizeof string, "* Llamada entrante del número %d, escribe /contestar para responder la llamada.", InfoPlayer[playerid][pTelefono]);
			SendClientMessage(playerid2, COLOR_LIGHTGREEN, string);
			format(string, sizeof string, "*** Llamando al número %d ***", numero);
			SendClientMessage(playerid, 0xEBEBEBFF, string);
			ToqueLlamada[playerid2] = 0;
			PersonaEnLlamada[playerid] = playerid2;
			PersonaEnLlamada[playerid2] = playerid;
			EnLlamada[playerid] = 1;
			ToqueLlamadaTimer[playerid2] = SetTimerEx("OnLlamadaPhone", 15000, true, "i", playerid2);
			break;
		}
	}
	if (tlfencontrado == -1) SendClientMessage(playerid, COLOR_GREY, "* El número que ha marcado está en una llamada.");
	if (tlfencontrado == 0) SendClientMessage(playerid, COLOR_GREY, "* El número que ha marcado no existe o no está disponible.");
	return 1;
}

CMD:colgar(playerid)
{
	new string[245], oyente = PersonaEnLlamada[playerid];
	if (EnLlamada[playerid] == 1) //está llamando a alguien
	{
		EnLlamada[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "*** Has colgado.");
		format(string, sizeof string, "Tienes una llamada perdida del %d.", InfoPlayer[playerid][pTelefono]);
		SendClientMessage(oyente, 0x9C791200, string);
		KillTimer(ToqueLlamadaTimer[oyente]);
		ToqueLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
		return 1;
	}
	if (EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3) //llamando normal
	{
		SendClientMessage(playerid, COLOR_GREY, "*** Has colgado.");
		SendClientMessage(oyente, COLOR_GREY, "*** Han colgado.");
		if (EnLlamada[playerid] == 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Coste de la llamada: 1$");
			GivePlayerCash(playerid, -1, "costo de llamada");
		}
		if (EnLlamada[oyente] == 3)
		{
			SendClientMessage(oyente, COLOR_LIGHTRED, "Coste de la llamada: 1$");
			GivePlayerCash(oyente, -1, "costo de llamada");
		}
		EnLlamada[playerid] = 0;
		EnLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
		return 1;
	}
	if (EnLlamada[playerid] == 911) //llamando a emergencias
	{
		EnLlamada[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "*** Has colgado.");
	}
	if (EnLlamada[playerid] == 912) //llamada de emergencias
	{
		SendClientMessage(playerid, COLOR_GREY, "*** Has colgado.");
		SendClientMessage(oyente, COLOR_GREY, "*** Han colgado.");
		EnLlamada[playerid] = 0;
		EnLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
	}
	return 1;
}

forward OnLlamadaPhone(playerid);
public OnLlamadaPhone(playerid)
{
	new string[240];
	if (!telefono_enmanos(playerid))
	{
		EnLlamada[PersonaEnLlamada[playerid]] = 0;
		ToqueLlamada[playerid] = 0;
		SendClientMessage(PersonaEnLlamada[playerid], 0xEBEBEBFF, "No contestan.");
		PersonaEnLlamada[PersonaEnLlamada[playerid]] = -1;
		PersonaEnLlamada[playerid] = -1;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	if (ToqueLlamada[playerid] > 4)
	{
		if (PersonaEnLlamada[playerid] != -1) EnLlamada[PersonaEnLlamada[playerid]] = 0;
		ToqueLlamada[playerid] = 0;
		format(string, sizeof string, "* Llamada perdida del %d.", InfoPlayer[PersonaEnLlamada[playerid]][pTelefono]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		SendClientMessage(PersonaEnLlamada[playerid], 0xEBEBEBFF, "No contestan.");
		for(new i=0; i<MAX_PLAYERS; i++) { if(PersonaEnLlamada[i] == playerid){PersonaEnLlamada[i] = -1; break;} }
		PersonaEnLlamada[playerid] = -1;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	/*PlayerAudio(playerid, 20600, 15.0);*/
	SendClientMessage(PersonaEnLlamada[playerid], 0xEBEBEBFF, "* Llamando...");
	ToqueLlamada[playerid] ++;
	return 1;
}

telefono_enmanos(playerid)
{
	if (InfoPlayer[playerid][pManoDerecha] == 50) return 1;
	if (InfoPlayer[playerid][pManoIzquierda] == 50) return 1;
	return 0;
}

CMD:transferir(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás herido.");
	if (InfoPlayer[playerid][pTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes un número telefónico.");
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	if (InfoPlayer[playerid][pHorasOn] < 3) return SendClientMessage(playerid, COLOR_GREY, "* Necesitas jugar al menos tres horas, para poder transferir dinero.");
	Dialog_Show(playerid, TransferirBancoDinero, DIALOG_STYLE_INPUT, "{FFBF00}Transferencia (paso 1)", "{EBEBEB}Por favor, ingrese {FFBF00}ID del jugador{EBEBEB} que deseas transferir dinero:", "Continuar", "Volver");
    ConTransferir[playerid] = 2;
	return 1;
}

CMD:sms(playerid, params[])
{
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás herido.");
	if (InfoPlayer[playerid][pTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes un número telefónico.");
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	new string[256], phonenumb, text[256];
	if (sscanf(params, "ds[256]", phonenumb, text)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /sms (Número) (Texto)");
	if (GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, COLOR_GREY, "* Debes tener al menos 2$ dólares en bolsillos para enviar mensajes.");
	foreach(new i: Player) if (IsPlayerConnectedEx(i))
	{
		if (InfoPlayer[i][pTelefono] == phonenumb && phonenumb != 0)
		{
			new playerid2 = i;
			if (InfoPlayer[playerid2][pTogTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* Mensaje no enviado, teléfono apagado.");
			format(string, sizeof string, "SMS de %d: %s", InfoPlayer[playerid][pTelefono], text);
			SendClientMessage(playerid2, 0xFFEA5FFF, string);
			format(string, sizeof string, "SMS a %d: %s", phonenumb, text);
			SendClientMessage(playerid, 0xEBEBEBFF, string);
			PlayerAudio(playerid, 1053, 10.0);
			PlayerAudio(playerid2, 20804, 10.0);
			GivePlayerCash(playerid, -2, "costo de sms");
			cmd_me(playerid, "envía un mensaje de texto");
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "* El número que ha marcado no existe o no está disponible.");
	return 1;
}

CMD:contestar(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás herido.");
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	if (EnLlamada[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "* Ya te encuentras en una llamada.");
	if (PersonaEnLlamada[playerid] > -1)//llamada normal
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Contestas la llamada.");
		SendClientMessage(PersonaEnLlamada[playerid], COLOR_YELLOW, "Contestaron el teléfono, se te cobrara 1$ por esta llamada.");
		EnLlamada[playerid] = 2;
		EnLlamada[PersonaEnLlamada[playerid]] = 3;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "* Parece no haber llamadas entrantes.");
	return 1;
}
CMD:atender(playerid) return cmd_contestar(playerid);

CMD:consumir(playerid, params[])
{
    new efecto_droga = InfoPlayer[playerid][pDrogaTipo]; //tipo de droga
	new potencia_efecto = InfoPlayer[playerid][pDrogaPower]; //potencia de la droga
	new query[1000];

	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás herido.");
    if (sscanf(params, "s[32]", params[0])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /consumir (Item)"), SendClientMessage(playerid, -1, "Items disponibles: cocaina, crack, metanfetamina, marihuana");
	if (strcmp(params[0], "cocaina", true) == 0)
    {
		new obj = 46;
		if (no_tiene_manos(playerid, obj) == 0) return 1;
		if (efecto_droga == 1 && potencia_efecto == 3) return SendClientMessage(playerid, COLOR_RED, "Ya consumiste demasiada cocaína.");

        //resta la droga
        if (InfoPlayer[playerid][pManoDerecha] == obj) InfoPlayer[playerid][pManoDerechaCant] --;
        else InfoPlayer[playerid][pManoIzquierdaCant] --;
		ActualizarManos(playerid);

        if(efecto_droga != 0 && efecto_droga != 1) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(InfoPlayer[playerid][pAdiccion][0] > 0 && InfoPlayer[playerid][pAbstinenceEffect] == 1) InfoPlayer[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes cocaína.");
        SendClientMessage(playerid, 0x9ACD32AA, "Te sientes más resistente. Sientes un mayor bienestar. Desarrollas paranoia, estás atento a todo tu entorno.");
        if (potencia_efecto != 0 && efecto_droga != 1) InfoPlayer[playerid][pDrogaPower] = 0;

		if (efecto_droga != 1)
		{
			SetPlayerWeather(playerid, 124);
			ContadorCuraciones[playerid] = 13;
			SetTimerEx("DrogaCuracion", 10000, false, "i", playerid);
			InfoPlayer[playerid][pDrogaTipo] = 1;
			InfoPlayer[playerid][pDrogaPower] = 2;
			InfoPlayer[playerid][pDrogaTiempo] = 15;
		}
		else
		{
			InfoPlayer[playerid][pDrogaPower] = 3;
			InfoPlayer[playerid][pDrogaTiempo] += 10;
		}

		if (InfoPlayer[playerid][pAdiccion][0] == 0)
        {
			if (InfoPlayer[playerid][pAdiccion][1] > 0 || InfoPlayer[playerid][pAdiccion][2] > 0) InfoPlayer[playerid][pAdiccion][0] = 5;
			else InfoPlayer[playerid][pAdiccion][0] = 3;
		}
        else
        {
            new addiction = random(6);
            if (InfoPlayer[playerid][pAdiccion][1] > 0 || InfoPlayer[playerid][pAdiccion][2] > 0) InfoPlayer[playerid][pAdiccion][0] += 5+addiction;
            else InfoPlayer[playerid][pAdiccion][0] += 3+addiction;
        }
        if (InfoPlayer[playerid][pAdiccion][0] > 100) InfoPlayer[playerid][pAdiccion][0] = 100;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET AbstinenceTime = '%d', Droga_tipo = '%d', Droga_tiempo = '%d', Droga_power = '%d', Adiccion_1 = '%d' WHERE ID = '%d'",
		InfoPlayer[playerid][pAbstinenceTime], InfoPlayer[playerid][pDrogaTipo], InfoPlayer[playerid][pDrogaTiempo], InfoPlayer[playerid][pDrogaPower], InfoPlayer[playerid][pAdiccion][0], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
    }
    else if (strcmp(params[0], "crack", true) == 0)
    {
        new obj = 44;
        if (no_tiene_manos(playerid, obj) == 0) return 1;
        if (efecto_droga == 2 && potencia_efecto == 3) return SendClientMessage(playerid, COLOR_RED, "Ya consumiste demasiado crack.");

        //resta la droga
        if (InfoPlayer[playerid][pManoDerecha] == obj) InfoPlayer[playerid][pManoDerechaCant] --;
        else InfoPlayer[playerid][pManoIzquierdaCant] --;
        ActualizarManos(playerid);
        if(efecto_droga != 0 && efecto_droga != 2) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(InfoPlayer[playerid][pAdiccion][1] > 0 && InfoPlayer[playerid][pAbstinenceEffect] == 1) InfoPlayer[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes crack.");
        SendClientMessage(playerid, 0x9ACD32AA, "Te sientes más resistente. Sientes un mayor bienestar. Desarrollas paranoia, estás atento a todo tu entorno.");
        if (potencia_efecto != 0 && efecto_droga != 2) InfoPlayer[playerid][pDrogaPower] = 0;

        if (efecto_droga != 2)
        {
			SetPlayerWeather(playerid, 124);
            ContadorCuraciones[playerid] = 6;
            SetTimerEx("DrogaCuracion", 5000, false, "i", playerid);
			InfoPlayer[playerid][pDrogaTipo] = 2;
			InfoPlayer[playerid][pDrogaPower] = 2;
			InfoPlayer[playerid][pDrogaTiempo] = 20;
		}
		else
		{
			InfoPlayer[playerid][pDrogaPower] = 3;
			InfoPlayer[playerid][pDrogaTiempo] += 10;
		}
        if (InfoPlayer[playerid][pAdiccion][1] == 0)
        {
            if (InfoPlayer[playerid][pAdiccion][0] > 0 || InfoPlayer[playerid][pAdiccion][2] > 0) InfoPlayer[playerid][pAdiccion][1] = 7;
            else InfoPlayer[playerid][pAdiccion][1] = 4;
        }
        else
        {
            new addiction = random(6);
            if(InfoPlayer[playerid][pAdiccion][0] > 0 || InfoPlayer[playerid][pAdiccion][2] > 0) InfoPlayer[playerid][pAdiccion][1] += 7+addiction;
            else InfoPlayer[playerid][pAdiccion][1] += 4+addiction;
        }
        if (InfoPlayer[playerid][pAdiccion][1] > 100) InfoPlayer[playerid][pAdiccion][1] = 100;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET AbstinenceTime = '%d', Droga_tipo = '%d', Droga_tiempo = '%d', Droga_power = '%d', Adiccion_2 = '%d' WHERE ID = '%d'",
		InfoPlayer[playerid][pAbstinenceTime], InfoPlayer[playerid][pDrogaTipo], InfoPlayer[playerid][pDrogaTiempo], InfoPlayer[playerid][pDrogaPower], InfoPlayer[playerid][pAdiccion][1], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
    }
    else if (strcmp(params[0], "metanfetamina", true) == 0)
    {
        new obj = 45;
        if (no_tiene_manos(playerid, obj) == 0) return 1;
        if (efecto_droga == 3 && potencia_efecto == 3) return SendClientMessage(playerid, COLOR_RED, "Ya consumiste demasiada metanfetamina.");

        //resta la droga
        if (InfoPlayer[playerid][pManoDerecha] == obj) InfoPlayer[playerid][pManoDerechaCant] --;
        else InfoPlayer[playerid][pManoIzquierdaCant] --;
        ActualizarManos(playerid);
        if(efecto_droga != 0 && efecto_droga != 3) ContadorCuraciones[playerid] = 0;
        KillTimer(random_abstinence[playerid]);
        if(InfoPlayer[playerid][pAdiccion][2] > 0 && InfoPlayer[playerid][pAbstinenceEffect] == 1) InfoPlayer[playerid][pAbstinenceTime] = 0;

        SendClientMessage(playerid, 0xFFFF00AA, "Consumes metanfetamina.");
        SendClientMessage(playerid, 0x9ACD32AA, "Te sientes más enérgico y con mayor confianza. Aumenta tu concentración. Desarrollas paranoia y agresividad.");
        if (potencia_efecto != 0 && efecto_droga != 3) InfoPlayer[playerid][pDrogaPower] = 0;

        if (efecto_droga != 3)
        {
			SetPlayerWeather(playerid, -66);
            ContadorCuraciones[playerid] = 9;
            SetTimerEx("DrogaCuracion", 13000, false, "i", playerid);
			InfoPlayer[playerid][pDrogaTipo] = 3;
			InfoPlayer[playerid][pDrogaPower] = 2;
			InfoPlayer[playerid][pDrogaTiempo] = 10;
		}
    	else
		{
			InfoPlayer[playerid][pDrogaPower] = 3;
			InfoPlayer[playerid][pDrogaTiempo] += 5;
        }
        if (InfoPlayer[playerid][pAdiccion][2] == 0)
        {
            if (InfoPlayer[playerid][pAdiccion][0] > 0 || InfoPlayer[playerid][pAdiccion][1] > 0) InfoPlayer[playerid][pAdiccion][2] = 5;
            else InfoPlayer[playerid][pAdiccion][2] = 3;
        }
        else
        {
            new addiction = random(3);
            if (InfoPlayer[playerid][pAdiccion][0] > 0 || InfoPlayer[playerid][pAdiccion][1] > 0) InfoPlayer[playerid][pAdiccion][2] += 5+addiction;
            else InfoPlayer[playerid][pAdiccion][2] += 3+addiction;
        }
        if(InfoPlayer[playerid][pAdiccion][2] > 100) InfoPlayer[playerid][pAdiccion][2] = 100;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET AbstinenceTime = '%d', Droga_tipo = '%d', Droga_tiempo = '%d', Droga_power = '%d', Adiccion_3 = '%d' WHERE ID = '%d'",
		InfoPlayer[playerid][pAbstinenceTime], InfoPlayer[playerid][pDrogaTipo], InfoPlayer[playerid][pDrogaTiempo], InfoPlayer[playerid][pDrogaPower], InfoPlayer[playerid][pAdiccion][2], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
    }
    else if (strcmp(params[0], "marihuana", true) == 0)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Para consumir marihuana utiliza /fumar (Canuto ó Blunt)");
    }
    return 1;
}

CMD:fumar(playerid, params[])
{
	new manoder = InfoPlayer[playerid][pManoDerecha];
	/*
		41 Encendedor
		42 Paquete de cigarros
		43 Marihuana
		47 Canuto de marihuana
		48 Blunt de marihuana
		49 Cigarro
	*/
	new query[500];
	if ((manoder == 42 || manoder == 43) && InfoPlayer[playerid][pManoDerechaCant] > 0)
	{
		if (InfoPlayer[playerid][pManoIzquierda] != 41) return SendClientMessage(playerid, COLOR_GREY, "Debes tener un encendedor en tu mano izquierda.");
		if (InfoPlayer[playerid][pManoIzquierdaCant] == 0) return SendClientMessage(playerid, COLOR_GREY, "El encendedor que tienes ya no tiene gas.");
		new slot = -1;
		Loop(x, 10, 0) if (InfoPlayer[playerid][pBolsillo][x] == 0)
		{
			slot = x;
			break;
		}
		if (slot == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes donde guardar el objeto de la mano derecha.");
		switch (manoder)
		{
			case 43: //marihuana
			{
				if (!sscanf(params, "s[7]", params[0]))
				{
					if (!strcmp(params[0], "canuto", true))
					{
						RemovePlayerAttachedObject(playerid, 7);
						InfoPlayer[playerid][pManoDerechaCant]--;
						InfoPlayer[playerid][pManoIzquierdaCant]--;
						InfoPlayer[playerid][pBolsillo][slot] = 43;
						InfoPlayer[playerid][pBolsilloCant][slot] = InfoPlayer[playerid][pManoDerechaCant];
						InfoPlayer[playerid][pManoDerecha] = 47;
						InfoPlayer[playerid][pManoDerechaCant] = 5;
						PonerObjeto(playerid, 1, 47);
						SendClientMessage(playerid, 0xFFFF00AA, "Te lías un canuto de marihuana, para dar otra calada utliza /fumar.");
						cmd_fumando(playerid, "5");
						mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
						slot+1, InfoPlayer[playerid][pBolsillo][slot], slot+1, InfoPlayer[playerid][pBolsilloCant][slot], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
						mysql_tquery(DBcreative, query);
						return 1;
					}
					else if (!strcmp(params[0], "blunt", true))
					{
						RemovePlayerAttachedObject(playerid, 7);
						InfoPlayer[playerid][pManoDerechaCant]--;
						InfoPlayer[playerid][pManoIzquierdaCant]--;
						InfoPlayer[playerid][pBolsillo][slot] = 43;
						InfoPlayer[playerid][pBolsilloCant][slot] = InfoPlayer[playerid][pManoDerechaCant];
						InfoPlayer[playerid][pManoDerecha] = 0;
						InfoPlayer[playerid][pManoDerecha] = 48;
						InfoPlayer[playerid][pManoDerechaCant] = 5;
						PonerObjeto(playerid, 1, 48);
						SendClientMessage(playerid, 0xFFFF00AA, "Te lías un blunt de marihuana, para dar otra calada utliza /fumar.");
						cmd_fumando(playerid, "5");
						mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
						slot+1, InfoPlayer[playerid][pBolsillo][slot], slot+1, InfoPlayer[playerid][pBolsilloCant][slot], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
						mysql_tquery(DBcreative, query);
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /fumar (Canuto ó Blunt)");
				}
				else return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /fumar (Canuto ó Blunt)");
			}
			case 42: //paquete cigarros
			{
				RemovePlayerAttachedObject(playerid, 7);
				InfoPlayer[playerid][pManoDerechaCant]--;
				InfoPlayer[playerid][pManoIzquierdaCant]--;
				InfoPlayer[playerid][pBolsillo][slot] = 42;
				InfoPlayer[playerid][pBolsilloCant][slot] = InfoPlayer[playerid][pManoDerechaCant];
				InfoPlayer[playerid][pManoDerecha] = 49;
				InfoPlayer[playerid][pManoDerechaCant] = 5;
				PonerObjeto(playerid, 1, 49);
				SendClientMessage(playerid, 0xFFFF00AA, "Te lías un cigarro, para dar otra calada utliza /fumar.");
				cmd_fumando(playerid, "5");
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
				slot+1, InfoPlayer[playerid][pBolsillo][slot], slot+1, InfoPlayer[playerid][pBolsilloCant][slot], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
				mysql_tquery(DBcreative, query);
				return 1;
			}
		}
	}
	else if (manoder == 47 || manoder == 48 || manoder == 49)
	{
		switch (manoder)
		{
			case 47:
			{
				if (InfoPlayer[playerid][pDrogaTipo] != 0) ContadorCuraciones[playerid] = 0;
				KillTimer(random_abstinence[playerid]);

				if (InfoPlayer[playerid][pDrogaTipo] != 4)
				{
					SendClientMessage(playerid, 0x9ACD32AA, "Te sientes cada vez más relajado. Todo te causa gracia. De vez en cuando cambia tu forma de pensar y comportamiento.");
					InfoPlayer[playerid][pDrogaTipo] = 4;
					InfoPlayer[playerid][pDrogaPower] = 1;
					InfoPlayer[playerid][pDrogaTiempo] = 3;
					ContadorCuraciones[playerid] = 29;
					Loop(x, 3, 0) { TextDrawShowForPlayer(playerid, TDmariguana[x]); }
					SetPlayerWeather(playerid, 124);
					SetTimerEx("DrogaCuracion", 15000, false, "i", playerid);
				}
				else
				{
					InfoPlayer[playerid][pDrogaPower] += 1;
					InfoPlayer[playerid][pDrogaTiempo] += 1;
				}
				InfoPlayer[playerid][pManoDerechaCant]--;
				cmd_fumando(playerid, "5");
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Cantidad_mano_derecha = '%d', Droga_tipo = '%d', Droga_power = '%d', Droga_tiempo = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pDrogaTipo], InfoPlayer[playerid][pDrogaPower], InfoPlayer[playerid][pDrogaTiempo], InfoPlayer[playerid][pID]);
				mysql_tquery(DBcreative, query);
				return 1;
			}
			case 48:
			{
				if (InfoPlayer[playerid][pDrogaTipo] != 0) ContadorCuraciones[playerid] = 0;
				KillTimer(random_abstinence[playerid]);

				if (InfoPlayer[playerid][pDrogaTipo] != 4)
				{
					SendClientMessage(playerid, 0x9ACD32AA, "Te sientes cada vez más relajado. Todo te causa gracia. De vez en cuando cambia tu forma de pensar y comportamiento.");
					InfoPlayer[playerid][pDrogaTipo] = 4;
					InfoPlayer[playerid][pDrogaPower] = 1;
					InfoPlayer[playerid][pDrogaTiempo] = 3;
					ContadorCuraciones[playerid] = 15;
					Loop(x, 3, 0) { TextDrawShowForPlayer(playerid, TDmariguana[x]); }
					SetPlayerWeather(playerid, 124);
					SetTimerEx("DrogaCuracion", 15000, false, "i", playerid);
				}
				else
				{
					InfoPlayer[playerid][pDrogaPower] += 1;
					InfoPlayer[playerid][pDrogaTiempo] += 1;
				}
				InfoPlayer[playerid][pManoDerechaCant]--;
				cmd_fumando(playerid, "5");
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Cantidad_mano_derecha = '%d', Droga_tipo = '%d', Droga_power = '%d', Droga_tiempo = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pDrogaTipo], InfoPlayer[playerid][pDrogaPower], InfoPlayer[playerid][pDrogaTiempo], InfoPlayer[playerid][pID]);
				mysql_tquery(DBcreative, query);
				return 1;
			}
			case 49:
			{
				InfoPlayer[playerid][pManoDerechaCant]--;
				cmd_fumando(playerid, "5");
				ActualizarManos(playerid);
			}
			default: return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en manos que fumar.");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "No tienes nada para encender o fumar en tu mano derecha.");
	return 1;
}

forward DrogaCuracion(playerid);
public DrogaCuracion(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0)
	{
		ContadorCuraciones[playerid] = 0;
		return 1;
	}
	if (InfoPlayer[playerid][pDrogaTipo] != 0 && ContadorCuraciones[playerid] != 0)
	{
		new tiempo, Float:curacion, Float:sangre = InfoPlayer[playerid][pVida];
		switch (InfoPlayer[playerid][pDrogaTipo])
		{
			case 1: curacion = 7.0, tiempo = 10000;
			case 2: curacion = 15.0, tiempo = 5000;
			case 3: curacion = 10.0, tiempo = 13000;
			case 4: curacion = 6.0, tiempo = 15000;
		}
		if (curacion+sangre > 100.0) dar_vida(playerid, 100.0), ContadorCuraciones[playerid] = 0;
		else
		{
			dar_vida(playerid, sangre+curacion);
			ContadorCuraciones[playerid] --;
			if (ContadorCuraciones[playerid] > 0) SetTimerEx("DrogaCuracion", tiempo, false, "i", playerid);
		}
	}
	else ContadorCuraciones[playerid] = 0;
	return 1;
}

CMD:fumando(playerid, params[])
{
	new animacion;
	if (sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /fumando (1-7)");
	switch (animacion)
	{
		case 1: ApplyAnimation(playerid, 	"SMOKING",	"M_smklean_loop",	4.0, 1, 0, 1, 0, 0, 1);
		case 2: ApplyAnimation(playerid, 	"SMOKING",	"M_smkstnd_loop",	4.0, 1, 0, 1, 0, 0, 1);
		case 3: ApplyAnimation(playerid, 	"SMOKING",	"M_smk_out",		4.0, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimation(playerid, 	"SMOKING",	"M_smk_in",			4.0, 0, 1, 1, 0, 0, 1);
		case 5: ApplyAnimation(playerid, 	"GANGS", 	"smkcig_prtl",		4.0, 0, 1, 1, 0, 0, 1);
		case 6: ApplyAnimation(playerid, 	"SMOKING",	"M_smk_drag",		4.0, 0, 1, 1, 0, 0, 1);
		case 7: ApplyAnimation(playerid,	"SMOKING",	"F_smklean_loop",	4.0, 1, 0, 1, 0, 0, 1);
		default: SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /fumando (1-7)");
	}
	return 1;
}

CMD:adminmap(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	SendClientMessage(playerid, COLOR_YELLOW, "Comandos del sistema de objetos dinámicos (MAP)");
	SendClientMessage(playerid, 0xEBEBEBFF, "/mapear (Para crear objeto) - /a_objetos (Ver objetos en rango especifico) - /irobjeto (Ir objeto especifico)");
	SendClientMessage(playerid, 0xEBEBEBFF, "/objetosadmin (Para ver diálogo de objetos creados) - /editar_objeto (Editar objeto especifico)");
	SendClientMessage(playerid, 0xEBEBEBFF, "/aborrarobjeto (Borrar objeto especifico) - /borrarobjetoadmin (Borrar objeto más cercano)");
	return 1;
}

CMD:a_objetos(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[128], radius;
	if (sscanf(params, "d", radius)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /a_objetos (Radio)");
	if (radius < 1 || radius > 100) { SendClientMessage(playerid, COLOR_GREY, "El radio debe ser de 1 a 100."); return 1; }
	Loop(id, MAX_OBJETOS_ADMIN, 1) if (IsPlayerInRangeOfPoint(playerid, radius, InfoObjeto[id][oPotX], InfoObjeto[id][oPotY], InfoObjeto[id][oPotZ]) && InfoPlayer[playerid][pInterior] == InfoObjeto[id][oInterior] && InfoPlayer[playerid][pVirtualWorld] == InfoObjeto[id][oVirtualWorld])
	{
		format(string, sizeof string, "ID: %d - Modelo: %d", id, InfoObjeto[id][oModelo]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:irobjeto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id;
	if (sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /irobjeto (ObjetoID)");
	if (id < 1 || id >= MAX_OBJETOS_ADMIN) return SendClientMessage(playerid, COLOR_GREY, "ID de objeto admin inválido.");
	if (!InfoObjeto[id][oPotX]) return SendClientMessage(playerid, COLOR_GREY, "ID Invalida.");

	SetPosEx(playerid, InfoObjeto[id][oPotX], InfoObjeto[id][oPotY], InfoObjeto[id][oPotZ], 0.0, InfoObjeto[id][oInterior], InfoObjeto[id][oVirtualWorld], 1);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Teleportado.");
	return 1;
}

CMD:aborrarobjeto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id;
	if (sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /aborrarobjeto (ObjetoID)");
	if (id < 1 || id >= MAX_OBJETOS_ADMIN) return SendClientMessage(playerid, COLOR_GREY, "ID de objeto admin inválido.");
	if (!InfoObjeto[id][oPotX]) return SendClientMessage(playerid, COLOR_GREY, "ID Invalida.");

	DestroyDynamicObject(InfoObjeto[id][oObjeto]);

	new string[256];
	format(string, sizeof string , "Borraste el objeto ID %d (Modelo: %d), SQL vacía: %d", id, InfoObjeto[id][oModelo], InfoObjeto[id][oID_sql]);

	InfoObjeto[id][oModelo] = 0;
	InfoObjeto[id][oPotX] = 0.0;
	InfoObjeto[id][oPotY] = 0.0;
	InfoObjeto[id][oPotZ] = 0.0;
	InfoObjeto[id][oRotX] = 0.0;
	InfoObjeto[id][oRotY] = 0.0;
	InfoObjeto[id][oRotZ] = 0.0;
	InfoObjeto[id][oInterior] = 0;
	InfoObjeto[id][oVirtualWorld] = 0;

	new query[1028];
	mysql_format(DBcreative, query, sizeof query, "UPDATE objetos_admin SET Modelo = 0, PotX = 0.0, PotY = 0.0, PotZ = 0.0, RotX = 0.0, RotY = 0.0, RotZ = 0.0, Interior = 0, VirtualWorld = 0 WHERE ID = '%d'", InfoObjeto[id][oID_sql]);
	mysql_tquery(DBcreative, query);

	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:borrarobjetoadmin(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	Loop(id, MAX_OBJETOS_ADMIN, 1) if (InfoObjeto[id][oPotX] != 0.0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, InfoObjeto[id][oPotX], InfoObjeto[id][oPotY], InfoObjeto[id][oPotZ]) && InfoPlayer[playerid][pInterior] == InfoObjeto[id][oInterior] && InfoPlayer[playerid][pVirtualWorld] == InfoObjeto[id][oVirtualWorld])
		{
			DestroyDynamicObject(InfoObjeto[id][oObjeto]);

			new string[256];
			format(string, sizeof string , "Borraste el objeto ID %d (Modelo: %d), SQL vacía: %d", id, InfoObjeto[id][oModelo], InfoObjeto[id][oID_sql]);

			InfoObjeto[id][oModelo] = 0;
			InfoObjeto[id][oPotX] = 0.0;
			InfoObjeto[id][oPotY] = 0.0;
			InfoObjeto[id][oPotZ] = 0.0;
			InfoObjeto[id][oRotX] = 0.0;
			InfoObjeto[id][oRotY] = 0.0;
			InfoObjeto[id][oRotZ] = 0.0;
			InfoObjeto[id][oInterior] = 0;
			InfoObjeto[id][oVirtualWorld] = 0;

			new query[2048];
			mysql_format(DBcreative, query, sizeof query, "UPDATE objetos_admin SET Modelo = 0, PotX = 0.0, PotY = 0.0, PotZ = 0.0, RotX = 0.0, RotY = 0.0, RotZ = 0.0, Interior = 0, VirtualWorld = 0 WHERE ID = '%d'", InfoObjeto[id][oID_sql]);
			mysql_tquery(DBcreative, query);

			SendClientMessage(playerid, -1, string);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "No estás cerca de ningún objeto dinámico admin.");
	return 1;
}

CMD:objetosadmin(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new as2[256], DComandosAdmin[3500], tobjects, i = 0;
	Loop(id, MAX_OBJETOS_ADMIN, 1) if (InfoObjeto[id][oPotX] != 0.0)
	{
		i++;
		format(as2, sizeof(as2), "ID: %d | OBJETO: %d | ", id, InfoObjeto[id][oModelo]);
		strcat(DComandosAdmin, as2);
		if (i == 6)
		{
			i = 0;
			strcat(DComandosAdmin, "\n");
		}
		tobjects++;
	}
	if(tobjects > 0) Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Objetos admin", DComandosAdmin, "Cerrar", "");
	else Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Objetos admin", "{FFFFFF}No hay ningún objeto dinámico creado.", "Cerrar", "");
	return 1;
}

CMD:editar_objeto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id;
	if (InfoPlayer[playerid][pEditingMode] != 0) return SendClientMessage(playerid, COLOR_GREY, "Estás editando un objeto.");
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editar_objeto (ObjetoID)");
	if (id < 1 || id >= MAX_OBJETOS_ADMIN) return SendClientMessage(playerid, COLOR_GREY, "ID de objeto admin inválido.");
	if (!InfoObjeto[id][oPotX]) return SendClientMessage(playerid, COLOR_GREY, "ID Invalida.");

	if (IsPlayerInRangeOfPoint(playerid, 3.0, InfoObjeto[id][oPotX], InfoObjeto[id][oPotY], InfoObjeto[id][oPotZ]) && InfoPlayer[playerid][pInterior] == InfoObjeto[id][oInterior] && InfoPlayer[playerid][pVirtualWorld] == InfoObjeto[id][oVirtualWorld])
	{
		edicion_sql_actual[playerid] = id;
		InfoPlayer[playerid][pEditingMode] = 4;
		EditDynamicObject(playerid, InfoObjeto[id][oObjeto]);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "No estás cerca del objeto.");
	return 1;
}

CMD:mapear(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id = -1;
	Loop(x, MAX_OBJETOS_ADMIN, 1) if (InfoObjeto[x][oModelo] == 0)
	{
		id = x;
		break;
	}
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "Se alcanzó el límite de objetos admin (200).");
	if (isnull(params))
	{
		new OA[20];
		OA[0] = 2636; OA[1] = 2121; OA[2] = 1811; OA[3] = 2748; OA[4] = 2763; OA[5] = 2644; OA[6] = 2188; OA[7] = 11691; OA[8] = 2111; OA[9] = 1824; OA[10] = 1896;
		OA[11] = 1516; OA[12] = 15037; OA[13] = 2636; OA[14] = 3039; OA[15] = 3862; OA[16] = 3040; OA[17] = 3860; OA[18] = 8572; OA[19] = 19470;
		ShowModelSelectionMenuEx(playerid, OA, 20, "Objetos	", IDObj_Admin);
		edicion_sql_actual[playerid] = id;
	}
	else
	{
		new modelid;
		if (sscanf(params, "d", modelid)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /crearobjetoadmin (Modelo de SAMP)");
		if (modelid < 700 || modelid > 19000) return SendClientMessage(playerid, COLOR_GREY, "Modelo inválido, intenta con otro.");

		Creando_Objeto_Admin(playerid, id, modelid);
	}
	return 1;
}
CMD:crearobjetoadmin(playerid, params[]) return cmd_mapear(playerid, params);

Creando_Objeto_Admin(playerid, id, modelid)
{
	new query[1028];
	GetPlayerPos(playerid, InfoObjeto[id][oPotX], InfoObjeto[id][oPotY], InfoObjeto[id][oPotZ]);
	InfoObjeto[id][oModelo] = modelid;
	InfoObjeto[id][oInterior] = GetPlayerInterior(playerid);
	InfoObjeto[id][oVirtualWorld] = GetPlayerVirtualWorld(playerid);
	InfoObjeto[id][oObjeto] = CreateDynamicObject(InfoObjeto[id][oModelo], InfoObjeto[id][oPotX]-2.0, InfoObjeto[id][oPotY]-1.0, InfoObjeto[id][oPotZ], InfoObjeto[id][oRotX], InfoObjeto[id][oRotY], InfoObjeto[id][oRotZ], .interiorid = InfoObjeto[id][oInterior], .worldid = InfoObjeto[id][oVirtualWorld]);
	edicion_sql_actual[playerid] = id;
	InfoPlayer[playerid][pEditingMode] = 4;
	EditDynamicObject(playerid, InfoObjeto[id][oObjeto]);
	//opción idsql ya creada.
	if (InfoObjeto[id][oID_sql] != 0)
	{
		mysql_format(DBcreative, query, sizeof query, "UPDATE objetos_admin SET Modelo = '%d', PotX = '%f', PotY = '%f', PotZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
		InfoObjeto[id][oModelo],
		InfoObjeto[id][oPotX],
		InfoObjeto[id][oPotY],
		InfoObjeto[id][oPotZ],
		InfoObjeto[id][oRotX],
		InfoObjeto[id][oRotY],
		InfoObjeto[id][oRotZ],
		InfoObjeto[id][oInterior],
		InfoObjeto[id][oVirtualWorld],
		InfoObjeto[id][oID_sql]);
		mysql_tquery(DBcreative, query);
		return 1;
	}
	mysql_format(DBcreative, query, sizeof query, "INSERT INTO objetos_admin (Modelo, PotX, PotY, PotZ, RotX, RotY, RotZ, Interior, VirtualWorld) VALUES ('%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')",
	InfoObjeto[id][oModelo],
	InfoObjeto[id][oPotX],
	InfoObjeto[id][oPotY],
	InfoObjeto[id][oPotZ],
	InfoObjeto[id][oRotX],
	InfoObjeto[id][oRotY],
	InfoObjeto[id][oRotZ],
	InfoObjeto[id][oInterior],
	InfoObjeto[id][oVirtualWorld]);
	mysql_tquery(DBcreative, query, "OnObjetoAdminCreate", "i", id);
	return 1;
}

forward OnObjetoAdminCreate(id);
public OnObjetoAdminCreate(id)
{
	InfoObjeto[id][oID_sql] = cache_insert_id();
	cache_unset_active();
    return 1;
}

CMD:listaadmin(playerid) return cmd_listaadmins(playerid);
CMD:listaadmins(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	mysql_tquery(DBcreative, "SELECT * FROM cuentas WHERE JotoOtaku != 0", "OnMembersAdmin", "d", playerid);
	return 1;
}
CMD:administracion(playerid) return cmd_listaadmins(playerid);

forward OnMembersAdmin(playerid);
public OnMembersAdmin(playerid)
{
	new members = 0, gformat[256], dialog[3072] = "Nombre\tRango\tEstado\tDuty\n";
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], rango, newid = -1, isname[32] = "Admin";
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		reg_int(player, "JotoOtaku", rango);
		//fix 22/04/2020
		Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombreapellido, true))
		{
			newid = plasher;
			break;
		}
		//fix 22/04/2020
		//leer nombre rango
		if (!strcmp(nombreapellido, "Pablo_Prieto", true)) { alm(isname, "Propietario"); }
		else if (!strcmp(nombreapellido, "Elias_Moss", true)) { alm(isname, "Programador"); }
		else
		{
			switch (rango)
			{
				case 1: alm(isname, "Ayudante");
				case 2: alm(isname, "Moderador I");
				case 3: alm(isname, "Moderador II");
				case 4: alm(isname, "Moderador III");
				case 5: alm(isname, "Administrador");
				case 6: alm(isname, "Encargado");
			}
		}
		//muestra
		if (IsPlayerConnectedEx(newid)) format(gformat, sizeof gformat, "%s\t%s (%d)\t{29B311}Conectado\t%s\n", nombreapellido, isname, rango, (papilla[newid]) ? ("{55AD30}On-duty") : ("{F92B2B}Off-duty"));
		else format(gformat, sizeof gformat, "%s\t%s (%d)\t{E24D32}Desconectado\n", nombreapellido, isname, rango);
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "Miembro_List%d", members);
		SetPVarString(playerid, gformat, nombreapellido);
		members++;
	}
	if (members == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Administración {FFBF00}CreativeRP", "{FFFFFF}No se encontraron miembros de la administración.", "Cerrar", "");
	if (GetPlayerAdmin(playerid, 10) != 0) Dialog_Show(playerid, MenuAdmins, DIALOG_STYLE_TABLIST_HEADERS, "Administración {FFBF00}CreativeRP", dialog, "Continuar", "Salir");
	else Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, "Administración {FFBF00}CreativeRP", dialog, "Cerrar", "");
	return 1;
}

Dialog:MenuAdmins(playerid, response, listitem, inputtext[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (!response) return 1;
	new ID = listitem, gformat[128], nombre_miembro[32];
	format(gformat, sizeof gformat, "Miembro_List%d", ID);
	GetPVarString(playerid, gformat, nombre_miembro, sizeof nombre_miembro);
	SetPVarString(playerid, "Miembro_Actual", nombre_miembro);
	format(gformat, sizeof gformat, "Miembro: {FFBF00}%s", nombre_miembro);
	Dialog_Show(playerid, OpcionAdmins, DIALOG_STYLE_LIST, gformat, "Dar rango\nÚltima conexión\n{B00000}Expulsar de la administración", "Continuar", "Volver");
	return 1;
}

Dialog:OpcionAdmins(playerid, response, listitem, inputtext[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (!response) return cmd_listaadmins(playerid);
	new nombre_miembro[32], newid, string[320], ultimaconexion[256];
	GetPVarString(playerid, "Miembro_Actual", nombre_miembro, sizeof nombre_miembro);
	//fix 22/04/2020
	Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombre_miembro, true))
	{
		newid = plasher;
		break;
	}
	//fix 22/04/2020
	if (verificar_cuenta(nombre_miembro))
	{
		reg_string(0, "UltimaConexion", ultimaconexion, 256);
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Esa cuenta no existe.");
	switch (listitem)
	{
		case 0: //dar rango admin
		{
			new dialog[254], titulo[64];
			strcat(dialog, "Ayudante\n");
			strcat(dialog, "Moderador I\n");
			strcat(dialog, "Moderador II\n");
			strcat(dialog, "Moderador III\n");
			strcat(dialog, "Administrador\n");
			strcat(dialog, "Encargado\n");
			format(titulo, sizeof titulo, "Admin: {FFBF00}%s", nombre_miembro);
			Dialog_Show(playerid, DarAdminRango, DIALOG_STYLE_LIST, titulo, dialog, "Continuar", "Salir");
		}
		case 1: //última conexión
		{
			if (IsPlayerConnectedEx(newid))
			{
				format(string, sizeof string, "%s está conectado ID: %d", nombre_miembro, newid);
				SendClientMessage(playerid, COLOR_GREEN, string);
				return 1;
			}
			format(string, sizeof string, "%s: %s", nombre_miembro, ultimaconexion);
			SendClientMessage(playerid, COLOR_PURPLE, string);
		}
		case 2: //expulsar de la facción
		{
			//leer nombre rango
			if (!strcmp(nombre_miembro, "Pablo_Prieto", true))
			{
				SendClientMessage(playerid, COLOR_RED, "No intentes expulsar a Pablo Prieto, podrías ser exiliado.");
				return 1;
			}
			else if (!strcmp(nombre_miembro, "Elias_Moss", true))
			{
				SendClientMessage(playerid, COLOR_RED, "No intentes expulsar a Elias Moss, podrías ser exiliado.");
				return 1;
			}
			new list[32];
			alm(list, "niub");
			if (IsPlayerConnectedEx(newid))
			{
				if (playerid == newid) return SendClientMessage(playerid, COLOR_GREY, "No te puedes expulsar de la administración.");
				alm(InfoPlayer[newid][pApodo], list);
				InfoPlayer[newid][pAdmin] = 0;
				InfoPlayer[newid][pEncFac] = 0;
				papilla[newid] = 0;
				SetPlayerColor(newid, 0xFFFFFF00);
				GivePlayerSkin(newid, 155);
			}
			format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) expulsó de la administración a %s.", NombreOriginal(playerid), playerid, nombre_miembro);
			SendAdminMessage(0xFFFFFFFF, string);
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Apodo = '%e', JotoOtaku = 0, EncFac = 0 WHERE Nombre_Apellido = '%e'", list, nombre_miembro);
			mysql_tquery(DBcreative, string);
		}
	}
	return 1;
}

Dialog:DarAdminRango(playerid, response, listitem, inputtext[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (!response) return 1;
	new nombre_miembro[32], newid = -1, string[256], rango = listitem+1;
	GetPVarString(playerid, "Miembro_Actual", nombre_miembro, sizeof nombre_miembro);
	//fix 22/04/2020
	Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombre_miembro, true))
	{
		newid = plasher;
		break;
	}
	//fix 22/04/2020
	if (IsPlayerConnectedEx(newid)) InfoPlayer[newid][pAdmin] = rango;
	new isname[32];
	switch (rango)
	{
		case 1: alm(isname, "Ayudante");
		case 2: alm(isname, "Moderador I");
		case 3: alm(isname, "Moderador II");
		case 4: alm(isname, "Moderador III");
		case 5: alm(isname, "Administrador");
		case 6: alm(isname, "Encargado");
	}

	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha asignado %s(%d) a %s.", NombreOriginal(playerid), playerid, isname, rango, nombre_miembro);
	SendAdminMessage(0xFFFFFFFF, string);

	mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET JotoOtaku = '%d' WHERE Nombre_Apellido = '%e'", rango, nombre_miembro);
	mysql_tquery(DBcreative, string);
	return 1;
}

CMD:darempleo(playerid)
{
	SendClientMessage(playerid, COLOR_GREEN, "Comandos hábiles:{EBEBEB} /darempleo1 ({00A2FF}tu negocio slot 1{EBEBEB}) - /darempleo2 ({00A2FF}tu negocio slot 2{EBEBEB})");
	return 1;
}
CMD:dartrabajo(playerid) return cmd_darempleo(playerid);
CMD:darjob(playerid) return cmd_darempleo(playerid);

NegocioEmpleados(id)
{
	switch (InfoNegocio[id][nTipo])
	{
		case 6: return 1;
		case 9: return 1;
		case 12: return 1;
		case 13: return 1;
	}
	return 0;
}

CMD:darempleo1(playerid, params[])
{
	if (YaOfrecioEmpleo[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "Ya has ofrecido empleo.");
	new id = InfoPlayer[playerid][pNegocio1], playerid2, dialog[550];
	if (InfoPlayer[playerid][pNegocio1] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes ningún negocio en el slot 1.");
	if (NegocioEmpleados(id) == 0) return SendClientMessage(playerid, COLOR_GREY, "Tu negocio del slot 1, no puede tener empleados.");
	if (GetEmpleadosFabrica(id) >= 20) return SendClientMessage(playerid, COLOR_GREY, "No puedes tener más de 20 empleados en tu negocio del slot 1.");
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darempleo1 (PlayerID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	if (TomandoTrabajo[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "Este jugador está en otra tarea, espera.");
	if (InfoPlayer[playerid2][pContrato] != -1) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador ya está trabajando en otro negocio/empresa.");
	IDfabrica[playerid2] = id;
	TomandoTrabajo[playerid2] = playerid;
	YaOfrecioEmpleo[playerid] = playerid2;
	format(dialog, sizeof dialog, "{EBEBEB}%s te ha ofrecido trabajar en su negocio/empresa:\n\
	{FFBF00}%s, {EBEBEB}si quieres ser parte presiona 'si', de lo contrario presiona 'no'.\n", NombreJugador(playerid), InfoNegocio[id][nNombre]);
	Dialog_Show(playerid2, InviteEmpleo, DIALOG_STYLE_MSGBOX, "Unirse empleo", dialog, "Si", "No");
	format(dialog, sizeof dialog, "Has ofrecido a %s, trabajar en tu negocio/empresa.", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_GREEN, dialog);
	return 1;
}
CMD:dartrabajo1(playerid, params[]) return cmd_darempleo1(playerid, params);
CMD:darjob1(playerid, params[]) return cmd_darempleo1(playerid, params);

CMD:darempleo2(playerid, params[])
{
	if (YaOfrecioEmpleo[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "Ya has ofrecido empleo.");
	new id = InfoPlayer[playerid][pNegocio2], playerid2, dialog[550];
	if (InfoPlayer[playerid][pNegocio2] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes ningún negocio en el slot 2.");
	if (NegocioEmpleados(id) == 0) return SendClientMessage(playerid, COLOR_GREY, "Tu negocio del slot 2, no puede tener empleados.");
	if (GetEmpleadosFabrica(id) >= 20) return SendClientMessage(playerid, COLOR_GREY, "No puedes tener más de 20 empleados en tu negocio del slot 2.");
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darempleo2 (PlayerID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	if (TomandoTrabajo[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "Este jugador está en otra tarea, espera.");
	if (InfoPlayer[playerid2][pContrato] != -1) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador ya está trabajando en otro negocio/empresa.");
	IDfabrica[playerid2] = id;
	TomandoTrabajo[playerid2] = playerid;
	YaOfrecioEmpleo[playerid] = playerid2;
	format(dialog, sizeof dialog, "{EBEBEB}%s te ha ofrecido trabajar en su negocio/empresa:\n\
	{FFBF00}%s, {EBEBEB}si quieres ser parte presiona 'si', de lo contrario presiona 'no'.\n", NombreJugador(playerid), InfoNegocio[id][nNombre]);
	Dialog_Show(playerid2, InviteEmpleo, DIALOG_STYLE_MSGBOX, "Unirse empleo", dialog, "Si", "No");
	format(dialog, sizeof dialog, "Has ofrecido a %s, trabajar en tu negocio/empresa.", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_GREEN, dialog);
	return 1;
}
CMD:dartrabajo2(playerid, params[]) return cmd_darempleo2(playerid, params);
CMD:darjob2(playerid, params[]) return cmd_darempleo2(playerid, params);

Dialog:InviteEmpleo(playerid, response, listitem, inputtext[])
{
	new string[256], playerid2 = TomandoTrabajo[playerid], id = IDfabrica[playerid], query[512];
	if (!IsPlayerConnectedEx(playerid2))
	{
		TomandoTrabajo[playerid] = -1;
		SendClientMessage(playerid, COLOR_GREY, "El dueño se ha desconectado, perdiste la oferta.");
		return 1;
	}
	if (!response) //rechazo
	{
		format(string, sizeof string, "Rechaste la invitación a %s.", InfoNegocio[id][nNombre]);
		SendClientMessage(playerid, 0xEFEFEFFF, string);
		format(string, sizeof string, "%s rechazó la invitación", NombreJugador(playerid));
		SendClientMessage(playerid2, 0xEFEFEFFF, string);
		TomandoTrabajo[playerid] = -1;
		YaOfrecioEmpleo[playerid2] = -1;
		return 1;
	}
	//acepto
	InfoPlayer[playerid][pContrato] = id;
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Contrato = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pContrato], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	format(string, sizeof string, "Ahora trabajas en el negocio '%s'.", InfoNegocio[id][nNombre]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "%s aceptó la invitación, ahora tienes un total de %d empleados.", NombreJugador(playerid), GetEmpleadosFabrica(id));
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "Registros: %s ahora trabaja en %s por %s.", NombreDeCuenta(playerid), InfoNegocio[id][nNombre], NombreDeCuenta(playerid2));
	Log("LOGS/UnirseEmpleo.log", string);
	TomandoTrabajo[playerid] = -1;
	YaOfrecioEmpleo[playerid2] = -1;
	return 1;
}

CMD:listaempleados(playerid)
{
	SendClientMessage(playerid, COLOR_GREEN, "Comandos hábiles:{EBEBEB} /empleados1 ({00A2FF}tu negocio slot 1{EBEBEB}) - /empleados2 ({00A2FF}tu negocio slot 2{EBEBEB})");
	return 1;
}
CMD:empleados(playerid) return cmd_listaempleados(playerid);

CMD:listaempleados1(playerid)
{
	new id = InfoPlayer[playerid][pNegocio1], query[256];
	if (InfoPlayer[playerid][pNegocio1] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes ningún negocio en el slot 1.");
	if (NegocioEmpleados(id) == 0) return SendClientMessage(playerid, COLOR_GREY, "Tu negocio del slot 1, no puede tener empleados.");
	mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE Contrato = '%d'", id);
	mysql_tquery(DBcreative, query, "OnEmpleoNegocio", "dd", playerid, id);
	return 1;
}
CMD:empleados1(playerid) return cmd_listaempleados1(playerid);

CMD:listaempleados2(playerid)
{
	new id = InfoPlayer[playerid][pNegocio2], query[256];
	if (InfoPlayer[playerid][pNegocio2] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes ningún negocio en el slot 2.");
	if (NegocioEmpleados(id) == 0) return SendClientMessage(playerid, COLOR_GREY, "Tu negocio del slot 2, no puede tener empleados.");
	mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE Contrato = '%d'", id);
	mysql_tquery(DBcreative, query, "OnEmpleoNegocio", "dd", playerid, id);
	return 1;
}
CMD:empleados2(playerid) return cmd_listaempleados2(playerid);

forward OnEmpleoNegocio(playerid, id);
public OnEmpleoNegocio(playerid, id)
{
	new members = 0, gformat[256], dialog[4700] = "Nombre\tEstado\n";
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		//fix 22/04/2020
		Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombreapellido, true))
		{
			newid = plasher;
			break;
		}
		//fix 22/04/2020
		if (IsPlayerConnectedEx(newid)) format(gformat, sizeof gformat, "%s\t{29B311}Conectado\n", nombreapellido);
		else format(gformat, sizeof gformat, "%s\t{E24D32}Desconectado\n", nombreapellido);
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "Empleado_List%d", members);
		SetPVarString(playerid, gformat, nombreapellido);
		members++;
	}
	if (members == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, InfoNegocio[id][nNombre], "{FFFFFF}No se encontraron empleados.", "Cerrar", "");
	Dialog_Show(playerid, MenuEmpleados, DIALOG_STYLE_TABLIST_HEADERS, InfoNegocio[id][nNombre], dialog, "Continuar", "Salir");
	return 1;
}

Dialog:MenuEmpleados(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[128], name_empleado[32];
	format(gformat, sizeof gformat, "Empleado_List%d", ID);
	GetPVarString(playerid, gformat, name_empleado, sizeof name_empleado);
	SetPVarString(playerid, "Empleado_Actual", name_empleado);
	format(gformat, sizeof gformat, "Empleado: {FFBF00}%s", name_empleado);
	Dialog_Show(playerid, OpcionEmpleados, DIALOG_STYLE_LIST, gformat, "Ver última conexión\n{B00000}Despedir de tu negocio", "Continuar", "Salir");
	return 1;
}

Dialog:OpcionEmpleados(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new name_empleado[32], newid = -1, string[256], ultimaconexion[256], query[512];
	GetPVarString(playerid, "Empleado_Actual", name_empleado, sizeof name_empleado);
	//fix 22/04/2020
	Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], name_empleado, true))
	{
		newid = plasher;
		break;
	}
	//fix 22/04/2020
	if (verificar_cuenta(name_empleado))
	{
		reg_string(0, "UltimaConexion", ultimaconexion, 256);
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Esa cuenta no existe.");
	switch (listitem)
	{
		case 0: //última conexión
		{
			if (IsPlayerConnectedEx(newid))
			{
				format(string, sizeof string, "%s está conectado ID: %d", name_empleado, newid);
				SendClientMessage(playerid, COLOR_GREEN, string);
				return 1;
			}
			format(string, sizeof string, "%s: %s", name_empleado, ultimaconexion);
			SendClientMessage(playerid, COLOR_PURPLE, string);
		}
		case 1: //despedir
		{
			if (IsPlayerConnectedEx(newid))
			{
			    if (playerid == newid) return SendClientMessage(playerid, COLOR_GREY, "No te puedes expulsar del negocio, pendejo.");
				InfoPlayer[newid][pContrato] = -1;
			}
			format(string, sizeof string, "Sacaste de la lista de empleados a %s, rolea que lo despediste.", name_empleado);
			SendClientMessage(playerid, 0x33CCFFFF, string);
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Contrato = -1 WHERE Nombre_Apellido = '%e'", name_empleado);
			mysql_tquery(DBcreative, query);
		}
	}
	return 1;
}

CMD:cambios(playerid)
{
	new show_log_gm[2500];

	strcat(show_log_gm, "{E0E0E0}v4.11 ({FFBF00}28/04/2020{E0E0E0}) {00CC00}ACTUAL{E0E0E0}\n");
	strcat(show_log_gm, "{E0E0E0}v4.00 ({FFBF00}24/04/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v3.97 ({FFBF00}16/04/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v3.81 ({FFBF00}13/04/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v3.70 ({FFBF00}09/04/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v3.38 ({FFBF00}17/03/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v3.19 ({FFBF00}13/03/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v3.00 ({FFBF00}08/03/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v2.26 ({FFBF00}28/02/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v2.18 ({FFBF00}24/02/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v2.09 ({FFBF00}22/02/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v2.00 ({FFBF00}15/02/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.60 ({FFBF00}30/01/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.51 ({FFBF00}25/01/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.49 ({FFBF00}24/01/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.44 ({FFBF00}18/01/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.41 ({FFBF00}17/01/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.32 ({FFBF00}11/01/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.26 ({FFBF00}08/01/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.17 ({FFBF00}07/01/2020{E0E0E0})\n");
	strcat(show_log_gm, "{E0E0E0}v1.10 ({FFBF00}03/01/2020{E0E0E0})\n");

	Dialog_Show(playerid, ChangeLog, DIALOG_STYLE_LIST, "Versión actual: {FFBF00}"#version_actual"", show_log_gm, "Ver", "Cerrar");
	return 1;
}
CMD:changelog(playerid) return cmd_cambios(playerid);
CMD:update(playerid) return cmd_cambios(playerid);
CMD:actualizacion(playerid) return cmd_cambios(playerid);
CMD:actualizaciones(playerid) return cmd_cambios(playerid);

Dialog:ChangeLog(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new show_log_gm[3000];
	switch (listitem)
	{
		case 0: //4.11 28/04/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del /estado, ahora carga automáticamente cuando logeas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado /togfaccion, para silenciar mensajes de facción.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado opción 'skins exclusivos' en el casillero VIP.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado /identidad para facciones LSPD, FBI & SASD.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado /enmascaradosadmin & /enmascaradospd para rango Moderador II. (STAFF)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora sólo se puede hacer diez (10) repartos por PayDay.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /tallerpd sólo funciona con vehículos de LSPD.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /nombreadmin lo puede usar rango Encargado. (STAFF)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /repartos es directo, agregado también /inforeparto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /gmaletero y /smaletero funciona desde dentro del vehículo si es tipo policial.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los vehículos 'Enforcer' & 'FBI Truck' spawnean con 5000.0 de vida.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los ocupantes de vehículos 'Enforcer' & 'FBI Truck' no pueden ser heridos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora si un usuario supera las 15 sanciones OOC, es baneado automáticamente.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de documentos falsos. (/dnifalso)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de listado de negocios tipo empleo. (/empleos)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de permisos de comandos de la facción Sheriff's.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de color en segunda linea de mensaje del /ao.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de /dar materiales, anteriormente podías dar negativos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de botiquin, anteriormente no curaba al seleccionado.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de /refuerzos, ahora la solicitud se marca en todo el mapa.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido comando /aa, ahora si el admin está duty su comando /b cambia.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido de las tiendas de ropa el skin ID 179, ahora es VIP.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v4.11{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 1: //4.00 24/04/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ajustes en el sistema de anuncios.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de los comando /soporte & /habilidad.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado taller policial para LSPD. (/tallerpd)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo menú telefónico en diálogo. (/telefono)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo comando para la configuración de cuenta. (/panel)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo sistema de graffitis para facciones tipo pandilla.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado /irjob (entrada del negocio/empresa) & /renunciar (dejar empleo).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado /cjob (chat ooc) & /rjob (radio ic) para los trabajos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevos negocios tipo trabajo: Repartos (repartidor) & Clínica (médico).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevos mapeos: Ayuntamiento (ext), Playa beach, Avenidas, Basurero & Hospital (int).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /spawncasa se puede usar desde VIP plata.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cuando usan /robar247 también alerta a la administración.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /liberar detecta si el jugador está sancionado o no.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes transferir dinero del banco desde tu teléfono. (/transferir)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes conseguir trabajo en negocios/empresas que lo permitan. (/empleos)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los negocios tipo trabajo, pueden decidir si el contrato es público o no.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los dueños de negocios tipo trabajo, no necesitan contrato para las funciones del empleo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los médicos son los únicos que pueden usar /curar, anteriormente SAEM podía hacerlo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de comandos /tog(...) ahora son más precisos y se actualiza la variable.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de visualización de animaciones que debías usar dos veces el comando.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de spawn en el hospital luego de relogear o ser reanimado.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de mensaje cuando solicitas un mecánico, ahora aparece el ID del cliente.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de verificación de Nombre en /listamiembros, /listaadmins & /empleados.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de detector de vehículos disponibles para los repartos en las fábricas de drogas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido comando /casco, ahora debes comprar el casco en una tienda de ropa.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v4.00{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 2: //3.97 16/04/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa de diseño del /gps & /darlicencia (armas).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado posibilidad de sirena en vehículos policiales. (/veh_sirena)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comandos de uso directo: /luces, /capo, /maletero & /vestado.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado más objetos al sistema de accesorios (bandanas, lentes y relojes).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora la escopeta no-letal se puede editar con /espalda.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes recoger tu boombox desde el menú de /encender.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los vehículos de facciones legales también consumen gasolina.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los negocios de tipo empleados no generan ganancia automática ni requieren productos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los negocios restan productos si el costo pasa los $500 o en ganancia automática (2hs).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se aumentó el máximo de productos por negocio a 4,000 stocks.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se aumentó la ganancia automática de los negocios, y se reguló el cobro de productos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de posición de spawn cuando eliges 'en avión' en el registro.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de guardado de licencia de armas, ahora se carga perfectamente en /licencias.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de comando /gunlocker, automáticamente si supera el máximo de 10 se corrige.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección al colocar boombox, ya no se edita la posición y se cambió el modelo del mismo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido mapas de interés, ahora si usas /vermapa te mostrará el menú de GPS.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v3.97{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 3: //3.81 13/04/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado facción 'Sheriff's Department'.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo diseño más sonido cuando recibes/pierdes dinero.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado mapeos: parque verona, depósito, skate park, gym ganton.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el centralita especifica si llamar un policía o sheriff.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /revisarmaletero & /limpiarmaletero es sólo para LSPD/SASD.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el efecto de balas de gomas es de 15 segundos y tazeado 8 segundos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se aumentó el máximo de barricadas a 50 objetos de /bar y otros.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de dinero cuando reparas vehículo en /taller.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de balas de goma cuando disparas desde un vehículo.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v3.81{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 4: //3.70 09/04/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa del sistema de velocimetro.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa del comando /id, ahora busca varios usuarios a la vez.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del /botiquin como objeto de inventario y se consigue en hospitales.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de anuncios, comandos nuevos /toganuncios & /borraranuncios.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo objeto 'escopeta no-letal' al sistema de inventario.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevamente el comando /adminfac para encargados de facciones.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado restricción de tres minutos para el comando /reportarbug.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado opción 'recargar balas' en el /equipo de LSPD, FBI & SAEM.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el máximo de miembros por facción es de 70 miembros.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora las fábricas generan dinero automáticamente cada dos horas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el nombre original no sale en el /id cuando usas máscara.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora se puede crear vehículos dinámicos para negocios/empresas/fábricas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora la gasolina se resta por minuto que el motor del vehículo esté encendido.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /revisar no exige permisos de /rendirse para facciones LSPD, FBI & SAEM.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los miembros con rango máximo tienen los mismos permisos de lider de facción.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el mensaje de (/puente) a LSPD/FBI identifica sospechoso y modelo del vehículo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora la opción 'facciones' en /rcategoria especifica la facción a respawnear vehículos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes usar /venderarma sin necesidad de tener un trabajo, restricción 5 horas de juego.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de preguntas/respuestas del test de rol cuando registras.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección mensaje de verificación de multicuentas cuando inician sesión.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de rango de entradas/salidas, ahora es de 1.5 metros (antes 3.0).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección del comando /comprar en ammunation opción 'comprar balas'.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección del comando /dinamita, anteriormente no detectaba el objeto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección del comando /dardinero, anteriormente no detectaba el id del jugador. (STAFF)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido mapeo de depósito LSPD, ahora cuando pagas embargo puedes recogerlo donde mismo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de anuncio guardado (/myad) y sistema médico más mapeo del hospital market.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sprays de pintura de vehículos de los 24/7, función renovada en los nuevos talleres.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v3.70{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 5: //3.38 17/03/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema CallSign, ahora con guardado SQL.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /reportes, /mccomprar & /b (nuevo diseño).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /comprar de los negocios tipo concesionaria.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de cajeros automáticos, ahora con guardado SQL.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del /detener, ahora se puede usar con jugadores esposados/atados.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comando /rcategoria para respawnear vehículos por categoria.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comando /banco para hacer transacciones bancarias sin restricciones.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comando /reaparecer para spawnear en el hospital cuando estás herido/muerto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo sistema de objetos en vehículos (/vobjeto) en BETA para usuarios VIP oro.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo objeto 'Dinamita' al inventario, el mismo se consigue en el mercado negro.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /mascara no oculta el nombre, ahora se cambia a 'DesconocidoX' en tabulador.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cuando mueres por bug, reapareces en la misma posición en estado muerto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de duplicado de armas en cinturón táctico.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de sistema de crear objetos dinámicos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de texto flotante cuando caes herido/muerto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de mensaje cuando desconectas del servidor.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de mensaje cuando compras materiales en el /camello.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de kick si estás fuera de jail.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de tarjeta de crédito, robar banco y bomba.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v3.38{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 6: //3.19 13/03/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /musica. (STAFF)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de boombox, ahora como objeto de inventario.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del diseño /comprar de negocios, algunos precios se aumentaron.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado opción armas, en el comando /quitar.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado cuatro puntos de drogas y materiales (/camello) en la ciudad.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado opción trabajo, casa y negocio (ranura 2) en /darstat. (STAFF)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado /togmanos para no mover las manos cuando hablas, también se cambió la animación.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora con el objeto teléfono S10 puedes usar /agenda.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora no desaparecen objetos normales del inventario en prisión.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el seguro industrial es gratis en todos los vehículos. (/lock o /seguro)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora la posición del objeto que tiras al suelo está más pegado al personaje.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora se interpreta el radio portable como una aplicación de teléfono S10.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de sistema de vehículos (/vendermicoche).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de llamadas al 911, ya no se necesita /centralita.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de NRG-500 en /precios, también se añadió un diálogo antes comprar.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de permisos de /motor en vehículos rentables.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de comandos /esposar, /desposar, /detener, /reanimar & /estacionar.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido negocio tipo electrónica, ahora todo se vende en 24sietes.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de loteria, ipodmusic, seguro de alarma, /google, /robarshop & sprunks.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v3.19{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 7: //3.00 08/03/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del login, agregado logo más nuevas tomas de cámara.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de actores dinámicos, ahora con guardado SQL.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de drogas, nuevos efectos y beneficios de curaciones. (/consumir)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /recoger, ahora se puede especificar ID. (Label en objeto tirado)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de renta de vehículos, ahora con guardado SQL. (/rentarveh)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de teléfono. (/llamar - /sms - /altavoz - /colgar)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /reanimar, ahora sólo es de uso LSPD, FBI, SAEM & LSMD.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora para /esposar no se necesita de que el individuo tenga las manos arriba.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes editar el arma de /espalda, nuevo comando para la edición /arma.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los objetos en el suelo duran dos horas, anteriormente eran cinco horas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora la restricción de /venderarma es de cinco horas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los comandos /ip & /obtenerip son para rango propietario. (STAFF)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora la muestra de /dni, /dnifalso & /licencias es en chat, anteriormente era en textdraw.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora para abrir un maletero (/v maletero) se necesita las llaves del vehículo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cualquiera puede usar /gmaletero - /smaletero en los vehículos con maletero abierto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comando /arrastrar, debes tener mínimo 10 horas de juego.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado el número de facción (ID SQL) en el comando /facciones.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comando /fllaves para localizar vehículos de facciones.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado opción 'borrar objetos de manos' en el /equipo de LSPD, FBI & SAEM.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevos objetos: Teléfono S10, Marihuana, Crack, Metanfetamina, Cocaína, Cigarros & Encendedor.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado sistema de creación de objetos dinámicos in game, con guardado SQL. (/adminmap)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se cambió la posición de la prisión de OOC.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de comandos /atar, /vendar, /revivir & /encontrar persona.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de permisos de vehículos, con esto se soluciona los mensajes de /estacionar.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de puntos de drogas. (/comprarmarihuana - /comprarcrack)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema obsoleto de detectar malas palabras y supuesto spam en chat IC.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido trabajo de vendedor de móviles & repartidor de pizzas.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v3.00{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 8: //2.26 28/02/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el único color de TAB es de los miembros de la administración.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora todos los vehículos del servidor son dinámicos con guardado SQL.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora se puede utilizar /comprarcasa & /vendercasa para la ranura 2.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora las estadísticas de inicio es nivel 1 con $20,000 dólares.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los lideres de facción pueden estacionar sus vehículos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comandos /crearvehiculo - /borrarvehiculo. (STAFF)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado linea de cantidad de materiales en /inventario viejo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se habilitó nuevamente el comando /su & /encontrar para FBI.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se habilitó las opciones despedir & última conexión en /empleados.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de mensajes administrativos en general.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de puntos de /arrestar, anteriormente no detectaba el jugador seleccionado.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de comandos /darskin (no cedía skin) & /kickname (expulsaba siempre id 0).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido trabajo de conductor de trenes, jardinero & heladero.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de /luces de LSPD & FBI.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de vehículos en renta, próximamente uno renovado.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v2.26{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 9: //2.18 24/02/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de tres horas VIP bronce.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa del sistema administrativo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo sistema de seguridad. (Pregunta & Respuesta)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comando /administracion para ver miembros offline. (STAFF)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de errores menores más optimización de código del GM.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v2.18{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 10: //2.09 22/02/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del texto label cuando caes herido/muerto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del /duda, ahora las revisa la administración.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado opción de cambiar color de toys para usuarios VIP Gold.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo sistema de fábrica de drogas, como nuevo tipo de negocios.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado ranura extra de casa y negocio para usuarios VIPs Silver y Gold.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /aceptar muerte cobra $35,000 dólares.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /viplocker sólo cuenta con dos armas para VIP Gold.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora se pueden ver los CoinsVIP en /cuenta.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el máximo de miembros por facción es de 50.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el velocimetro no aparece en los pasajeros de vehículos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el tiempo de spawn como herido es de 4 mins y de muerto 2 mins.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido el comando /desban & /desbanip.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido comandos /darcoinsvip & /quitarcoinsvip.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido el contador de miembros de /facciones.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de ropero skins de casas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido el sistema de canal de dudas /n.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido pickups & labels del antiguo sistema de /equipo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido caracteristica de ir a prisión teniendo estrellas al caer muerto.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v2.09{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 11: //2.00 15/02/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema /callsign, ahora lo puede usar LSPD, FBI, SAEM y LSMD.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /placa, ahora lo pueden usar todas las facciones legales.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del diseño de muestra de estadísticas del usuario. (/stats)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa del sistema de facciones y familias, ahora con guardado SQL. (/facciones)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el color VIP de TAB nunca desaparece, hasta que el vencimiento del beneficio.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora si tu facción tiene punto de spawn, al morir apareces en ese punto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes abrir el inventario nuevo con la letra Y.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los textos de chat y /me /do e /intentar, pasan a segunda linea.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se suprimieron todos los colores de TAB, ahora sólo se mantienen el de VIP y staff.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido ped de CJ al correr o caminar, ahora es distinto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido comando de /encontrar de FBI y sistemas relacionados a LSTV.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido error de variable de LlaveVeh, comando /darllave.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido detección de vehículo en la opción de /misil.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}- Corregido detector de cuando estás con sanción ooc y te vas fuera de la jaula.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v2.00{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 12: //1.60 30/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido mapeos innecesarios.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de helper, hitman, religiones y sistema judicial.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Cambios en el mapeo exterior de ayuntamiento.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado pequeño detector de si tienes coordenadas bugeadas, te envía a LS.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo diseño de muestra de tus vehículos. (/llaves o /vehiculos)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el detector de nombre inválido sólo te kickea.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el test de rol es sólo para usuarios nuevos. (registro)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes ver el máximo de slots de maletero cuando compras un vehículo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido creación de pickup/labels no existentes en coordenadas 0.0 0.0 0.0.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido mapeo interior y prisión de FBI, ahora se puede /arrestar en el estacionamiento.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.60{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 13: //1.51 25/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corrección de errores menores.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo test de rol.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo sistema de compra de vehículos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado tipo pescadería y concesionaria a los negocios.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.51{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 14: //1.49 24/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa del sistema de negocios, ahora con guardado SQL.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa del sistema de puertas dinámicas, ahora con guardado SQL.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado botones en las puertas de movimiento principales de LSPD.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes ubicar tu casa desde /gps.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora si el servidor detecta un arma por cheat o whitebug, te kickea.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido barra de espacio de /bolsillos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido sistema de botones para puertas de movimiento.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido posición de objeto cuchillo en mano izquierda.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de matrimonio.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de keypad, totalmente obsoleto.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.49{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 15: //1.44 18/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Cambios en el include de selector de imagen.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa del comando /comprartoys & /toys.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo anti-vehicle spawning.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado sistema de corregir nombre inválido en el login.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo sistema de compra de skins en las tiendas de ropa.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido error de inicio de ingresar comandos sin logear al servidor.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.44{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 16: //1.41 17/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de /payday.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de sistema de /refuerzos. (LSPD)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de comandos /sacarmaletero & /guardarmaletero.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación completa del sistema de casas, ahora con guardado SQL.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes escribir hasta 64 carácteres en el /estado.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora si contienes algo en /espalda, te saldrá como opción extra en /bolsillos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los toys se actualizan en tiempo real, ahora con guardado SQL. (toys user: 4, vip: 7)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora si desconectas con un toy colocado, cuando reconectes te aparece puesto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes usar /espalda en objetos: bate, pala, palo de billar, katana, dildos, entre otros.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cuando desconectas, los vehículos propios sólo guardan el HP & gasolina. (anteriormente la posición)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado /vender arma, /aceptar arma & /cancelar arma.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comando para desbugear el arma como pasajero en vehículos. (/drivebug)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comandos para el staff: /limpiarsuelo - /verarmas - /limpiararmas (PlayerID).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado sistema de cinturón táctico para LSPD, FBI & SAEM. (/ct - /sacarct - /guardarct)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado sistema de neones para VIP Gold. (/ponerneon para instalar y /neon para colocar/quitar)\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido error de guardado y carga de skin, ahora también se guarda el skin de trabajo/facción.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido error de velocimetro, anteriormente salía el cuadro de combustible en vehículos bicicletas.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.41{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 17: //1.32 11/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Optimización del OnPlayerDisconnect.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado textdraw de cargado de cuenta.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado compra de balas en ammunation.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado creación de balas en fabrica de armas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se cambió la apariencia del velocimetro.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Se cambió el 3dlabel's de los vehículos en venta.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora los objetos/balas se actualizan en tiempo real.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cuando cuando mueres no pierdes lo que tenías en /bolsillos.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de muerte, ahora son dos tipos (1 herido) (2 muerto).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido el máximo de balas para todas las armas, adjuntando un default para cada.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido sistema premium, además de un nuevo detector al conectar mostrando fecha de vencimiento.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.32{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 18: //v1.26 08/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de táser.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de los comandos /darllave y /quitarllave.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /estacionar, ahora apaga el vehículo y guarda las variables.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cuando estás adminduty no te hacen daño las caidas, balas, golpes.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el dibujado de nombres-id-vida-chaleco encima del skin es de 20.0 metros.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido falla de cobro de dinero en el /pagarmulta cuando pagas un embargo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Optimizado el comando /puente, ahora puedes usar ganzúas en cualquier vehículo menos en los legales.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cuando vendes un vehículo a otro usuario, se pierde la variable de llave prestada del vehículo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado sinonimos de comandos: /traercar-/getcar-/traerauto /ircar-/gotocar-/irauto.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora el /traerauto lleva el vehículo también GetPlayerInterior.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido el sistema de venta /vendermicoche & /aceptar coche.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comando /localizar con algunas mejoras en el código.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /gunlocker-/maxmaletero, ahora hasta 10 slots como máximo.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora si dejaste el vehículo con seguro y relogeas, se mantiene el mismo con seguro.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado comandos para LSPD: /revisarmaletero & /limpiarmaletero.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de intermitentes, esto lagea cuando se usa con usuarios cerca.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.26{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 19: //v1.17 07/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado nuevo sistema de /bolsillos (BETA, actualmente solo armas).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de guardado de cuentas, ahora es SQL.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido sistema de /acento.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido comando /darestilopelea.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido /adminnombre, ahora se guardan los stats así tengas un nombre temporal.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de interfaz del /ao.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /cambiarclaveusuario.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de los comandos /unirse(2) & /renunciar(2).\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del /mascara (Permanece al relogear) (Ahora se muestra como 'DesconocidoNum').\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /jailoffline, ahora verifica si el jugador está conectado y se añade razón de jail.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora en vez de Hierba se menciona Marihuana en todo el gamemode.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora se regulan las fumadas de crack & marihuana.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de plantar semillas, esto generaba un crash cada ciertas horas.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.17{E0E0E0})", show_log_gm, "Cerrar", "");
		}
		case 20: //v1.10 03/01/2020
		{
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido lo obsoleto de autojail.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido código obsoleto del antiguo sistema de casas.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de paintball, totalmente innecesario.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de habiliad de idiomas, totalmente innecesario.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Removido sistema de desconexión por supuestamente estar AFK, totalmente innecesario.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cuando subes de nivel se actualiza el score de TAB.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de varios textdraws.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del comando /changepass.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de agenda telefónica.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación del sistema de registro e ingreso.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora cuando escribes en el chat en el login, no te kickea simplemente no muestra el mensaje.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Agregado variables de fecha de registro & última conexión.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Corregido mensaje de muestra del /PayDay.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes usar /robar247, cinco veces por PayDay.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora ya no quita 1000 cuando envias un /re.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Renovación de interfaz de: /staff - /aa - /a.\n");
			strcat(show_log_gm, "{FFBF00}- {E0E0E0}Ahora puedes dar/quitar el encargado en los comandos: /daref - /dares - /daregame - /dareban.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{E0E0E0}({FFBF00}v1.10{E0E0E0})", show_log_gm, "Cerrar", "");
		}
	}
	return 1;
}

//nuevo sistema de facciones dinámicas (desde 11/02/2020 hasta el 14/02/2020)
new ID_ACTUAL_FACUWU[MAX_PLAYERS];
new ID_ACTUAL_EquipoUWU[MAX_PLAYERS];

stock TieneArmamento(id)
{
	new count = 0;
	Loop(x, 20, 0) if (InfoFaccion[id][fEquipo][x] != 0) { count++; }
	return count;
}

stock TieneSkin(id)
{
	new count = 0;
	Loop(x, 20, 0) if (InfoFaccion[id][fSkin][x] != 0) { count++; }
	return count;
}

GetObjEquipo(obj)
{
	new name_ex[64];
	if (obj == 900) alm(name_ex, "Botiquin HP");
	else if (obj == 950) alm(name_ex, "Chaleco");
	else
	{
		alm(name_ex, InfoInventario[obj][NombreObjeto]);
	}
	return name_ex;
}

ValidObjEquipo(obj)
{
	if (obj == 0) return 1;
	if (obj == 900) return 1;
	if (obj == 950) return 1;
	if (obj >= 1 && obj <= sizeof InfoInventario) return 1;
	return 0;
}

CMD:f(playerid, params[])
{
	new id = InfoPlayer[playerid][pMiembro], string[512];
	if (id == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás en ninguna facción.");
	if (InfoPlayer[playerid][pTogFaccion] == 0) return SendClientMessage(playerid, COLOR_GREY, "Posees los mensajes de facción desactivados, escribe /togfaccion.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /f (Texto)");
	switch (id)
	{
	    case 1,2,3,4,5: format(string, sizeof string, "{7BDDA5}[%s] %s %s:{FFFFFF} %s", InfoFaccion[id][fLogo], fac_rango[id][InfoPlayer[playerid][pRango]-1], NombreOriginal(playerid), params);
	    default: format(string, sizeof string, "{04FFFF}[%s] %s %s:{FFFFFF} %s", InfoFaccion[id][fLogo], fac_rango[id][InfoPlayer[playerid][pRango]-1], NombreOriginal(playerid), params);
	}
	SendFaccionMessage(id, 0xFFFFFFFF, string);
	return 1;
}
CMD:fac(playerid, params[]) return cmd_f(playerid, params);

CMD:r(playerid, params[])
{
	new id = InfoPlayer[playerid][pMiembro], string[314];
	if (!member_faccion(playerid, 1, 2, 3, 4, 5)) return SendClientMessage(playerid, COLOR_GREY, "Sólo facciones oficiales del servidor tienen radio.");
	if (InfoPlayer[playerid][pTogRadio] == 0) return SendClientMessage(playerid, COLOR_GREY, "Posees la radio de facción apagada, escribe /togradio.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /r (Texto)");
	if (member_faccion(playerid, 1)) format(string, sizeof string, "** [CH: %d, S: %d] %s: %s", 911, 1, NombreJugador(playerid), params);
	if (member_faccion(playerid, 2)) format(string, sizeof string, "** [CH: %d, S: %d] %s: %s", 650, 2, NombreJugador(playerid), params);
	if (member_faccion(playerid, 3)) format(string, sizeof string, "** [CH: %d, S: %d] %s: %s", 700, 3, NombreJugador(playerid), params);
	if (member_faccion(playerid, 4)) format(string, sizeof string, "** [CH: %d, S: %d] %s: %s", 911, 4, NombreJugador(playerid), params);
	if (member_faccion(playerid, 5)) format(string, sizeof string, "** [CH: %d, S: %d] %s: %s", 600, 5, NombreJugador(playerid), params);
	SendRadioMessage(id, COLOR_RADIO, string);
	format(string, sizeof string, "%s por radio: %s", NombreJugador(playerid), params);
	ProxExDetector(3.5, playerid, string, 0x95939300, 0x95939300, 0x95939300, 0x95939300, 0x95939300);
	return 1;
}

CMD:wsp(playerid, params[])
{
	new id = InfoPlayer[playerid][pMiembro], string[314];
	if (!member_faccion(playerid, 6, 7, 8)) return SendClientMessage(playerid, COLOR_GREY, "Sólo facciones no-oficiales del servidor tienen wsp.");
	if (InfoPlayer[playerid][pTogRadio] == 0) return SendClientMessage(playerid, COLOR_GREY, "Posees el whastapp deshabilitado, escribe /togwsp.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /wsp (Texto)");
	format(string, sizeof string, "[WhatsApp de %s]: %s", NombreJugador(playerid), params);
	SendRadioMessage(id, 0x00D356FF, string);
	return 1;
}

CMD:d(playerid, params[])
{
	new id = InfoPlayer[playerid][pMiembro], rango = InfoPlayer[playerid][pRango], string[314];
	if (!member_faccion(playerid, 1, 2, 3, 4, 5)) return SendClientMessage(playerid, COLOR_GREY, "Sólo facciones oficiales del servidor tienen acceso.");
	if (InfoPlayer[playerid][pTogRadio] == 0) return SendClientMessage(playerid, COLOR_GREY, "Posees la radio de facción apagada, escribe /togradio.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /d (Texto)");
	format(string, sizeof string, "** [%s] %s %s: %s **", InfoFaccion[id][fLogo], fac_rango[id][rango-1], NombreJugador(playerid), params);
	SendRadioMessage(1, 0xF07A7AFF, string);
	SendRadioMessage(2, 0xF07A7AFF, string);
	SendRadioMessage(3, 0xF07A7AFF, string);
	SendRadioMessage(4, 0xF07A7AFF, string);
	SendRadioMessage(5, 0xF07A7AFF, string);
	format(string, sizeof string, "%s por radio: %s", NombreJugador(playerid), params);
	ProxExDetector(3.5, playerid, string, 0x95939300, 0x95939300, 0x95939300, 0x95939300, 0x95939300);
	return 1;
}

CMD:dooc(playerid, params[])
{
	new id = InfoPlayer[playerid][pMiembro], rango = InfoPlayer[playerid][pRango], string[314];
	if (!member_faccion(playerid, 1, 2, 3, 4, 5)) return SendClientMessage(playerid, COLOR_GREY, "Sólo facciones oficiales del servidor tienen acceso.");
	if (InfoPlayer[playerid][pTogRadio] == 0) return SendClientMessage(playerid, COLOR_GREY, "Posees la radio de facción apagada, escribe /togradio.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /d (Texto)");
	format(string, sizeof string, "(( [OOC: %s] %s %s: %s ))", InfoFaccion[id][fLogo], fac_rango[id][rango-1], NombreJugador(playerid), params);
	SendRadioMessage(1, 0xAC58FAFF, string);
	SendRadioMessage(2, 0xAC58FAFF, string);
	SendRadioMessage(3, 0xAC58FAFF, string);
	SendRadioMessage(4, 0xAC58FAFF, string);
	SendRadioMessage(5, 0xAC58FAFF, string);
	return 1;
}

CMD:equipo(playerid)
{
	new id = InfoPlayer[playerid][pMiembro];
	if (id == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás en ninguna facción.");
	if (InfoFaccion[id][fArmarioX] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Su facción no tiene ajustado el lugar de /equipo.");
	if (IsPlayerInRangeOfPoint(playerid, 4.0, InfoFaccion[id][fArmarioX], InfoFaccion[id][fArmarioY], InfoFaccion[id][fArmarioZ]) && InfoPlayer[playerid][pInterior] == InfoFaccion[id][fArmarioInt] && InfoPlayer[playerid][pVirtualWorld] == InfoFaccion[id][fArmarioVW])
	{
		new dialog[1870], titul[170], dialog2[256], count = 0, gformat[40];
		if (member_faccion(playerid, 1, 2, 3, 4, 5)) //lspd, fbi, saem, sasd, gob
		{
			//duty
			if (OnDuty[playerid] != 0)
			{
				strcat(dialog, "{EFEFEF}Colocarse {FD1717}fuera de servicio\n");
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, 0);
				count++;
			}
			else
			{
				strcat(dialog, "{EFEFEF}Colocarse {00C600}en servicio\n");
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, 0);
				count++;
			}
			//equipo
			Loop(x, 20, 0) if (InfoFaccion[id][fEquipo][x] != 0)
			{
				format(dialog2, sizeof dialog2, "{EFEFEF}%s\n", GetObjEquipo(InfoFaccion[id][fEquipo][x]));
				strcat(dialog, dialog2);
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, x+1);
				count++;
			}
			//skins
			if (TieneSkin(id) != 0)
			{
				strcat(dialog, "{EFEFEF}Uniformes\n");
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, 21);
				count++;
				if (GetPlayerSkin(playerid) != InfoPlayer[playerid][pSkin])
				{
					strcat(dialog, "{EFEFEF}Vestir ropa normal\n");
					//conteo
					format(gformat, sizeof gformat, "RanuraEq%d", count);
					SetPVarInt(playerid, gformat, 22);
					count++;
				}
			}
			if (member_faccion(playerid, 1, 2, 3, 4))
			{
				strcat(dialog, "{EFEFEF}- Encubierto\n");
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, 23);
				count++;
				strcat(dialog, "{EFEFEF}+ Accessorios\n");
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, 24);
				count++;
				strcat(dialog, "{EFEFEF}+ Borrar objetos de manos\n");
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, 25);
				count++;
				strcat(dialog, "{EFEFEF}+ Recargar balas");
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, 26);
				count++;
			}
		}
		else //otros
		{
			//equipo
			Loop(x, 20, 0) if (InfoFaccion[id][fEquipo][x] != 0)
			{
				format(dialog2, sizeof dialog2, "{EFEFEF}%s\n", GetObjEquipo(InfoFaccion[id][fEquipo][x]));
				strcat(dialog, dialog2);
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, x);
				count++;
			}
			//skins
			if (TieneSkin(id) != 0)
			{
				strcat(dialog, "{EFEFEF}Skins\n");
				//conteo
				format(gformat, sizeof gformat, "RanuraEq%d", count);
				SetPVarInt(playerid, gformat, 20);
				count++;
				if (GetPlayerSkin(playerid) != InfoPlayer[playerid][pSkin])
				{
					strcat(dialog, "{EFEFEF}Vestir skin normal");
					//conteo
					format(gformat, sizeof gformat, "RanuraEq%d", count);
					SetPVarInt(playerid, gformat, 21);
					count++;
				}
			}
		}
		format(titul, sizeof titul, "Equipo de {FFBF00}%s", InfoFaccion[id][fLogo]);
		Dialog_Show(playerid, ShowEquipo, DIALOG_STYLE_LIST, titul, dialog, "Continuar", "Salir");
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "No estás en el lugar de /equipo.");
	return 1;
}

Dialog:ShowEncubierto(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_equipo(playerid);
	new skinid = strval(inputtext);
	if (IsValidSkin(skinid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Debes de escoger una id de skin entre 1 y 311.");
	GivePlayerJobSkin(playerid, skinid);
	return 1;
}

Dialog:ShowEquipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, xwds[40];
	format(xwds, sizeof xwds, "RanuraEq%d", ID);
	new x = GetPVarInt(playerid, xwds);
	new faccion = InfoPlayer[playerid][pMiembro], gformat[170];
	new matts = InfoFaccion[faccion][fMateriales];
	if (member_faccion(playerid, 1, 2, 3, 4, 5)) //lspd, fbi, saem, sasd, gob
	{
		switch (x)
		{
			case 0: //duty
			{
				if (OnDuty[playerid] != 0)
				{
					OnDuty[playerid] = 0;
					cmd_me(playerid, "deja su placa en el casillero y deja su labor");
				}
				else
				{
					OnDuty[playerid] = 1;
					cmd_me(playerid, "coge su placa del casillero y entra en su labor");
				}
			}
			case 1..20: //equipo
			{
				if (matts <= 0) return SendClientMessage(playerid, COLOR_GREY, "Su facción no dispone de armamento o materiales en su armario.");
				new objeto = InfoFaccion[faccion][fEquipo][x-1];
				if (objeto == 900)
				{
					if (InfoPlayer[playerid][pVida] >= 99.0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes la vida full.");
					dar_vida(playerid, 100);
					cmd_me(playerid, "coge un botiquin hp del casillero");
				}
				else if (objeto == 950)
				{
					if (InfoPlayer[playerid][pChaleco] >= 99.0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes el chaleco full.");
					dar_chaleco(playerid, 100);
					cmd_me(playerid, "coge un chaleco del casillero");
				}
				else
				{
					if (InfoPlayer[playerid][pManoDerecha] > 0 && InfoPlayer[playerid][pManoIzquierda] > 0) return SendClientMessage(playerid, COLOR_GREY, "Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
					if (InfoPlayer[playerid][pManoDerecha] != 0)
					{
						InfoPlayer[playerid][pManoIzquierda] = objeto;
						InfoPlayer[playerid][pManoIzquierdaCant] = InfoInventario[objeto][MaxCantidad];
						PonerObjeto(playerid, 2, objeto);
						format(gformat, sizeof gformat, "coge %s del casillero en su mano izquierda", GetObjEquipo(objeto));
					}
					else
					{
						InfoPlayer[playerid][pManoDerecha] = objeto;
						InfoPlayer[playerid][pManoDerechaCant] = InfoInventario[objeto][MaxCantidad];
						PonerObjeto(playerid, 1, objeto);
						if (InfoInventario[objeto][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], InfoInventario[objeto][MaxCantidad]); }
						format(gformat, sizeof gformat, "coge %s del casillero en su mano derecha", GetObjEquipo(objeto));
					}
					cmd_me(playerid, gformat);
					ActualizarManos(playerid);
				}
			}
			case 21: //skins
			{
				new SkinMuestra[20], count = 0;
				Loop(e, 20, 0) if (InfoFaccion[faccion][fSkin][e] != 0)
				{
					SkinMuestra[count] = InfoFaccion[faccion][fSkin][e];
					count++;
				}
				ShowModelSelectionMenuEx(playerid, SkinMuestra, count, InfoFaccion[faccion][fLogo], Equipo_Skin, -11.0, 0.0, -55.0, 1.0);
			}
			case 22: //skin normal
			{
				if (InfoPlayer[playerid][pJobSkin] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes puesto ningún skin de facción o trabajo.");
				GivePlayerSkin(playerid, InfoPlayer[playerid][pSkin]);
				cmd_me(playerid, "se viste con su ropa normal");
			}
			case 23: //encubierto
			{
				Dialog_Show(playerid, ShowEncubierto, DIALOG_STYLE_INPUT, "{FFBF00}Encubierto", "{FFFFFF}Introduce la skin de 1 entre 311:", "Continuar", "Volver");
			}
			case 24: //accesorios
			{
				new max_cToys = 4;
				if (InfoPlayer[playerid][pVIP] == 3) max_cToys = 7;
				Loop(id, max_cToys, 0) if (InfoPlayer[playerid][ptModelo][id] == 0)
				{
					slotselection[playerid] = id;
					new ToyMuestra[180], count = 0;
					Loop(e, sizeof InfoToy, 0) if (InfoToy[e][accTipo] == 2)
					{
						ToyMuestra[count] = InfoToy[e][accModelo];
						count++;
					}
					ShowModelSelectionMenuEx(playerid, ToyMuestra, count, "Toys de policia", Compra_Toy);
					return 1;
				}
				new gformat2[128];
				format(gformat2, sizeof gformat2, "No puedes tener más de %d toys.", max_cToys);
				SendClientMessage(playerid, COLOR_GREY, gformat2);
			}
			case 25: //borrar objetos
			{
				new count = 0, gformat2[128];
				if (InfoPlayer[playerid][pManoDerecha] != 0)
				{
					format(gformat2, sizeof gformat2, "Borraste %s de tu mano derecha.", InfoInventario[InfoPlayer[playerid][pManoDerecha]][NombreObjeto]);
				    count++;
					RemovePlayerAttachedObject(playerid, 7);
					InfoPlayer[playerid][pManoDerecha] = 0;
					InfoPlayer[playerid][pManoDerechaCant] = 0;
					ResetPlayerWeapons(playerid);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat2);
				}
				if (InfoPlayer[playerid][pManoIzquierda] != 0)
				{
				    format(gformat2, sizeof gformat2, "Borraste %s de tu mano izquierda.", InfoInventario[InfoPlayer[playerid][pManoIzquierda]][NombreObjeto]);
					count++;
					RemovePlayerAttachedObject(playerid, 8);
					InfoPlayer[playerid][pManoIzquierda] = 0;
					InfoPlayer[playerid][pManoIzquierdaCant] = 0;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat2);
				}
				if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes nada que borrar de tus manos, están vacías.");
				new query[500];
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0, Mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
				mysql_tquery(DBcreative, query);
			}
			case 26: //recargar balas
			{
				new mano = InfoPlayer[playerid][pManoDerecha], cantidad = InfoPlayer[playerid][pManoDerechaCant];
				new weaponid = InfoInventario[mano][IDArma];
				if (!weaponid) return SendClientMessage(playerid, COLOR_GREY, "No estás sosteniendo un arma en tu mano derecha.");
				if (cantidad == InfoInventario[mano][MaxCantidad])
				{
					format(gformat, sizeof gformat, "El máximo de balas de tu %s es de %d.", InfoInventario[mano][NombreObjeto], InfoInventario[mano][MaxCantidad]);
					SendClientMessage(playerid, COLOR_GREY, gformat);
					return 1;
				}
				format(gformat, sizeof gformat, "{FFFFFF}Puedes recargar {FFBF00}%d balas{FFFFFF} más para tu {FFBF00}%s{FFFFFF}.\n", InfoInventario[mano][MaxCantidad]-cantidad, InfoInventario[mano][NombreObjeto]);
				Dialog_Show(playerid, BalasEquipo, DIALOG_STYLE_INPUT, "{FFBF00}Recarga de balas", gformat, "Recargar", "Volver");
			}
		}
	}
	else //otros
	{
		switch (x)
		{
			case 0..19: //equipo
			{
				if (matts <= 0) return SendClientMessage(playerid, COLOR_GREY, "Su facción no dispone de armamento o materiales en su armario.");
				new objeto = InfoFaccion[faccion][fEquipo][x];
				if (objeto == 900)
				{
					if (InfoPlayer[playerid][pVida] >= 99.0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes la vida full.");
					dar_vida(playerid, 100);
					cmd_me(playerid, "coge un botiquin hp del armario");
				}
				else if (objeto == 950)
				{
					if (InfoPlayer[playerid][pChaleco] >= 99.0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes el chaleco full.");
					dar_chaleco(playerid, 100);
					cmd_me(playerid, "coge un chaleco del armario");
				}
				else
				{
					if (InfoPlayer[playerid][pManoDerecha] > 0 && InfoPlayer[playerid][pManoIzquierda] > 0) return SendClientMessage(playerid, COLOR_GREY, "Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
					if (InfoPlayer[playerid][pManoDerecha] != 0)
					{
						InfoPlayer[playerid][pManoIzquierda] = objeto;
						InfoPlayer[playerid][pManoIzquierdaCant] = InfoInventario[objeto][DefaultCantidad];
						PonerObjeto(playerid, 2, objeto);
						format(gformat, sizeof gformat, "coge %s del armario en su mano izquierda", GetObjEquipo(objeto));
					}
					else
					{
						InfoPlayer[playerid][pManoDerecha] = objeto;
						InfoPlayer[playerid][pManoDerechaCant] = InfoInventario[objeto][DefaultCantidad];
						PonerObjeto(playerid, 1, objeto);
						if (InfoInventario[objeto][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], InfoInventario[objeto][DefaultCantidad]); }
						format(gformat, sizeof gformat, "coge %s del armario en su mano derecha", GetObjEquipo(objeto));
					}
					cmd_me(playerid, gformat);
					ActualizarManos(playerid);
				}
			}
			case 20: //skins
			{
				new SkinMuestra[20], count = 0;
				Loop(e, 20, 0) if (InfoFaccion[faccion][fSkin][e] != 0)
				{
					SkinMuestra[count] = InfoFaccion[faccion][fSkin][e];
					count++;
				}
				ShowModelSelectionMenuEx(playerid, SkinMuestra, count, InfoFaccion[faccion][fLogo], Equipo_Skin, -11.0, 0.0, -55.0, 1.0);

			}
			case 21: //skin normal
			{
				if (InfoPlayer[playerid][pJobSkin] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes puesto ningún skin de facción o trabajo.");
				GivePlayerSkin(playerid, InfoPlayer[playerid][pSkin]);
				cmd_me(playerid, "se viste con su ropa normal");
			}
		}
	}
	return 1;
}

Dialog:BalasEquipo(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_equipo(playerid);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Sólo números para las balas, vuelve a intentarlo.");
	new balasCant = strval(inputtext);
	new mano = InfoPlayer[playerid][pManoDerecha], cantidad = InfoPlayer[playerid][pManoDerechaCant];
	new weaponid = InfoInventario[mano][IDArma], gformat[470];
	if (cantidad+balasCant >= InfoInventario[mano][MaxCantidad]+1)
	{
		format(gformat, sizeof gformat, "No puedes comprar %d balas, si tu %s tiene %d balas, el máximo es %d.", balasCant, InfoInventario[mano][NombreObjeto], cantidad, InfoInventario[mano][MaxCantidad]);
		SendClientMessage(playerid, COLOR_GREY, gformat);
		return 1;
	}
	//actualiza balas
	InfoPlayer[playerid][pManoDerechaCant] += balasCant;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, weaponid, InfoPlayer[playerid][pManoDerechaCant]);
	//guarda variables
	ActualizarManos(playerid);
	//mensaje de compra uwu
	format(gformat, sizeof gformat, "Recargaste {FFBF00}%d balas{FFFFFF} a tu {FFBF00}%s{FFFFFF}, ahora tienes {FFBF00}%d balas{FFFFFF}.", balasCant, InfoInventario[mano][NombreObjeto], InfoPlayer[playerid][pManoDerechaCant]);
	SendClientMessage(playerid, 0xFFFFFFFF, gformat);
	return 1;
}

GetColorLogo(tipo)
{
	new color[12];
	switch (tipo)
	{
		case 1: alm(color, "{3052DC}");
		case 2: alm(color, "{119585}");
		case 3: alm(color, "{16AE00}");
		case 4: alm(color, "{B7834F}");
		case 5: alm(color, "{A09792}");
		case 6: alm(color, "{F8F210}");
		default: alm(color, "{E87400}");
	}
	return color;
}

CMD:facciones(playerid)
{
	new gformat[320], dialog[3048] = "# Logo & Nombre\tMiembros\tLíder\tSub Líder\n";
	Loop(id, totalfacciones, 1) if (InfoFaccion[id][fTipo] != 0)
	{
		format(gformat, sizeof gformat, "{EBEBEB}(%d %s%s{EBEBEB}) %s\t%d\t{589DA0}%s\t{589DA0}%s\n", id, GetColorLogo(InfoFaccion[id][fTipo]), InfoFaccion[id][fLogo], InfoFaccion[id][fNombre], GetMiembrosFaccion(id), InfoFaccion[id][fLider], InfoFaccion[id][fSubLider]);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, "Facciones", dialog, "Cerrar", "");
	return 1;
}
CMD:organizaciones(playerid) return cmd_facciones(playerid);
CMD:bandas(playerid) return cmd_facciones(playerid);

CMD:statusfacc(playerid)
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new gformat[320], dialog[2048] = "Facción\tDinero\tMateriales\tSalario\n";
	Loop(id, totalfacciones, 1) if (InfoFaccion[id][fTipo] != 0)
	{
		format(gformat, sizeof gformat, "%s%s\t{00CC00}$%s\t{589DA0}%d\t{00CC00}$%s\n", GetColorLogo(InfoFaccion[id][fTipo]), InfoFaccion[id][fLogo], diner_coma(InfoFaccion[id][fDinero]), InfoFaccion[id][fMateriales], diner_coma(InfoFaccion[id][fSalario]));
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, "Status de facciones", dialog, "Cerrar", "");
	return 1;
}
CMD:statusfacciones(playerid) return cmd_statusfacc(playerid);

CMD:facchat(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	if( isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /facchat (Mensaje para miembros en las facciones)");
	new string[320];
	format(string, sizeof string, "{00A2FF}[E.F] %s:{FFFFFF} %s", NombreOriginal(playerid), params);
	foreach(Player, i) if (IsPlayerConnectedEx(i))
	{
		if (InfoPlayer[i][pMiembro] != 0)
			SendSplitMessage(i, 0xFFFFFFFF, string);
	}
	return 1;
}

CMD:supervisar(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new faccion, string[345];
	if (sscanf(params, "d", faccion)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /supervisar (FacciónID)");
	if (faccion < 0 || faccion > MAX_FACCIONES) return SendClientMessage(playerid, COLOR_GREY, "ID de facción incorrecta.");
	if (faccion == 0)
	{
		InfoPlayer[playerid][pLider] = 0;
		InfoPlayer[playerid][pMiembro] = 0;
		InfoPlayer[playerid][pRango] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has dejado de supervisar facciones.");
		return 1;
	}
	if (!InfoFaccion[faccion][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	InfoPlayer[playerid][pLider] = faccion;
	InfoPlayer[playerid][pMiembro] = faccion;
	InfoPlayer[playerid][pRango] = InfoFaccion[faccion][fMaxRangos];
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) está supervisando %s.", NombreOriginal(playerid), playerid, InfoFaccion[faccion][fNombre]);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:hacerlider(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new playerid2, faccion, string[512], query[512];
	if (sscanf(params, "dd", playerid2, faccion)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /hacerlider [id jugador] [facción]");
	if (faccion < 1 || faccion > MAX_FACCIONES) return SendClientMessage(playerid, COLOR_GREY, "ID de facción incorrecta.");
	if (!InfoFaccion[faccion][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	if (strcmp(InfoFaccion[faccion][fLider], "disponible", true) == 0)
	{
		if (InfoPlayer[playerid2][pMiembro] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador ya está en una facción.");
		alm(InfoFaccion[faccion][fLider], NombreDeCuenta(playerid2));
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Lider = '%e' WHERE ID = '%d'", InfoFaccion[faccion][fLider], InfoFaccion[faccion][fID_sql]);
		mysql_tquery(DBcreative, query);
		InfoPlayer[playerid2][pLider] = faccion;
		InfoPlayer[playerid2][pMiembro] = faccion;
		InfoPlayer[playerid2][pRango] = InfoFaccion[faccion][fMaxRangos];
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET LiderFaccion = '%d', MiembroFaccion = '%d', Rango = '%d' WHERE ID = '%d'", faccion, faccion, InfoPlayer[playerid2][pRango], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
		format(string, sizeof string, "* %s te asignó el líder de %s.", NombreOriginal(playerid), InfoFaccion[faccion][fNombre]);
		SendClientMessage(playerid2, 0x6ADFFFFF, string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) asignó lider de %s a %s(%d).", NombreOriginal(playerid), playerid, InfoFaccion[faccion][fNombre], NombreOriginal(playerid), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Esa facción ya posee lider, prueba /hacersublider.");
	return 1;
}

CMD:hacersublider(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new playerid2, faccion, string[512], query[512];
	if (sscanf(params, "dd", playerid2, faccion)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /hacersublider [id jugador] [facción]");
	if (faccion < 1 || faccion > MAX_FACCIONES) return SendClientMessage(playerid, COLOR_GREY, "ID de facción incorrecta.");
	if (!InfoFaccion[faccion][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	if (strcmp(InfoFaccion[faccion][fSubLider], "disponible", true) == 0)
	{
		if (InfoPlayer[playerid2][pMiembro] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador ya está en una facción.");
		alm(InfoFaccion[faccion][fSubLider], NombreDeCuenta(playerid2));
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET SubLider = '%e' WHERE ID = '%d'", InfoFaccion[faccion][fSubLider], InfoFaccion[faccion][fID_sql]);
		mysql_tquery(DBcreative, query);
		InfoPlayer[playerid2][pLider] = faccion;
		InfoPlayer[playerid2][pMiembro] = faccion;
		InfoPlayer[playerid2][pRango] = InfoFaccion[faccion][fMaxRangos];
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET LiderFaccion = '%d', MiembroFaccion = '%d', Rango = '%d' WHERE ID = '%d'", faccion, faccion, InfoPlayer[playerid2][pRango], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
		format(string, sizeof string, "* %s te asignó el sublíder de %s.", NombreOriginal(playerid), InfoFaccion[faccion][fNombre]);
		SendClientMessage(playerid2, 0x6ADFFFFF, string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) asignó sublider de %s a %s(%d).", NombreOriginal(playerid), playerid, InfoFaccion[faccion][fNombre], NombreOriginal(playerid), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Esa facción ya posee sublider, intenta con /darmiembro o limpiando la facción.");
	return 1;
}

CMD:darmiembro(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new playerid2, id, rango, gformat[256];
	if (sscanf(params, "ddd", playerid2, id, rango)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darmiembro (JugadorID) (FacciónID) (Rango)");
	if (id < 0 || id > MAX_FACCIONES) return SendClientMessage(playerid, COLOR_GREY, "ID de facción incorrecta.");
	if (InfoPlayer[playerid2][pLider] != 0) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando en lideres, debes limpiar la facción.");
	if (id == 0)
	{
		if (InfoPlayer[playerid2][pMiembro] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no está en ninguna facción.");
		OnDuty[playerid2] = 0;
		InfoPlayer[playerid2][pLider] = 0;
		InfoPlayer[playerid2][pMiembro] = 0;
		InfoPlayer[playerid2][pRango] = 0;
		mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Rango = '%d', LiderFaccion = 0, MiembroFaccion = '%d' WHERE ID = '%d'", InfoPlayer[playerid2][pRango], InfoPlayer[playerid2][pMiembro], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, gformat);
		format(gformat, sizeof gformat, "%s te sacó de la facción en la que estabas.", NombreOriginal(playerid));
		SendClientMessage(playerid2, 0x6ADFFFFF, gformat);
		format(gformat, sizeof gformat, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) saco a %s(%d) de la facción en la que estaba.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, gformat);
		return 1;
	}
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	if (rango < 1 || rango > InfoFaccion[id][fMaxRangos])
	{
		format(gformat, sizeof gformat, "El máximo de rangos de %s es de %d.", InfoFaccion[id][fLogo], InfoFaccion[id][fMaxRangos]);
		SendClientMessage(playerid, COLOR_GREY, gformat);
		return 1;
	}
	OnDuty[playerid2] = 0;
	InfoPlayer[playerid2][pLider] = 0;
	InfoPlayer[playerid2][pMiembro] = id;
	InfoPlayer[playerid2][pRango] = rango;
	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Rango = '%d', LiderFaccion = 0, MiembroFaccion = '%d' WHERE ID = '%d'", InfoPlayer[playerid2][pRango], InfoPlayer[playerid2][pMiembro], InfoPlayer[playerid2][pID]);
	mysql_tquery(DBcreative, gformat);
	format(gformat, sizeof gformat, "%s te asignó miembro de %s con rango %d.", NombreOriginal(playerid), InfoFaccion[id][fLogo], rango);
	SendClientMessage(playerid2, 0x6ADFFFFF, gformat);
	format(gformat, sizeof gformat, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) asignó miembro de %s (rango %d) a %s(%d).", NombreOriginal(playerid), playerid, InfoFaccion[id][fLogo], rango, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, gformat);
	return 1;
}
CMD:hacermiembro(playerid, params[]) return cmd_darmiembro(playerid, params);

CMD:crearfaccion(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new tipo, string[256], query[1028];
	if (sscanf(params, "d", tipo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /crearfaccion (Tipo) [1: Legal | 2: Pandilla | 3: Mafia]");
	if (tipo < 1 || tipo > 3) return SendClientMessage(playerid, 0xFF6347AA, "Tipos (1: Legal | 2: Pandilla | 3: Mafia)"); 															//	if (tipo < 1 || tipo > 5) return SendClientMessage(playerid, 0xFF6347AA, "1lspd, 2fbi, 3saem, 4medicos, 5gobierno");
	tipo += 5;
	Loop(id, MAX_FACCIONES, 1) if (!InfoFaccion[id][fTipo])
	{
		alm(InfoFaccion[id][fNombre], "/editarfnombre");
		alm(InfoFaccion[id][fLogo], "none");
		alm(InfoFaccion[id][fLider], "disponible");
		alm(InfoFaccion[id][fSubLider], "disponible");
		alm(InfoFaccion[id][fMensaje], "none");
		InfoFaccion[id][fTipo] = tipo;
		InfoFaccion[id][fMaxRangos] = 6;
		Loop(x, 15, 0)
		{
			new gformat[15];
			format(gformat, sizeof gformat, "Rank%d", x+1);
			alm(fac_rango[id][x], gformat);
		}
		format(string, sizeof string, "Registros: %s ha creado la facción ID %d.", NombreDeCuenta(playerid), id);
		Log("LOGS/Facciones.log", string);
		format(string, sizeof string, "Creaste la facción ID %d, configurala con /editarfnombre, /editarflogo y /editarfaccion", id);
		SendClientMessage(playerid, 0x90C3D4FF, string);

		//opción idsql ya creada.
		if (InfoFaccion[id][fID_sql] != 0)
		{
			mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Nombre = '%e', Logo = '%e', Lider = '%e', SubLider = '%e', Mensaje = '%e', Tipo = '%d', MaxRangos = '%d' WHERE ID = '%d'",
			InfoFaccion[id][fNombre],
			InfoFaccion[id][fLogo],
			InfoFaccion[id][fLider],
			InfoFaccion[id][fSubLider],
			InfoFaccion[id][fMensaje],
			InfoFaccion[id][fTipo],
			InfoFaccion[id][fMaxRangos],
			InfoFaccion[id][fID_sql]);
			mysql_tquery(DBcreative, query);
			id = MAX_FACCIONES;
			return 1;
		}
		mysql_format(DBcreative, query, sizeof query, "INSERT INTO facciones (Nombre, Logo, Lider, SubLider, Mensaje, Tipo, MaxRangos) VALUES ('%e', '%e', '%e', '%e', '%e', '%d', '%d')",
		InfoFaccion[id][fNombre],
		InfoFaccion[id][fLogo],
		InfoFaccion[id][fLider],
		InfoFaccion[id][fSubLider],
		InfoFaccion[id][fMensaje],
		InfoFaccion[id][fTipo],
		InfoFaccion[id][fMaxRangos]);
		mysql_tquery(DBcreative, query, "OnFactionCreate", "i", id);
		id = MAX_FACCIONES;
		return 1;
	}
	SendClientMessage(playerid, COLOR_RED, "Se alcanzó el máximo de facciones (50)");
	return 1;
}
CMD:crearfac(playerid, params[]) return cmd_crearfaccion(playerid, params);

forward OnFactionCreate(id);
public OnFactionCreate(id)
{
	totalfacciones++;
	InfoFaccion[id][fID_sql] = cache_insert_id();
	cache_unset_active();
    return 1;
}

CMD:borrarfaccion(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, query[256];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /borrarfaccion [slot]");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Pablo_Prieto", true) || !strcmp(InfoPlayer[playerid][pNombre_Apellido], "Elias_Moss", true))
	{
		mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE MiembroFaccion = '%d'", id);
		mysql_tquery(DBcreative, query, "OnActiveMembers", "dd", playerid, id);
	}
	else
	{
		if (NoFacEdit(id)) return SendClientMessage(playerid, COLOR_GREY, "No puedes borrar facciones oficiales del servidor.");
		mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE MiembroFaccion = '%d'", id);
		mysql_tquery(DBcreative, query, "OnActiveMembers", "dd", playerid, id);
	}
	return 1;
}
CMD:borrarfac(playerid, params[]) return cmd_borrarfaccion(playerid, params);

forward OnActiveMembers(playerid, id);
public OnActiveMembers(playerid, id)
{
	new members = 0;
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		//fix 22/04/2020
		Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombreapellido, true))
		{
			newid = plasher;
			break;
		}
		//fix 22/04/2020
		if (IsPlayerConnectedEx(newid))
		{
			InfoPlayer[newid][pLider] = 0;
			InfoPlayer[newid][pMiembro] = 0;
			InfoPlayer[newid][pRango] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Acaban de borrar la facción en la que estabas.");
		}
		new query[256];
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET LiderFaccion = 0, MiembroFaccion = 0, Rango = 0 WHERE Nombre_Apellido = '%e'", nombreapellido);
		mysql_tquery(DBcreative, query);
		members++;
	}
	alm(InfoFaccion[id][fNombre], "none");
	alm(InfoFaccion[id][fLogo], "none");
	alm(InfoFaccion[id][fLider], "disponible");
	alm(InfoFaccion[id][fSubLider], "disponible");
	alm(InfoFaccion[id][fMensaje], "none");
	InfoFaccion[id][fTipo] = 0;
	InfoFaccion[id][fDinero] = 0;
	InfoFaccion[id][fSalario] = 0;
	InfoFaccion[id][fMaxRangos] = 6;
	InfoFaccion[id][fSpawnX] = 0.0;
	InfoFaccion[id][fSpawnY] = 0.0;
	InfoFaccion[id][fSpawnZ] = 0.0;
	InfoFaccion[id][fSpawnR] = 0.0;
	InfoFaccion[id][fSpawnInt] = 0;
	InfoFaccion[id][fSpawnVW] = 0;
	InfoFaccion[id][fArmarioX] = 0.0;
	InfoFaccion[id][fArmarioY] = 0.0;
	InfoFaccion[id][fArmarioZ] = 0.0;
	InfoFaccion[id][fArmarioInt] = 0;
	InfoFaccion[id][fArmarioVW] = 0;
	InfoFaccion[id][fMateriales] = 0;
	DestroyDynamicPickup(InfoFaccion[id][fArmarioPickup]);
	DestroyDynamic3DTextLabel(InfoFaccion[id][fArmarioLabel]);
	Loop(x, 20, 0)
	{
		InfoFaccion[id][fEquipo][x] = 0;
		InfoFaccion[id][fSkin][x] = 0;
		new que3ry[256];
		mysql_format(DBcreative, que3ry, sizeof que3ry, "UPDATE facciones SET Equipo%d = 0, Skin%d = 0 WHERE ID = '%d'", x+1, x+1, InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, que3ry);
	}
	Loop(x, 15, 0)
	{
		new gformat[15], que3ry[256];
		format(gformat, sizeof(gformat), "Rank%d", x+1);
		alm(fac_rango[id][x], gformat);
		mysql_format(DBcreative, que3ry, sizeof que3ry, "UPDATE facciones SET Rango%d = '%e' WHERE ID = '%d'", x+1, fac_rango[id][x], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, que3ry);
	}
	new query[2048], string[256];
	mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Nombre = '%e', Logo = '%e', Lider = '%e', SubLider = '%e', Mensaje = '%e', Tipo = 0, BolosUwU = 0, Salario = 0, \
	SpawnX = 0.0, SpawnY = 0.0, SpawnZ = 0.0, SpawnR = 0.0, SpawnInt = 0, SpawnVW = 0, ArmarioX = 0.0, ArmarioY = 0.0, ArmarioZ = 0.0, ArmarioInt = 0, ArmarioVW = 0, Materiales = 0, MaxRangos = 6 WHERE ID = '%d'",
	InfoFaccion[id][fNombre], InfoFaccion[id][fLogo], InfoFaccion[id][fLider], InfoFaccion[id][fSubLider], InfoFaccion[id][fMensaje], InfoFaccion[id][fID_sql]);
	mysql_tquery(DBcreative, query);
	format(string, sizeof string, "Borraste la facción ID %d con %d miembros, SQL vacía: %d", id, members, InfoFaccion[id][fID_sql]);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	return 1;
}

CMD:limpiarf(playerid, params[]) return cmd_limpiarfaccion(playerid, params);
CMD:limpiarfaccion(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, query[256];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /limpiarfaccion (FacciónID)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE MiembroFaccion = '%d'", id);
	mysql_tquery(DBcreative, query, "OnLimpiezaFacction", "dd", playerid, id);
	return 1;
}

forward OnLimpiezaFacction(playerid, id);
public OnLimpiezaFacction(playerid, id)
{
	new members = 0;
	new query[512];
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		//fix 22/04/2020
		Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombreapellido, true))
		{
			newid = plasher;
			break;
		}
		//fix 22/04/2020
		if (IsPlayerConnectedEx(newid))
		{
			InfoPlayer[newid][pLider] = 0;
			InfoPlayer[newid][pMiembro] = 0;
			InfoPlayer[newid][pRango] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Acaban de limpiar la facción en la que estabas.");
		}
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET LiderFaccion = 0, MiembroFaccion = 0, Rango = 0 WHERE Nombre_Apellido = '%e'", nombreapellido);
		mysql_tquery(DBcreative, query);
		members++;
	}
	alm(InfoFaccion[id][fLider], "disponible");
	alm(InfoFaccion[id][fSubLider], "disponible");
	alm(InfoFaccion[id][fMensaje], "none");
	mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Lider = '%e', SubLider = '%e', Mensaje = '%e' WHERE ID = '%d'", InfoFaccion[id][fLider], InfoFaccion[id][fSubLider], InfoFaccion[id][fMensaje], InfoFaccion[id][fID_sql]);
	mysql_tquery(DBcreative, query);
	format(query, sizeof query, "Limpiaste %s con %d miembros.", InfoFaccion[id][fNombre], members);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, query);
	return 1;
}

CMD:editarfnombre(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, fnombre[128], query[256];
	if (sscanf(params, "ds[128]", id, fnombre)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarfnombre (FacciónID) (Nombre)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Pablo_Prieto", true) || !strcmp(InfoPlayer[playerid][pNombre_Apellido], "Elias_Moss", true))
	{
		alm(InfoFaccion[id][fNombre], fnombre);
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Nombre = '%e' WHERE ID = '%d'", InfoFaccion[id][fNombre], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, query);
		format(query, sizeof query, "Facción %d | %s", id, fnombre);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
	}
	else
	{
		if (NoFacEdit(id)) return SendClientMessage(playerid, COLOR_GREY, "No puedes editar facciones oficiales del servidor.");
		alm(InfoFaccion[id][fNombre], fnombre);
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Nombre = '%e' WHERE ID = '%d'", InfoFaccion[id][fNombre], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, query);
		format(query, sizeof query, "Facción %d | %s", id, fnombre);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
	}
	return 1;
}

CMD:editarflogo(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, flogo[11], query[256];
	if (sscanf(params, "ds[11]", id, flogo)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarflogo (FacciónID) (LogoTipo)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Pablo_Prieto", true) || !strcmp(InfoPlayer[playerid][pNombre_Apellido], "Elias_Moss", true))
	{
		alm(InfoFaccion[id][fLogo], flogo);
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Logo = '%e' WHERE ID = '%d'", InfoFaccion[id][fLogo], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, query);
		format(query, sizeof query, "Facción %d | %s", id, flogo);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
		if (InfoFaccion[id][fArmarioX] != 0.0) faccion_armario(id, 1);
	}
	else
	{
		if (NoFacEdit(id)) return SendClientMessage(playerid, COLOR_GREY, "No puedes editar facciones oficiales del servidor.");
		alm(InfoFaccion[id][fLogo], flogo);
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Logo = '%e' WHERE ID = '%d'", InfoFaccion[id][fLogo], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, query);
		format(query, sizeof query, "Facción %d | %s", id, flogo);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
		if (InfoFaccion[id][fArmarioX] != 0.0) faccion_armario(id, 1);
	}
	return 1;
}

CMD:editarflider(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, flider[25], query[256];
	if (sscanf(params, "ds[25]", id, flider)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarflider (FacciónID) (Lider)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	alm(InfoFaccion[id][fLider], flider);
	mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Lider = '%e' WHERE ID = '%d'", InfoFaccion[id][fLider], InfoFaccion[id][fID_sql]);
	mysql_tquery(DBcreative, query);
	format(query, sizeof query, "Facción %d | Lider: %s", id, flider);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
	return 1;
}

CMD:editarfsublider(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, flider[25], query[256];
	if (sscanf(params, "ds[25]", id, flider)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarfsublider (FacciónID) (SubLider)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	alm(InfoFaccion[id][fSubLider], flider);
	mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET SubLider = '%e' WHERE ID = '%d'", InfoFaccion[id][fSubLider], InfoFaccion[id][fID_sql]);
	mysql_tquery(DBcreative, query);
	format(query, sizeof query, "Facción %d | Sub Lider: %s", id, flider);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
	return 1;
}

CMD:editarfaccion(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, string[512], input;
	if (sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarf (Nombre) (FacciónID) (Opción)");
		SendClientMessage(playerid, COLOR_GREEN, "Opciones: dinero - tipo - salario - maxrangos - spawn - posequipo - materiales");
		return 1;
	}
	if (!strcmp(params, "dinero", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarf dinero (FacciónID) ($)");
		if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
		InfoFaccion[id][fDinero] += input;
		guardar_int_mysql("facciones", "BolosUwU", InfoFaccion[id][fID_sql], InfoFaccion[id][fDinero]);
		format(string, sizeof string, "Ahora los fondos de la facción %s (%d) son $%d dólares.", InfoFaccion[id][fLogo], id, input);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if (!strcmp(params, "tipo", true, 4))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarf tipo (FacciónID) (Tipo)");
		if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
		if (NoFacEdit(id)) return SendClientMessage(playerid, COLOR_GREY, "No puedes editar facciones oficiales del servidor.");
		if (input < 1 || input > 3) return SendClientMessage(playerid, 0xFF6347AA, "Tipos (1: Legal | 2: Pandilla | 3: Mafia)");
		input += 5;
		InfoFaccion[id][fTipo] = input;
		guardar_int_mysql("facciones", "Tipo", InfoFaccion[id][fID_sql], InfoFaccion[id][fTipo]);
		format(string, sizeof string, "Ahora el tipo de la facción %s (%d) es %d.", InfoFaccion[id][fLogo], id, input-5);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if (!strcmp(params, "salario", true, 7))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarf salario (FacciónID) ($)");
		if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
		InfoFaccion[id][fSalario] = input;
		guardar_int_mysql("facciones", "Salario", InfoFaccion[id][fID_sql], InfoFaccion[id][fSalario]);
		format(string, sizeof string, "Ahora el salario de la facción %s (%d) es de $%d dólares.", InfoFaccion[id][fLogo], id, input);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if (!strcmp(params, "materiales", true, 10))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarf materiales (FacciónID) (Cantidad)");
		if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
		if (InfoFaccion[id][fArmarioX] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "No has configurado el lugar del /equipo. Utiliza: /editarf posequipo");
		InfoFaccion[id][fMateriales] = input;
		guardar_int_mysql("facciones", "Materiales", InfoFaccion[id][fID_sql], InfoFaccion[id][fMateriales]);
		format(string, sizeof string, "Ahora los materiales de la facción %s (%d) son %d.", InfoFaccion[id][fLogo], id, input);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		faccion_armario(id, 1);
	}
	else if (!strcmp(params, "maxrangos", true, 9))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarf maxrangos (FacciónID) (Max)");
		if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
		InfoFaccion[id][fMaxRangos] = input;
		guardar_int_mysql("facciones", "MaxRangos", InfoFaccion[id][fID_sql], InfoFaccion[id][fMaxRangos]);
		format(string, sizeof string, "Ahora el máximo de rangos de la facción %s (%d) es de %d rangos.", InfoFaccion[id][fLogo], id, input);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if (!strcmp(params, "spawn", true, 5))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarf spawn (FacciónID)");
		if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
		GetPlayerPos(playerid, InfoFaccion[id][fSpawnX], InfoFaccion[id][fSpawnY], InfoFaccion[id][fSpawnZ]);
		GetPlayerFacingAngle(playerid, InfoFaccion[id][fSpawnR]);
		InfoFaccion[id][fSpawnInt] = GetPlayerInterior(playerid);
		InfoFaccion[id][fSpawnVW] = GetPlayerVirtualWorld(playerid);
		format(string, sizeof string, "Cambiaste el spawn de la facción %s (%d).", InfoFaccion[id][fLogo], id);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		mysql_format(DBcreative, string, sizeof string, "UPDATE facciones SET SpawnX = '%f', SpawnY = '%f', SpawnZ = '%f', SpawnR = '%f', SpawnInt = '%d', SpawnVW = '%d' WHERE ID = '%d'", InfoFaccion[id][fSpawnX], InfoFaccion[id][fSpawnY], InfoFaccion[id][fSpawnZ], InfoFaccion[id][fSpawnR], InfoFaccion[id][fSpawnInt], InfoFaccion[id][fSpawnVW], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, string);
	}
	else if (!strcmp(params, "posequipo", true, 9))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarf posequipo (FacciónID)");
		if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
		GetPlayerPos(playerid, InfoFaccion[id][fArmarioX], InfoFaccion[id][fArmarioY], InfoFaccion[id][fArmarioZ]);
		InfoFaccion[id][fArmarioInt] = GetPlayerInterior(playerid);
		InfoFaccion[id][fArmarioVW] = GetPlayerVirtualWorld(playerid);
		format(string, sizeof string, "Cambiaste el lugar del /equipo de la facción %s (%d).", InfoFaccion[id][fLogo], id);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		mysql_format(DBcreative, string, sizeof string, "UPDATE facciones SET ArmarioX = '%f', ArmarioY = '%f', ArmarioZ = '%f', ArmarioInt = '%d', ArmarioVW = '%d' WHERE ID = '%d'", InfoFaccion[id][fArmarioX], InfoFaccion[id][fArmarioY], InfoFaccion[id][fArmarioZ], InfoFaccion[id][fArmarioInt], InfoFaccion[id][fArmarioVW], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, string);
		faccion_armario(id, 0);
	}
	return 1;
}
CMD:editarf(playerid, params[]) return cmd_editarfaccion(playerid, params);

NoFacEdit(id)
{
	switch (id)
	{
		case 1..5: return 1;
	}
	return 0;
}

CMD:editarfskin(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, pslot, pskin, query[256];
	if (sscanf(params, "ddd", id, pslot, pskin)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarfskin (FacciónID) (Slot [1-20]) (SkinModel)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	if (pslot < 1 || pslot > 20) return SendClientMessage(playerid, COLOR_GREY, "Slot inválido, prueba entre 1 al 20.");
	if (pskin == -1)
	{
		InfoFaccion[id][fSkin][pslot-1] = 0;
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Skin%d = 0 WHERE ID = '%d'", pslot, InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, query);
		format(query, sizeof query, "Facción %s | Skin%d: removido", InfoFaccion[id][fLogo], pslot);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
		return 1;
	}
	if (IsValidSkin(pskin) == 0) return SendClientMessage(playerid, COLOR_GREY, "Skin inválido, prueba entre 1 al 311.");
	Loop(x, 20, 0) if (InfoFaccion[id][fSkin][x] == pskin)
	{
		format(query, sizeof query, "Ya está el skin %d en el slot %d.", pskin, x+1);
		SendClientMessage(playerid, COLOR_GREY, query);
		return 1;
	}
	InfoFaccion[id][fSkin][pslot-1] = pskin;
	mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Skin%d = '%d' WHERE ID = '%d'", pslot, InfoFaccion[id][fSkin][pslot-1], InfoFaccion[id][fID_sql]);
	mysql_tquery(DBcreative, query);
	format(query, sizeof query, "Facción %s | Skin%d: %d {FFFFFF}(Si quieres quitar el skin de este slot %d, usa en skin -1)", InfoFaccion[id][fLogo], pslot, pskin, pslot);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
	return 1;
}

CMD:editarfequipo(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes variables de encargado de facciones.");
	new id, dialog[1024], gformat[256];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarfequipo (FacciónID)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	Loop(x, 20, 0)
	{
		if (InfoFaccion[id][fEquipo][x] != 0) format(gformat, sizeof gformat, "{FFFFFF}%d | {FFBF00}%s\n", x+1, GetObjEquipo(InfoFaccion[id][fEquipo][x]));
		else format(gformat, sizeof gformat, "{CCCCCC}%d | Vacío\n", x+1);
		strcat(dialog, gformat);
	}
	format(gformat, sizeof gformat, "Equipo de %s", InfoFaccion[id][fLogo]);
	Dialog_Show(playerid, ChangeFequipo, DIALOG_STYLE_LIST, gformat, dialog, "Cambiar", "Salir");
	ID_ACTUAL_FACUWU[playerid] = id;
	return 1;
}

Dialog:ChangeFequipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new gformat[450], id = ID_ACTUAL_FACUWU[playerid];
	format(gformat, sizeof gformat, "Estás editando el slot %d (objeto actual: %s)\n\nEscribe el id del nuevo objeto (id 900 es vida - id 950 es chaleco - el resto en /listaobjetos): ", listitem+1, GetObjEquipo(InfoFaccion[id][fEquipo][listitem]));
	Dialog_Show(playerid, Change2Fequipo, DIALOG_STYLE_INPUT, "Ajustes de /equipo", gformat, "Continuar", "Salir");
	ID_ACTUAL_EquipoUWU[playerid] = listitem;
	return 1;
}

Dialog:Change2Fequipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Sólo números porfavor, vuelve a intentarlo.");
	new obj = strval(inputtext);
	if (ValidObjEquipo(obj) == 0) return SendClientMessage(playerid, COLOR_GREY, "Objeto inválido, revisa /listaobjetos.");
	new slot = ID_ACTUAL_EquipoUWU[playerid], id = ID_ACTUAL_FACUWU[playerid], gformat[240];
	Loop(x, 20, 0) if (obj != 0 && InfoFaccion[id][fEquipo][x] == obj)
	{
		format(gformat, sizeof gformat, "%s ya lo tienes en el slot %d", GetObjEquipo(obj), x+1);
		SendClientMessage(playerid, COLOR_GREY, gformat);
		return 1;
	}
	InfoFaccion[id][fEquipo][slot] = obj;
	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE facciones SET Equipo%d = '%d' WHERE ID = '%d'", slot+1, InfoFaccion[id][fEquipo][slot], InfoFaccion[id][fID_sql]);
	mysql_tquery(DBcreative, gformat);
	format(gformat, sizeof gformat, "Facción: %s | Agregaste %s en el slot %d.", InfoFaccion[id][fLogo], GetObjEquipo(obj), slot+1);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
	return 1;
}

CMD:irfaccion(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id, gformat[180];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /irfaccion (FacciónID) [esto te llevará al /equipo de la facción]");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "ID de facción invalida.");
	if (InfoFaccion[id][fArmarioX] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Esa facción no tiene ajustado el lugar de /equipo.");
	SetPosEx(playerid, InfoFaccion[id][fArmarioX], InfoFaccion[id][fArmarioY], InfoFaccion[id][fArmarioZ], 0.0000, InfoFaccion[id][fArmarioInt], InfoFaccion[id][fArmarioVW], 1);
	format(gformat, sizeof gformat, "Acabas de ir al lugar de /equipo de %s.", InfoFaccion[id][fLogo]);
	SendClientMessage(playerid, COLOR_GREEN, gformat);
	return 1;
}
CMD:irf(playerid, params[]) return cmd_irfaccion(playerid, params);

//
CMD:ct(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "No tienes un cinturón táctico.");
	ver_cinturon(playerid);
	return 1;
}

ver_cinturon(playerid)
{
	ActualizarManos(playerid);
	// normal
	new dialog[1024], dialog2[256], count = 0;
	Loop(x, 6, 0)
	{
		if (InfoPlayer[playerid][pCinturon][x] != 0) format(dialog2, sizeof dialog2, "{FFFFFF}%s\n", slot_objeto(InfoPlayer[playerid][pCinturon][x], InfoPlayer[playerid][pCinturonCant][x])), count++;
		else alm(dialog2, "{CCCCCC}\n");
		strcat(dialog, dialog2);
	}
	//barra espacio
	strcat(dialog, "{8000FF}--------------------\n");
	//mano derecha
	if (InfoPlayer[playerid][pManoDerecha] != 0) format(dialog2, sizeof dialog2, "{FFFFFF}Mano derecha: %s\n", slot_inv(InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant])), count++;
	else alm(dialog2, "{CCCCCC}Mano derecha vacía\n");
	strcat(dialog, dialog2);
	//mano izquierda
	if (InfoPlayer[playerid][pManoIzquierda] != 0) format(dialog2, sizeof dialog2, "{FFFFFF}Mano izquierda: %s\n", slot_inv(InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant])), count++;
	else alm(dialog2, "{CCCCCC}Mano izquierda vacía\n");
	strcat(dialog, dialog2);
	//show_dialog
	if (count == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Cinturón táctico", "{CCCCCC}No tienes nada que sacar o guardar.", "Cerrar", "");
	Dialog_Show(playerid, OpcionCinturon, DIALOG_STYLE_LIST, "Cinturón táctico", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:OpcionCinturon(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0..5: sacar_cinturon(playerid, listitem);
		case 6: return cmd_ct(playerid);
		case 7: guardar_cinturon(playerid, 1);
		case 8: guardar_cinturon(playerid, 2);
	}
	return 1;
}

CMD:guardarct(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "No tienes un cinturón táctico.");
	guardar_cinturon(playerid, 1);
	return 1;
}
CMD:gct(playerid) return cmd_guardarct(playerid);

CMD:sacarct(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "No tienes un cinturón táctico.");
	new id;
	if (sscanf(params, "i", id))
	{
		new count = 0, dialog[256];
		Loop(x, 6, 0) if (InfoPlayer[playerid][pCinturon][x] != 0) count++;
		if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en tu cinturón táctico.");
		SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /sacarct (Slot)");
		Loop(x, 6, 0) if (InfoPlayer[playerid][pCinturon][x] != 0)
		{
			format(dialog, sizeof(dialog), "Tienes en {FFBF00}slot %d{EBEBEB}: %s", x+1, slot_objeto(InfoPlayer[playerid][pCinturon][x], InfoPlayer[playerid][pCinturonCant][x]));
			SendClientMessage(playerid, 0xEBEBEBFF, dialog);
		}
		return 1;
	}
	if (sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /sacarct (Slot)");
	if (id < 1 || id > 6) { SendClientMessage(playerid, COLOR_GREY, "El número del espacio debe estar entre 1 y 6."); return 1; }
	sacar_cinturon(playerid, id - 1);
	return 1;
}
CMD:sct(playerid, params[]) return cmd_sacarct(playerid, params);

sacar_cinturon(playerid, id)
{
	new query[512];
	ActualizarManos(playerid);
	new Bol = InfoPlayer[playerid][pCinturon][id], Cant = InfoPlayer[playerid][pCinturonCant][id], string[128];
	if (Bol == 0) return 1;
	if (InfoPlayer[playerid][pManoDerecha] == 0)
	{
		if (InfoInventario[Bol][IDArma] > 0)
		{
			new arma = InfoInventario[Bol][IDArma], municion = Cant;
			if (municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
		}
		InfoPlayer[playerid][pManoDerecha] = Bol;
		InfoPlayer[playerid][pManoDerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		InfoPlayer[playerid][pCinturon][id] = 0;
		InfoPlayer[playerid][pCinturonCant][id] = 0;
		format(string, sizeof string, "desenfunda su %s reglamentaria", InfoInventario[Bol][NombreObjeto]);
		cmd_me(playerid, string);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Cinturon_%d = '%d', Cantidad_cinturon_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'",
		id+1, InfoPlayer[playerid][pCinturon][id], id+1, InfoPlayer[playerid][pCinturonCant][id], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
		return 1;
	}
	else if (InfoPlayer[playerid][pManoIzquierda] == 0)
	{
		InfoPlayer[playerid][pManoIzquierda] = Bol;
		InfoPlayer[playerid][pManoIzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, Bol);
		InfoPlayer[playerid][pCinturon][id] = 0;
		InfoPlayer[playerid][pCinturonCant][id] = 0;
		format(string, sizeof string, "desenfunda su %s reglamentaria", InfoInventario[Bol][NombreObjeto]);
		cmd_me(playerid, string);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Cinturon_%d = '%d', Cantidad_cinturon_%d = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
		id+1, InfoPlayer[playerid][pCinturon][id], id+1, InfoPlayer[playerid][pCinturonCant][id], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
	} else return SendClientMessage(playerid, COLOR_GREY, "Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}

guardar_cinturon(playerid, mano)
{
	new query[512];
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás herido.");
	ActualizarManos(playerid);
	if(mano == 1)
	{
		if(InfoPlayer[playerid][pManoDerecha] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes un objeto en tu mano derecha.");
		new Mano = InfoPlayer[playerid][pManoDerecha], Cant = InfoPlayer[playerid][pManoDerechaCant], string[128], BolsilloLibre;
		if(InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return SendClientMessage(playerid, COLOR_GREY, "Este objeto es demasiado grande.");
		Loop(x, 6, 0) if(InfoPlayer[playerid][pCinturon][x] == 0)
		{
			InfoPlayer[playerid][pCinturon][x] = Mano;
			InfoPlayer[playerid][pCinturonCant][x] = Cant;
			RemovePlayerAttachedObject(playerid, 7);
			ResetPlayerWeapons(playerid);
			InfoPlayer[playerid][pManoDerecha] = 0;
			InfoPlayer[playerid][pManoDerechaCant] = 0;
			format(string, sizeof string, "enfunda su %s reglamentaria", InfoInventario[Mano][NombreObjeto]);
			cmd_me(playerid, string);
			BolsilloLibre = 1;
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Cinturon_%d = '%d', Cantidad_cinturon_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'",
			x+1, InfoPlayer[playerid][pCinturon][x], x+1, InfoPlayer[playerid][pCinturonCant][x], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
			return 1;
		}
		if (BolsilloLibre == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes más huecos en tu cinturón.");
	}
	else if (mano == 2)
	{
		if (InfoPlayer[playerid][pManoIzquierda] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes un objeto en tu mano izquierda.");
		new Mano = InfoPlayer[playerid][pManoIzquierda], Cant = InfoPlayer[playerid][pManoIzquierdaCant], string[128], BolsilloLibre;
		if (InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return SendClientMessage(playerid, COLOR_GREY, "Este objeto es demasiado grande.");
		Loop(x, 6, 0) if(InfoPlayer[playerid][pCinturon][x] == 0)
		{
			InfoPlayer[playerid][pCinturon][x] = Mano;
			InfoPlayer[playerid][pCinturonCant][x] = Cant;
			RemovePlayerAttachedObject(playerid, 8);
			InfoPlayer[playerid][pManoIzquierda] = 0;
			InfoPlayer[playerid][pManoIzquierdaCant] = 0;
			format(string, sizeof string, "enfunda su %s reglamentaria", InfoInventario[Mano][NombreObjeto]);
			cmd_me(playerid, string);
			BolsilloLibre = 1;
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Cinturon_%d = '%d', Cantidad_cinturon_%d = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
			x+1, InfoPlayer[playerid][pCinturon][x], x+1, InfoPlayer[playerid][pCinturonCant][x], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
			return 1;
		}
		if (BolsilloLibre == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes más huecos en tu cinturón.");
	}
	return 1;
}

CMD:choque(playerid)
{
    cmd_me(playerid, "chocó contra una entidad, su cuerpo se balanceó fuertemente hacia delante");
	return 1;
}

CMD:rolarma(playerid)
{
    cmd_me(playerid, "desenfundó su arma y mientras la sostenía con la derecha, le quitó el seguro con la izquierda");
	return 1;
}

CMD:m4(playerid)
{
    cmd_me(playerid, "descolgó su carabina, la apoyó bajo la clavícula con la derecha, mientras accionó la palanca de preparar");
	return 1;
}

CMD:ak(playerid)
{
	cmd_me(playerid, "descolgó su carabina, la apoyó bajo la clavícula con la derecha, mientras accionó la palanca de preparar");
	return 1;
}

CMD:crearobjeto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new idobj, cantidad, string[180];
	if (sscanf(params, "ii", idobj, cantidad)) { SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /crearobjeto (ObjetoID) (Cantidad)"); return 1; }
	if (idobj <= 0) return SendClientMessage(playerid, COLOR_GREY, "La ID del objeto no puede ser nula o negativa.");
	if (cantidad <= 0) return SendClientMessage(playerid, COLOR_GREY, "La cantidad no puede ser nula o negativa.");
	if (idobj < 0 || idobj >= sizeof(InfoInventario)) return SendClientMessage(playerid, COLOR_GREY, "ID de objeto erroneo.");
	if (InfoPlayer[playerid][pManoDerecha] > 0 && InfoPlayer[playerid][pManoIzquierda] > 0) return SendClientMessage(playerid, COLOR_GREY, "Posees ambas manos ocupadas, guarda o arroja lo que llevas.");

	if (InfoPlayer[playerid][pManoDerecha] != 0)
	{
		InfoPlayer[playerid][pManoIzquierda] = idobj;
		InfoPlayer[playerid][pManoIzquierdaCant] = cantidad;
		PonerObjeto(playerid, 2, idobj);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s ha creado (ID %d | %s | Cantidad %d) en mano izquierda.", NombreOriginal(playerid), idobj, InfoInventario[idobj][NombreObjeto], cantidad);
	}
	else
	{
		InfoPlayer[playerid][pManoDerecha] = idobj;
		InfoPlayer[playerid][pManoDerechaCant] = cantidad;
		PonerObjeto(playerid, 1, idobj);
		if (InfoInventario[idobj][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[idobj][IDArma], cantidad); }
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s ha creado (ID %d | %s | Cantidad %d) en mano derecha.", NombreOriginal(playerid), idobj, InfoInventario[idobj][NombreObjeto], cantidad);
	}
	ActualizarManos(playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "Registros: %s ha creado (ID %d | %s | Cantidad %d)", NombreDeCuenta(playerid), idobj, InfoInventario[idobj][NombreObjeto], cantidad);
	Log("LOGS/CrearObjeto.log", string);
	return 1;
}

CMD:listaobjeto(playerid) return cmd_listaobjetos(playerid);
CMD:listaobjetos(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	new DComandosAdmin[3500], as2[60], i = 0;
	for(new a = 1; a < sizeof(InfoInventario); a++)
	{
		i++;
		format(as2, sizeof(as2), "%d - %s | ", a, InfoInventario[a][NombreObjeto]);
		strcat(DComandosAdmin, as2);
		if(i == 6)
		{
			i = 0;
			strcat(DComandosAdmin, "\n");
		}
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Lista del /crearobjeto", DComandosAdmin, "Continuar", "");
	return 1;
}

CMD:inventario(playerid)
{
	Dialog_Show(playerid, ShowInventario, DIALOG_STYLE_LIST, "¿Qué inventario revisaras?", "Antiguo inventario\nNuevo inventario", "Continuar", "Salir");
	return 1;
}
CMD:inv(playerid) return cmd_inventario(playerid);

Dialog:ShowInventario(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: //inventario viejo del gm
		{
			new dialogInv[1028], gInv[256];
			if (GetPlayerCash(playerid) != 0)
			{
				format(gInv, sizeof gInv, "{00CC00}$%s{CCCCCC} dólares\n", diner_coma(GetPlayerCash(playerid)));
				strcat(dialogInv, gInv);
			}
			if (InfoPlayer[playerid][pMascara] != 0)
			{
				alm(gInv, "{CCCCCC}Mascara\n");
				strcat(dialogInv, gInv);
			}
			if (InfoPlayer[playerid][pPescados] != 0)
			{
				format(gInv, sizeof gInv, "{FFBF00}%d{CCCCCC} peces\n", InfoPlayer[playerid][pPescados]);
				strcat(dialogInv, gInv);
			}
			if (InfoPlayer[playerid][pGanzuas] != 0)
			{
				format(gInv, sizeof gInv, "{FFBF00}%d{CCCCCC} ganzúas\n", InfoPlayer[playerid][pGanzuas]);
				strcat(dialogInv, gInv);
			}
			if (InfoPlayer[playerid][pMateriales] != 0)
			{
				format(gInv, sizeof gInv, "{FF2F2F}%d{CCCCCC} materiales\n", InfoPlayer[playerid][pMateriales]);
				strcat(dialogInv, gInv);
			}
			format(gInv, sizeof gInv, "{CCCCCC}Inventario de {FFBF00}%s", NombreJugador(playerid));
			Dialog_Show(playerid, OldInventario, DIALOG_STYLE_MSGBOX, gInv, dialogInv, "Cerrar", "");
		}
		case 1: //inventario nuevo by edinsonwalker
		{
			cmd_bol(playerid);
		}
	}
	return 1;
}

CMD:bol(playerid)
{
	ActualizarManos(playerid);
	new dialog[1024], dialog2[256], count = 0;
	//indice
	strcat(dialog, "Objeto\tDetalles\n");
	Loop(x, 10, 0)
	{
		if (InfoPlayer[playerid][pBolsillo][x] != 0) format(dialog2, sizeof dialog2, "{FFFFFF}%s\n", slot_inv(InfoPlayer[playerid][pBolsillo][x], InfoPlayer[playerid][pBolsilloCant][x])), count++;
		else alm(dialog2, "{CCCCCC}\n");
		strcat(dialog, dialog2);
	}
	//barra espacio
	strcat(dialog, "{8000FF}--------------------\n");
	//mano derecha
	if (InfoPlayer[playerid][pManoDerecha] != 0) format(dialog2, sizeof dialog2, "{FFFFFF}Mano derecha: %s\n", slot_inv(InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant])), count++;
	else alm(dialog2, "{CCCCCC}Mano derecha vacía\n");
	strcat(dialog, dialog2);
	//mano izquierda
	if (InfoPlayer[playerid][pManoIzquierda] != 0) format(dialog2, sizeof dialog2, "{FFFFFF}Mano izquierda: %s\n", slot_inv(InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant])), count++;
	else alm(dialog2, "{CCCCCC}Mano izquierda vacía\n");
	strcat(dialog, dialog2);
	//espalda
	if (InfoPlayer[playerid][pEspalda] != 0)
	{
		format(dialog2, sizeof dialog2, "{FFBF00}%s:{FFFFFF} %s\n", GetParteToy(playerid, 7), slot_inv(InfoPlayer[playerid][pEspalda], InfoPlayer[playerid][pEspaldaCant])), count++;
		strcat(dialog, dialog2);
	}
	//formato
	format(dialog2, sizeof dialog2, "{CCCCCC}Bolsillos de {FFBF00}%s", NombreJugador(playerid));
	//show_dialog
	if (count == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, dialog2, "{CCCCCC}No tienes nada que sacar o guardar.", "Cerrar", "");
	Dialog_Show(playerid, OpcionInventario, DIALOG_STYLE_TABLIST_HEADERS, dialog2, dialog, "Continuar", "Salir");
	return 1;
}
CMD:bolsillos(playerid) return cmd_bol(playerid);

Dialog:OpcionInventario(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0..9: sacar_inventario(playerid, listitem);
		case 10: return cmd_bol(playerid);
		case 11: guardar_inventario(playerid, 1);
		case 12: guardar_inventario(playerid, 2);
		case 13: cmd_qespalda(playerid);
	}
	return 1;
}

CMD:mano(playerid) return cmd_cmano(playerid);
CMD:cmano(playerid)
{
	ActualizarManos(playerid);
	if (InfoPlayer[playerid][pManoDerecha] == 0 && InfoPlayer[playerid][pManoIzquierda] == 0) { SendClientMessage(playerid, COLOR_GREY, "No tienes nada en ninguna mano."); return 1; }
	new ManoDer = InfoPlayer[playerid][pManoDerecha], ManoDerCant = InfoPlayer[playerid][pManoDerechaCant];
	new ManoIzq = InfoPlayer[playerid][pManoIzquierda], ManoIzqCant = InfoPlayer[playerid][pManoIzquierdaCant];
	if (ManoDer == 0)
	{
		RemovePlayerAttachedObject(playerid, 8);
		PonerObjeto(playerid, 1, ManoIzq);
		SendClientMessage(playerid, 0xF8D48CFF, "Intercambiaste los objetos de tus manos.");
		if(InfoInventario[ManoIzq][IDArma] > 0) {
			GivePlayerWeapon(playerid, InfoInventario[ManoIzq][IDArma], ManoIzqCant);
		}
	}
	else if (ManoIzq == 0)
	{
		PonerObjeto(playerid, 2, ManoDer);
		ResetPlayerWeapons(playerid);
		RemovePlayerAttachedObject(playerid, 7);
		SendClientMessage(playerid, 0xF8D48CFF, "Intercambiaste los objetos de tus manos.");
	}
	else
	{
		ResetPlayerWeapons(playerid);
		PonerObjeto(playerid, 1, ManoIzq);
		PonerObjeto(playerid, 2, ManoDer);
		SendClientMessage(playerid, 0xF8D48CFF, "Intercambiaste los objetos de tus manos.");
		if(InfoInventario[ManoIzq][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[ManoIzq][IDArma], ManoIzqCant); }
	}
	InfoPlayer[playerid][pManoDerechaCant] = ManoIzqCant, InfoPlayer[playerid][pManoDerecha] = ManoIzq;
	InfoPlayer[playerid][pManoIzquierdaCant] = ManoDerCant, InfoPlayer[playerid][pManoIzquierda] = ManoDer;
	new query[500];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = '%d', Cantidad_mano_derecha = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
	InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	return 1;
}

CMD:guardar(playerid)
{
	if (InfoPlayer[playerid][pManoDerecha] == 0) guardar_inventario(playerid, 2);
	else guardar_inventario(playerid, 1);
	return 1;
}

CMD:sacar(playerid, params[])
{
	new id;
	if (sscanf(params, "i", id))
	{
	    new count = 0, dialog[256];
		Loop(x, 10, 0) if (InfoPlayer[playerid][pBolsillo][x] != 0) count++;
		if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en tus bolsillos.");

		Loop(x, 10, 0) if (InfoPlayer[playerid][pBolsillo][x] != 0)
		{
			format(dialog, sizeof(dialog), "Tienes en {FFBF00}slot %d{EBEBEB}: %s", x+1, slot_objeto(InfoPlayer[playerid][pBolsillo][x], InfoPlayer[playerid][pBolsilloCant][x]));
			SendClientMessage(playerid, 0xEBEBEBFF, dialog);
		}
		return 1;
	}
	if (id < 1 || id > 10) { SendClientMessage(playerid, COLOR_GREY, "El número de slot debe estar entre 1 y 10."); return 1; }
	sacar_inventario(playerid, id - 1);
	return 1;
}

sacar_inventario(playerid, id)
{
	new query[1000];
	ActualizarManos(playerid);
	new Bol = InfoPlayer[playerid][pBolsillo][id], Cant = InfoPlayer[playerid][pBolsilloCant][id], string[128];
	if(Bol == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en ese slot.");
	if(InfoPlayer[playerid][pManoIzquierda] == 0)
	{
	    if(InfoPlayer[playerid][pManoDerecha] == 0)
		{
			if(InfoInventario[Bol][IDArma] > 0)
			{
				new arma = InfoInventario[Bol][IDArma], municion = Cant;
				if(municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
			}
			InfoPlayer[playerid][pManoDerecha] = Bol;
			InfoPlayer[playerid][pManoDerechaCant] = Cant;
			PonerObjeto(playerid, 1, Bol);
			InfoPlayer[playerid][pBolsillo][id] = 0;
			InfoPlayer[playerid][pBolsilloCant][id] = 0;
			format(string, sizeof string, "Sacas tu %s en mano derecha.", InfoInventario[Bol][NombreObjeto]);
			SendClientMessage(playerid, 0xA7CE00FF, string);
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", id+1, InfoPlayer[playerid][pBolsillo][id], id+1, InfoPlayer[playerid][pBolsilloCant][id], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
			return 1;
		}
		else
		{
		    new x_bol = InfoPlayer[playerid][pManoDerecha], x_cant = InfoPlayer[playerid][pManoDerechaCant];
		    if(InfoInventario[x_bol][IDArma] > 0) //- Si es arma
			{
				if(IntentoChitearBalas(playerid)) return 1;
				x_cant = InfoPlayer[playerid][pManoDerechaCant];
				RemovePlayerWeapon(playerid, InfoInventario[x_bol][IDArma]);
			}
			InfoPlayer[playerid][pManoIzquierda] = x_bol;
			InfoPlayer[playerid][pManoIzquierdaCant] = x_cant;
			PonerObjeto(playerid, 2, x_bol);
			if(InfoInventario[Bol][IDArma] > 0)
			{
				new arma = InfoInventario[Bol][IDArma], municion = Cant;
				if(municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
			}
			InfoPlayer[playerid][pManoDerecha] = Bol;
			InfoPlayer[playerid][pManoDerechaCant] = Cant;
			PonerObjeto(playerid, 1, Bol);
			InfoPlayer[playerid][pBolsillo][id] = 0;
			InfoPlayer[playerid][pBolsilloCant][id] = 0;
			format(string, sizeof string, "Sacas tu %s en mano derecha, moviste a tu mano izquierda tu %s.", InfoInventario[Bol][NombreObjeto], InfoInventario[x_bol][NombreObjeto]);
			SendClientMessage(playerid, 0xA7CE00FF, string);
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
			id+1, InfoPlayer[playerid][pBolsillo][id], id+1, InfoPlayer[playerid][pBolsilloCant][id], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
			return 1;
		}
	}
	else if(InfoPlayer[playerid][pManoDerecha] == 0)
	{
		if(InfoInventario[Bol][IDArma] > 0)
		{
			new arma = InfoInventario[Bol][IDArma], municion = Cant;
			if(municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
		}
		InfoPlayer[playerid][pManoDerecha] = Bol;
		InfoPlayer[playerid][pManoDerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		InfoPlayer[playerid][pBolsillo][id] = 0;
		InfoPlayer[playerid][pBolsilloCant][id] = 0;
		format(string, sizeof string, "Sacas tu %s en mano derecha.", InfoInventario[Bol][NombreObjeto]);
		SendClientMessage(playerid, 0xA7CE00FF, string);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", id+1, InfoPlayer[playerid][pBolsillo][id], id+1, InfoPlayer[playerid][pBolsilloCant][id], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Posees ambas manos ocupadas, guarda o arroja lo que llevas.");
	return 1;
}

guardar_inventario(playerid, mano)
{
	new query[512];
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás herido.");
	ActualizarManos(playerid);
	if(mano == 1)
	{
		if(InfoPlayer[playerid][pManoDerecha] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes un objeto en tu mano derecha.");
		new Mano = InfoPlayer[playerid][pManoDerecha], Cant = InfoPlayer[playerid][pManoDerechaCant], string[128], BolsilloLibre;
		if(InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return SendClientMessage(playerid, COLOR_GREY, "Este objeto es demasiado grande.");
		for(new x = 0; x < 10; x++)
		{
			if(InfoPlayer[playerid][pBolsillo][x] == 0)
			{
				InfoPlayer[playerid][pBolsillo][x] = Mano;
				InfoPlayer[playerid][pBolsilloCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				ResetPlayerWeapons(playerid);
				InfoPlayer[playerid][pManoDerecha] = 0;
				InfoPlayer[playerid][pManoDerechaCant] = 0;
				format(string, sizeof string, "Guardas tu %s.", InfoInventario[Mano][NombreObjeto]);
				SendClientMessage(playerid, 0xA7CE00FF, string);
				BolsilloLibre = 1;
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", x+1, InfoPlayer[playerid][pBolsillo][x], x+1, InfoPlayer[playerid][pBolsilloCant][x], InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pID]);
				mysql_tquery(DBcreative, query);
				return 1;
			}
		}
		if(BolsilloLibre == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes espacio en tus bolsillos.");
	}
	else if(mano == 2)
	{
		if(InfoPlayer[playerid][pManoIzquierda] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes un objeto en tu mano izquierda.");
		new Mano = InfoPlayer[playerid][pManoIzquierda], Cant = InfoPlayer[playerid][pManoIzquierdaCant], string[128], BolsilloLibre;
		if(InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return SendClientMessage(playerid, COLOR_GREY, "Este objeto es demasiado grande.");
		for(new x = 0; x < 10; x++)
		{
			if(InfoPlayer[playerid][pBolsillo][x] == 0)
			{
				InfoPlayer[playerid][pBolsillo][x] = Mano;
				InfoPlayer[playerid][pBolsilloCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 8);
				InfoPlayer[playerid][pManoIzquierda] = 0;
				InfoPlayer[playerid][pManoIzquierdaCant] = 0;
				format(string, sizeof string, "Guardas tu %s.", InfoInventario[Mano][NombreObjeto]);
				SendClientMessage(playerid, 0xA7CE00FF, string);
				BolsilloLibre = 1;
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'", x+1, InfoPlayer[playerid][pBolsillo][x], x+1, InfoPlayer[playerid][pBolsilloCant][x], InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
				mysql_tquery(DBcreative, query);
				return 1;
			}
		}
		if(BolsilloLibre == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes espacio en tus bolsillos.");
	}
	return 1;
}

CMD:tirar(playerid)
{
	new query[256];
	ActualizarManos(playerid);
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando en esta situación.");
	if (InfoPlayer[playerid][pManoDerecha] != 0)
	{
		new ManoDer = InfoPlayer[playerid][pManoDerecha], ManoDerCant = InfoPlayer[playerid][pManoDerechaCant];
		format(query, sizeof query, "tira su %s", InfoInventario[ManoDer][NombreObjeto]);
		cmd_me(playerid, query);
		ResetPlayerWeapons(playerid);
		InfoPlayer[playerid][pManoDerecha] = 0;
		InfoPlayer[playerid][pManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);
		tirar_objeto(ManoDer, ManoDerCant, X, Y, Z, World, Interior, 0);
		Streamer_Update(playerid);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
		return 1;
	}
	if (InfoPlayer[playerid][pManoIzquierda] != 0)
	{
		new ManoDer = InfoPlayer[playerid][pManoIzquierda], ManoDerCant = InfoPlayer[playerid][pManoIzquierdaCant];
		format(query, sizeof query, "tira su %s", InfoInventario[ManoDer][NombreObjeto]);
		cmd_me(playerid, query);
		ResetPlayerWeapons(playerid);
		InfoPlayer[playerid][pManoIzquierda] = 0;
		InfoPlayer[playerid][pManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid, 8);
		new Float: X, Float: Y, Float: Z;
		GetPlayerPos(playerid, X, Y, Z);
		new World = GetPlayerVirtualWorld(playerid);
		new Interior = GetPlayerInterior(playerid);
		tirar_objeto(ManoDer, ManoDerCant, X, Y, Z, World, Interior, 0);
		Streamer_Update(playerid);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, query);
		return 1;
	}
	SendClientMessage(playerid, 0xccccccff, "No posees ningún objeto en tus manos.");
	return 1;
}

CMD:recogerobjeto(playerid, params[]) return cmd_recoger(playerid, params);
CMD:recoger(playerid, params[])
{
	if (InfoPlayer[playerid][pManoDerecha] > 0 && InfoPlayer[playerid][pManoIzquierda] > 0) { SendClientMessage(playerid, COLOR_GREY, "No puedes recoger nada si tienes ambas manos ocupadas."); return 1; }
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando en esta situación."); return 1; }
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás herido.");
	if (isnull(params)) recoger_objeto(playerid, -1);
	else
	{
		new id;
		if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /recogerobjeto (ObjetoID)");
		if (id < 0 || id >= MAX_OBJETOS_S) return SendClientMessage(playerid, COLOR_GREY, "* Objeto incorrecto, selecciona entre 0-300.");
    	recoger_objeto(playerid, id);
	}
    return 1;
}

recoger_objeto(playerid, id)
{
	new ObjetoExiste = 0;
	if (id == -1)
	{
		Loop(x, sizeof InfoSuelo, 0) if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoSuelo[x][DropPosX], InfoSuelo[x][DropPosY], InfoSuelo[x][DropPosZ]))
		{
			if (GetPlayerVirtualWorld(playerid) == InfoSuelo[x][DropVWorld] && GetPlayerInterior(playerid) == InfoSuelo[x][DropInterior])
			{
				if (InfoSuelo[x][DropID] != 0)
				{
					id = x;
					ObjetoExiste = 1;
				}
				break;
			}
		}
	}
	else
	{
		if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoSuelo[id][DropPosX], InfoSuelo[id][DropPosY], InfoSuelo[id][DropPosZ]))
		{
			if (GetPlayerVirtualWorld(playerid) == InfoSuelo[id][DropVWorld] && GetPlayerInterior(playerid) == InfoSuelo[id][DropInterior])
			{
				if (InfoSuelo[id][DropID] != 0)
				{
					ObjetoExiste = 1;
				}
			}
		}
	}
	if (ObjetoExiste == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás cerca de ningún objeto o del objeto seleccionado.");
	new string[256], objeto = InfoSuelo[id][DropID];
	new weaponid = InfoInventario[objeto][IDArma];
	if (InfoPlayer[playerid][pHorasOn] < 5)
	{
		if (weaponid >= 22 && weaponid <= 34)
		{
			SendClientMessage(playerid, COLOR_GREY, "Necesitas tener mínimo 5 horas de juego para tomar este tipo de arma.");
			return 1;
		}
	}
	DestroyDynamicObject(ObjetoCaido[id]);
	DestroyDynamic3DTextLabel(InfoSuelo[id][DropLabel]);
	InfoSuelo[id][DropLabel] = CreateDynamic3DTextLabel("dropid", -1, -1178.1569, 58.9069, 1.9609, 1.0, .worldid = 1+777, .interiorid = id);
	if (InfoPlayer[playerid][pManoDerecha] == 0)
	{
		InfoPlayer[playerid][pManoDerecha] = objeto, InfoPlayer[playerid][pManoDerechaCant] = InfoSuelo[id][DropCantidad];
		if (InfoInventario[objeto][IDArma] > 0 && InfoSuelo[id][DropCantidad] > 0) { GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], InfoSuelo[id][DropCantidad]); }
		PonerObjeto(playerid, 1, objeto);
		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pManoDerecha], InfoPlayer[playerid][pManoDerechaCant], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, string);
	}
	else if (InfoPlayer[playerid][pManoIzquierda] == 0)
	{
		InfoPlayer[playerid][pManoIzquierda] = objeto, InfoPlayer[playerid][pManoIzquierdaCant] = InfoSuelo[id][DropCantidad];
		PonerObjeto(playerid, 2, objeto);
		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pManoIzquierda], InfoPlayer[playerid][pManoIzquierdaCant], InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, string);
	}
	format(string, sizeof string, "Recogiste del suelo %s{EBEBEB}.", slot_objeto(objeto, InfoSuelo[id][DropCantidad]));
	SendClientMessage(playerid, 0xEBEBEBFF, string);
	InfoSuelo[id][DropPosX] = 0.0;
	InfoSuelo[id][DropPosY] = 0.0;
	InfoSuelo[id][DropPosZ] = 0.0;
	InfoSuelo[id][DropID] = 0;
	InfoSuelo[id][DropCantidad] = 0;
	KillTimer(ObjTimer[id]);
	Streamer_Update(playerid);
	return 1;
}

CMD:dararma(playerid, params[]) return cmd_ceder(playerid, params);
CMD:ceder(playerid, params[])
{
	if (InfoPlayer[playerid][pManoDerecha] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en tu mano derecha.");
	new playerid2, string[256];
	if (!CheckTimer(5, CederTiempo[playerid]))
	{
		if (sscanf(params, "u", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /ceder (PlayerID)");
		if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
		if (!CercaDelWeon(8.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Estás lejos del jugador.");
		new weaponid = InfoInventario[InfoPlayer[playerid][pManoDerecha]][IDArma];
		if (InfoPlayer[playerid2][pHorasOn] < 5)
		{
			if (weaponid >= 22 && weaponid <= 34)
			{
				SendClientMessage(playerid, COLOR_GREY, "Ese jugador necesita tener al menos 5 horas de juego para recibir este tipo de arma.");
				return 1;
			}
		}
		if (InfoPlayer[playerid2][pManoIzquierda] > 0 && InfoPlayer[playerid2][pManoDerecha] > 0) { SendClientMessage(playerid, COLOR_GREY, "Este jugador tiene ambas manos ocupadas."); return 1; }
		new ManoDer = InfoPlayer[playerid][pManoDerecha], ManoDerCant = InfoPlayer[playerid][pManoDerechaCant];
		if (InfoPlayer[playerid2][pManoDerecha] == 0)
		{
			if (InfoInventario[ManoDer][IDArma] > 0) { GivePlayerWeapon(playerid2, InfoInventario[ManoDer][IDArma], ManoDerCant); }
			InfoPlayer[playerid2][pManoDerecha] = ManoDer, InfoPlayer[playerid2][pManoDerechaCant] = ManoDerCant, PonerObjeto(playerid2, 1, ManoDer), ActualizarManos(playerid2);
		}
		else if (InfoPlayer[playerid2][pManoIzquierda] == 0)
		{
			InfoPlayer[playerid2][pManoIzquierda] = ManoDer, InfoPlayer[playerid2][pManoIzquierdaCant] = ManoDerCant, PonerObjeto(playerid2, 2, ManoDer), ActualizarManos(playerid2);
		}
		InfoPlayer[playerid][pManoDerecha] = 0;
		InfoPlayer[playerid][pManoDerechaCant] = 0;
		ResetPlayerWeapons(playerid);
		CederTiempo[playerid] = gettime();
		format(string, sizeof string, "%s te entrega su %s.", NombreJugador(playerid), InfoInventario[ManoDer][NombreObjeto]);
		SendClientMessage(playerid, 0xf0ff00FF, string);
		format(string, sizeof string, "Entregas tu %s a %s.", InfoInventario[ManoDer][NombreObjeto], NombreJugador(playerid2));
		SendClientMessage(playerid, 0xf0ff00FF, string);
		ActualizarManos(playerid);
		ActualizarManos(playerid2);
	}
	else
	{
		format(string, sizeof string, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(5, CederTiempo[playerid]));
		SendClientMessage(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

CMD:payday(playerid)
{
	new string[266];
	if (PaydayOn == 0)
	{
		format(string, sizeof string, "Faltan {FFBF00}%d{FFFFFF} minutos para el próximo {FFBF00}PayDay{FFFFFF}.", PayDayLeft);
		SendClientMessage(playerid, 0xFFFFFFFF, string);
	}
	else
	{
		if (InfoPlayer[playerid][YaCobre] == 0)
		{
			new query[512];
			if (MoneyMessage[playerid] == 1)
			{
				if (InfoPlayer[playerid][pSancionado] < 1 && !member_faccion(playerid, 1, 2, 3, 4))
				{
					format(query, sizeof query, "No pudiste pagar la deuda de {FF0000}$%s{FFFFFF}. Ahora la policía te está buscando.",diner_coma(GetPlayerCash(playerid)));
					SendClientMessage(playerid, COLOR_WHITE, query);
					if (InfoPlayer[playerid][pEstrellas] < 6) InfoPlayer[playerid][pEstrellas] += 1;
					SetPlayerWantedLevel(playerid, InfoPlayer[playerid][pEstrellas]);
					guardar_int_mysql("cuentas", "Estrellas", InfoPlayer[playerid][pID], InfoPlayer[playerid][pEstrellas]);
				}
			}
			if (PaydayOn == 0)
			{
				TogglePlayerControllable(playerid, true);
				SendClientMessage(playerid, COLOR_WHITE, "Pasaron 3 minutos ya se enviaron los cheques a cada ciudadano, espera a otra hora de pago.");
				return 1;
			}
			InfoPlayer[playerid][YaCobre] = 1;
			if (InfoPlayer[playerid][pLimiteRobos] != 0)
			{
				InfoPlayer[playerid][pLimiteRobos] = 0;
				SendClientMessage(playerid, 0x36C548FF, "Ya puedes volver a robar. (/robar247)");
			}
			if (InfoPlayer[playerid][pDobleExp] == 0) InfoPlayer[playerid][pExperiencia] ++, GameTextForPlayer(playerid, "~p~+1 exp", 5000, 1);
			else
			{
				GameTextForPlayer(playerid, "~p~+2 exp", 5000, 1);
				InfoPlayer[playerid][pExperiencia] += 2;
				InfoPlayer[playerid][pDobleExp]--;
				format(query, sizeof query, "Ganaste 2 puntos de respeto por tener horas de doble experiencia, te quedan %d horas más.", InfoPlayer[playerid][pDobleExp]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
			}
			//mensaje
			new saldo_viejo = GetPlayerCash(playerid);
			format(string, sizeof string, "Creative RolePlay, son las %s.", FechaHoy());
			SendClientMessage(playerid, COLOR_GENERAL, string);
			//pago por facción
			new pago2 = 3000*InfoPlayer[playerid][pRango];
			if (InfoPlayer[playerid][pMiembro] != 0)
			{
				format(string, sizeof string, "Pago de facción: {00DC00}$%s", diner_coma(pago2));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
			}
			//pago por nivel
			new pago1 = 1500*InfoPlayer[playerid][pNivel];
			format(string, sizeof string, "Pago de gobierno: {00DC00}$%s", diner_coma(pago1));
			SendClientMessage(playerid, 0xEBEBEBFF, string);
			//givecash
			GivePlayerCash(playerid, pago1+pago2, "payday");
			format(string, sizeof(string), "Dinero anterior: {00DC00}$%s{EBEBEB} | Dinero ahora: {00AC00}$%s", diner_coma(saldo_viejo), diner_coma(GetPlayerCash(playerid)));
			SendClientMessage(playerid, 0xEBEBEBFF, string);
			//save
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET LimiteRobos = 0, YaCobre = 1, Experiencia = '%d', DobleExp = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pExperiencia], InfoPlayer[playerid][pDobleExp], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
		}
		else
		{
			format(string, sizeof string, "Faltan {FFBF00}%d{FFFFFF} minutos para el próximo {FFBF00}PayDay{FFFFFF}.", PayDayLeft);
			SendClientMessage(playerid, 0xFFFFFFFF, string);
		}
	}
	return 1;
}

CMD:setpayday(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	new pd_minutes, string[160];
	if (sscanf(params, "d", pd_minutes)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /setpayday (Minutos)");
	PayDayLeft = pd_minutes;
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) estableció %d minutos el PayDay.", NombreOriginal(playerid), playerid, PayDayLeft);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:dropa(playerid)
{
	if (InfoPlayer[playerid][pJobSkin] == 0) return SendClientMessage(playerid, -1, "No tienes puesto ninguna ropa de trabajo.");
	GivePlayerSkin(playerid, InfoPlayer[playerid][pJobSkin]);
	InfoPlayer[playerid][pJobSkin] = 0;
	guardar_int_mysql("cuentas", "JobSkin", InfoPlayer[playerid][pID], 0);
	return 1;
}

CMD:rellenarauto(playerid)
{
	new idcar = GetPlayerVehicleID(playerid), string[128];
	if (autorepara[playerid] == 1)
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			format(string, sizeof string, "* %s llena el tanque de su vehículo.", NombreJugador(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			veh_gasolina[idcar] = 30;
			autorepara[playerid] = 0;
		}
	}
	return 1;
}

CMD:quitardni(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /quitardni (PlayerID)");
	if (!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Jugador no conectado.");
	if (InfoPlayer[params[0]][pFalsoDocumento] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa persona no tiene un DNI Falso.");
	new query[128];
	InfoPlayer[params[0]][pFalsoDocumento] = 0;
	alm(InfoPlayer[params[0]][pFalsoNombre], "none");
	format(query, sizeof query, "* Le has quitado el DNI Falso a {5ABAFF}%s{FFFFFF}.", NombreJugador(params[0]));
	SendClientMessage(playerid, COLOR_WHITE, query);
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET FalsoDocumento = 0, FalsoNombre = '%e' WHERE ID = '%d'", InfoPlayer[params[0]][pFalsoNombre], InfoPlayer[params[0]][pID]);
	mysql_tquery(DBcreative, query);
	return 1;
}
//comandos de negocios:
CMD:irnegocio(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id, gformat[170];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /irnegocio (NegocioID)");
	if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
	if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
	SetPosEx(playerid, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ], InfoNegocio[id][nExteriorR], InfoNegocio[id][nExteriorInt], InfoNegocio[id][nExteriorVW], 1);
	format(gformat, sizeof gformat, "Te has movido al negocio {FFBF00}%s{FFFFFF} ID %d.", InfoNegocio[id][nNombre], id);
	SendClientMessage(playerid, COLOR_WHITE, gformat);
	return 1;
}

CMD:avenegocio(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new id, gformat[240];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /avenegocio (NegocioID)");
	if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
	if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
	if (InfoNegocio[id][nVenta] == 0) return SendClientMessage(playerid, -1, "Ese negocio ya está en venta.");

	foreach(Player, p)
	{
		if (InfoPlayer[p][pNegocio1] == id)
		{
			format(gformat, sizeof gformat, "Admin %s vendió tu negocio (1) id: %d", NombreOriginal(playerid), id);
			SendClientMessage(playerid, COLOR_ORANGE, gformat);
			InfoPlayer[p][pNegocio1] = -1;
		}
		if (InfoPlayer[p][pNegocio2] == id)
		{
			format(gformat, sizeof gformat, "Admin %s vendió tu negocio (2) id: %d", NombreOriginal(playerid), id);
			SendClientMessage(playerid, COLOR_ORANGE, gformat);
			InfoPlayer[p][pNegocio2] = -1;
		}
	}
	LimpiarEmpleados(id);
	//limpiar negocio
	if (verificar_cuenta(InfoNegocio[id][nPropietario]))
	{
		new neg1, neg2;
		reg_int(0, "Negocio", neg1);
		reg_int(0, "Negocio2", neg2);
		if (neg1 == id)
		{
			mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Negocio = -1 WHERE Nombre_Apellido = '%e'", InfoNegocio[id][nPropietario]);
			mysql_tquery(DBcreative, gformat);
		}
		if (neg2 == id)
		{
			mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Negocio2 = -1 WHERE Nombre_Apellido = '%e'", InfoNegocio[id][nPropietario]);
			mysql_tquery(DBcreative, gformat);
		}
	}

	format(gformat, sizeof gformat, "Admin %s (IP: %s) vendió el negocio %d (propietario %s).", NombreDeCuenta(playerid), InfoPlayer[playerid][pIP], id, InfoNegocio[id][nPropietario]);
	Log("LOGS/negocios.log", gformat);

	alm(InfoNegocio[id][nPropietario], "gobielno");
	InfoNegocio[id][nSeguro] = 0;
	InfoNegocio[id][nVenta] = 0;
	InfoNegocio[id][nEmpleo] = 0;
	LabelPickup_negocio(id, 1, 0, 0, 0);

	format(gformat, sizeof gformat, "Vendiste el negocio %d (%s), las ganancias se conservan.", id, InfoNegocio[id][nNombre]);
	SendClientMessage(playerid, COLOR_GREY, gformat);

	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE negocios SET Propietario = '%e', Empleo = 0, Seguro = 0, Venta = 0 WHERE ID = '%d'", InfoNegocio[id][nPropietario], InfoNegocio[id][nID_sql]);
	mysql_tquery(DBcreative, gformat);
	return 1;
}

CMD:editarnegocio(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new string[860], id, valor;
	if (sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio (Opción) (NegocioID) (Monto)");
		SendClientMessage(playerid, COLOR_GREY, "Opciones: exterior, interior, nivel, ganancias, precio, productos");
		SendClientMessage(playerid, COLOR_GREY, "Opciones: comprar, mapicon, skinactor, posactor, posvehiculo, vehfabrica");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio exterior (NegocioID)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		GetPlayerPos(playerid, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nExteriorR]);
		InfoNegocio[id][nExteriorInt] = GetPlayerInterior(playerid);
		InfoNegocio[id][nExteriorVW] = GetPlayerVirtualWorld(playerid);
		mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET ExteriorX = '%f', ExteriorY = '%f', ExteriorZ = '%f', ExteriorR = '%f', ExteriorInt = '%d', ExteriorVW = '%d' WHERE ID = '%d'", InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ], InfoNegocio[id][nExteriorR], InfoNegocio[id][nExteriorInt], InfoNegocio[id][nExteriorVW], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, string);
		LabelPickup_negocio(id, 1, 1, 0, 0);
		format(string, sizeof string, "Cambiaste el exterior del negocio %d.", id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if (InfoNegocio[id][nTipo] == 9)
		{
			GetPlayerPos(playerid, InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ]);
			GetPlayerFacingAngle(playerid, InfoNegocio[id][nExteriorVehR]);
			GetPosInFrontOfPlayer(playerid, InfoNegocio[id][nExteriorVehX_V], InfoNegocio[id][nExteriorVehY_V], 2.5);
			mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET ExteriorVehX = '%f', ExteriorVehY = '%f', ExteriorVehZ = '%f', ExteriorVehR = '%f', ExteriorVehX_V = '%f', ExteriorVehY_V = '%f' WHERE ID = '%d'", InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ], InfoNegocio[id][nExteriorVehR], InfoNegocio[id][nExteriorVehX_V], InfoNegocio[id][nExteriorVehY_V], InfoNegocio[id][nID_sql]);
			mysql_tquery(DBcreative, string);
		}
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio interior (NegocioID)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		GetPlayerPos(playerid, InfoNegocio[id][nInteriorX], InfoNegocio[id][nInteriorY], InfoNegocio[id][nInteriorZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nInteriorR]);
		InfoNegocio[id][nInteriorInt] = GetPlayerInterior(playerid);
		InfoNegocio[id][nInteriorVW] = 100+id;
		mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET InteriorX = '%f', InteriorY = '%f', InteriorZ = '%f', InteriorR = '%f', InteriorInt = '%d', InteriorVW = '%d' WHERE ID = '%d'", InfoNegocio[id][nInteriorX], InfoNegocio[id][nInteriorY], InfoNegocio[id][nInteriorZ], InfoNegocio[id][nInteriorR], InfoNegocio[id][nInteriorInt], InfoNegocio[id][nInteriorVW], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, string);
		LabelPickup_negocio(id, 1, 0, 0, 0);
		format(string, sizeof string, "Cambiaste el interior del negocio %d.", id);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if (!strcmp(params, "skinactor", true, 9))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio skinactor (NegocioID)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		actore_skin[playerid] = id;
		new SkinMuestra[200], count = 0;
		Loop(x, sizeof InfoSkin, 0) if (InfoSkin[x][sTipo] == 1)
		{
			SkinMuestra[count] = x;
			count++;
		}
		ShowModelSelectionMenuEx(playerid, SkinMuestra, count, "Skin para el actor", Actor_Skin, -11.0, 0.0, -55.0, 1.0);
	}
	else if (!strcmp(params, "posactor", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio posactor (NegocioID)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		if (InfoNegocio[id][nActorSkin] == 0) return SendClientMessage(playerid, -1, "Aún no colocas un skin al actor.");
		GetPlayerPos(playerid, InfoNegocio[id][nActorX], InfoNegocio[id][nActorY], InfoNegocio[id][nActorZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nActorR]);
		mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET ActorX = '%f', ActorY = '%f', ActorZ = '%f', ActorR = '%f' WHERE ID = '%d'", InfoNegocio[id][nActorX], InfoNegocio[id][nActorY], InfoNegocio[id][nActorZ], InfoNegocio[id][nActorR], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, string);
		LabelPickup_negocio(id, 0, 0, 1, 0);
		format(string, sizeof string, "Cambiaste el lugar del actor del negocio %d.", id);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if (!strcmp(params, "comprar", true, 7))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio comprar (NegocioID)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		GetPlayerPos(playerid, InfoNegocio[id][nLugarCompraX], InfoNegocio[id][nLugarCompraY], InfoNegocio[id][nLugarCompraZ]);
		mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET LugarCompraX = '%f', LugarCompraY = '%f', LugarCompraZ = '%f' WHERE ID = '%d'", InfoNegocio[id][nLugarCompraX], InfoNegocio[id][nLugarCompraY], InfoNegocio[id][nLugarCompraZ], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, string);
		LabelPickup_negocio(id, 0, 0, 0, 1);
		format(string, sizeof string, "Cambiaste el lugar de /comprar del negocio %d.", id);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if (!strcmp(params, "precio", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, id, valor)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio precio (NegocioID) ($)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoNegocio[id][nPrecio] = valor;
		format(string, sizeof string, "Cambiaste el precio ($%s) del negocio %d.", diner_coma(valor), id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_int_mysql("negocios", "Precio", InfoNegocio[id][nID_sql], InfoNegocio[id][nPrecio]);
		Labelupdate_negocio(id);
	}
	else if (!strcmp(params, "nivel", true, 5))
	{
		if (sscanf(params, "s[32]ii", params, id, valor)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio nivel (NegocioID) (Nivel)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		if (valor < 1 || valor > 99) return SendClientMessage(playerid, COLOR_WHITE, "Sólo hasta el nivel 99.");
		InfoNegocio[id][nNivel] = valor;
		format(string, sizeof string, "Cambiaste el nivel (%d) del negocio %d.", valor, id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_int_mysql("negocios", "Nivel", InfoNegocio[id][nID_sql], InfoNegocio[id][nNivel]);
		Labelupdate_negocio(id);
	}
	else if (!strcmp(params, "ganancias", true, 9))
	{
		if (sscanf(params, "s[32]ii", params, id, valor)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio ganancias (NegocioID) ($)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoNegocio[id][nDinero] = valor;
		format(string, sizeof string, "Cambiaste las ganacias ($%s) del negocio %d.", diner_coma(valor), id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[id][nID_sql], InfoNegocio[id][nDinero]);
		if (InfoNegocio[id][nTipo] == 12) UpdateDineroGuardado(id);
	}
	else if (!strcmp(params, "productos", true, 9))
	{
		if (sscanf(params, "s[32]ii", params, id, valor)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio productos (NegocioID) (Cantidad)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoNegocio[id][nProductos] = valor;
		format(string, sizeof string, "Cambiaste los productos (%d) del negocio %d.", valor, id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_int_mysql("negocios", "Productos", InfoNegocio[id][nID_sql], InfoNegocio[id][nProductos]);
	}
	else if (!strcmp(params, "mapicon", true, 7))
	{
		if (sscanf(params, "s[32]ii", params, id, valor)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio mapicon (NegocioID) (ModelID)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoNegocio[id][nMapIcon] = valor;
		format(string, sizeof string, "Cambiaste el mapicon (%d) del negocio %d.", valor, id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_int_mysql("negocios", "MapIcon", InfoNegocio[id][nID_sql], InfoNegocio[id][nMapIcon]);
		LabelPickup_negocio(id, 0, 1, 0, 0);
	}
	else if (!strcmp(params, "posvehiculo", true, 11))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio posvehiculo (NegocioID)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		if (InfoNegocio[id][nTipo] != 10) return SendClientMessage(playerid, -1, "Ese negocio no es tipo concesionario.");
		if (InfoPlayer[playerid][pInterior] != 0 && InfoPlayer[playerid][pVirtualWorld] != 0) return SendClientMessage(playerid, -1, "No puedes editar el spawn del vehiculo comprado en interiores.");
		GetPlayerPos(playerid, InfoNegocio[id][nVehicleX], InfoNegocio[id][nVehicleY], InfoNegocio[id][nVehicleZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nVehicleR]);
		mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET VehicleX = '%f', VehicleY = '%f', VehicleZ = '%f', VehicleR = '%f' WHERE ID = '%d'", InfoNegocio[id][nVehicleX], InfoNegocio[id][nVehicleY], InfoNegocio[id][nVehicleZ], InfoNegocio[id][nVehicleR], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, string);
		format(string, sizeof string, "Cambiaste el spawn de compra de vehiculo del negocio %d.", id);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if (!strcmp(params, "vehfabrica", true, 10))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnegocio vehfabrica (NegocioID)");
		if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		if (InfoNegocio[id][nTipo] != 12) return SendClientMessage(playerid, -1, "Ese negocio no es tipo fábrica.");
		GetPlayerPos(playerid, InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nExteriorVehR]);
		GetPosInFrontOfPlayer(playerid, InfoNegocio[id][nExteriorVehX_V], InfoNegocio[id][nExteriorVehY_V], 2.5);
		mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET ExteriorVehX = '%f', ExteriorVehY = '%f', ExteriorVehZ = '%f', ExteriorVehR = '%f', ExteriorVehX_V = '%f', ExteriorVehY_V = '%f' WHERE ID = '%d'", InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ], InfoNegocio[id][nExteriorVehR], InfoNegocio[id][nExteriorVehX_V], InfoNegocio[id][nExteriorVehY_V], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, string);
		LabelPickup_negocio(id, 1, 0, 0, 0);
		format(string, sizeof string, "Cambiaste el exterior vehículo de fabrica del negocio %d.", id);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}
CMD:editarn(playerid, params[]) return cmd_editarnegocio(playerid, params);

RandomSkinCivil()
{
	new skindefault = -1;
	new jandom = Random(1, 300);
	Loop(x, sizeof InfoSkin, 0) if (InfoSkin[x][sTipo] == 1 && InfoSkin[x][sModelo] == jandom)
	{
		skindefault = x;
	}
	if (skindefault == -1) return RandomSkinCivil();
	return skindefault;
}

Positions_Negocio(id, tipo)
{
	new myint, myskin, mytipo;
	new Float: myposX, Float: myposY, Float: myposZ, Float: myposR;
	new Float: compraX, Float: compraY, Float: compraZ;
	new Float: jactorX, Float: jactorY, Float: jactorZ, Float: jactorR;
	myskin = RandomSkinCivil();
	switch (tipo)
	{
		case 1: //24-7 pequeño
		{
            mytipo = 1;
			myposX = -27.3552, myposY = -58.2659, myposZ = 1003.5469, myposR = 2.3829, myint = 6;
			compraX = -23.3468, compraY = -55.4924, compraZ = 1003.5469;
			jactorX = -22.8758, jactorY = -57.5155, jactorZ = 1003.5469, jactorR = 9.1313;
		}
		case 2: //24-7 grande
		{
            mytipo = 1;
			myposX = -30.9624, myposY = -92.0089, myposZ = 1003.5469, myposR = 4.8661, myint = 18;
			compraX = -28.0597, compraY = -89.8704, compraZ = 1003.5469;
			jactorX = -27.7799, jactorY = -91.6342, jactorZ = 1003.5469, jactorR = 6.6012;
		}
		case 3: //binco
		{
            mytipo = 2;
			myposX = 207.6547, myposY = -111.2579, myposZ = 1005.1328, myposR = 356.0927, myint = 15;
			compraX = 207.5624, compraY = -100.7229, compraZ = 1005.2578;
			jactorX = 207.5043, jactorY = -98.7054, jactorZ = 1005.2578, jactorR = 182.9861;
		}
		case 4: //sub urban
		{
            mytipo = 2;
			myposX = 203.8141, myposY = -50.6344, myposZ = 1001.8047, myposR = 1.7561, myint = 1;
			compraX = 203.8293, compraY = -43.3790, compraZ = 1001.8047;
			jactorX = 203.8100, jactorY = -41.6695, jactorZ = 1001.8047, jactorR = 182.0694;
		}
		case 5: //ZIP
		{
            mytipo = 2;
			myposX = 161.3801, myposY = -97.1028, myposZ = 1001.8047, myposR = 2.9859, myint = 18;
			compraX = 161.3631, compraY = -83.5608, compraZ = 1001.8047;
			jactorX = 161.3364, jactorY = -81.0248, jactorZ = 1001.8047, jactorR = 182.9859;
		}
		case 6: //victim
		{
            mytipo = 2;
			myposX = 227.5202, myposY = -8.1432, myposZ = 1002.2109, myposR = 93.2500, myint = 5;
			compraX = 206.3774, compraY = -7.9412, compraZ = 1001.2109;
			jactorX = 204.8456, jactorY = -8.7871, jactorZ = 1001.2109, jactorR = 277.9267;
		}
		case 7: //pro laps
		{
            mytipo = 2;
			myposX = 207.0223, myposY = -140.3593, myposZ = 1003.5078, myposR = 4.5758, myint = 3;
			compraX = 207.1047, compraY = -129.2098, compraZ = 1003.5078;
			jactorX = 207.0363, jactorY = -127.7927, jactorZ = 1003.5078, jactorR = 180.8391;
		}
		case 8: //ds
		{
            mytipo = 2;
			myposX = 204.3592, myposY = -168.8523, myposZ = 1000.5234, myposR = 0.2125, myint = 14;
			compraX = 204.2387, compraY = -159.3654, compraZ = 1000.5234;
			jactorX = 204.2719, jactorY = -157.7728, jactorZ = 1000.5234, jactorR = 180.5491;
		}
		case 9: //cluckin bell
		{
            mytipo = 3;
			myskin = 167;
			myposX = 364.9182, myposY = -11.7833, myposZ = 1001.8516, myposR = 3.0558, myint = 9;
			compraX = 370.9220, compraY = -6.0173, compraZ = 1001.8589;
			jactorX = 370.8978, jactorY = -4.4378, jactorZ = 1001.8589, jactorR = 178.9823;
		}
		case 10: //pizzeria
		{
            mytipo = 3;
			myskin = 155;
			myposX = 372.4181, myposY = -133.5219, myposZ = 1001.4922, myposR = 358.9738, myint = 5;
			compraX = 376.6881, compraY = -118.8069, compraZ = 1001.4995;
			jactorX = 376.6858, jactorY = -117.2020, jactorZ = 1001.4922, jactorR = 182.3972;
		}
		case 11: //burger shot
		{
            mytipo = 3;
			myskin = 205;
			myposX = 362.9157, myposY = -75.2065, myposZ = 1001.5078, myposR = 317.3002, myint = 10;
			compraX = 376.5519, compraY = -67.4450, compraZ = 1001.5078;
			jactorX = 376.4981, jactorY = -65.8334, jactorZ = 1001.5078, jactorR = 182.7574;
		}
		case 12: //gasolinera
		{
            mytipo = 4;
			myposX = -27.3804, myposY = -31.7613, myposZ = 1003.5573, myposR = 3.0473, myint = 4;
			compraX = -30.6065, compraY = -28.9321, compraZ = 1003.5573;
			jactorX = -30.3688, jactorY = -30.8017, jactorZ = 1003.5573, jactorR = 354.1288;
		}
		case 13: //ammunation pequeño
		{
            mytipo = 5;
			myposX = 296.8890, myposY = -112.0669, myposZ = 1001.5156, myposR = 4.0106, myint = 6;
			compraX = 290.2662, compraY = -106.2288, compraZ = 1001.5156;
			jactorX = 290.2452, jactorY = -104.4911, jactorZ = 1001.5156, jactorR = 183.9872;
		}
		case 14: //ammunation mediano
		{
            mytipo = 5;
			myposX = 285.3417, myposY = -41.6345, myposZ = 1001.5156, myposR = 357.3369, myint = 1;
			compraX = 295.3187, compraY = -38.4259, compraZ = 1001.5156;
			jactorX = 295.4275, jactorY = -40.3169, jactorZ = 1001.5156, jactorR = 4.3987;
		}
		case 15: //ammunation grande
		{
            mytipo = 5;
			myposX = 315.8150, myposY = -143.6635, myposZ = 999.6016, myposR = 6.1806, myint = 7;
			compraX = 314.0374, compraY = -133.6105, compraZ = 999.6016;
			jactorX = 316.1269, jactorY = -133.4615, jactorZ = 999.6016, jactorR = 87.1663;
		}
		case 16: //mecánico
		{
            mytipo = 9;
			myposX = 1506.8711, myposY = -1635.7693, myposZ = 1374.5045, myposR = 188.2864, myint = 34;
			compraX = 0.0, compraY = 0.0, compraZ = 0.0;
			jactorX = 1504.0543, jactorY = -1636.4006, jactorZ = 1374.5045, jactorR = 278.9244;
		}
		case 17: //sex shop
		{
            mytipo = 7;
			myskin = 178;
			myposX = -100.3137, myposY = -25.0355, myposZ = 1000.7188, myposR = 2.6871, myint = 3;
			compraX = -104.7556, compraY = -10.7418, compraZ = 1000.7188;
			jactorX = -104.7971, jactorY = -8.9126, jactorZ = 1000.7188, jactorR = 183.0237;
		}
		case 18: //bar
		{
            mytipo = 8;
			myposX = 501.8990, myposY = -67.5652, myposZ = 998.7578, myposR = 182.8555, myint = 11;
			compraX = 496.9826, compraY = -76.0265, compraZ = 998.7578;
			jactorX = 497.1426, jactorY = -77.5720, jactorZ = 998.7651, jactorR = 3.8187;
		}
		case 19: //alhambra
		{
            mytipo = 8;
			myposX = 493.4397, myposY = -24.9173, myposZ = 1000.6719, myposR = 359.2636, myint = 17;
			compraX = 499.9566, compraY = -18.8178, compraZ = 1000.6719;
			jactorX = 501.8318, jactorY = -18.7009, jactorZ = 1000.6719, jactorR = 90.5894;
		}
		case 20: //strip club
		{
            mytipo = 8;
			myposX = 1204.8147, myposY = -13.8345, myposZ = 1000.9219, myposR = 7.3870, myint = 2;
			compraX = 1215.7231, compraY = -13.3252, compraZ = 1000.9219;
			jactorX = 1215.9199, jactorY = -15.2619, jactorZ = 1000.9219, jactorR = 2.8553;
		}
		case 21: //pescadería
		{
            mytipo = 11;
			myposX = 981.2192, myposY = -1946.9337, myposZ = 2835.0000, myposR = 268.4117, myint = 4;
			compraX = 990.6504, compraY = -1943.0256, compraZ = 2835.0078;
			jactorX = 991.4003, jactorY = -1941.1827, jactorZ = 2835.0078, jactorR = 178.9425;
		}
		case 22: //concesionaria
		{
            mytipo = 10;
			myposX = 1494.4860, myposY = 1303.5802, myposZ = 1093.2891, myposR = 359.0949, myint = 3;
			compraX = 1490.7678, compraY = 1306.2170, compraZ = 1093.2964;
			jactorX = 1488.8588, jactorY = 1305.5000, jactorZ = 1093.2964, jactorR = 282.8092;
		}
		case 23: //fábrica de drogas
		{
            mytipo = 12;
			myposX = -2139.3433, myposY = -253.7772, myposZ = 544.7299, myposR = 90.0000, myint = 9;
			compraX = 0.0, compraY = 0.0, compraZ = 0.0;
			jactorX = 0.0, jactorY = 0.0, jactorZ = 0.0, jactorR = 0.0;
			myskin = 0;
		}
		case 24: //repartidor
		{
			mytipo = 6;
			myposX = 1033.3253, myposY = -310.3433, myposZ = 2076.6460, myposR = 0.0000, myint = 51;
			compraX = 0.0, compraY = 0.0, compraZ = 0.0;
			jactorX = 0.0, jactorY = 0.0, jactorZ = 0.0, jactorR = 0.0;
			myskin = 0;
		}
		case 25: //clínica
		{
			mytipo = 13;
			myposX = -2330.1577, myposY = 111.4511, myposZ = -5.3942, myposR = 272.5179, myint = 61;
			compraX = -2323.3774, compraY = 111.2473, compraZ = -5.3942;
			jactorX = -2321.3040, jactorY = 111.2264, jactorZ = -5.3336, jactorR = 92.8078;
			myskin = 308;
		}
	}
	InfoNegocio[id][nTipo] = mytipo;
	InfoNegocio[id][nActorSkin] = myskin;
	InfoNegocio[id][nInteriorInt] = myint;
	InfoNegocio[id][nInteriorVW] = 100+id;
	InfoNegocio[id][nInteriorX] = myposX; InfoNegocio[id][nInteriorY] = myposY; InfoNegocio[id][nInteriorZ] = myposZ; InfoNegocio[id][nInteriorR] = myposR;
	InfoNegocio[id][nLugarCompraX] = compraX; InfoNegocio[id][nLugarCompraY] = compraY; InfoNegocio[id][nLugarCompraZ] = compraZ;
	InfoNegocio[id][nActorX] = jactorX; InfoNegocio[id][nActorY] = jactorY; InfoNegocio[id][nActorZ] = jactorZ; InfoNegocio[id][nActorR] = jactorR;
}

CMD:crearnegocio(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new precio, nivel, tipo, gformat[260];
	if (sscanf(params, "ddd", tipo, precio, nivel))
	{
		SendClientMessage(playerid, COLOR_GREY, "Utiliza: /crearnegocio (Tipo) (Precio) (Nivel)");
		SendClientMessage(playerid, COLOR_WHITE, "Tipos: 1 (24-7 pequeño) 2 (24-7 grande) 3 (binco) 4 (Sub urban) 5 (ZIP) 6 (Victim) 7 (Pro Laps) 8 (Ds) 9 (Cluckin bell)");
		SendClientMessage(playerid, COLOR_WHITE, "Tipos: 10 (Pizzería) 11 (Burger shot) 12 (Gasolinera) 13 (Ammunation pequeño) 14 (Ammunation mediano) 15 (Ammunation grande)");
		SendClientMessage(playerid, COLOR_WHITE, "Tipos: 16 (Mecánico) 17 (Sex shop) 18 (Bar) 19 (Alhambra) 20 (Strip club) 21 (Puerto de pescadería) 22 (Concesionaria)");
		SendClientMessage(playerid, COLOR_WHITE, "Tipos: 23 (Fábrica de drogas) 24 (Repartidor) 25 (Clínica)");
		return 1;
	}
	if (tipo < 1 || tipo > 25) return SendClientMessage(playerid, COLOR_WHITE, "Los tipos están entre 1 - 25.");
	Loop(id, MAX_NEGOCIOS, 1) if (InfoNegocio[id][nTipo] == 0)
	{
		GetPlayerPos(playerid, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nExteriorR]);
		InfoNegocio[id][nVenta] = 0;
		InfoNegocio[id][nPrecio] = precio;
		InfoNegocio[id][nNivel] = nivel;
		InfoNegocio[id][nExteriorVW] = GetPlayerVirtualWorld(playerid);
		InfoNegocio[id][nExteriorInt] = GetPlayerInterior(playerid);
		Positions_Negocio(id, tipo);
		alm(InfoNegocio[id][nNombre], GetTipoNegocio(InfoNegocio[id][nTipo]));
		LabelPickup_negocio(id, 1, 0, 1, 1);
		InfoNegocio[id][nProductos] = 800;
		format(gformat, sizeof gformat, "Negocio nuevo ID: %d - Precio: $%s - Tipo: %s.", id, diner_coma(precio), GetTipoNegocio(InfoNegocio[id][nTipo]));
		SendClientMessage(playerid, 0x90C3D4FF, gformat);
		switch (InfoNegocio[id][nTipo])
		{
			case 6:
			{
				InfoNegocio[id][nEmpleo] = 1;
			}
			case 9:
			{
				GetPlayerPos(playerid, InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ]);
				GetPlayerFacingAngle(playerid, InfoNegocio[id][nExteriorVehR]);
				GetPosInFrontOfPlayer(playerid, InfoNegocio[id][nExteriorVehX_V], InfoNegocio[id][nExteriorVehY_V], 2.5);InfoNegocio[id][nPrecioPintura] = 500;
				InfoNegocio[id][nPrecioPaintJob] = 700;
				InfoNegocio[id][nPrecioReparacion] = 1000;
				InfoNegocio[id][nPrecioGasolina] = 200;
				InfoNegocio[id][nPrecioLlantas] = 4000;
				InfoNegocio[id][nPrecioNitro] = 8000;
				InfoNegocio[id][nPrecioHyd] = 5000;
				InfoNegocio[id][nPrecioTuneo] = 15000;
				InfoNegocio[id][nEmpleo] = 1;
			}
			case 10: SendClientMessage(playerid, 0xFFFF00FF, "Recuerda usar /editarn posvehiculo (NegocioID), para editar el lugar de entrega de compra.");
			case 12:
			{
				InfoNegocio[id][nEmpleo] = 0;
				SendClientMessage(playerid, 0xFFFF00FF, "Recuerda usar /editarn vehfabrica (NegocioID), para editar el lugar de entrada de vehículos.");
				//cartel de dinero
				InfoNegocio[id][nObjMoney] = CreateDynamicObject(19353, -2190.02563, -206.69887, 545.51245, 0.00000, 0.00000, 0.00000, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt], -1);
				UpdateDineroGuardado(id);
				//vehículos
				InfoNegocio[id][nVehiculo][0] = CreateVehicle(554, -2168.7524, -246.0328, 544.7685, -91.0200, 1, 53, -1);
				LinkVehicleToInterior(InfoNegocio[id][nVehiculo][0], InfoNegocio[id][nInteriorInt]);
				SetVehicleVirtualWorld(InfoNegocio[id][nVehiculo][0], InfoNegocio[id][nInteriorVW]);
				SetVehicleHealth(InfoNegocio[id][nVehiculo][0], 5000.0);
				InfoNegocio[id][nVehiculo][1] = CreateVehicle(554, -2162.6091, -251.6801, 544.7685, -72.0600, 1, 53, -1);
				LinkVehicleToInterior(InfoNegocio[id][nVehiculo][1], InfoNegocio[id][nInteriorInt]);
				SetVehicleVirtualWorld(InfoNegocio[id][nVehiculo][1], InfoNegocio[id][nInteriorVW]);
				SetVehicleHealth(InfoNegocio[id][nVehiculo][1], 5000.0);
				//quimicos
				new QuimiEx[240];
				format(QuimiEx, sizeof QuimiEx, "{FFBF00}Tanque de almacenaje{FFFFFF}\nQuímicos acumulados: {3399FF}%d{FFFFFF}\nPresiona {FFBF00}'H'{FFFFFF} para preparar el cristal", InfoNegocio[id][nQuimicos]);
				InfoNegocio[id][nLabelQuimicos][0] = CreateDynamic3DTextLabel(QuimiEx, -1, -2155.43799, -264.92325, 544.66193, 8.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
				InfoNegocio[id][nLabelQuimicos][1] = CreateDynamic3DTextLabel(QuimiEx, -1, -2158.95898, -265.10498, 544.66193, 8.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
				InfoNegocio[id][nLabelQuimicos][2] = CreateDynamic3DTextLabel(QuimiEx, -1, -2162.32373, -265.29837, 544.66193, 8.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
				//cocinando metanfetamina
				new MetanEx[340];
				format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #1{FFFFFF}\n%s", EstadoMesaProduccion(id, 0));
				InfoNegocio[id][nLabelCocina][0] = CreateDynamic3DTextLabel(MetanEx, -1, -2161.47070, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
				format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #2{FFFFFF}\n%s", EstadoMesaProduccion(id, 1));
				InfoNegocio[id][nLabelCocina][1] = CreateDynamic3DTextLabel(MetanEx, -1, -2166.25708, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
				format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #3{FFFFFF}\n%s", EstadoMesaProduccion(id, 2));
				InfoNegocio[id][nLabelCocina][2] = CreateDynamic3DTextLabel(MetanEx, -1, -2170.97900, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
				format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #4{FFFFFF}\n%s", EstadoMesaProduccion(id, 3));
				InfoNegocio[id][nLabelCocina][3] = CreateDynamic3DTextLabel(MetanEx, -1, -2175.96655, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
				format(MetanEx, sizeof MetanEx, "{FFBF00}Mesa de producción #5{FFFFFF}\n%s", EstadoMesaProduccion(id, 4));
				InfoNegocio[id][nLabelCocina][4] = CreateDynamic3DTextLabel(MetanEx, -1, -2181.32300, -233.69153, 544.87073, 6.0, .worldid = InfoNegocio[id][nInteriorVW], .interiorid = InfoNegocio[id][nInteriorInt]);
			}
		}
		new que2ry[2000], query[3500];
		//opción idsql ya creada.
		if (InfoNegocio[id][nID_sql] != 0)
		{
			format(que2ry, sizeof que2ry, "UPDATE negocios SET Nombre = '%s', Tipo = '%d', Empleo = '%d', Venta = '%d', Precio = '%d', Nivel = '%d', ExteriorX = '%f', ExteriorY = '%f', ExteriorZ = '%f', ExteriorR = '%f', ExteriorInt = '%d', ExteriorVW = '%d', InteriorX = '%f', InteriorY = '%f', InteriorZ = '%f', InteriorR = '%f', InteriorInt = '%d', InteriorVW = '%d',",
			InfoNegocio[id][nNombre],
			InfoNegocio[id][nTipo],
			InfoNegocio[id][nEmpleo],
			InfoNegocio[id][nVenta],
			InfoNegocio[id][nPrecio],
			InfoNegocio[id][nNivel],
			InfoNegocio[id][nExteriorX],
			InfoNegocio[id][nExteriorY],
			InfoNegocio[id][nExteriorZ],
			InfoNegocio[id][nExteriorR],
			InfoNegocio[id][nExteriorInt],
			InfoNegocio[id][nExteriorVW],
			InfoNegocio[id][nInteriorX],
			InfoNegocio[id][nInteriorY],
			InfoNegocio[id][nInteriorZ],
			InfoNegocio[id][nInteriorR],
			InfoNegocio[id][nInteriorInt],
			InfoNegocio[id][nInteriorVW]);
			mysql_format(DBcreative, query, sizeof query, "%s LugarCompraX = '%f', LugarCompraY = '%f', LugarCompraZ = '%f', Productos = '%d', ActorX = '%f', ActorY = '%f', ActorZ = '%f', ActorR = '%f', ActorSkin = '%d' WHERE ID = '%d'",
			que2ry,
			InfoNegocio[id][nLugarCompraX],
			InfoNegocio[id][nLugarCompraY],
			InfoNegocio[id][nLugarCompraZ],
			InfoNegocio[id][nProductos],
			InfoNegocio[id][nActorX],
			InfoNegocio[id][nActorY],
			InfoNegocio[id][nActorZ],
			InfoNegocio[id][nActorR],
			InfoNegocio[id][nActorSkin],
			InfoNegocio[id][nID_sql]);
			mysql_tquery(DBcreative, query);
			if (InfoNegocio[id][nTipo] == 9)
			{
				new string[512];
				mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET ExteriorVehX = '%f', ExteriorVehY = '%f', ExteriorVehZ = '%f', ExteriorVehR = '%f', ExteriorVehX_V = '%f', ExteriorVehY_V = '%f' WHERE ID = '%d'", InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ], InfoNegocio[id][nExteriorVehR], InfoNegocio[id][nExteriorVehX_V], InfoNegocio[id][nExteriorVehY_V], InfoNegocio[id][nID_sql]);
				mysql_tquery(DBcreative, string);
				ActualizarPrecioNegocio(id);
			}
			id = MAX_NEGOCIOS;
			return 1;
		}
		format(que2ry, sizeof que2ry, "INSERT INTO negocios (Nombre, Tipo, Empleo, Venta, Precio, Nivel, ExteriorX, ExteriorY, ExteriorZ, ExteriorR, ExteriorInt, ExteriorVW, InteriorX, InteriorY, InteriorZ, InteriorR, InteriorInt, InteriorVW, LugarCompraX, LugarCompraY, LugarCompraZ,");
		mysql_format(DBcreative, query, sizeof query, "%s Productos, ActorX, ActorY, ActorZ, ActorR, ActorSkin) VALUES ('%e', '%d', '%d', '%d', '%d',  '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%d', '%f', '%f', '%f', '%f', '%d')",
		que2ry,
		InfoNegocio[id][nNombre],
		InfoNegocio[id][nTipo],
		InfoNegocio[id][nEmpleo],
		InfoNegocio[id][nVenta],
		InfoNegocio[id][nPrecio],
		InfoNegocio[id][nNivel],
		InfoNegocio[id][nExteriorX],
		InfoNegocio[id][nExteriorY],
		InfoNegocio[id][nExteriorZ],
		InfoNegocio[id][nExteriorR],
		InfoNegocio[id][nExteriorInt],
		InfoNegocio[id][nExteriorVW],
		InfoNegocio[id][nInteriorX],
		InfoNegocio[id][nInteriorY],
		InfoNegocio[id][nInteriorZ],
		InfoNegocio[id][nInteriorR],
		InfoNegocio[id][nInteriorInt],
		InfoNegocio[id][nInteriorVW],
		InfoNegocio[id][nLugarCompraX],
		InfoNegocio[id][nLugarCompraY],
		InfoNegocio[id][nLugarCompraZ],
		InfoNegocio[id][nProductos],
		InfoNegocio[id][nActorX],
		InfoNegocio[id][nActorY],
		InfoNegocio[id][nActorZ],
		InfoNegocio[id][nActorR],
		InfoNegocio[id][nActorSkin]);
		mysql_tquery(DBcreative, query, "OnNegocioCreate", "i", id);
		id = MAX_NEGOCIOS;
		return 1;
	}
	SendClientMessage(playerid, COLOR_RED, "Se alcanzó el máximo de negocios (100)");
	return 1;
}

forward OnNegocioCreate(id);
public OnNegocioCreate(id)
{
	InfoNegocio[id][nID_sql] = cache_insert_id();
	cache_unset_active();
	totalnegocios++;
	if (InfoNegocio[id][nTipo] == 9)
	{
		new string[512];
		mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET ExteriorVehX = '%f', ExteriorVehY = '%f', ExteriorVehZ = '%f', ExteriorVehR = '%f', ExteriorVehX_V = '%f', ExteriorVehY_V = '%f' WHERE ID = '%d'", InfoNegocio[id][nExteriorVehX], InfoNegocio[id][nExteriorVehY], InfoNegocio[id][nExteriorVehZ], InfoNegocio[id][nExteriorVehR], InfoNegocio[id][nExteriorVehX_V], InfoNegocio[id][nExteriorVehY_V], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, string);
		ActualizarPrecioNegocio(id);
	}
    return 1;
}

CMD:borrarnegocio(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new id, gformat[235], query[1408];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREY, "Utiliza: /borrarnegocio (NegocioID)");
	if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
	if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
	//si tenía dueño
	if (InfoNegocio[id][nVenta] != 0)
	{
		foreach(Player, p)
		{
			if (InfoPlayer[p][pNegocio1] == id)
			{
				format(gformat, sizeof gformat, "Admin %s vendió tu negocio (1) %d.", NombreOriginal(playerid), id);
				SendClientMessage(playerid, COLOR_ORANGE, gformat);
				InfoPlayer[p][pNegocio1] = -1;
			}
			if (InfoPlayer[p][pNegocio2] == id)
			{
				format(gformat, sizeof gformat, "Admin %s vendió tu negocio (2) %d.", NombreOriginal(playerid), id);
				SendClientMessage(playerid, COLOR_ORANGE, gformat);
				InfoPlayer[p][pNegocio2] = -1;
			}
		}
		LimpiarEmpleados(id);
		//limpiar negocio
		if (verificar_cuenta(InfoNegocio[id][nPropietario]))
		{
			new neg1, neg2;
			reg_int(0, "Negocio", neg1);
			reg_int(0, "Negocio2", neg2);
			if (neg1 == id)
			{
				mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Negocio = -1 WHERE Nombre_Apellido = '%e'", InfoNegocio[id][nPropietario]);
				mysql_tquery(DBcreative, gformat);
			}
			if (neg2 == id)
			{
				mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Negocio2 = -1 WHERE Nombre_Apellido = '%e'", InfoNegocio[id][nPropietario]);
				mysql_tquery(DBcreative, gformat);
			}
		}
	}
	//destroy pickup+label
	noexitnegocio(id);
	//reset variables
	alm(InfoNegocio[id][nNombre], "none");
	alm(InfoNegocio[id][nPropietario], "gobielno");
	InfoNegocio[id][nVenta] = 0;
	if (InfoNegocio[id][nTipo] == 12)
	{
		DestroyDynamicObject(InfoNegocio[id][nObjMoney]);
		DestroyVehicle(InfoNegocio[id][nVehiculo][0]);
		DestroyVehicle(InfoNegocio[id][nVehiculo][1]);
	}
	InfoNegocio[id][nTipo] = 0;
	InfoNegocio[id][nPrecio] = 0;
	InfoNegocio[id][nNivel] = 0;
	InfoNegocio[id][nExteriorX] = 0.0;
	InfoNegocio[id][nExteriorY] = 0.0;
	InfoNegocio[id][nExteriorZ] = 0.0;
	InfoNegocio[id][nExteriorR] = 0.0;
	InfoNegocio[id][nExteriorInt] = 0;
	InfoNegocio[id][nExteriorVW] = 0;
	InfoNegocio[id][nInteriorX] = 0.0;
	InfoNegocio[id][nInteriorY] = 0.0;
	InfoNegocio[id][nInteriorZ] = 0.0;
	InfoNegocio[id][nInteriorR] = 0.0;
	InfoNegocio[id][nInteriorInt] = 0;
	InfoNegocio[id][nInteriorVW] = 0;
	InfoNegocio[id][nLugarCompraX] = 0.0;
	InfoNegocio[id][nLugarCompraY] = 0.0;
	InfoNegocio[id][nLugarCompraZ] = 0.0;
	InfoNegocio[id][nSeguro] = 0;
	InfoNegocio[id][nDinero] = 0;
	InfoNegocio[id][nProductos] = 0;
	InfoNegocio[id][nMapIcon] = 0;
	InfoNegocio[id][nActorX] = 0.0;
	InfoNegocio[id][nActorY] = 0.0;
	InfoNegocio[id][nActorZ] = 0.0;
	InfoNegocio[id][nActorR] = 0.0;
	InfoNegocio[id][nActorSkin] = 0;
	InfoNegocio[id][nVehicleX] = 0.0;
	InfoNegocio[id][nVehicleY] = 0.0;
	InfoNegocio[id][nVehicleZ] = 0.0;
	InfoNegocio[id][nVehicleR] = 0.0;
	InfoNegocio[id][nExteriorVehX] = 0.0;
	InfoNegocio[id][nExteriorVehY] = 0.0;
	InfoNegocio[id][nExteriorVehZ] = 0.0;
	InfoNegocio[id][nExteriorVehR] = 0.0;
	InfoNegocio[id][nExteriorVehX_V] = 0.0;
	InfoNegocio[id][nExteriorVehY_V] = 0.0;
	InfoNegocio[id][nEmpleado][0] = 0;
	InfoNegocio[id][nEmpleado][1] = 0;
	InfoNegocio[id][nEmpleado][2] = 0;
	InfoNegocio[id][nEmpleado][3] = 0;
	InfoNegocio[id][nEmpleado][4] = 0;
	InfoNegocio[id][nQuimicos] = 0;
	InfoNegocio[id][nTimeNecesitaQuimicos] = 0;
	InfoNegocio[id][nCocinando][0] = 0;
	InfoNegocio[id][nCocinando][1] = 0;
	InfoNegocio[id][nCocinando][2] = 0;
	InfoNegocio[id][nCocinando][3] = 0;
	InfoNegocio[id][nCocinando][4] = 0;
	InfoNegocio[id][nTimeCocinando][0] = 0;
	InfoNegocio[id][nTimeCocinando][1] = 0;
	InfoNegocio[id][nTimeCocinando][2] = 0;
	InfoNegocio[id][nTimeCocinando][3] = 0;
	InfoNegocio[id][nTimeCocinando][4] = 0;
	InfoNegocio[id][nEntregasListas] = 0;

	InfoNegocio[id][nPrecioPintura] = 0;
	InfoNegocio[id][nPrecioPaintJob] = 0;
	InfoNegocio[id][nPrecioReparacion] = 0;
	InfoNegocio[id][nPrecioGasolina] = 0;
	InfoNegocio[id][nPrecioLlantas] = 0;
	InfoNegocio[id][nPrecioNitro] = 0;
	InfoNegocio[id][nPrecioHyd] = 0;
	InfoNegocio[id][nPrecioTuneo] = 0;
	ActualizarPrecioNegocio(id);
	
	//query
	mysql_format(DBcreative, query, sizeof query, "UPDATE negocios SET Nombre = '%e', Propietario = '%e', Venta = 0, Tipo = 0, Precio = 0, Nivel = 0, ExteriorX = 0.0, ExteriorY = 0.0, ExteriorZ = 0.0,  ExteriorR = 0.0, \
	ExteriorInt = 0.0, ExteriorVW = 0.0, ExteriorVehX = 0.0, ExteriorVehY = 0.0, ExteriorVehZ = 0.0, ExteriorVehR = 0.0, ExteriorVehX_V = 0.0, ExteriorVehY_V = 0.0 WHERE ID = '%d'", InfoNegocio[id][nNombre], InfoNegocio[id][nPropietario], InfoNegocio[id][nID_sql]);
	mysql_tquery(DBcreative, query);
	mysql_format(DBcreative, query, sizeof query, "UPDATE negocios SET InteriorX = 0.0, InteriorY = 0.0, InteriorZ = 0.0, InteriorR = 0.0, InteriorInt = 0, InteriorVW = 0, LugarCompraX = 0.0, \
	LugarCompraY = 0.0, LugarCompraZ = 0.0, Seguro = 0, BolosUwU = 0, Productos = 0, MapIcon = 0, ActorX = 0.0, ActorY = 0.0, ActorZ = 0.0, ActorR = 0.0, ActorSkin = 0 WHERE ID = '%d'", InfoNegocio[id][nID_sql]);
	mysql_tquery(DBcreative, query);
	mysql_format(DBcreative, query, sizeof query, "UPDATE negocios SET Empleado1 = 0, Empleado2 = 0, Empleado3 = 0, Empleado4 = 0, Empleado5 = 0, Quimicos = 0, TimeNecesitaQuimicos = 0, Cocinando1 = 0, Cocinando2 = 0, Cocinando3 = 0, \
	Cocinando4 = 0, Cocinando5 = 0, TimeCocinando1 = 0, TimeCocinando2 = 0, TimeCocinando3 = 0, TimeCocinando4 = 0, TimeCocinando5 = 0, EntregasListas = 0 WHERE ID = '%d'", InfoNegocio[id][nID_sql]);
	mysql_tquery(DBcreative, query);
	//mensaje
	format(gformat, sizeof gformat, "Borraste el negocio ID %d, SQL vacía: %d", id, InfoNegocio[id][nID_sql]);
	SendClientMessage(playerid, -1, gformat);
	return 1;
}

CMD:negocioname(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new query[256], id, doorname[32];
	if (sscanf(params, "ds[32]", id, doorname)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarnombrenegocio (NegocioID) (Nombre)");
	if (id < 1 || id >= totalnegocios) return SendClientMessage(playerid, -1, "ID de negocio inválida.");
	if (InfoNegocio[id][nTipo] == 0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
	if (strlen(doorname) > 31 || strlen(doorname) < 0) { SendClientMessage(playerid, -1, "Sólo puedes escribir menos de 30 carácteres."); return 1; }
	alm(InfoNegocio[id][nNombre], doorname);
	format(query, sizeof query, "Cambiaste el nombre (%s) del negocio %d.", doorname, id);
	SendClientMessage(playerid, 0xFFFFFFFF, query);
	Labelupdate_negocio(id);
	guardar_string_mysql("negocios", "Nombre", InfoNegocio[id][nID_sql], InfoNegocio[id][nNombre]);
	return 1;
}
CMD:editarnnombre(playerid, params[]) return cmd_negocioname(playerid, params);
CMD:editarnegocionombre(playerid, params[]) return cmd_negocioname(playerid, params);
CMD:editarnombrenegocio(playerid, params[]) return cmd_negocioname(playerid, params);

GetExtNegocio(playerid)
{
	new id = -1;
	Loop(x, totalnegocios, 1)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.5, InfoNegocio[x][nExteriorX], InfoNegocio[x][nExteriorY], InfoNegocio[x][nExteriorZ]) && InfoPlayer[playerid][pInterior] == InfoNegocio[x][nExteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoNegocio[x][nExteriorVW])
		{
			id = x;
		}
		if (InfoNegocio[x][nExteriorVehX] != 0.0)
		{
			if (IsPlayerInRangeOfPoint(playerid, 10.0, InfoNegocio[x][nExteriorVehX], InfoNegocio[x][nExteriorVehY], InfoNegocio[x][nExteriorVehZ]) && InfoPlayer[playerid][pInterior] == InfoNegocio[x][nExteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoNegocio[x][nExteriorVW])
			{
				id = x;
			}
		}
	}
	return id;
}

GetIntNegocio(playerid)
{
	new id = -1;
	Loop(x, totalnegocios, 1)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.5, InfoNegocio[x][nInteriorX], InfoNegocio[x][nInteriorY], InfoNegocio[x][nInteriorZ]) && InfoPlayer[playerid][pInterior] == InfoNegocio[x][nInteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoNegocio[x][nInteriorVW])
		{
			id = x;
		}
		if (IsPlayerInRangeOfPoint(playerid, 10.0, -2144.1904, -247.4404, 544.8129) && InfoPlayer[playerid][pInterior] == InfoNegocio[x][nInteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoNegocio[x][nInteriorVW])
		{
			id = x;
		}
		if (IsPlayerInRangeOfPoint(playerid, 10.0, 1512.2188,-1638.6256,1374.6003) && InfoPlayer[playerid][pInterior] == InfoNegocio[x][nInteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoNegocio[x][nInteriorVW])
		{
			id = x;
		}
	}
	return id;
}

CMD:comprarnegocio(playerid)
{
	new id = GetExtNegocio(playerid), string[245];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en el exterior de ningún negocio.");
	if (InfoNegocio[id][nVenta] != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes comprar un negocio con dueño.");
	if (GetPlayerCash(playerid) < InfoNegocio[id][nPrecio])
	{
		format(string, sizeof string, "No tienes dinero suficiente! Te faltan {00cc00}$%s", diner_coma(InfoNegocio[id][nPrecio]-GetPlayerCash(playerid)));
		SendClientMessage(playerid, COLOR_GRAD2, string);
		return 1;
	}
	if (InfoPlayer[playerid][pNivel] < InfoNegocio[id][nNivel])
	{
		format(string, sizeof string, "Este negocio requiere que seas nivel {FF0000}%d", InfoNegocio[id][nNivel]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if (InfoPlayer[playerid][pVIP] == 0 || InfoPlayer[playerid][pVIP] == 1)
	{
		if (InfoPlayer[playerid][pNegocio1] != -1) return SendClientMessage(playerid, COLOR_GREY, "Las cuentas comunes o VIP bronce, sólo pueden comprar un negocio.");
		InfoPlayer[playerid][pNegocio1] = id;
		guardar_int_mysql("cuentas", "Negocio", InfoPlayer[playerid][pID], id);
	}
	else
	{
		if (InfoPlayer[playerid][pNegocio1] == -1)
		{
			InfoPlayer[playerid][pNegocio1] = id;
			guardar_int_mysql("cuentas", "Negocio", InfoPlayer[playerid][pID], id);
		}
		else if (InfoPlayer[playerid][pNegocio2] == -1)
		{
			InfoPlayer[playerid][pNegocio2] = id;
			guardar_int_mysql("cuentas", "Negocio2", InfoPlayer[playerid][pID], id);
		}
		else { SendClientMessage(playerid, COLOR_GREY, "Ya tienes el máximo de negocios."); return 1; }
	}
	GivePlayerCash(playerid, -InfoNegocio[id][nPrecio], "compra de negocio");
	Tax += InfoNegocio[id][nPrecio];
	alm(InfoNegocio[id][nPropietario], NombreDeCuenta(playerid));
	InfoNegocio[id][nVenta] = 1;
	SendClientMessage(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra!");
	SendClientMessage(playerid, COLOR_WHITE, "Escribe {FFBF00}/ayuda negocio{FFFFFF} para ver los comandos disponibles!");
	mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET Propietario = '%e', Venta = 1 WHERE ID = '%d'", InfoNegocio[id][nPropietario], InfoNegocio[id][nID_sql]);
	mysql_tquery(DBcreative, string);
	if (InfoNegocio[id][nTipo] == 9) SendClientMessage(playerid, 0x5EAEFFFF, "Puedes cambiar el precio de los servicios desde /cambiarprecios.");
	LabelPickup_negocio(id, 1, 0, 0, 0);
	return 1;
}

CMD:vendernegocio(playerid)
{
	new id = GetExtNegocio(playerid), string[250];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en el exterior de ningún negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio no te pertenece.");
	new money = InfoNegocio[id][nPrecio]+InfoNegocio[id][nDinero];
	format(string, sizeof string, "Vendiste tu negocio. Recuperaste {00CC00}$%s{FFFFFF} del negocio más {00CC00}$%s{FFFFFF} de ganancias.", diner_coma(InfoNegocio[id][nPrecio]), diner_coma(InfoNegocio[id][nDinero]));
	SendClientMessage(playerid, -1, string);
 	GivePlayerCash(playerid, money, "venta de negocio");
	if (LlavesNegocio(playerid, id) == 1)
	{
		InfoPlayer[playerid][pNegocio1] = -1;
		guardar_int_mysql("cuentas", "Negocio", InfoPlayer[playerid][pID], InfoPlayer[playerid][pNegocio1]);
	}
	else if (LlavesNegocio(playerid, id) == 2)
	{
		InfoPlayer[playerid][pNegocio2] = -1;
		guardar_int_mysql("cuentas", "Negocio2", InfoPlayer[playerid][pID], InfoPlayer[playerid][pNegocio2]);
	}
	LimpiarEmpleados(id);
	InfoNegocio[id][nEmpleo] = 0;
	InfoNegocio[id][nDinero] = 0;
	InfoNegocio[id][nVenta] = 0;
	if (InfoNegocio[id][nTipo] == 12) UpdateDineroGuardado(id);
	alm(InfoNegocio[id][nPropietario], "gobielno");
	mysql_format(DBcreative, string, sizeof string, "UPDATE negocios SET Propietario = '%e', Venta = 0, BolosUwU = 0, Empleo = 0 WHERE ID = '%d'", InfoNegocio[id][nPropietario], InfoNegocio[id][nID_sql]);
	mysql_tquery(DBcreative, string);
	LabelPickup_negocio(id, 1, 0, 0, 0);
	return 1;
}

CMD:nseguro(playerid)
{
	new id = 0;
	if (GetExtNegocio(playerid) != -1) id = GetExtNegocio(playerid);
	if (GetIntNegocio(playerid) != -1) id = GetIntNegocio(playerid);
	if (id == 0) return SendClientMessage(playerid, COLOR_GREY, "* No estás en la entrada/salida de ningún negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este negocio.");
	if (InfoNegocio[id][nTipo] == 12) return SendClientMessage(playerid, COLOR_GREY, "Las fábricas no necesitan cerrarse o abrirse.");
	if (InfoNegocio[id][nSeguro] != 0)
	{
		cmd_me(playerid, "saca su llave de negocio y lo abre");
		InfoNegocio[id][nSeguro] = 0;
	}
	else
	{
		cmd_me(playerid, "saca su llave de negocio y lo cierra");
		InfoNegocio[id][nSeguro] = 1;
	}
	Labelupdate_negocio(id);
	guardar_int_mysql("negocios", "Seguro", InfoNegocio[id][nID_sql], InfoNegocio[id][nSeguro]);
	return 1;
}
CMD:negocioseguro(playerid) return cmd_nseguro(playerid);

CMD:negociomenu(playerid)
{
	new id = EnNegocio(playerid), gformat[520];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este negocio.");
	switch (InfoNegocio[id][nTipo])
	{
		case 9: format(gformat, sizeof gformat, "{0080C0}%s\n{EBEBEB}Dinero en caja: {00CC00}$%s\nContrato público: %s\n{EBEBEB}Puerta: %s", InfoNegocio[id][nNombre], diner_coma(InfoNegocio[id][nDinero]), (InfoNegocio[id][nEmpleo]) ? ("{55AD30}On") : ("{F92B2B}Off"), (InfoNegocio[id][nSeguro]) ? ("{F92B2B}Cerrada") : ("{55AD30}Abierta"));
		case 6,12,13: format(gformat, sizeof gformat, "{0080C0}%s\n{EBEBEB}Dinero guardado: {00CC00}$%s\nContrato público: %s", InfoNegocio[id][nNombre], diner_coma(InfoNegocio[id][nDinero]), (InfoNegocio[id][nEmpleo]) ? ("{55AD30}On") : ("{F92B2B}Off"));
		default: format(gformat, sizeof gformat, "{0080C0}%s\n{EBEBEB}Dinero en caja: {00CC00}$%s\n{EBEBEB}Puerta: %s\n{EBEBEB}Productos: {8E4BE9}%d", InfoNegocio[id][nNombre], diner_coma(InfoNegocio[id][nDinero]), (InfoNegocio[id][nSeguro]) ? ("{F92B2B}Cerrada") : ("{55AD30}Abierta"), InfoNegocio[id][nProductos]);
	}
	Dialog_Show(playerid, NegocioOpciones, DIALOG_STYLE_LIST, "Menú de negocio", gformat, "Continuar", "Salir");
	return 1;
}
CMD:negocio(playerid) return cmd_negociomenu(playerid);
CMD:menunegocio(playerid) return cmd_negociomenu(playerid);
CMD:fabrica(playerid) return cmd_negociomenu(playerid);

new CobroActual[MAX_PLAYERS];

Dialog:NegocioOpciones(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = EnNegocio(playerid), gformat[360];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	switch (InfoNegocio[id][nTipo])
	{
		case 6, 9, 12, 13:
		{
		  	switch (listitem)
			{
				case 0:
				{
					format(gformat, sizeof gformat, "{EBEBEB}Nombre actual: {0080C0}%s", InfoNegocio[id][nNombre]);
					Dialog_Show(playerid, NegocioNombre, DIALOG_STYLE_INPUT, gformat, "{EBEBEB}Escribe el nuevo nombre de tu negocio:", "Continuar", "Volver");
				}
				case 1:
				{
				    format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoNegocio[id][nDinero]));
					Dialog_Show(playerid, DineroNegocio, DIALOG_STYLE_LIST, gformat, "- Retirar dinero\n- Depositar dinero", "Continuar", "Volver");
				}
				case 2:
				{
				    if (InfoNegocio[id][nTipo] == 12) return SendClientMessage(playerid, COLOR_GREY, "* Tu negocio/empresa es ilegal, sólo tu puedes contratar.");
					if (InfoNegocio[id][nEmpleo] != 0)
					{
						SendClientMessage(playerid, 0xF92B2BFF, "Ahora el único ingreso de nuevos empleados, es que tu los contrates.");
						InfoNegocio[id][nEmpleo] = 0;
					}
					else
					{
						SendClientMessage(playerid, 0x55AD30FF, "Ahora cualquiera puede unirse a tu negocio-empresa desde /empleos.");
						InfoNegocio[id][nEmpleo] = 1;
					}
					guardar_int_mysql("negocios", "Empleo", InfoNegocio[id][nID_sql], InfoNegocio[id][nEmpleo]);
				}
				case 3:
				{
					if (InfoNegocio[id][nSeguro] != 0)
					{
						cmd_me(playerid, "saca su llave de negocio y lo abre");
						InfoNegocio[id][nSeguro] = 0;
					}
					else
					{
						cmd_me(playerid, "saca su llave de negocio y lo cierra");
						InfoNegocio[id][nSeguro] = 1;
					}
					Labelupdate_negocio(id);
					guardar_int_mysql("negocios", "Seguro", InfoNegocio[id][nID_sql], InfoNegocio[id][nSeguro]);
				}
			}
		}
		default:
		{
		  	switch (listitem)
			{
				case 0:
				{
					format(gformat, sizeof gformat, "{EBEBEB}Nombre actual: {0080C0}%s", InfoNegocio[id][nNombre]);
					Dialog_Show(playerid, NegocioNombre, DIALOG_STYLE_INPUT, gformat, "{EBEBEB}Escribe el nuevo nombre de tu negocio:", "Continuar", "Volver");
				}
				case 1:
				{
				    format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoNegocio[id][nDinero]));
					Dialog_Show(playerid, DineroNegocio, DIALOG_STYLE_LIST, gformat, "- Retirar dinero\n- Depositar dinero", "Continuar", "Volver");
				}
				case 2:
				{
					if (InfoNegocio[id][nSeguro] != 0)
					{
						cmd_me(playerid, "saca su llave de negocio y lo abre");
						InfoNegocio[id][nSeguro] = 0;
					}
					else
					{
						cmd_me(playerid, "saca su llave de negocio y lo cierra");
						InfoNegocio[id][nSeguro] = 1;
					}
					Labelupdate_negocio(id);
					guardar_int_mysql("negocios", "Seguro", InfoNegocio[id][nID_sql], InfoNegocio[id][nSeguro]);
				}
				case 3:
				{
					new pagoG = neg_automatico[InfoNegocio[id][nTipo]];
					if (pagoG == 0) return SendClientMessage(playerid, COLOR_GREY, "* Tu negocio/empresa no necesita productos.");
					CobroActual[playerid] = (pagoG/2)*10;
					format(gformat, sizeof gformat, "{EBEBEB}¿Deseas pagar {F72222}$%s{EBEBEB} por 200 productos?\nPodrías generar {00CC00}$%s{EBEBEB} cada dos horas por 20 productos.", diner_coma(CobroActual[playerid]), diner_coma(pagoG));
					Dialog_Show(playerid, NegocioProductos, DIALOG_STYLE_MSGBOX, "Productos", gformat, "Ordenar", "Volver");
				}
			}
		}
	}
	return 1;
}

Dialog:NegocioProductos(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_negociomenu(playerid);
	new id = EnNegocio(playerid), query[260];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	new costo = CobroActual[playerid];
	if (GetPlayerCash(playerid) >= costo)
	{
		if (InfoNegocio[id][nProductos] >= 4000) return SendClientMessage(playerid, 0xEFEFEFFF, "No puedes tener más de 4,000 productos.");
		InfoNegocio[id][nProductos] += 200;
		GivePlayerCash(playerid, -costo, "compra de productos");
		guardar_int_mysql("negocios", "Productos", InfoNegocio[id][nID_sql], InfoNegocio[id][nProductos]);
		format(query, sizeof query, "Pagaste 200 productos por $%s. Ahora tienes %d productos.", diner_coma(costo), InfoNegocio[id][nProductos]);
		SendClientMessage(playerid, 0xFFEA5FFF, query);
	}
	else
	{
		format(query, sizeof query, "No tienes $%s para pagar los productos.", diner_coma(costo));
		SendClientMessage(playerid, 0xEFEFEFFF, query);
	}
	return 1;
}

Dialog:NegocioNombre(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_negociomenu(playerid);
	new id = EnNegocio(playerid), gformat[260];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (!strlen(inputtext))
	{
		SendClientMessage(playerid, COLOR_GREY, "Escribe algo.");
		format(gformat, sizeof gformat, "{EBEBEB}Nombre actual: {0080C0}%s", InfoNegocio[id][nNombre]);
		Dialog_Show(playerid, NegocioNombre, DIALOG_STYLE_INPUT, gformat, "{EBEBEB}Escribe el nuevo nombre de tu negocio:", "Continuar", "Volver");
		return 1;
	}
	if (strlen(inputtext) > 30 || strlen(inputtext) < 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "No puedes poner el nombre con más de 30 carácteres.");
		format(gformat, sizeof gformat, "{EBEBEB}Nombre actual: {0080C0}%s", InfoNegocio[id][nNombre]);
		Dialog_Show(playerid, NegocioNombre, DIALOG_STYLE_INPUT, gformat, "{EBEBEB}Escribe el nuevo nombre de tu negocio:", "Continuar", "Volver");
		return 1;
	}
	alm(InfoNegocio[id][nNombre], inputtext);
	Labelupdate_negocio(id);
	guardar_string_mysql("negocios", "Nombre", InfoNegocio[id][nID_sql], InfoNegocio[id][nNombre]);
	format(gformat, sizeof gformat, "Nombre de negocio cambiado a {0080C0}%s", InfoNegocio[id][nNombre]);
	SendClientMessage(playerid, -1, gformat);
	return 1;
}

Dialog:DineroNegocio(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_negociomenu(playerid);
	new id = EnNegocio(playerid), gformat[260];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	switch (listitem)
	{
		case 0:
		{
			format(gformat, sizeof gformat, "{EBEBEB}Ingresa el monto que quieres retirar de la caja.\n\nTienes {00CC00}$%s{EBEBEB} dólares.\n", diner_coma(InfoNegocio[id][nDinero]));
			Dialog_Show(playerid, DineroRNegocio, DIALOG_STYLE_INPUT, "Sacar dinero", gformat, "Continuar", "Volver");
		}
		case 1:
		{
			format(gformat, sizeof gformat, "{EBEBEB}Ingresa el monto que quieres depositar en la caja.\n\nTienes {00CC00}$%s{EBEBEB} dólares.\n", diner_coma(InfoNegocio[id][nDinero]));
			Dialog_Show(playerid, DineroDNegocio, DIALOG_STYLE_INPUT, "Guardar dinero", gformat, "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:DineroRNegocio(playerid, response, listitem, inputtext[])
{
	new id = EnNegocio(playerid), gformat[260];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoNegocio[id][nDinero]));
		Dialog_Show(playerid, DineroNegocio, DIALOG_STYLE_LIST, gformat, "- Retirar dinero\n- Depositar dinero", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	if (amount < 1) return SendClientMessage(playerid, COLOR_GREY, "* No puedes retirar menos de un dolar.");
	if (InfoNegocio[id][nDinero] >= amount)
	{
		InfoNegocio[id][nDinero] -= amount;
		GivePlayerCash(playerid, amount, "retiro de caja negocio");
		format(gformat, sizeof gformat, "Retiraste $%s dejaste en la caja $%s, ahora tienes en bolsillos $%s.", diner_coma(amount), diner_coma(InfoNegocio[id][nDinero]), diner_coma(GetPlayerCash(playerid)));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[id][nID_sql], InfoNegocio[id][nDinero]);
		if (InfoNegocio[id][nTipo] == 12) UpdateDineroGuardado(id);
		return 1;
	}
	format(gformat, sizeof gformat, "* No puedes retirar $%s, si sólo tienes en el bául $%s.", diner_coma(amount), diner_coma(InfoNegocio[id][nDinero]));
	SendClientMessage(playerid, COLOR_GREY, gformat);
	return 1;
}

Dialog:DineroDNegocio(playerid, response, listitem, inputtext[])
{
	new id = EnNegocio(playerid), gformat[260];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ningún negocio.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoNegocio[id][nDinero]));
		Dialog_Show(playerid, DineroNegocio, DIALOG_STYLE_LIST, gformat, "- Retirar dinero\n- Depositar dinero", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	if (amount < 1) return SendClientMessage(playerid, COLOR_GREY, "* No puedes depositar menos de un dolar.");
	if (GetPlayerCash(playerid) >= amount)
	{
		InfoNegocio[id][nDinero] += amount;
		GivePlayerCash(playerid, -amount, "deposito de caja negocio");
		format(gformat, sizeof gformat, "Depositaste $%s en la caja (total: $%s), ahora tienes en bolsillos $%s.", diner_coma(amount), diner_coma(InfoNegocio[id][nDinero]), diner_coma(GetPlayerCash(playerid)));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
		guardar_int_mysql("negocios", "BolosUwU", InfoNegocio[id][nID_sql], InfoNegocio[id][nDinero]);
		if (InfoNegocio[id][nTipo] == 12) UpdateDineroGuardado(id);
		return 1;
	}
	format(gformat, sizeof gformat, "* No puedes depositar $%s, si sólo tienes en bolsillos $%s.", diner_coma(amount), diner_coma(GetPlayerCash(playerid)));
	SendClientMessage(playerid, COLOR_GREY, gformat);
	return 1;
}

CMD:desbug(playerid)
{
	if (InfoPlayer[playerid][pSancionado] >= 1) return SendClientMessage(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid, 0);
	InfoPlayer[playerid][pInterior] = 0;
	InfoPlayer[playerid][pVirtualWorld] = 0;
	SendClientMessage(playerid, -1, "Administración: Esperamos que su problema haya sido solucionado o reloguea.");
	return 1;
}

CMD:precios(playerid) return Dialog_Show(playerid, PreciosVIP, DIALOG_STYLE_LIST, "{FFBF00}¿Interesado en comprar?",
"Info VIP {FFBF00}Bronce\n\
Info VIP {FFBF00}Plata\n\
Info VIP {FFBF00}Oro\n\
Comprar vehículo {FFBF00}VIP\n",
"Continuar", "Salir");

Dialog:PreciosVIP(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "VIP {FFBF00}Bronce", "Beneficios:\n\
			- Tendrás $800,000 dólares extra en tu cuenta.\n\
			- Acceso a comando /repararpremium.\n\
			- Acceso a chat VIP \n\
			- 4 monedas para comprar vehículos VIP\n", "Cerrar", "");
		case 1: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "VIP {FFBF00}Plata", "Beneficios:\n\
			- Tendrás $1,500,000 dólares extra en tu cuenta.\n\
			- Acceso a comando /repararpremium.\n\
			- Acceso a comando /skinpremium.\n\
			- Acceso a comando /spawncasa.\n\
			- Acceso a chat VIP \n\
			- 9 monedas para comprar vehículos VIP\n", "Cerrar", "");
		case 2: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "VIP {FFBF00}Oro",	"Beneficios:\n\
			- Tendrás $2,500,000 dólares extra en tu cuenta.\n\
			- Acceso a comando /repararpremium.\n\
			- Acceso a comando /skinpremium.\n\
			- Acceso a comando /spawncasa.\n\
			- Acceso a chat VIP \n\
			- Nivel máximo de armero.\n\
			- 15 monedas para comprar vehículos VIP\n\
			- Acceso a colores para toys (NUEVO)\n\
			- Acceso a comando /ponerneon (NUEVO)\n", "Cerrar", "");
		case 3:
		{
			new string1[1028];
			strcat(string1, "ID SAMP\tTipo\tModelo\tValor monedas\n");
			strcat(string1, "403\tCamión\tLinerunner\t7\n");
			strcat(string1, "408\tCamión basura\tTrashmaster\t9\n");
			strcat(string1, "409\tLimosina\tStretch\t12\n");
			strcat(string1, "411\tSport\tInfernus\t15\n");
			strcat(string1, "415\tSport\tCheetah\t12\n");
			strcat(string1, "424\tOff Road\tBF Injection\t2\n");
			strcat(string1, "428\tBlindado\tSecuricar\t9\n");
			strcat(string1, "Siguiente página");
			Dialog_Show(playerid, BuyVehVIP, DIALOG_STYLE_TABLIST_HEADERS, "VIP {FFBF00}Vehículos", string1, "Continuar", "Volver");
		}
	}
	return 1;
}

new complandomodelovip[MAX_PLAYERS];
new complandopreciovip[MAX_PLAYERS];

Dialog:BuyVehVIP(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_precios(playerid);
	new valor = 0, modelo = 0;
	switch (listitem)
	{
		case 0: valor = 7, modelo = 403;
		case 1: valor = 9, modelo = 408;
		case 2: valor = 12, modelo = 409;
		case 3: valor = 15, modelo = 411;
		case 4: valor = 12, modelo = 415;
		case 5: valor = 2, modelo = 424;
		case 6: valor = 9, modelo = 428;
		case 7:
		{
			new string2[1028];
			strcat(string2, "ID SAMP\tTipo\tModelo\tValor monedas\n");
			strcat(string2, "431\tServicios\tBus\t4\n");
			strcat(string2, "434\tEspecial\tHotknife\t5\n");
			strcat(string2, "437\tServicios\tCoach\t4\n");
			strcat(string2, "442\tServicios\tRomero\t3\n");
			strcat(string2, "443\tIndustrial\tPacker\t8\n");
			strcat(string2, "444\tOff Road\tMonster Truck\t10\n");
			strcat(string2, "451\tSport\tTurismo\t14\n");
			strcat(string2, "470\tOff Road\tPatriot\t5\n");
			strcat(string2, "487\tHelicopteros\tMaverick\t20\n");
			strcat(string2, "495\tOff Road\tSandking\t5\n");
			strcat(string2, "506\tSport\tSuper GT\t8\n");
			strcat(string2, "522\tMoto\tNRG-500\t8\n");
			strcat(string2, "541\tSport\tBullet\t10\n");
			strcat(string2, "571\tMario\tKart\t3\n");
			strcat(string2, "579\tOff Road\tHuntley\t2\n");
			strcat(string2, "580\tSaloon\tStrafford\t3\n");
			strcat(string2, "587\tSport\tEuros\t3");
			Dialog_Show(playerid, Buy2VehVIP, DIALOG_STYLE_TABLIST_HEADERS, "VIP {FFBF00}Vehículos", string2, ">", "");
			return 1;
		}
	}
	complandomodelovip[playerid] = modelo;
	complandopreciovip[playerid] = valor;
	new gformat[256];
	format(gformat, sizeof gformat, "{FFFFFF}¿Estás seguro que quieres comprar este {FFBF00}%s{FFFFFF} Coins: {00CC00}%d\n", GetNameVehicle(modelo), valor);
	Dialog_Show(playerid, ComplandoVehVIP, DIALOG_STYLE_MSGBOX, "{FFBF00}Compra vehículo VIP", gformat, "Comprar", "Salir");
	return 1;
}

Dialog:Buy2VehVIP(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_precios(playerid);
	new valor = 0, modelo = 0;
	switch (listitem)
	{
		case 0: valor = 4, modelo = 431;
		case 1: valor = 5, modelo = 434;
		case 2: valor = 4, modelo = 437;
		case 3: valor = 3, modelo = 442;
		case 4: valor = 8, modelo = 443;
		case 5: valor = 10, modelo = 444;
		case 6: valor = 14, modelo = 451;
		case 7: valor = 5, modelo = 470;
		case 8: valor = 20, modelo = 487;
		case 9: valor = 5, modelo = 495;
		case 10: valor = 8, modelo = 506;
		case 11: valor = 8, modelo = 522;
		case 12: valor = 10, modelo = 541;
		case 13: valor = 3, modelo = 571;
		case 14: valor = 2, modelo = 579;
		case 15: valor = 3, modelo = 580;
		case 16: valor = 3, modelo = 587;
	}
	complandomodelovip[playerid] = modelo;
	complandopreciovip[playerid] = valor;
	new gformat[256];
	format(gformat, sizeof gformat, "{FFFFFF}¿Estás seguro que quieres comprar este {FFBF00}%s{FFFFFF} Coins: {00CC00}%d\n", GetNameVehicle(modelo), valor);
	Dialog_Show(playerid, ComplandoVehVIP, DIALOG_STYLE_MSGBOX, "{FFBF00}Compra vehículo VIP", gformat, "Comprar", "Salir");
	return 1;
}

DetectarMaxVehiculos(playerid)
{
	new carsamount = VehicleCount(playerid);
	if (InfoPlayer[playerid][pVIP] == 0 && carsamount >= 3)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Usuarios normales sólo pueden tener 3 vehículos.");
		return 1;
	}
	if (InfoPlayer[playerid][pVIP] == 1 && carsamount >= 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Usuarios VIP Bronce sólo pueden tener 4 vehículos.");
		return 1;
	}
	if (InfoPlayer[playerid][pVIP] == 2 && carsamount >= 6)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Usuarios VIP Plata sólo pueden tener 6 vehículos.");
		return 1;
	}
	if (InfoPlayer[playerid][pVIP] == 3 && carsamount >= 8)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Usuarios VIP Oro sólo pueden tener 8 vehículos.");
		return 1;
	}
	if (InfoPlayer[playerid][pVIP] == 4 && carsamount >= 12)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Usuarios VIP Platino sólo pueden tener 12 vehículos.");
		return 1;
	}
	return 2;
}

Dialog:ComplandoVehVIP(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new gformat[256], modelo = complandomodelovip[playerid], valor = complandopreciovip[playerid];
	if (InfoPlayer[playerid][pCoinsVIP] < valor)
	{
		format(gformat, sizeof gformat, "El costo del modelo {FFBF00}%d{FFFFFF} es {FFBF00}%d coins VIP{FFFFFF}, los cuales no tienes!", modelo, valor);
		SendClientMessage(playerid, -1, gformat);
		return 1;
	}
	if (DetectarMaxVehiculos(playerid) == 1) return 1;
	InfoPlayer[playerid][pCoinsVIP] -= valor;
	guardar_int_mysql("cuentas", "CoinsVIP", InfoPlayer[playerid][pID], InfoPlayer[playerid][pCoinsVIP]);
	new Float: X, Float:Y, Float: Z, Float: Angle, color1 = random(240), color2 = random(240);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	crear_vehiculo(playerid, modelo, X, Y, Z, Angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), color1, color2, 0, 5, 0, -1);
	format(gformat, sizeof gformat, "Felicidades por tu nuevo vehículo, gastaste %d coins vip.", valor);
	SendClientMessage(playerid, COLOR_YELLOW, gformat);
	return 1;
}

CMD:iractor(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new id;
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /iractor (ActorID)");
	if (id < 1 || id > totalactores) return SendClientMessage(playerid, COLOR_GREY, "Actor no encontrado. ID erronéo.");
	if (InfoActor[id][aPosX] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Actor no creado, créalo antes.");
	SetPosEx(playerid, InfoActor[id][aPosX], InfoActor[id][aPosY], InfoActor[id][aPosZ], InfoActor[id][aPosR], InfoActor[id][aInterior], InfoActor[id][aVirtualWorld], 1);
	GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
	return 1;
}

CMD:crearactor(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new skin, nombre[24], gformat[210];
	if (sscanf(params, "ds[24]", skin, nombre)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /crearactor (SkinID) (Nombre)");
	if (IsValidSkin(skin) == 0) return SendClientMessage(playerid, COLOR_GREY, "Debes de escoger una id de skin entre 1 y 311.");
	if (strlen(nombre) > 24 || strlen(nombre) < 0) { SendClientMessage(playerid, -1, "Sólo puedes escribir menos de 24 carácteres."); return 1; }
	Loop(id, MAX_ACTORES, 1) if (InfoActor[id][aPosX] == 0)
	{
		GetPlayerPos(playerid, InfoActor[id][aPosX], InfoActor[id][aPosY], InfoActor[id][aPosZ]);
		GetPlayerFacingAngle(playerid, InfoActor[id][aPosR]);
		InfoActor[id][aVirtualWorld] = GetPlayerVirtualWorld(playerid);
		InfoActor[id][aInterior] = GetPlayerInterior(playerid);
		InfoActor[id][aSkin] = skin;
		alm(InfoActor[id][aNombre], nombre);
		format(gformat, sizeof gformat, "Actor %d - Nombre: %s - Skin: %d.", id, nombre, skin);
		SendClientMessage(playerid, 0x90C3D4FF, gformat);
		Dynamic_actor(id);
		new query[1500];
		//opción idsql ya creada.
		if (InfoActor[id][aID_sql] != 0)
		{
			mysql_format(DBcreative, query, sizeof query, "UPDATE actores SET Nombre = '%e', Skin = '%d', PosX = '%f', PosY = '%f', PosZ = '%f', PosR = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
			InfoActor[id][aNombre],
			InfoActor[id][aSkin],
			InfoActor[id][aPosX],
			InfoActor[id][aPosY],
			InfoActor[id][aPosZ],
			InfoActor[id][aPosR],
			InfoActor[id][aInterior],
			InfoActor[id][aVirtualWorld],
			InfoActor[id][aID_sql]);
			mysql_tquery(DBcreative, query);
			id = MAX_ACTORES;
			return 1;
		}
		mysql_format(DBcreative, query, sizeof query, "INSERT INTO actores (Nombre, Skin, PosX, PosY, PosZ, PosR, Interior, VirtualWorld) VALUES ('%e', '%d', '%f',  '%f', '%f', '%f', '%d', '%d')",
		InfoActor[id][aNombre],
		InfoActor[id][aSkin],
		InfoActor[id][aPosX],
		InfoActor[id][aPosY],
		InfoActor[id][aPosZ],
		InfoActor[id][aPosR],
		InfoActor[id][aInterior],
		InfoActor[id][aVirtualWorld]);
		mysql_tquery(DBcreative, query, "OnActorCreate", "i", id);
		id = MAX_ACTORES;
		return 1;
	}
	SendClientMessage(playerid, COLOR_RED, "Se alcanzó el máximo de actores (100)");
	return 1;
}

forward OnActorCreate(id);
public OnActorCreate(id)
{
	InfoActor[id][aID_sql] = cache_insert_id();
	cache_unset_active();
	totalactores++;
    return 1;
}

CMD:borraractor(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	new id, gformat[235], query[1028];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /borraractor (ActorID)");
	if (id < 1 || id > totalactores) return SendClientMessage(playerid, COLOR_GREY, "Actor no encontrado.");
	if (InfoActor[id][aPosX] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Ese actor no existe.");

	DestroyDynamic3DTextLabel(InfoActor[id][aLabel]);
	DestroyDynamicActor(InfoActor[id][aID_ig]);

	alm(InfoActor[id][aNombre], "ninguno");
	InfoActor[id][aSkin] = -1;
	InfoActor[id][aPosX] = 0.0;
	InfoActor[id][aPosY] = 0.0;
	InfoActor[id][aPosZ] = 0.0;
	InfoActor[id][aPosR] = 0.0;
	InfoActor[id][aInterior] = 0;
	InfoActor[id][aVirtualWorld] = 0;
	InfoActor[id][aAnimacion] = 0;

	mysql_format(DBcreative, query, sizeof query, "UPDATE actores SET Nombre = '%e', Skin = 0, PosX = 0.0, PosY = 0.0, PosZ = 0.0, PosR = 0.0, Interior = 0, VirtualWorld = 0, Animacion = 0 WHERE ID = '%d'", InfoActor[id][aID_sql]);
	mysql_tquery(DBcreative, query);
	//mensaje
	format(gformat, sizeof gformat, "Borraste el acctor ID %d, SQL vacía: %d", id, InfoActor[id][aID_sql]);
	SendClientMessage(playerid, -1, gformat);
	return 1;
}

CMD:skinactor(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	new id, skin, gformat[235];
	if (sscanf(params, "dd", id, skin)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /skinactor (ActorID) (SkinID)");
	if (id < 1 || id > totalactores) return SendClientMessage(playerid, COLOR_GREY, "Actor no encontrado.");
	if (InfoActor[id][aPosX] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Ese actor no existe.");
	if (IsValidSkin(skin) == 0) return SendClientMessage(playerid, COLOR_GREY, "Debes de escoger una id de skin entre 1 y 311.");
	InfoActor[id][aSkin] = skin;
	Dynamic_actor(id);
	guardar_int_mysql("actores", "Skin", InfoActor[id][aID_sql], InfoActor[id][aSkin]);
	format(gformat, sizeof gformat, "Actor %d - Skin: %d.", id, skin);
	SendClientMessage(playerid, 0x90C3D4FF, gformat);
	Streamer_Update(playerid);
	return 1;
}

CMD:animactor(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	new id, anim, gformat[235];
	if (sscanf(params, "dd", id, anim)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /animactor (ActorID) (AnimaciónID)");
	if (id < 1 || id > totalactores) return SendClientMessage(playerid, COLOR_GREY, "Actor no encontrado.");
	if (InfoActor[id][aPosX] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Ese actor no existe.");
	if (anim < 0 || anim > 10) return SendClientMessage(playerid, COLOR_GREY, "Anim erronéa: 0 - 10 Animación | ID 0 deja el Actor en estado Off.");
	InfoActor[id][aAnimacion] = anim;
	if (anim == 0) ClearDynamicActorAnimations(InfoActor[id][aID_ig]);
	else Animacion_actor(id);
	guardar_int_mysql("actores", "Animacion", InfoActor[id][aID_sql], InfoActor[id][aAnimacion]);
	format(gformat, sizeof gformat, "Actor %d - Animación: %d.", id, anim);
	SendClientMessage(playerid, 0x90C3D4FF, gformat);
	Streamer_Update(playerid);
	return 1;
}

CMD:nombreactor(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	new id, doorname[24], gformat[235];
	if (sscanf(params, "ds[24]", id, doorname)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /nombreactor (ActorID) (Nombre)");
	if (id < 1 || id > totalactores) return SendClientMessage(playerid, COLOR_GREY, "Actor no encontrado.");
	if (InfoActor[id][aPosX] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Ese actor no existe.");
	if (strlen(doorname) > 23 || strlen(doorname) < 0) { SendClientMessage(playerid, -1, "Sólo puedes escribir menos de 24 carácteres."); return 1; }
	alm(InfoActor[id][aNombre], doorname);
	Dynamic_actor(id);
	format(gformat, sizeof gformat, "Actor %d - Nombre: %s.", id, doorname);
	SendClientMessage(playerid, 0x90C3D4FF, gformat);
	guardar_string_mysql("actores", "Nombre", InfoActor[id][aID_sql], InfoActor[id][aNombre]);
	Streamer_Update(playerid);
	return 1;
}

CMD:adminduty(playerid)
{
	new string[256];
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (papilla[playerid] == 0)
	{
		papilla[playerid] = 1;
		if (InfoPlayer[playerid][pSexo] == 1) SetPlayerSkin(playerid, 217);
		else SetPlayerSkin(playerid, 211);
		AdminDuty[playerid] = 1;
		InfoPlayer[playerid][pTogTelefono] = 0;
		SetPlayerColor(playerid, 0xFFBF0000);
		format(string, sizeof string, "%s {6DDC76}%s(%d){FFFFFF} ahora está On-Duty.", GetAdminName(playerid), NombreOriginal(playerid), playerid);
	}
	else
	{
		InfoPlayer[playerid][pTogTelefono] = 1;
		SetPlayerColor(playerid, 0xFFFFFF00);
		if (InfoPlayer[playerid][pJobSkin] != 0) SetPlayerSkin(playerid, InfoPlayer[playerid][pJobSkin]);
		else SetPlayerSkin(playerid, InfoPlayer[playerid][pSkin]);
		papilla[playerid]= 0;
		format(string, sizeof string, "%s {6DDC76}%s(%d){FFFFFF} ahora está Off-Duty.", GetAdminName(playerid), NombreOriginal(playerid), playerid);
	}
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}
CMD:aduty(playerid) return cmd_adminduty(playerid);
CMD:staffon(playerid) return cmd_adminduty(playerid);
CMD:onstaff(playerid) return cmd_adminduty(playerid);


CMD:sentarse(playerid, params[])
{
	new anim;
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	if (sscanf(params, "d", anim)) return SendClientMessage(playerid,COLOR_WHITE,"Utiliza: /sentarse (1-6)");
	switch (anim)
	{
		case 1: LoopingAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
		default: return SendClientMessage(playerid,COLOR_WHITE,"Utiliza: /sentarse (1-6)");
	}
	return 1;
}

CMD:orinar(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:dj(playerid, params[])
{
	new anim;
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	if (sscanf(params, "d", anim)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /dj [1-4]");
	switch (anim)
	{
		case 1: LoopingAnim(playerid,"SCRATCHING","scdldlp",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SCRATCHING","scdlulp",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"SCRATCHING","scdrdlp",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.0,1,0,0,0,0);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /dj [1-4]");
	}
	return 1;
}

CMD:sinaliento(playerid, params[])
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	new anim;
	if (sscanf(params, "d", anim)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /sinaliento (1-2)");
	switch (anim)
	{
		case 1: LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /sinaliento (1-2)");
	}
	SetPVarInt(playerid, "PlayerCuffed", 2);
	return 1;
}

CMD:poli(playerid, params[])
{
	new anim;
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	if (sscanf(params, "d", anim)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /poli (1-2)");
	switch (anim)
	{
		case 1:LoopingAnim(playerid,"POLICE","CopTraf_Come",4.0,0,0,0,0,0);
		case 2:LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.0,0,0,0,0,0);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /poli (1-2)");
	}
	return 1;
}

CMD:asiento(playerid, params[])
{
	new anim;
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	if (sscanf(params, "d", anim)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /asiento (1-7)");
	if (anim < 1 || anim > 7) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /asiento (1-7)");
	switch (anim)
	{
		case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0);// Not looping
		case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0); // Not looping
		case 4: LoopingAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0); // Not looping
	}
	return 1;
}

CMD:bailar(playerid, params[])
{
	new dancestyle;
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	if (sscanf(params, "d", dancestyle)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /bailar (1-3)");
	switch (dancestyle)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

CMD:cruzar(playerid, params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /cruzar [1-5]");
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	switch (anim)
	{
		case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 2: LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
		case 3: LoopingAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
		case 4: LoopingAnim(playerid,"GRAVEYARD","mrnM_loop",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /cruzar (1-5)");
	}
	return 1;
}

CMD:jiggy(playerid, params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /jiggy (1-10)");
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	switch (anim)
	{
		case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.0,1,0,0,0,0);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_d",4.0,1,0,0,0,0);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /jiggy (1-10)");
	}
	return 1;
}

CMD:ped(playerid, params[])
{
	new anim;
	if (sscanf(params, "d", anim)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /ped (1-26)");
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	switch (anim)
	{
		case 1: LoopingAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","run_old",4.0,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);
		case 13: LoopingAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);
		case 14: LoopingAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);
		case 15: LoopingAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1);
		case 17: LoopingAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1);
		case 18: LoopingAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1);
		case 19: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1);
		case 20: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);
		case 21: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 22: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1);
		case 23: LoopingAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1);
		case 24: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);
		case 25: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);
		case 26: LoopingAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /ped (1-26)");
	}
	return 1;
}

CMD:rap(playerid, params[])
{
	new rapstyle;
	if (sscanf(params, "d", rapstyle)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /rap (1-3)");
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	switch (rapstyle)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
		case 3: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /rap [1-3]");
	}
	return 1;
}

CMD:gesto(playerid, params[])
{
	new gesto;
	if (sscanf(params, "d", gesto)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /gesto (1-15)");
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	switch (gesto)
	{
		case 1: LoopingAnim(playerid,"GHANDS","gsign1",4.0,0,0,0,0,0);
		case 2: LoopingAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
		case 3: LoopingAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
		case 5: LoopingAnim(playerid,"GHANDS","gsign3",4.0,0,0,0,0,0);
		case 6: LoopingAnim(playerid,"GHANDS","gsign3LH",4.0,0,0,0,0,0);
		case 7: LoopingAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
		case 8: LoopingAnim(playerid,"GHANDS","gsign4LH",4.0,0,0,0,0,0);
		case 9: LoopingAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 10: LoopingAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 11: LoopingAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
		case 12: LoopingAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
		case 13: LoopingAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
		case 14: LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,0,0);
		case 15: LoopingAnim(playerid,"GANGS","smkcig_prtl",4.0,0,0,0,0,0);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /gesto (1-15)");
	}
	return 1;
}

CMD:sexo(playerid, params[])
{
	new sexstyle;
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora !");
	if (sscanf(params, "d", sexstyle)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /sexo (1-8)");
	switch (sexstyle)
	{
		case 1: LoopingAnim(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,0);
		case 4: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,0);
		case 5: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,0);
		case 6: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,0);
		case 7: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,0);
		case 8: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,0);
		default: return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /sexo (1-8)");
	}
	return 1;
}

CMD:apuntar(playerid, params[])
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora !");
	if (sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_GREEN, "Utilize: /apuntar [1-3]");
	if (params[0] < 1 || params[0] > 3)   return SendClientMessage(playerid, COLOR_GREEN, "Utilize: /apuntar [1-3]");
	switch (params[0])
	{
		case 1: LoopingAnim(playerid,"SHOP","ROB_Loop_Threat",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"SHOP","SHP_Gun_Aim",4.1,1,0,0,1,1);
	}
	return 1;
}

CMD:apoyarse(playerid, params[])
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora !");
	if (sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_GREEN, "Utilize: /apoyarse [1-2]");
	if (params[0] < 1 || params[0] > 2)   return SendClientMessage(playerid, COLOR_GREEN, "Utilize: /apoyarse [1-2]");
	switch(params[0])
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,1,0,1,1,1);
		case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,1,1,1,1,1);
	}
	return 1;
}

CMD:levantarse(playerid) return cmd_depie(playerid);

CMD:dedo(playerid)
{
	LoopingAnim(playerid,"RIOT","RIOT_FUKU",4.0,0,0,0,0,0);
	return 1;
}

CMD:correr(playerid, params[])
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora !");
	if (sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_GREEN, "Utilize: /correr [1-6]");
	if (params[0] < 1 || params[0] > 6)   return SendClientMessage(playerid, COLOR_GREEN, "Utilize: /correr [1-6]");
	switch (params[0])
	{
		case 1: LoopingAnim(playerid,"PED","run_civi",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","run_gang1",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","run_old",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","woman_run",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:mecanico(playerid, params[])
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora !");
	if (sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_GREEN, "Utilize: /mecanico [1-2]");
	if (params[0] < 1 || params[0] > 2)   return SendClientMessage(playerid, COLOR_GREEN, "Utilize: /mecanico [1-2]");
	switch (params[0])
	{
		case 1: LoopingAnim(playerid,"CAR","Fixn_Car_Loop",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"CAR","Fixn_Car_Out",4.1,0,0,0,1,1);
	}
	return 1;
}

CMD:chora(playerid)
{
	LoopingAnim(playerid, "COP_AMBIENT", "Coplook_watch",4.0,0,0,0,0,0);
	return 1;
}

CMD:relax(playerid)
{
	LoopingAnim(playerid, "CRACK", "crckidle1",4.0,0,1,1,1,-1);
	return 1;
}

CMD:saludo2(playerid)
{
	LoopingAnim(playerid,"ON_LOOKERS","Pointup_loop",4.0,0,0,0,0,0);
	return 1;
}

CMD:llorar(playerid)
{
	LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0);
	return 1;
}

CMD:saludo(playerid)
{
	ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
	return 1;
}

CMD:quieto(playerid)
{
	LoopingAnim(playerid,"WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:enganche(playerid)
{
	LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:cpr(playerid)
{
	LoopingAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	return 1;
}

CMD:borracho(playerid)
{
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;
}

CMD:arobar(playerid)
{
	LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:reir(playerid)
{
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:amenazar(playerid)
{
	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:depie(playerid)
{
	ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0);
	return 1;
}

CMD:hablando(playerid)
{
	LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
	return 1;
}

CMD:agonizar(playerid)
{
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
	SendClientMessage(playerid, COLOR_WHITE, "Usa /depie o /levantarse para finalizar la animación.");
	return 1;
}

CMD:rodar(playerid)
{
	ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,0);
	SendClientMessage(playerid, COLOR_WHITE, "Usa /depie o /levantarse para finalizar la animación.");
	return 1;
}

CMD:dormir(playerid)
{
	ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
	SendClientMessage(playerid, COLOR_WHITE, "Usa /depie o /levantarse para finalizar la animación.");
	return 1;
}

CMD:herido(playerid)
{
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	SendClientMessage(playerid, COLOR_WHITE, "Usa /depie o /levantarse para finalizar la animación.");
	return 1;
}

CMD:agredido(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid, "POLICE", "crm_drgbst_01", 4.0, 0, 0, 0, 1, 0);
	return 1;
}

CMD:gritar(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,1,1,1,1);
	return 1;
}

CMD:animar(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,1);
	return 1;
}

CMD:paja(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	return 1;
}

CMD:esconderse(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	SetPVarInt(playerid, "PlayerCuffed", 2);
	return 1;
}

CMD:rendirse(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	if (PlayerDrunk[playerid] > 9) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando ahora.");
	if (GetPVarInt(playerid, "IsFrozen") == 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto porque estás congelado.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:vomitar(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:crack(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	SetPVarInt(playerid, "PlayerCuffed", 2);
	return 1;
}

CMD:fokear(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}

CMD:taichi(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:beso(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	LoopingAnim(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0);
	return 1;
}

CMD:w(playerid, params[])
{
	if (sscanf(params, "us[245]", params[0], params[1])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /w (PlayerID) (Texto)");
	if (!IsPlayerConnectedEx(params[0])) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	if (InfoPlayer[playerid][pAdmin] > 0 || InfoPlayer[playerid][pAdmin] == 0 && InfoPlayer[params[0]][pAdmin] > 0)
	{
		if (HidePM[params[0]] == 1 && InfoPlayer[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} Este administrador/ayudante tiene los susurros bloqueados!");
		new string[270];
		format(string, sizeof string, "Mensaje de %s (%d): %s", NombreOriginal(playerid), playerid, params[1]);
		SendClientMessage(params[0], 0xE9BC0AFF, string);
		format(string, sizeof string, "Susurras a %s (%d): %s", NombreOriginal(params[0]), params[0] ,params[1]);
		SendClientMessage(playerid,  0xE9BC0AFF, string);
		Loop(playeridX, MAX_PLAYERS, 0) if (See_MP[playeridX] == 1)
		{
			format(string, sizeof string, "[MP] %s(%d) a %s(%d): %s", NombreOriginal(playerid), playerid, NombreOriginal(params[0]), params[0], params[1]);
			SendSplitMessage(playeridX, 0xFF8000FF, string);
		}
	} else SendClientMessage(playerid, COLOR_GREY, "Susurros solo ha administradores!");
	return 1;
}
CMD:mp(playerid, params[]) return cmd_w(playerid, params);

CMD:apelear(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 10, 767.6719, 13.6320, 1000.7010)) return SendClientMessage(playerid, COLOR_WHITE, "No estas en el GYM.");
	Dialog_Show(playerid, FSTYLE_DIALOG, DIALOG_STYLE_LIST, "{FFBF00}Que le gustaria aprender?", "Me gustaría aprender Knee Head\t 1500$\nMe gustaría aprender Kung Fu\t 1000$\nMe gustaría aprender Boxeo\t 800$\nMe gustaría aprender pelea callejera\t 800$\nMe gustaría aprender pelea de codos\t 800$", "Sí", "No");
	return 1;
}

Dialog:FSTYLE_DIALOG(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (CheckMoney(playerid, 1500) == 0) return 1;
			GivePlayerCash(playerid, -1500, "estilo de pelea (1)");
			InfoPlayer[playerid][pEstiloPelea] = 7;
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
			SendClientMessage(playerid, COLOR_WHITE, "Felicidades! Has aprendido Knee Head.");
			ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
		}
		case 1:
		{
			if (CheckMoney(playerid, 1000) == 0) return 1;
			GivePlayerCash(playerid, -1000, "estilo de pelea (2)");
			InfoPlayer[playerid][pEstiloPelea] = 6;
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
			SendClientMessage(playerid, COLOR_WHITE, "Felicidades! Has aprendido Kung Fu.");
			ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
		}
		case 2:
		{
			if (CheckMoney(playerid, 800) == 0) return 1;
			GivePlayerCash(playerid, -800, "estilo de pelea (3)");
			InfoPlayer[playerid][pEstiloPelea] = 5;
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
			SendClientMessage(playerid, COLOR_WHITE, "Felicidades! Has aprendido a Boxear.");
			ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
		}
		case 3:
		{
			if (CheckMoney(playerid, 800) == 0) return 1;
			GivePlayerCash(playerid, -800, "estilo de pelea (4)");
			InfoPlayer[playerid][pEstiloPelea] = 15;
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
			SendClientMessage(playerid, COLOR_WHITE, "Felicidades! Has aprendido pelea callejera.");
			ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
		}
		case 4:
		{
			if (CheckMoney(playerid, 800) == 0) return 1;
			GivePlayerCash(playerid, -800, "estilo de pelea (5)");
			InfoPlayer[playerid][pEstiloPelea] = 16;
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
			SendClientMessage(playerid, COLOR_WHITE, "Felicidades! Has aprendido a usar los codos.");
			ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
		}
	}
	guardar_int_mysql("cuentas", "EstiloPelea", InfoPlayer[playerid][pID], InfoPlayer[playerid][pEstiloPelea]);
	return 1;
}

CMD:venderarma(playerid,params[])
{
	if (InfoPlayer[playerid][pHorasOn] < 5) return SendClientMessage(playerid, COLOR_GREY, "* Necesitas tener al menos 6 horas para usar este comando.");
	new playerid2, precio, string[180], objeto = InfoPlayer[playerid][pManoDerecha], objetocantidad = InfoPlayer[playerid][pManoDerechaCant];
	if (member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "No puedes vender armas siendo policia o FBI!");
	if (GunVendedor[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "Ya has ofrecido algo, espera la respuesta del cliente.");
	if (objeto == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en tu mano derecha mano.");
    if (InfoInventario[objeto][IDArma] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes un arma en tu mano derecha.");
	if (sscanf(params, "dd", playerid2, precio)) return SendClientMessage(playerid,COLOR_WHITE,"Utiliza: /venderarma (ID) (Precio)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid,COLOR_WHITE,"Ese jugador no está conectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	if (GunCliente[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "Ya le han ofrecido algo a ese jugador.");
	if (precio < 1 || precio > 99999) return SendClientMessage(playerid, 0xFF6347AA, "Sólo precio desde $1 hasta $99,999.");

	new name_ofrece[65];
	if (objetocantidad == 0 || objetocantidad == 1) format(name_ofrece, sizeof name_ofrece, "%s", InfoInventario[objeto][NombreObjeto]);
	else format(name_ofrece, sizeof name_ofrece, "%s con %d balas", InfoInventario[objeto][NombreObjeto], objetocantidad);
	format(string, sizeof string, "* %s quiere venderte su %s por $%s. Usa /aceptar arma para pagarlo.", NombreJugador(playerid), name_ofrece, diner_coma(precio));
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Has ofrecido tu %s a %s por $%s. Espera su respuesta.", name_ofrece, NombreJugador(playerid2), diner_coma(precio));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	if (objetocantidad >= 2) SendClientMessage(playerid, COLOR_YELLOW, "ADVERTENCIA:{FFFFFF} Si intentas guardar el arma, tirarla, cambiarla de mano o gastarle balas, se cancela la venta.");
	GunCliente[playerid2] = playerid;
	GunObjeto[playerid2] = objeto;
	GunCantidad[playerid2] = objetocantidad;
	GunPrecio[playerid2] = precio;
	GunVendedor[playerid] = playerid2;
	return 1;
}

CMD:aceptar(playerid, params[])
{
	new string[480];
	if (isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USA: /aceptar (nombre)");
		SendClientMessage(playerid, COLOR_WHITE, "Nombres: bebida - multa - materiales - coche");
		SendClientMessage(playerid, COLOR_WHITE, "Nombres: recarga - vip - coinsvip");
		return 1;
	}
	if (strcmp(params, "muerte", true) == 0)
	{
		if (GetPVarInt(playerid, "mueltito") == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya estás en estado de muerto, espera para aparecer en el hospital.");
		if (GetPVarInt(playerid, "EstaCrack") == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estás en estado de herido, no puedes hacer esto.");
		if (GetPlayerCash(playerid) < 35000) return SendClientMessage(playerid, COLOR_RED, "No tienes $35,000 dólares para adelantar tu muerte.");
		GivePlayerCash(playerid, -35000, "aceptar muerte");
		estado_xdxdxd(playerid, 2);
	}
	else if (strcmp(params, "arma", true) == 0) //agregado 17/01/2019 by EdinsonWalker
	{
		new playerid2 = GunCliente[playerid], objeto = GunObjeto[playerid], objetocantidad = GunCantidad[playerid], precio = GunPrecio[playerid];
		if (!IsPlayerConnected(playerid2))
		{
			GunCliente[playerid] = -1;
			GunObjeto[playerid] = 0;
			GunCantidad[playerid] = 0;
			GunPrecio[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Vendedor desconectado.");
			return 1;
		}
		if (playerid2 == -1)
		{
			GunCliente[playerid] = -1;
			GunObjeto[playerid] = 0;
			GunCantidad[playerid] = 0;
			GunPrecio[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido un arma!");
			return 1;
		}
		if (!CercaDelMarica(5.0, playerid2, playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás cerca del que te va a vender el arma.");
		if (GetPlayerCash(playerid) < precio)
		{
			format(string, sizeof string, "Te faltan $%s, para comprar el arma a %s.", diner_coma(precio-GetPlayerCash(playerid)), NombreJugador(playerid2));
			SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
		}
		if (InfoPlayer[playerid2][pManoDerecha] != objeto)
		{
			GunCliente[playerid] = -1;
			GunObjeto[playerid] = 0;
			GunCantidad[playerid] = 0;
			GunPrecio[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Error en la venta, el arma del vendedor que te intenta vender ya no lo lleva en su mano derecha.");
			SendClientMessage(playerid2, COLOR_WHITE, "Error en la venta, ya no llevas el arma a vender en tu mano derecha.");
			GunVendedor[playerid2] = -1;
			return 1;
		}
		if (InfoPlayer[playerid2][pManoDerechaCant] != objetocantidad)
		{
			GunCliente[playerid] = -1;
			GunObjeto[playerid] = 0;
			GunCantidad[playerid] = 0;
			GunPrecio[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Error en la venta, la munición del arma cambió.");
			SendClientMessage(playerid2, COLOR_WHITE, "Error en la venta, gastaste las balas del arma a vender.");
			GunVendedor[playerid2] = -1;
			return 1;
		}
	//	if (InfoPlayer[playerid][pManoDerecha] != 0) return SendClientMessage(playerid, COLOR_GREY, "Debes tener tu mano derecha vacía.");
		new name_ofrece[65];
		if (objetocantidad == 0 || objetocantidad == 1) format(name_ofrece, sizeof name_ofrece, "%s", InfoInventario[objeto][NombreObjeto]);
		else format(name_ofrece, sizeof name_ofrece, "%s con %d balas", InfoInventario[objeto][NombreObjeto], objetocantidad);
		InfoPlayer[playerid2][pManoDerecha] = 0;
		InfoPlayer[playerid2][pManoDerechaCant] = 0;
		ResetPlayerWeapons(playerid2);
		ActualizarManos(playerid2);
		GivePlayerCash(playerid2, precio, "venta de armas");
		GivePlayerCash(playerid, -precio, "venta de armas");
		if (InfoInventario[objeto][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], objetocantidad); }
		InfoPlayer[playerid][pManoDerecha] = objeto;
		InfoPlayer[playerid][pManoDerechaCant] = objetocantidad;
		PonerObjeto(playerid, 1, objeto);
		ActualizarManos(playerid);
		format(string, sizeof string, "%s (IP:%s) compró %s a %s (IP:%s) por $%s.", NombreDeCuenta(playerid), InfoPlayer[playerid][pIP], name_ofrece, NombreDeCuenta(playerid2), InfoPlayer[playerid2][pIP], diner_coma(precio));
		Log("LOGS/venderarma.log", string);
		format(string, sizeof string, "compra %s a %s", name_ofrece, NombreJugador(playerid2));
		cmd_me(playerid, string);
		format(string, sizeof string, "* Pagaste $%s por %s.", diner_coma(precio), name_ofrece);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		GunVendedor[playerid2] = -1;
		GunCliente[playerid] = -1;
		GunObjeto[playerid] = 0;
		GunCantidad[playerid] = 0;
		GunPrecio[playerid] = 0;
		return 1;
	}
		    else if(strcmp(params, "saludo",true) == 0){
	        	new Count;
		        foreach(Player, i){
	               	if(GetPVarInt(i, "shrequest") == playerid){
                    	new
                        	Float: ppFloats[3];

                    	GetPlayerPos(i, ppFloats[0], ppFloats[1], ppFloats[2]);

                    	if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2])){
     						Count++;
                   	    	SendClientMessage(playerid, COLOR_WHITE, "Estás demasiado lejos. No puedes aceptar el saludo ahora.");
                    	}
                    	else
						{
                        	switch(GetPVarInt(i, "shstyle"))
							{
                            	case 1:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof string, "* %s se saluda con %s.", NombreJugador(i), NombreJugador(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                           	 	case 2:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof string, "* %s se saluda con %s.", NombreJugador(i), NombreJugador(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 3:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof string, "* %s se saluda con %s.", NombreJugador(i), NombreJugador(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                            	case 4:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000,1);
                                	ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof string, "* %s se saluda con %s.", NombreJugador(i), NombreJugador(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                            	case 5:
                            	{
                           	    	Count++;
                            	   	PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof string, "* %s se saluda con %s.", NombreJugador(i), NombreJugador(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 6:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600,1);
                            	    ApplyAnimation( i, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof string, "* %s se saluda con %s.", NombreJugador(i), NombreJugador(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 7:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250,1);
                            	    ApplyAnimation( i, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof string, "* %s se saluda con %s.", NombreJugador(i), NombreJugador(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 8:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "prtial_hndshk_biz_01", 3.7, 1, 1, 1, 0, 2200,1);
                                	ApplyAnimation( i, "GANGS", "prtial_hndshk_biz_01", 3.5, 1, 1, 1, 0, 2200,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof string, "* %s se saluda con %s.", NombreJugador(i), NombreJugador(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                        	}
                    	}
                	}
            	}
        	    if(Count == 0) return SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha saludado.");
    	        return 1;
	        }
			else if(strcmp(params,"multa",true) == 0){
			    if(TicketOffer[playerid] == 999) return SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Nadie te multado.");
			    format(string, sizeof string, "* %s paga una multa", NombreJugador(playerid));
   				ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
   				format(string, sizeof string, " %s pagó una multa de %d$.", NombreJugador(playerid), TicketMoney[playerid]);
   				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
   				SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, -TicketMoney[playerid], "aceptar multa");
   				Tax += TicketMoney[playerid];
   				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				Facturing[playerid] = 0;
			}
			else if(strcmp(params,"licencia",true) == 0)
			{
			    if (NombreLicencia[playerid] == 999) return SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido una licencia.");
				if (CheckMoney(playerid, PrecioLicencia[playerid]) == 0)
				{
   					NombreLicencia[playerid] = 999;
					PrecioLicencia[playerid] = 0;
					Facturing[playerid] = 0;
				    SendClientMessage(NombreLicencia[playerid], 0xEBEBEBFF, "El sujeto no tiene suficiente dinero para pagar la licencia.");
				    return 1;
				}
				cmd_me(playerid, "obtiene una licencia de armas");
				GivePlayerCash(playerid, -PrecioLicencia[playerid], "aceptar licencia");
   				Tax += PrecioLicencia[playerid];
   				InfoPlayer[playerid][pLicencia][3] = 1;
				guardar_int_mysql("cuentas", "Licencia4", InfoPlayer[playerid][pID], InfoPlayer[playerid][pLicencia][3]);
   				NombreLicencia[playerid] = 999;
				PrecioLicencia[playerid] = 0;
				Facturing[playerid] = 0;
			}
			if (strcmp(params, "coche", true) == 0) //corregido 09/01/2019 by EdinsonWalker
			{
				new playerid2 = Pla_vehicle[playerid], veh = Osql_vehicle[playerid], precio = Price_vehicle[playerid];
				if (!IsPlayerConnected(playerid2))
				{
					Osql_vehicle[playerid] = 0;
					Pla_vehicle[playerid] = 999;
					Price_vehicle[playerid] = 0;
					SendClientMessage(playerid, COLOR_WHITE, "Vendedor desconectado.");
					return 1;
				}
				if (playerid2 == 999)
				{
					Osql_vehicle[playerid] = 0;
					Pla_vehicle[playerid] = 999;
					Price_vehicle[playerid] = 0;
					SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido un coche!");
					return 1;
				}
				if (!CercaDelMarica(8.0, playerid2, playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás cerca del que te va a vender el vehículo.");
				if (GetPlayerCash(playerid) < precio)
				{
					format(string, sizeof string, "Te faltan $%s, para comprar el vehículo a %s.", diner_coma(precio-GetPlayerCash(playerid)), NombreJugador(playerid2));
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				new vehicleid = InfoVehiculo[veh][vIG_id];
				if (!IsPlayerInVehicle(playerid2, vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "El vendedor debe estar dentro del vehículo que te va a vender.");
				if (DetectarMaxVehiculos(playerid) == 1)
				{
					Osql_vehicle[playerid] = 0;
					Pla_vehicle[playerid] = 999;
					Price_vehicle[playerid] = 0;
					return 1;
				}
				//
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(playerid2, ipex, sizeof(ipex));
				format(string, sizeof string, "[CAR] %s (IP: %s) pagó $%s a %s por el %s (IP: %s)", NombreDeCuenta(playerid), ip, diner_coma(precio), NombreDeCuenta(playerid2), GetVehicleName(vehicleid), ipex);
				Log("LOGS/pay.log", string);
				format(string, sizeof string, "* Has pagado $%s a %s por su %s. (Usa /ayuda vehículo para más información)", diner_coma(precio), NombreJugador(playerid2), GetVehicleName(vehicleid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof string, "* Vendiste tu %s a %s por $%s.", GetVehicleName(vehicleid), NombreJugador(playerid), diner_coma(precio));
				SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
				// AntiAbuso. (Regalar coches o similares.
				format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) le compró un %s por $%s a %s(%d).", NombreOriginal(playerid), playerid, GetVehicleName(vehicleid), diner_coma(precio), NombreOriginal(playerid2), playerid2);
				SendAdminMessage(0xFFFFFFFF, string);
				// AntiAbuso 2. (Venta de vehículo entre 2 personas con al misma IP).
				if (!strcmp(InfoPlayer[playerid][pIP], InfoPlayer[Pla_vehicle[playerid]][pIP], false) && InfoPlayer[playerid][pMulticuenta] == 0 && InfoPlayer[Pla_vehicle[playerid]][pMulticuenta] == 0)
				{
					// Si las IP son iguales y ambos son multicuentas NO AUTORIZADAS = 0.
					new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
					format(stringlog, sizeof(stringlog), "[ATENCIÓN] Posibles multicuentas: %s(%d) ha vendido un vehículo a %s(%d). [IP: %s]", NombreOriginal(playerid2), playerid2, NombreOriginal(playerid), playerid, ipc);
					SendAdminMessage(COLOR_YELLOW, stringlog); Log("LOGS/multicuentas.log", stringlog);
				}

				GivePlayerCash(playerid2, precio, "venta de vehiculo");
				GivePlayerCash(playerid, -precio, "venta de vehiculo");

				RemovePlayerFromVehicle(playerid2);
				new Float:slx, Float:sly, Float:slz, query3[186];
				GetPlayerPos(playerid2, slx, sly, slz);
				SetPlayerPos(playerid2, slx, sly, slz+2);
				PutPlayerInVehicle(playerid, vehicleid, 0);
				//actualizar vehículo
				alm(InfoVehiculo[veh][vPropietario], InfoPlayer[playerid][pNombre_Apellido]);

				mysql_format(DBcreative, query3, sizeof query3, "UPDATE vehiculos SET Propietario = '%e' WHERE ID = '%d'", InfoVehiculo[veh][vPropietario], InfoVehiculo[veh][vID_sql]);
				mysql_tquery(DBcreative, query3);

				if (InfoVehiculo[veh][vLlavePrestada] != -1)
				{
					InfoPlayer[InfoVehiculo[veh][vLlavePrestada]][pLlaveVehicle] = 0;
					InfoVehiculo[veh][vLlavePrestada] = -1;
				}

				Osql_vehicle[playerid] = 0;
				Pla_vehicle[playerid] = 999;
				Price_vehicle[playerid] = 0;

				return 1;
			}
			else if(strcmp(params,"materiales",true) == 0){
	            if(MatsOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= MatsPrice[playerid]){
						if(IsPlayerConnected(MatsOffer[playerid])){
							if(InfoPlayer[MatsOffer[playerid]][pMateriales] < MatsAmount[playerid]) return SendClientMessage(playerid,COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tiene los materiales suficientes.");

							new playerid2 = MatsOffer[playerid];
	         				format(string, sizeof string, "* Compraste %d materiales por $%d, de  %s.", MatsAmount[playerid], MatsPrice[playerid], NombreJugador(playerid2));
	            			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof string, "* %s has vendido %d materiales, sumaste $%d a tu bolsillo.", NombreJugador(playerid), MatsAmount[playerid], MatsPrice[playerid]);
	                		SendClientMessage(MatsOffer[playerid], COLOR_LIGHTBLUE, string);

	                  		GivePlayerCash(playerid2, MatsPrice[playerid], "venta de materiales");
							GivePlayerCash(playerid, -MatsPrice[playerid], "venta de materiales");
	                    	InfoPlayer[playerid][pMateriales] += MatsAmount[playerid];
	                    	InfoPlayer[playerid2][pMateriales] -= MatsAmount[playerid];
							guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
							guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pMateriales]);
	                        new ip[32], ipex[32];
	                        GetPlayerIp(playerid, ip, sizeof(ip));
	                        GetPlayerIp(playerid2, ipex, sizeof(ipex));
	                        format(string, sizeof string, "[MATS DEAL] %s(IP:%s) pagó %d materiales de %s(IP:%s)", NombreDeCuenta(playerid), ip, MatsAmount[playerid], NombreDeCuenta(playerid2), ipex);
	                        Log("LOGS/pay.log", string);
	                    	MatsOffer[playerid] = 999;
	                    	MatsPrice[playerid] = 0;
	                    	MatsAmount[playerid] = 0;
	                    }
	                }
	                else return SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido materiales.");
			}
			else if(strcmp(params,"coinsvip",true) == 0){
	            if(FOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= FPrice[playerid]){
						if(IsPlayerConnected(FOffer[playerid])){
							if(InfoPlayer[FOffer[playerid]][pCoinsVIP] < FAmount[playerid]) return SendClientMessage(playerid,COLOR_GREY, "No tiene los coins VIP suficientes.");

	         				format(string, sizeof string, "* Compraste %d coins VIP por $%d, de %s.", FAmount[playerid], FPrice[playerid], NombreJugador(FOffer[playerid]));
	            			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof string, "* %s has vendido %d coins VIP, ganaste $%d de dinero.", NombreJugador(playerid), FAmount[playerid], FPrice[playerid]);
	                		SendClientMessage(FOffer[playerid], COLOR_LIGHTBLUE, string);

	                  		GivePlayerCash(FOffer[playerid], FPrice[playerid], "venta de coinsvip");
							GivePlayerCash(playerid, -FPrice[playerid], "venta de coinsvip");
	                    	InfoPlayer[playerid][pCoinsVIP] += FAmount[playerid];
                            InfoPlayer[FOffer[playerid]][pCoinsVIP] -= FAmount[playerid];
                            guardar_int_mysql("cuentas", "CoinsVIP", InfoPlayer[playerid][pID], InfoPlayer[playerid][pCoinsVIP]);
                            guardar_int_mysql("cuentas", "CoinsVIP", InfoPlayer[FOffer[playerid]][pID], InfoPlayer[FOffer[playerid]][pCoinsVIP]);
	                    	FOffer[playerid] = 999;
	                    	FPrice[playerid] = 0;
	                    	FAmount[playerid] = 0;
	                    }
	                }
	                else return SendClientMessage(playerid, COLOR_GREY, "No tienes dinero suficiente.");
				}
            	else return SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido coins VIP del Gold Gift.");
			}
			else if(strcmp(params,"vip",true) == 0){
	            if(VIPOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= VIPPrice[playerid]){
						if(IsPlayerConnected(VIPOffer[playerid])){
							if(InfoPlayer[VIPOffer[playerid]][pVIP] == 0) return SendClientMessage(playerid,COLOR_GREY, "Ese usuario no es Premium.");
    			    		new viptype[10];
			   			 	switch(InfoPlayer[VIPOffer[playerid]][pVIP])
			    			{
			        			case 1: viptype = "Bronce";
			        			case 2: viptype = "Silver";
			        			case 3: viptype = "Gold";
			        			case 4: viptype = "Platinum";
			    			}
							format(string, sizeof string, "* Compraste el VIP %s de %s por $%d.",viptype,NombreJugador(VIPOffer[playerid]),VIPPrice[playerid]);
	            			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof string, "* %s le has vendido tu VIP %s y ganaste $%d de dinero.",NombreJugador(playerid),viptype,VIPPrice[playerid]);
	                		SendClientMessage(VIPOffer[playerid], COLOR_LIGHTBLUE, string);
	                        new ip[32], ipex[32];
	                        GetPlayerIp(playerid, ip, sizeof(ip));
	                        GetPlayerIp(VIPOffer[playerid], ipex, sizeof(ipex));
	                        format(string, sizeof string, "[VIP DEAL] %s(IP:%s) pagó VIP %s por $%d de %s(IP:%s)", NombreDeCuenta(playerid), ip, viptype, VIPPrice[playerid],NombreDeCuenta(VIPOffer[playerid]), ipex);
	                        Log("LOGS/pay.log", string);
							new level = InfoPlayer[VIPOffer[playerid]][pVIP],
                				dExpire = InfoPlayer[VIPOffer[playerid]][pDiaVIP],
                				mExpire = InfoPlayer[VIPOffer[playerid]][pMesVIP];
	                  		GivePlayerCash(VIPOffer[playerid], VIPPrice[playerid], "venta de vip");
							GivePlayerCash(playerid, -VIPPrice[playerid], "venta de vip");
							// buyer
	                    	InfoPlayer[playerid][pVIP] = level;
	                    	InfoPlayer[playerid][pMesVIP] = mExpire;
	                    	InfoPlayer[playerid][pDiaVIP] = dExpire;
							new query[512];
							mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET VIP = '%d', MesVIP = '%d', DiaVIP = '%d' WHERE ID = '%d'", level, mExpire, dExpire, InfoPlayer[playerid][pID]);
							mysql_tquery(DBcreative, query);
	                    	// Offer
	                    	InfoPlayer[VIPOffer[playerid]][pVIP] = 0;
	                    	InfoPlayer[VIPOffer[playerid]][pMesVIP] = -1;
	                    	InfoPlayer[VIPOffer[playerid]][pDiaVIP] = -1;
							mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET VIP = 0, MesVIP = -1, DiaVIP = -1 WHERE ID = '%d'", InfoPlayer[VIPOffer[playerid]][pID]);
							mysql_tquery(DBcreative, string);
	                    	VIPOffer[playerid] = 999;
	                    	VIPPrice[playerid] = 0;
	                    }
	                    else return SendClientMessage(playerid, COLOR_WHITE, "La persona que te ofreció se desconectó.");
	                }
	                else return SendClientMessage(playerid, COLOR_GREY, "No tienes dinero suficiente.");
				}
            	else return SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido VIP.");
			}
        	else { return 1; }
   	 	return 1;
	}

//Toys
CMD:ctoys(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 802.5069,-1419.6813,1016.4688))
	{
		if (InfoPlayer[playerid][pVIP] != 3) return SendClientMessage(playerid, COLOR_WHITE, "Debes ser mínimo VIP gold.");
		Loop(id, 7, 0) if (InfoPlayer[playerid][ptModelo][id] == 0)
		{
			slotselection[playerid] = id;
			new ToyMuestra[180], count = 0;
			Loop(x, sizeof InfoToy, 0) if (InfoToy[x][accTipo] == 3)
			{
				ToyMuestra[count] = InfoToy[x][accModelo];
				count++;
			}
			ShowModelSelectionMenuEx(playerid, ToyMuestra, count, "Toys V.I.P", Compra_Toy);
			return 1;
		}
		SendClientMessage(playerid, COLOR_GREY, "No puedes tener más de 7 toys.");
		return 1;
	}
	return 1;
}
CMD:comprartoys(playerid) return cmd_ctoys(playerid);

CMD:ayudacajafam(playerid)
{
	SendClientMessage(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Caja Fuerte (Familia)");
	SendClientMessage(playerid, COLOR_WHITE, "C. Fuerte: /cfdepositar /cfretirar /fgarma /fsarma /cfbalance");
	return 1;
}

CMD:ayuda(playerid)
{
	Dialog_Show(playerid, ShowHelp, DIALOG_STYLE_LIST, "{FFBF00}Menú de ayuda",
	"{FFBF00}> {ffffff}General\n\
	{FFBF00}> {ffffff}Facción\n\
	{FFBF00}> {ffffff}Chat\n\
	{FFBF00}> {ffffff}Teléfono\n\
	{FFBF00}> {ffffff}Casa\n\
	{FFBF00}> {ffffff}Vehículo\n\
	{FFBF00}> {ffffff}Banco\n\
	{FFBF00}> {ffffff}V.I.P\n\
	{FFBF00}> {ffffff}Inventario\n\
	{FFBF00}> {ffffff}Negocio\n\
	{FFBF00}> {ffffff}Animaciones\n\
	{FFBF00}> {ffffff}Macros\n\
	{FFBF00}> {ffffff}Contrato ({8000FF}NUEVO{ffffff})", "Continuar", "Salir");
	return 1;
}

Dialog:ShowHelp(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}General",
		"{FFFFFF}/cuenta /cambiarclave /mostrar /removergps /dnifalso\n\
		/pagar /payday /id /comprar /animaciones /ven /ap /cp /apgarage\n\
		/togphone /darcheque /eject /llenar /moneda /dar /duda /re", "Cerrar", "");
		case 1:
		{
		    new id = InfoPlayer[playerid][pMiembro];
			new dialog_help[1024], dialog_name[128];
		    if (id == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás en una facción.");
		    switch (InfoFaccion[id][fTipo])
		    {
		        case 1: //lspd
		        {
					strcat(dialog_help, "{FFFFFF}/f - /r - /d - /dooc - /equipo - /apgarage - /placa - /callsign - /ram - /revisarcasa - /incautar - /ap - /cp\n");
					strcat(dialog_help, "{FFFFFF}/duty - /radio - /arrestar - /detener - /esposar - /desesposar - /spikes - /pspikes - /qspikes - /limpiar\n");
					strcat(dialog_help, "{FFFFFF}/quitar - /multar - /su - /sospechosos - /ct - /sacarct - /guardarct - /ref - /noref - /darlicencia - /dejarmulta\n");
					strcat(dialog_help, "{FFFFFF}/enganchar - /desenganchar - /embargar - /vcoche - /verllaves - /codigos - /derechos - /autorizar\n");
					strcat(dialog_help, "{FFFFFF}/identidad - /reanimar - /bar - /bar2 - /bar3 - /bengala - /cono - /qb - /revisarmaletero - /limpiarmaletero\n");
					if (InfoPlayer[playerid][pLider] != 0) strcat(dialog_help, "{FFBF00}Lider:{FFFFFF} /invitar - /fnombre - /frango - /listamiembros - /gob\n");
				}
				case 2: //fbi
				{
					strcat(dialog_help, "{FFFFFF}/f - /r - /d - /dooc - /duty - /radio - /callsign - /arrestar - /detener - /esposar - /desesposar - /limpiar\n");
					strcat(dialog_help, "{FFFFFF}/equipo - /autorizar - /codigos - /derechos - /quitar - /multar - /sospechosos - /ct - /sacarct - /guardarct\n");
					strcat(dialog_help, "{FFFFFF}/identidad - /dejarmulta - /enganchar - /desenganchar - /embargar - /vcoche - /revisarcasa - /incautar\n");
					strcat(dialog_help, "{FFFFFF}/reanimar - /placa - /ram - /spikes - /pspikes - /qspikes - /bar - /bar2 - /bar3 - /bengala - /cono - /qb - /verllaves\n");
					if (InfoPlayer[playerid][pLider] != 0) strcat(dialog_help, "{FFBF00}Lider:{FFFFFF} /invitar - /fnombre - /frango - /listamiembros - /gob\n");
				}
				case 3: //saem
				{
					strcat(dialog_help, "{FFFFFF}/f - /r - /d - /dooc - /duty - /placa - /radio - /arrestar - /detener - /limpiar - /revisarcasa - /misil\n");
					strcat(dialog_help, "{FFFFFF}/equipo - /autorizar - /codigos - /derechos - /quitar - /multar - /sospechosos - /ct - /sacarct - /guardarct - /incautar\n");
					strcat(dialog_help, "{FFFFFF}/dejarmulta - /enganchar - /desenganchar - /embargar - /vcoche - /cono - /qb - /verllaves\n");
					strcat(dialog_help, "{FFFFFF}/reanimar - /callsign - /esposar - /desesposar - /ram - /spikes - /pspikes - /qspikes - /bar - /bar2 - /bar3 - /bengala\n");
					if (InfoPlayer[playerid][pLider] != 0) strcat(dialog_help, "{FFBF00}Lider:{FFFFFF} /invitar - /fnombre - /frango - /listamiembros - /gob\n");
				}
				case 4: //sasd
				{
					strcat(dialog_help, "{FFFFFF}/f - /r - /d - /dooc - /equipo - /placa - /callsign - /ram - /revisarcasa - /incautar - /limpiar\n");
					strcat(dialog_help, "{FFFFFF}/identidad - /duty - /radio - /arrestar - /detener - /esposar - /desesposar - /spikes - /pspikes - /qspikes\n");
					strcat(dialog_help, "{FFFFFF}/quitar - /multar - /su - /sospechosos - /ct - /sacarct - /guardarct - /ref - /noref - /darlicencia - /dejarmulta\n");
					strcat(dialog_help, "{FFFFFF}/enganchar - /desenganchar - /embargar - /vcoche - /verllaves - /codigos - /derechos - /autorizar\n");
					strcat(dialog_help, "{FFFFFF}/reanimar - /bar - /bar2 - /bar3 - /bengala - /cono - /qb - /revisarmaletero - /limpiarmaletero\n");
					if (InfoPlayer[playerid][pLider] != 0) strcat(dialog_help, "{FFBF00}Lider:{FFFFFF} /invitar - /fnombre - /frango - /listamiembros - /gob\n");
				}
				case 5: //gob
				{
					strcat(dialog_help, "{FFFFFF}/f - /r - /d - /dooc - /placa - /radio - /equipo\n");
					if (InfoPlayer[playerid][pLider] != 0) strcat(dialog_help, "{FFBF00}Lider:{FFFFFF} /invitar - /listamiembros - /fnombre - /frango - /gob - /impuesto - /sacarfondos - /dejarfondos\n");
				}
				case 6: //legal
				{
					strcat(dialog_help, "{FFFFFF}/f - /wsp - /togwsp - /equipo\n");
					if (InfoPlayer[playerid][pLider] != 0) strcat(dialog_help, "{FFBF00}Lider:{FFFFFF} /invitar - /fnombre - /frango - /listamiembros\n");
				}
				case 7: //pandilla
				{
					strcat(dialog_help, "{FFFFFF}/f - /wsp - /togwsp - /equipo - /robar247 - /graffiti\n");
					if (InfoPlayer[playerid][pLider] != 0) strcat(dialog_help, "{FFBF00}Lider:{FFFFFF} /invitar - /fnombre - /frango - /listamiembros\n");
				}
				case 8: //mafia
				{
					strcat(dialog_help, "{FFFFFF}/f - /wsp - /togwsp - /equipo - /robar247\n");
					if (InfoPlayer[playerid][pLider] != 0) strcat(dialog_help, "{FFBF00}Lider:{FFFFFF} /invitar - /fnombre - /frango - /listamiembros\n");
				}
			}
			format(dialog_name, sizeof(dialog_name), "Comandos de %s%s", GetColorLogo(InfoFaccion[id][fTipo]), InfoFaccion[id][fLogo]);
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, dialog_name, dialog_help, "Cerrar", "");
		}
		case 2: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Ayuda - Chat", "{FFFF00}Comandos IC:\n{FFFFFF}(/g)ritar (/s)usurar /me /c (/r)adio\n\n{FFFF00}Comandos OOC:\n{FFFFFF}/b (/w)hisper (/f)accion", "Cerrar", "");
		case 3: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Ayuda - Teléfono", "{FFFFFF}/telefono - /llamar - /contestar - /colgar - /sms - /altavoz - /transferir", "Cerrar", "");
		case 4: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Ayuda - Casa", "{FFFFFF}/comprarcasa /timbre /vendercasa /menucasa\n/guardararmario /sacararmario /casaseguro", "Cerrar", "");
		case 5: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Ayuda - Vehículo", "{FFFFFF}/llaves /estacionar /v (nombre) /qmod /seguro\n/velocimetro /gunlocker /vendermicoche /llenar\n /smaletero /gmaletero /darllave /quitarllave", "Cerrar", "");
		case 6: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Ayuda - Banco", "{FFFFFF}/depositar /sacar /transferir\n /balance /atm", "Cerrar", "");
		case 7:
		{
			if (InfoPlayer[playerid][pVIP] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro VIP.");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Ayuda - VIP", "{FFFFFF}/viplocker /vendercoinsvip /togvip\n/automensaje /ayudacoinsvip /vip\n/spawncasa /skinpremium /repararpremium /ponerneon /neon", "Cerrar", "");
		}
		case 8: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Ayuda - Inventario", "{FFFFFF}/bolsillos /mano /guardar /sacar /tirar\n/recoger /ceder /arma (Colgar - Ajustar - Hueso - Tomar)", "Cerrar", "");
		case 9: Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Ayuda - Negocio", "{FFFFFF}/comprarnegocio /vendernegocio /negociomenu /negocioseguro\n/darempleo - /empleados", "Cerrar", "");
		case 10: cmd_animaciones(playerid);
		case 11: cmd_macros(playerid);
		case 12:
		{
			new id = InfoPlayer[playerid][pContrato];
			if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No trabajas en ningún negocio/empresa.");
			switch (InfoNegocio[id][nTipo])
			{
				case 6: SendClientMessageEx(playerid, 0x15BDA8FF, "%s: {EBEBEB}/repartos - /inforeparto - /cancelarreparto - /habilidad", GetNameContrato(id));
				case 9: SendClientMessageEx(playerid, 0x15BDA8FF, "%s: {EBEBEB}/irllamado - /mostrarprecios - /reparar - /gasolina - /pintura - /paintjob - /llantas - /nitro - /hyd - /tuneo", GetNameContrato(id));
				case 12: SendClientMessageEx(playerid, 0x15BDA8FF, "%s: {EBEBEB}Dentro de la fábrica donde trabajas, encontrarás las indicaciones y pedidos por completar.", GetNameContrato(id));
				case 13: SendClientMessageEx(playerid, 0x15BDA8FF, "%s: {EBEBEB}/curar - /botiquin - /uniformes", GetNameContrato(id));
			}
			SendClientMessage(playerid, 0xEBEBEBFF, "Comandos disponibles: {15BDA8}/irjob{EBEBEB} - {15BDA8}/cjob{EBEBEB} - {15BDA8}/rjob{EBEBEB} - {15BDA8}/renunciar{EBEBEB}");
		}
	}
	return 1;
}

CMD:heridas(playerid, params[])
{
	new id;
	if (sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFF6347FF, "Utiliza: {FFFFFF}/heridas (PlayerID)");
	if (!IsPlayerConnected(id)) return SendClientMessage(playerid, 0xFF6347FF, "Usuario no conectado.");
	if (!CercaDelWeon(7.0, playerid, id)) return SendClientMessage(playerid, COLOR_GREY, "Estás lejos del jugador.");
	ShowPlayerDamages(id, playerid);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new garageID;
	if (sscanf(params, "d", garageID)) return SendClientMessage(playerid, COLOR_WHITE, "USA: /gotogarage [garageid]");
	if (garageID < 1 || garageID > MAX_GARAGES) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (InfoGarages[garageID][gExteriorPos][0] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	SetPosEx(playerid, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], InfoGarages[garageID][gExteriorPos][3], 0, 0, 1);
	return 1;
}
CMD:irgaraje(playerid, params[]) return cmd_gotogarage(playerid, params);

CMD:gtipo(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new garageID, gCType, strings[280];
	if (sscanf(params, "dd", garageID, gCType))
	{
		SendClientMessage(playerid, COLOR_GREY, "USA: /gtipo [garageid] [tipo]");
		SendClientMessage(playerid, COLOR_GREY, "Pequeño 1, Mediano 2, Grande 3.");
		return 1;
	}
	if (garageID < 1 || garageID > MAX_GARAGES) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (InfoGarages[garageID][gExteriorPos][0] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	InfoGarages[garageID][gType] = gCType;
	format(strings, sizeof(strings), "Cambiaste el tipo del garage ID %d al tipo %d.", garageID, gCType);
	SendClientMessage(playerid, COLOR_WHITE, strings);
	update_label_garaje(garageID);
	SaveVarGarages(1,garageID, "Tipo",InfoGarages[garageID][gType]);
	return 1;
}

CMD:agaragename(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new strings[280], x, gname[32];
	if (sscanf(params, "ds[24]", x, gname)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /agaragenme (ID) (Nombre del Garage)");
	if (x < 1 || x > MAX_GARAGES) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (InfoGarages[x][gExteriorPos][0] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (strlen(gname) >= 33 || strlen(gname) < 1) return SendClientMessage(playerid, COLOR_GREY, "* Muchos carácteres sólo 1 - 32.");
	format(strings, sizeof(strings), "Cambiaste el nombre del garage ID %d garage a '%s'.",x, gname);
	SendClientMessage(playerid, COLOR_WHITE, strings);
	alm(InfoGarages[x][gName], gname);
	update_label_garaje(x);
	saveGarages(x);
	return 1;
}

CMD:gprecio(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new garageID, garagePrice, strings[280];
	if (sscanf(params, "dd", garageID, garagePrice)) return SendClientMessage(playerid, COLOR_GREY, "USA: /gprecio [garageid] [precio]");
	if (garageID < 1 || garageID > garageID) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (InfoGarages[garageID][gExteriorPos][0] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	format(strings, sizeof(strings), "Cambiaste el precio del garage ID %d a $%d.", garageID, garagePrice);
	SendClientMessage(playerid, COLOR_WHITE, strings);
	InfoGarages[garageID][gPrice] = garagePrice;
	update_label_garaje(garageID);
	SaveVarGarages(1,garageID, "Precio",InfoGarages[garageID][gPrice]);
	return 1;
}

update_label_garaje(garageID)
{
	new strings[280];
	if (!strcmp("Sin Dueño", InfoGarages[garageID][gOwner]))
	{
		switch (InfoGarages[garageID][gLocked])
		{
			case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", garageID, TipoGarage(garageID), InfoGarages[garageID][gPrice], InfoGarages[garageID][gLevel]);
			case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", garageID, TipoGarage(garageID), InfoGarages[garageID][gPrice], InfoGarages[garageID][gLevel]);
		}
	}
	else
	{
		switch (InfoGarages[garageID][gLocked])
		{
			case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]", garageID, TipoGarage(garageID), InfoGarages[garageID][gName], InfoGarages[garageID][gOwner], InfoGarages[garageID][gLevel]);
			case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.", garageID, TipoGarage(garageID), InfoGarages[garageID][gName], InfoGarages[garageID][gOwner], InfoGarages[garageID][gLevel]);
		}
	}
	UpdateDynamic3DTextLabelText(InfoGarages[garageID][gLabelID], -1, strings);
}

CMD:gnivel(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new garageID, garageLevel, strings[280];
	if (sscanf(params, "dd", garageID, garageLevel)) return SendClientMessage(playerid, COLOR_GREY, "USA: /gnivel [garageid] [precio]");
	if (garageID < 1 || garageID > garageID) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (InfoGarages[garageID][gExteriorPos][0] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	format(strings, sizeof(strings), "Cambiaste el nivel del garage ID %d a %d.", garageID, garageLevel);
	SendClientMessage(playerid, COLOR_WHITE, strings);
	InfoGarages[garageID][gLevel] = garageLevel;
	update_label_garaje(garageID);
	SaveVarGarages(1,garageID, "Nivel",InfoGarages[garageID][gLevel]);
	return 1;
}

CMD:abrirporton(playerid, params[])
{
    //#pragma unused params
	if(getPlayerGaragesID(playerid) >= 1)
	{
	    new x = getPlayerGaragesID(playerid);
	    new strings[280];
	    switch(InfoGarages[x][gLocked])
		{
			case 0: return SendClientMessage(playerid, COLOR_WHITE, "Usa /cerrarporton.");
			case 1:
			{
				format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
				x, TipoGarage(x), InfoGarages[x][gName], InfoGarages[x][gOwner], InfoGarages[x][gLevel]);
                UpdateDynamic3DTextLabelText(InfoGarages[x][gLabelID], -1, strings);
				InfoGarages[x][gLocked] = 0;
			    SendClientMessage(playerid, COLOR_WHITE, "El porton del garage fue abierto.");
			    SaveVarGarages(1,x, "Locked",InfoGarages[x][gLocked]);
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "* No tienes un garage para hacer esto.");
	return 1;
}
CMD:cerrarporton(playerid, params[])
{
    //#pragma unused params
	if(getPlayerGaragesID(playerid) >= 1)
	{
	    new x = getPlayerGaragesID(playerid);
	    new strings[280];
	    switch(InfoGarages[x][gLocked])
		{
			case 0:
			{
				format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
				x, TipoGarage(x), InfoGarages[x][gName], InfoGarages[x][gOwner], InfoGarages[x][gLevel]);
                UpdateDynamic3DTextLabelText(InfoGarages[x][gLabelID], -1, strings);
				InfoGarages[x][gLocked] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "El porton del garage fue cerrado.");
				SaveVarGarages(1,x, "Locked",InfoGarages[x][gLocked]);
			}
			case 1: return SendClientMessage(playerid, COLOR_WHITE, "Usa /abrirporton.");
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "* No tienes un garage para hacer esto.");
	return 1;
}

CMD:movergarage(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new garageID, subject[32];
	if (sscanf(params, "ds[32]", garageID, subject)) return SendClientMessage(playerid, COLOR_GREY, "USA: /movergarage [ID de Garage] [exterior/interior]");
	if (garageID < 1 || garageID > garageID) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (InfoGarages[garageID][gExteriorPos][0] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (strcmp(subject, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2]);
		GetPlayerFacingAngle(playerid, InfoGarages[garageID][gExteriorPos][3]);
		DestroyDynamic3DTextLabel(InfoGarages[garageID][gLabelID]);
		DestroyDynamicPickup(InfoGarages[garageID][gPickupID]);
		new labelString[256];
		if (!strcmp("Sin Dueño", InfoGarages[garageID][gOwner]))
		{
			switch (InfoGarages[garageID][gLocked])
			{
				case 1: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", garageID, TipoGarage(garageID), InfoGarages[garageID][gPrice], InfoGarages[garageID][gLevel]);
				case 0: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", garageID, TipoGarage(garageID), InfoGarages[garageID][gPrice], InfoGarages[garageID][gLevel]);
			}
			InfoGarages[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			InfoGarages[garageID][gPickupID] = CreateDynamicPickup(19133, 23, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], 0, 0, -1, 250);
		}
		else
		{
			switch (InfoGarages[garageID][gLocked])
			{
				case 1: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]", garageID, TipoGarage(garageID), InfoGarages[garageID][gName], InfoGarages[garageID][gOwner], InfoGarages[garageID][gLevel]);
				case 0: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.", garageID, TipoGarage(garageID), InfoGarages[garageID][gName], InfoGarages[garageID][gOwner], InfoGarages[garageID][gLevel]);
			}
			InfoGarages[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			InfoGarages[garageID][gPickupID] = CreateDynamicPickup(19133, 23, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], 0, 0, -1, 250);
		}
		SendClientMessage(playerid, COLOR_WHITE, "El exterior del garage ha sido cambiado.");
	}
	else if (strcmp(subject, "interior", true) == 0)
	{
		GetPlayerFacingAngle(playerid, InfoGarages[garageID][gInteriorPos][3]);
		GetPlayerPos(playerid, InfoGarages[garageID][gInteriorPos][0], InfoGarages[garageID][gInteriorPos][1], InfoGarages[garageID][gInteriorPos][2]);
		InfoGarages[garageID][gInterior] = GetPlayerInterior(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "El interior del garage ha sido cambiado.");
	}
	saveGarages(garageID);
	return 1;
}

CMD:nombregarage(playerid, params[])
{
	if(getPlayerGaragesID(playerid) >= 1)
	{
	    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "USA: /nombregarage [Nombre]");
	    if(strlen(params) >= 33 || strlen(params) < 1) return SendClientMessage(playerid, COLOR_GREY, "* Muchos carácteres sólo 1 - 32.");
	    new x = getPlayerGaragesID(playerid);
	    new strings[280];
	    format(strings, sizeof(strings), "Cambiaste el nombre de tu garage a '%s'.", params);
	    SendClientMessage(playerid, COLOR_WHITE, strings);
		format(InfoGarages[x][gName], 32, params);
	    switch(InfoGarages[x][gLocked])
		{
			case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
			x, TipoGarage(x), InfoGarages[x][gName], InfoGarages[x][gOwner], InfoGarages[x][gLevel]);
			case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
			x, TipoGarage(x), InfoGarages[x][gName], InfoGarages[x][gOwner], InfoGarages[x][gLevel]);
		}
		UpdateDynamic3DTextLabelText(InfoGarages[x][gLabelID], -1, strings);
		saveGarages(x);
	}
	else SendClientMessage(playerid, COLOR_GREY, "* No tienes un negocio para hacer esto.");
	return 1;
}
CMD:vendergarage(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnected(playerid))
	{
	    new garageID = getPlayerGaragesID(playerid);
	    if(garageID < 1) return 1;
	    new labelString[256];
		GivePlayerCash(playerid, InfoGarages[garageID][gPrice]/2, "vender de garage");
		Tax -= InfoGarages[garageID][gPrice]/2;
        format(InfoGarages[garageID][gOwner], MAX_PLAYER_NAME, "Sin Dueño");
        format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", garageID, TipoGarage(garageID), InfoGarages[garageID][gPrice], InfoGarages[garageID][gLevel]);
        DestroyDynamicPickup(InfoGarages[garageID][gPickupID]);
        DestroyDynamic3DTextLabel(InfoGarages[garageID][gLabelID]);
		InfoGarages[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		InfoGarages[garageID][gPickupID] = CreateDynamicPickup(19133, 23, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], 0, 0, -1, 250);
		InfoGarages[garageID][gLocked] = 1;
		format(labelString, sizeof(labelString), "Garage Vendido! El estado te pagó %d por tu garage.", InfoGarages[garageID][gPrice]/2);
		SendClientMessage(playerid, COLOR_WHITE, labelString);
		saveGarages(garageID);
	}
	else SendClientMessage(playerid, COLOR_GREY, "No conectado");
	return 1;
}

CMD:avegarage(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new garageID, labelString[280];
	if (sscanf(params, "d", garageID)) return SendClientMessage(playerid, COLOR_GREY, "USA: /avegarage [garageid]");
	if (garageID < 1 || garageID > garageID) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	if (InfoGarages[garageID][gExteriorPos][0] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage inválido.");
	format(InfoGarages[garageID][gOwner], MAX_PLAYER_NAME, "Sin Dueño");
	DestroyDynamicPickup(InfoGarages[garageID][gPickupID]);
	DestroyDynamic3DTextLabel(InfoGarages[garageID][gLabelID]);
	format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", garageID, TipoGarage(garageID), InfoGarages[garageID][gPrice], InfoGarages[garageID][gLevel]);
	InfoGarages[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
	InfoGarages[garageID][gPickupID] = CreateDynamicPickup(19133, 23, InfoGarages[garageID][gExteriorPos][0], InfoGarages[garageID][gExteriorPos][1], InfoGarages[garageID][gExteriorPos][2], 0, 0, -1, 250);
	InfoGarages[garageID][gLocked] = 1;
	format(labelString, sizeof(labelString), "* Vendiste con comando administrativo el garage ID %d.", garageID);
	SendClientMessage(playerid, COLOR_WHITE, labelString);
	saveGarages(garageID);
	return 1;
}

CMD:creargarage(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new Float: floatPos[3];
	if (!strcmp(params, "exterior", true))
	{
		GetPlayerPos(playerid, floatPos[0], floatPos[1], floatPos[2]);
		SetPVarFloat(playerid, "pBeX", floatPos[0]);
		SetPVarFloat(playerid, "pBeY", floatPos[1]);
		SetPVarFloat(playerid, "pBeZ", floatPos[2]);
		SetPVarInt(playerid, "gExt", 1);
		SendClientMessage(playerid, COLOR_WHITE, "* Exterior de garage configurado.");
		return 1;
	}
	else if (!strcmp(params, "interior", true))
	{
		GetPlayerPos(playerid, floatPos[0], floatPos[1], floatPos[2]);
		SetPVarFloat(playerid, "pBiX", floatPos[0]);
		SetPVarFloat(playerid, "pBiY", floatPos[1]);
		SetPVarFloat(playerid, "pBiZ", floatPos[2]);
		SetPVarInt(playerid, "pBiID", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "gInt", 1);
		SendClientMessage(playerid, COLOR_WHITE, "* Interior de garage configurado.");
		return 1;
	}
	else if (!strcmp(params, "completar", true))
	{
		if (GetPVarInt(playerid, "gExt") != 1 || GetPVarInt(playerid, "gInt") != 1) return SendClientMessage(playerid, COLOR_GREY, "* Todavia no has configurado el interior/exterior del garage.");
		new i,labelString[256];
		for (new x = 1; x < MAX_GARAGES; x++)
		{
			if(InfoGarages[x][gType] == 0)
			{
				i = x;
				printf("ID LIBRE %d",x);
				break;
			}
		}
		if (InfoGarages[i][gType] == 0)
		{
			InfoGarages[i][gExteriorPos][0] = GetPVarFloat(playerid, "pBeX");
			InfoGarages[i][gExteriorPos][1] = GetPVarFloat(playerid, "pBeY");
			InfoGarages[i][gExteriorPos][2] = GetPVarFloat(playerid, "pBeZ");
			InfoGarages[i][gInteriorPos][0] = GetPVarFloat(playerid, "pBiX");
			InfoGarages[i][gInteriorPos][1] = GetPVarFloat(playerid, "pBiY");
			InfoGarages[i][gInteriorPos][2] = GetPVarFloat(playerid, "pBiZ");
			InfoGarages[i][gInterior] = GetPVarInt(playerid, "pBiID");
			alm(InfoGarages[i][gOwner], "Sin Dueño");
			alm(InfoGarages[i][gName], "Nombre del Garage");
			InfoGarages[i][gLocked] = 1;
			InfoGarages[i][gPrice] = 50000;
			InfoGarages[i][gLevel] = 5;
			format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", i, TipoGarage(i), InfoGarages[i][gPrice], InfoGarages[i][gLevel]);
			InfoGarages[i][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, InfoGarages[i][gExteriorPos][0], InfoGarages[i][gExteriorPos][1], InfoGarages[i][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			InfoGarages[i][gPickupID] = CreateDynamicPickup(19133, 23, InfoGarages[i][gExteriorPos][0], InfoGarages[i][gExteriorPos][1], InfoGarages[i][gExteriorPos][2], 0, 0, -1, 250);
			saveGarages(i);
			DeletePVar(playerid, "pBeX");
			DeletePVar(playerid, "pBeY");
			DeletePVar(playerid, "pBeZ");
			DeletePVar(playerid, "pBiX");
			DeletePVar(playerid, "pBeY");
			DeletePVar(playerid, "pBeZ");
			DeletePVar(playerid, "pBiID");
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, InfoGarages[i][gExteriorPos][0], InfoGarages[i][gExteriorPos][1], InfoGarages[i][gExteriorPos][2]);
			SendClientMessage(playerid, COLOR_WHITE, "* Garage creado!");
			return 1;
		}
		SendClientMessage(playerid, COLOR_GREY, "* Ya no hay slots disponibles para crear garages.");
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "USA: /creargarage [interior/exterior/completar]");
	return 1;
}

CMD:comprargarage(playerid, params[])
{
    //#pragma unused params
    if(IsPlayerConnected(playerid))
	{
        for(new x = 0; x < MAX_GARAGES; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, InfoGarages[x][gExteriorPos][0], InfoGarages[x][gExteriorPos][1], InfoGarages[x][gExteriorPos][2]))
			{
				if(!strcmp(InfoGarages[x][gOwner], "Sin Dueño", true))
				{
				    if(InfoGarages[x][gPrice] <= 0) return SendClientMessage(playerid, COLOR_GREY, "[Error] Este negocio ha sido bloqueado por un administrador.");
					if(getPlayerGaragesID(playerid) >= 1) return SendClientMessage(playerid, COLOR_GREY, "[Error] Ya eres dueño de un negocio.");
					if(InfoPlayer[playerid][pNivel] < InfoGarages[x][gLevel])
					{
					    new string[128];
                    	format(string, sizeof string, "Tú necesitas ser nivel {FF0000}%d{FFFFFF} para comprar este garage.", InfoGarages[x][gLevel]);
                    	SendClientMessage(playerid, COLOR_WHITE, string);
                    	return 1;
                	}
					if(GetPlayerCash(playerid) >= InfoGarages[x][gPrice])
					{
						GivePlayerCash(playerid,-InfoGarages[x][gPrice], "comprar garage");
						Tax += InfoGarages[x][gPrice];
						new labelString[256];
						new Nombre[MAX_PLAYER_NAME];
		   				GetPlayerName(playerid, Nombre, sizeof(Nombre));
						strcpy(InfoGarages[x][gOwner], Nombre, MAX_PLAYER_NAME);
						DestroyDynamicPickup(InfoGarages[x][gPickupID]);
						switch(InfoGarages[x][gLocked])
						{
						    case 1: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]", x, TipoGarage(x), InfoGarages[x][gName], InfoGarages[x][gOwner], InfoGarages[x][gLevel]);
							case 0: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.", x, TipoGarage(x), InfoGarages[x][gName], InfoGarages[x][gOwner], InfoGarages[x][gLevel]);
						}
						UpdateDynamic3DTextLabelText(InfoGarages[x][gLabelID], -1, labelString);
						InfoGarages[x][gPickupID] = CreateDynamicPickup(19133, 23, InfoGarages[x][gExteriorPos][0], InfoGarages[x][gExteriorPos][1], InfoGarages[x][gExteriorPos][2], 0, 0, -1, 250);
						SendClientMessage(playerid, COLOR_GREY, "* Felicitaciones por tu compra!");
						saveGarages(x);
					}
					else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficiente dinero para comprar este garage.");
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No puedes comprar un garage con dueño.");
			}
		}
    }
	return 1;
	}

//comandos toys renovado by EdinsonWalker (18/01/2020)
CMD:ayudatoy(playerid)
{
	SendClientMessage(playerid, COLOR_GENERAL, "Ayuda - Accesorios (Toys)");
	SendClientMessage(playerid, COLOR_WHITE, "Para comprar un toy en la tienda usa: {FFBF00}/ctoys");
	SendClientMessage(playerid, COLOR_WHITE, "Para abrir el menú de toys: {FFBF00}/toys");
	SendClientMessage(playerid, COLOR_WHITE, "Para colocarte todos tus toys usa: {FFBF00}/ptoys");
	SendClientMessage(playerid, COLOR_WHITE, "Para retirarte todos tus toys usa: {FFBF00}/qtoys");
	SendClientMessage(playerid, COLOR_WHITE, "Para colocar o retirar un determinado toy usa: {FFBF00}/toy (0-6 slot)");
	return 1;
}

CMD:toys(playerid)
{
	new dialog[1024], dialog2[256], count = 0;
	strcat(dialog, "Objeto\tParte\tColocado\n");
	Loop(x, 7, 0)
	{
		if (InfoPlayer[playerid][ptModelo][x] != 0) format(dialog2, sizeof dialog2, "{FFFFFF}%s\t{9A9A9A}%s\t%s\n", GetNameToy(playerid, x), GetParteToy(playerid, x), GetStatusToy(playerid, x)), count++;
		else alm(dialog2, "{CCCCCC}\n");
		strcat(dialog, dialog2);
	}
	if (count == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFBF00}Toys", "{EBEBEB}No tienes ningún {FFBF00}toy{EBEBEB} en tu cuenta.", "Cerrar", "");
	Dialog_Show(playerid, ShowToys, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Toys", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:ShowToys(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = listitem;
	if (InfoPlayer[playerid][ptModelo][id] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ningún toy en ese slot.");
 	slotselection[playerid] = id;
	indice_toy(playerid, id);
	return 1;
}

indice_toy(playerid, id)
{
	new gtitulo[128], gformat[250], dialog[1028];
	format(gtitulo, sizeof gtitulo, "Toy: {FFBF00}%s", GetNameToy(playerid, id));
	if (InfoPlayer[playerid][pVIP] == 3 || InfoPlayer[playerid][pVIP] == 4)
	{
		format(gformat, sizeof gformat, "{FFFFFF}Edición personalizada\nEditar parte: {FFBF00}%s{FFFFFF}\n%s\nEliminar toy\n", GetParteToy(playerid, id), (InfoPlayer[playerid][ptColocado][id]) ? ("{ED3F3F}Retirar toy{FFFFFF}") : ("{64CA46}Colocar toy{FFFFFF}"));
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "{FFFFFF}Editar color: %s", GetColorToy(playerid, id));
		strcat(dialog, gformat);
	}
	else
	{
		format(gformat, sizeof gformat, "{FFFFFF}Edición personalizada\nEditar parte: {FFBF00}%s{FFFFFF}\n%s\nEliminar toy", GetParteToy(playerid, id), (InfoPlayer[playerid][ptColocado][id]) ? ("{ED3F3F}Retirar toy{FFFFFF}") : ("{64CA46}Colocar toy{FFFFFF}"));
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, Show2Toys, DIALOG_STYLE_LIST, gtitulo, dialog, "Continuar", "Volver");
	return 1;
}

Dialog:Show2Toys(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_toys(playerid);
	new x = slotselection[playerid];
	if (x == -1) return 1;
	switch (listitem)
	{
		case 0: //edición personalizada
		{
			SetPlayerAttachedObject(playerid, x, InfoPlayer[playerid][ptModelo][x], InfoPlayer[playerid][ptHueso][x], InfoPlayer[playerid][ptPosX][x], InfoPlayer[playerid][ptPosY][x], InfoPlayer[playerid][ptPosZ][x],
			InfoPlayer[playerid][ptRotX][x], InfoPlayer[playerid][ptRotY][x], InfoPlayer[playerid][ptRotZ][x], InfoPlayer[playerid][ptScaleX][x], InfoPlayer[playerid][ptScaleY][x], InfoPlayer[playerid][ptScaleZ][x],
			SetColorToy(InfoPlayer[playerid][ptColor][x]));
			EditAttachedObject(playerid, x);
			Editing[playerid] = 1;
			SendClientMessage(playerid, 0xFFFFFFFF, "* Mantén presionado {FFBF00}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
		}
		case 1: //editar parte
		{
			new gtitulo[128], gformat[340];
			format(gtitulo, sizeof gtitulo, "Parte actual: {FFBF00}%s", GetParteToy(playerid, x));
			format(gformat, sizeof gformat, "Columna vertebral\nCabeza\nBrazo izquierdo\nBrazo derecho\nMano izquierda\nMano derecha\nMuslo izquierdo\nMuslo derecho\n\
			Pie izquierdo\nPie derecho\nPantorrilla derecha\nPantorrilla izquierda\nAntebrazo izquierdo\nAntebrazo derecho\nClavicula izquierda\nClavicula derecha\nCuello\nQuijada");
			Dialog_Show(playerid, EditarParteToy, DIALOG_STYLE_LIST, gtitulo, gformat, "Continuar", "Volver");
		}
		case 2: //colocar/remover
		{
			new string[243];
			if (InfoPlayer[playerid][ptColocado][x])
			{
				RemovePlayerAttachedObject(playerid, x);
				InfoPlayer[playerid][ptColocado][x] = 0;
				format(string, sizeof string, "Te has retirado %s. ({FFFFFF}Parte: %s{ED3F3F})", GetNameToy(playerid, x), GetParteToy(playerid, x));
				SendClientMessage(playerid, 0xED3F3FFF, string);
			}
			else
			{
				SetPlayerAttachedObject(playerid, x, InfoPlayer[playerid][ptModelo][x], InfoPlayer[playerid][ptHueso][x], InfoPlayer[playerid][ptPosX][x], InfoPlayer[playerid][ptPosY][x], InfoPlayer[playerid][ptPosZ][x],
				InfoPlayer[playerid][ptRotX][x], InfoPlayer[playerid][ptRotY][x], InfoPlayer[playerid][ptRotZ][x], InfoPlayer[playerid][ptScaleX][x], InfoPlayer[playerid][ptScaleY][x], InfoPlayer[playerid][ptScaleZ][x],
				SetColorToy(InfoPlayer[playerid][ptColor][x]));
				InfoPlayer[playerid][ptColocado][x] = 1;
				format(string, sizeof string, "Te has colocado %s. ({FFFFFF}Parte: %s{64CA46})", GetNameToy(playerid, x), GetParteToy(playerid, x));
				SendClientMessage(playerid, 0x64CA46FF, string);
			}
			ActualizarToy(playerid, x);
		}
		case 3: //eliminar toy
		{
			new gtitulo[128];
			format(gtitulo, sizeof gtitulo, "Toy: {FFBF00}%s", GetNameToy(playerid, x));
			Dialog_Show(playerid, EliminarToy, DIALOG_STYLE_MSGBOX, gtitulo, "{FFFFFF}¿Estás seguro de eliminar este toy?", "Continuar", "Volver");
		}
		case 4: //personalizar color 1
		{
			new gtitulo[128], str[1024];
			format(gtitulo, sizeof gtitulo, "Color actual: %s", GetColorToy(playerid, x));
			format(str, sizeof str, "Color predeterminado\n");
			Loop(e, sizeof InfoColorToy, 0)
			{
	 			format(str, sizeof str, "%s{%.6s}%s\n", str, InfoColorToy[e][ctColor][2], InfoColorToy[e][ctNombre]);
			}
			Dialog_Show(playerid, ChangeToyColor, DIALOG_STYLE_LIST, gtitulo, str, "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:EditarParteToy(playerid, response, listitem, inputtext[])
{
	new x = slotselection[playerid], string[232];
	if (x == -1) return 1;
	if (!response) return indice_toy(playerid, x);
	InfoPlayer[playerid][ptHueso][x] = listitem+1;
	if (InfoPlayer[playerid][ptColocado][x] != 0)
	{
	    RemovePlayerAttachedObject(playerid, x);
		SetPlayerAttachedObject(playerid, x, InfoPlayer[playerid][ptModelo][x], InfoPlayer[playerid][ptHueso][x], InfoPlayer[playerid][ptPosX][x], InfoPlayer[playerid][ptPosY][x], InfoPlayer[playerid][ptPosZ][x],
		InfoPlayer[playerid][ptRotX][x], InfoPlayer[playerid][ptRotY][x], InfoPlayer[playerid][ptRotZ][x], InfoPlayer[playerid][ptScaleX][x], InfoPlayer[playerid][ptScaleY][x], InfoPlayer[playerid][ptScaleZ][x],
		SetColorToy(InfoPlayer[playerid][ptColor][x]));
	}
	ActualizarToy(playerid, x);
	format(string, sizeof string, "Editaste la parte del toy %s. ({FFFFFF}Parte: %s{FFBF00})", GetNameToy(playerid, x), GetParteToy(playerid, x));
	SendClientMessage(playerid, 0xFFBF00FF, string);
	cmd_toys(playerid);
	return 1;
}

Dialog:EliminarToy(playerid, response, listitem, inputtext[])
{
	new x = slotselection[playerid], string[232];
	if (x == -1) return 1;
	if (!response) return indice_toy(playerid, x);
	format(string, sizeof string, "Eliminaste el toy %s. ({FFFFFF}Parte: %s{8000FF})", GetNameToy(playerid, x), GetParteToy(playerid, x));
	SendClientMessage(playerid, 0x8000FFFF, string);
	if (IsPlayerAttachedObjectSlotUsed(playerid, x)) RemovePlayerAttachedObject(playerid, x);
	InfoPlayer[playerid][ptModelo][x] = 0;
	InfoPlayer[playerid][ptHueso][x] = 0;
	InfoPlayer[playerid][ptPosX][x] = 0.0;
	InfoPlayer[playerid][ptPosY][x] = 0.0;
	InfoPlayer[playerid][ptPosZ][x] = 0.0;
	InfoPlayer[playerid][ptPosX][x] = 0.0;
	InfoPlayer[playerid][ptPosY][x] = 0.0;
	InfoPlayer[playerid][ptPosZ][x] = 0.0;
	InfoPlayer[playerid][ptScaleZ][x] = 0.0;
	InfoPlayer[playerid][ptScaleY][x] = 0.0;
	InfoPlayer[playerid][ptScaleX][x] = 0.0;
	InfoPlayer[playerid][ptColocado][x] = 0;
	InfoPlayer[playerid][ptColor][x] = -1;
	ActualizarToy(playerid, x);
	return 1;
}

Dialog:ChangeToyColor(playerid, response, listitem, inputtext[])
{
	new x = slotselection[playerid], string[195];
	if (x == -1) return 1;
	if (!response) return indice_toy(playerid, x);
	new color = listitem-1;
	InfoPlayer[playerid][ptColor][x] = color;
	format(string, sizeof string, "Cambiaste el color de tu %s (%d) al %s", GetNameToy(playerid, x), x+1, GetColorToy(playerid, x));
	SendClientMessage(playerid, 0xEBEBEBFF, string);
	if (InfoPlayer[playerid][ptColocado][x] != 0)
	{
		RemovePlayerAttachedObject(playerid, x);
		SetPlayerAttachedObject(playerid, x, InfoPlayer[playerid][ptModelo][x], InfoPlayer[playerid][ptHueso][x], InfoPlayer[playerid][ptPosX][x], InfoPlayer[playerid][ptPosY][x], InfoPlayer[playerid][ptPosZ][x],
		InfoPlayer[playerid][ptRotX][x], InfoPlayer[playerid][ptRotY][x], InfoPlayer[playerid][ptRotZ][x], InfoPlayer[playerid][ptScaleX][x], InfoPlayer[playerid][ptScaleY][x], InfoPlayer[playerid][ptScaleZ][x],
		SetColorToy(InfoPlayer[playerid][ptColor][x]));
	}
	ActualizarToy(playerid, x);
	return 1;
}

CMD:toy(playerid, params[])
{
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_WHITE, "No puedes usar este comando en este momento.");
	new toyslot, string[128];
	if (sscanf(params, "d", toyslot)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /toy [slot (0-6)]");
	if (toyslot < 0 || toyslot > 6) return SendClientMessage(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} Los Slots de los toys son del número 0 al 6.");
	if (InfoPlayer[playerid][ptModelo][toyslot] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ningún toy en ese slot.");
	if (InfoPlayer[playerid][ptColocado][toyslot])
	{
		format(string, sizeof string, "Te has retirado %s. ({FFFFFF}Parte: %s{ED3F3F})", GetNameToy(playerid, toyslot), GetParteToy(playerid, toyslot));
		SendClientMessage(playerid, 0xED3F3FFF, string);
		RemovePlayerAttachedObject(playerid, toyslot);
		InfoPlayer[playerid][ptColocado][toyslot] = 0;
	}
	else
	{
		SetPlayerAttachedObject(playerid, toyslot, InfoPlayer[playerid][ptModelo][toyslot], InfoPlayer[playerid][ptHueso][toyslot], InfoPlayer[playerid][ptPosX][toyslot], InfoPlayer[playerid][ptPosY][toyslot], InfoPlayer[playerid][ptPosZ][toyslot],
		InfoPlayer[playerid][ptRotX][toyslot], InfoPlayer[playerid][ptRotY][toyslot], InfoPlayer[playerid][ptRotZ][toyslot], InfoPlayer[playerid][ptScaleX][toyslot], InfoPlayer[playerid][ptScaleY][toyslot], InfoPlayer[playerid][ptScaleZ][toyslot],
		SetColorToy(InfoPlayer[playerid][ptColor][toyslot]));
		InfoPlayer[playerid][ptColocado][toyslot] = 1;
		format(string, sizeof string, "Te has colocado %s. ({FFFFFF}Parte: %s{64CA46})", GetNameToy(playerid, toyslot), GetParteToy(playerid, toyslot));
		SendClientMessage(playerid, 0x64CA46FF, string);
	}
	ActualizarToy(playerid, toyslot);
	return 1;
}

CMD:ptoys(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_WHITE, "No puedes usar este comando en este momento.");
	new count = 0, gformat[130];
	Loop(listitem, 7, 0) if (InfoPlayer[playerid][ptModelo][listitem] != 0)
	{
		SetPlayerAttachedObject(playerid, listitem, InfoPlayer[playerid][ptModelo][listitem], InfoPlayer[playerid][ptHueso][listitem], InfoPlayer[playerid][ptPosX][listitem], InfoPlayer[playerid][ptPosY][listitem], InfoPlayer[playerid][ptPosZ][listitem],
		InfoPlayer[playerid][ptRotX][listitem], InfoPlayer[playerid][ptRotY][listitem], InfoPlayer[playerid][ptRotZ][listitem], InfoPlayer[playerid][ptScaleX][listitem], InfoPlayer[playerid][ptScaleY][listitem], InfoPlayer[playerid][ptScaleZ][listitem],
		SetColorToy(InfoPlayer[playerid][ptColor][listitem]));
		count++;
		InfoPlayer[playerid][ptColocado][listitem] = 1;
		ActualizarToy(playerid, listitem);
	}
	if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes toys.");
	if (count == 1) format(gformat, sizeof gformat, "Te has colocado 1 toy.");
	else format(gformat, sizeof gformat, "Te has colocado %d toys.", count);
	SendClientMessage(playerid, COLOR_GREEN, gformat);
	return 1;
}

CMD:qtoys(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_WHITE, "No puedes usar este comando en este momento.");
	new count = 0, gformat[130];
	Loop(listitem, 7, 0) if (InfoPlayer[playerid][ptModelo][listitem] != 0)
	{
		RemovePlayerAttachedObject(playerid, listitem);
		count++;
		InfoPlayer[playerid][ptColocado][listitem] = 0;
		ActualizarToy(playerid, listitem);
	}
	if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes toys.");
	if (count == 1) format(gformat, sizeof gformat, "Te has removido 1 toy.", count);
	else format(gformat, sizeof gformat, "Te has removido %d toys.", count);
	SendClientMessage(playerid, COLOR_GREEN, gformat);
	return 1;
}

//nombre temporal admin
CMD:adminnombre(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new string[256];
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /adminnombre (Nombre_Apellido)");
	if (!isnull(InfoPlayer[playerid][pNombre_PD])) return SendClientMessage(playerid, COLOR_GREY, "Tienes activado el /identidad, sacátelo primero.");
	if (!isnull(InfoPlayer[playerid][pNombre_Temporal])) //quitar
	{
	    //función
		alm(InfoPlayer[playerid][pNombre_Temporal], "");
		SetPlayerName(playerid, InfoPlayer[playerid][pNombre_Apellido]);
		//mensaje
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) volvió a usar su nombre anterior.", InfoPlayer[playerid][pNombre_Apellido], playerid);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "Tu nombre a sido cambiado al anterior: {5ABAFF}%s{FFFFFF}.", InfoPlayer[playerid][pNombre_Apellido]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else //poner
	{
		if (verificar_cuenta(params) != 0) return SendClientMessage(playerid, COLOR_WHITE, "Ese nombre ya está registrado.");
	    //función
		alm(InfoPlayer[playerid][pNombre_Temporal], params);
		SetPlayerName(playerid, InfoPlayer[playerid][pNombre_Temporal]);
		//mensaje
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) está temporalmente con el nombre {0097DF}%s{FFFFFF}.", NombreDeCuenta(playerid), playerid, params);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "Estás temporalmente con el nombre de {5ABAFF}%s{FFFFFF}.", params);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof string, "%s está usando temporalmente el nombre %s", NombreDeCuenta(playerid), params);
		Log("LOGS/AdminNombre.log", string);
	}
	return 1;
}
CMD:nombreadmin(playerid, params[]) return cmd_adminnombre(playerid, params);

CMD:sentadilla(playerid)
{
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
	return 1;
}

CMD:removegps(playerid) return DisablePlayerCheckpoint(playerid);

CMD:jetpack(playerid)
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	JetPack[playerid] = 1;
	SendClientMessage(playerid, COLOR_PURPLE, "Te colocaste jetpack.");
	return 1;
}

CMD:eject(playerid, params[])
{
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "No estás en ningún vehículo!");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "No eres conductor.");
	new string[180], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /eject (PlayerID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");
	if (playerid2 == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No te puedes echar ati mismo.");
	if (GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "El jugador no está en tu vehículo.");
	format(string, sizeof string, "hace caer a %s de su vehículo", NombreJugador(playerid2));
	cmd_me(playerid, string);
	RemovePlayerFromVehicle(playerid2);
	return 1;
}
CMD:expulsarveh(playerid, params[]) return cmd_eject(playerid, params);

CMD:entrar(playerid)
{
	if (InfoPlayer[playerid][pSancionado] != 0) return 1;
	if (GetPVarInt(playerid, "EstaCrack") != 0) return 1;
	new gformat[240];
	//puertas dinámicas
	Loop(id, totalpuertas, 1) if (InfoPuerta[id][pdExteriorX] != 0.0)
	{
		new Float: radius = 1.5;
		if (InfoPuerta[id][pdStatusVehiculo] != 0) radius = 6.0; //new 23/01/2020
		if (IsPlayerInRangeOfPoint(playerid, radius, InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ]) && InfoPlayer[playerid][pInterior] == InfoPuerta[id][pdExteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoPuerta[id][pdExteriorVW])
		{
		    //nivel vip
			if (InfoPlayer[playerid][pVIP] < InfoPuerta[id][pdVIP])
			{
				format(gformat, sizeof gformat, "Acceso denegado, debes ser mínimo VIP %s.", GetNameVIP(InfoPuerta[id][pdVIP]));
				SendClientMessage(playerid, COLOR_GREY, gformat);
				return 1;
			}
			//nivel facción
 			if (InfoPuerta[id][pdFaccion] != 0)
			{
			    if (InfoPlayer[playerid][pMiembro] != InfoPuerta[id][pdFaccion])
			    {
					format(gformat, sizeof gformat, "Acceso denegado, debes ser miembro de %s.", InfoFaccion[InfoPuerta[id][pdFaccion]][fLogo]);
					SendClientMessage(playerid, COLOR_GREY, gformat);
					return 1;
				}
			}
			//nivel admin
			if (GetPlayerAdmin(playerid, InfoPuerta[id][pdAdmin]) == 0)
			{
				format(gformat, sizeof gformat, "Acceso denegado, debes ser mínimo rango %d admin.", InfoPuerta[id][pdAdmin]);
				SendClientMessage(playerid, COLOR_GREY, gformat);
				return 1;
			}
			//busqueda captura
			if (InfoPuerta[id][pdEstrellas] != 0 && InfoPlayer[playerid][pEstrellas] != 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Esta puerta esta restringida a personas con nivel de búsqueda.");
				return 1;
			}
			//load objects
			if (InfoPuerta[id][pdInteriorInt] != 0 || InfoPuerta[id][pdInteriorVW] != 0) LoadObjects(playerid);
			//vehicle
			if (InfoPuerta[id][pdStatusVehiculo] != 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
				// Posición.
	         	SetVehiclePos(vehicleid, InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ]);
	         	SetVehicleZAngle(vehicleid, InfoPuerta[id][pdInteriorR]);
	          	// Vehículo.
	         	LinkVehicleToInterior(vehicleid, InfoPuerta[id][pdInteriorInt]);
	          	SetVehicleExVirtualWorld(vehicleid, InfoPuerta[id][pdInteriorVW]);
	          	// Player.
	        	SetPlayerVirtualWorld(playerid, InfoPuerta[id][pdInteriorVW]);
	        	SetPlayerInterior(playerid, InfoPuerta[id][pdInteriorInt]);
	        	// new by EdinsonWalker (16-01-2020)
				foreach(new p: Player) if (IsPlayerInVehicle(p, vehicleid))
				{
					SetPlayerInterior(p, InfoPuerta[id][pdInteriorInt]);
					SetPlayerVirtualWorld(p, InfoPuerta[id][pdInteriorVW]);
				}
			}
			else
			{
				SetPosEx(playerid, InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ], InfoPuerta[id][pdInteriorR], InfoPuerta[id][pdInteriorInt], InfoPuerta[id][pdInteriorVW], 1);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
	}
	//casas dinámicas
	Loop(p, totalcasas, 1) if (InfoCasa[p][cTipo] != 0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.5, InfoCasa[p][cExteriorX], InfoCasa[p][cExteriorY], InfoCasa[p][cExteriorZ]) && InfoPlayer[playerid][pInterior] == InfoCasa[p][cExteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoCasa[p][cExteriorVW])
		{
			if (InfoPlayer[playerid][pCasa1] == p || InfoPlayer[playerid][pCasa2] == p || InfoCasa[p][cSeguro] == 0)
			{
				LoadObjects(playerid);
				LoadObjects(playerid);
            	SetPosEx(playerid, InfoCasa[p][cInteriorX], InfoCasa[p][cInteriorY], InfoCasa[p][cInteriorZ], InfoCasa[p][cInteriorR], InfoCasa[p][cInteriorInt], InfoCasa[p][cInteriorVW], 1);
            	SetCameraBehindPlayer(playerid);
            	GameTextForPlayer(playerid, "~w~Bienvenido a casa", 5000, 1);
        	}
        	else GameTextForPlayer(playerid, "~w~Puerta ~r~cerrada", 5000, 1);
        	return 1;
       	}
	}
	//negocios dinámicos
	if (GetExtNegocio(playerid) != -1)
	{
		new id = GetExtNegocio(playerid);
		switch (InfoNegocio[id][nTipo])
		{
			case 9: //mecánico
			{
				if (InfoNegocio[id][nSeguro] == 1) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio está cerrado.");
				if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					SetPosEx(playerid, InfoNegocio[id][nInteriorX], InfoNegocio[id][nInteriorY], InfoNegocio[id][nInteriorZ], InfoNegocio[id][nInteriorR], InfoNegocio[id][nInteriorInt], InfoNegocio[id][nInteriorVW], 1);
					LoadObjects(playerid);
					SetCameraBehindPlayer(playerid);
				}
				else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new countVeh = 0;
					Loop(veh, MAX_VEHICLES, 0) if (GetVehicleVirtualWorld(veh) == InfoNegocio[id][nInteriorVW] && VehicleToPoint(50.0, veh, 1512.2188,-1638.6256,1374.6003))
					{
						countVeh++;
					}
					if (countVeh >= 2) return SendClientMessage(playerid, COLOR_GREY, "Ya hay dos vehículos dentro del taller, espera que salga uno.");
					if (CountEmpleados(id) == 0) SendClientMessage(playerid, 0x5EAEFFFF, "* No hay mecánicos de este taller conectados, puedes usar /taller.");
					else SendClientMessageEx(playerid, 0x5EAEFFFF, "* Se encuentran %d mecánicos de este taller conectados, si no ves ninguno en el taller usa /mecanicos.", CountEmpleados(id));
					new vehicleid = GetPlayerVehicleID(playerid);
					SetPlayerInterior(playerid, InfoNegocio[id][nInteriorInt]);
					LinkVehicleToInterior(vehicleid, InfoNegocio[id][nInteriorInt]);
					SetPlayerVirtualWorld(playerid, InfoNegocio[id][nInteriorVW]);
					SetVehicleExVirtualWorld(vehicleid, InfoNegocio[id][nInteriorVW]);
					SetVehiclePos(vehicleid, 1512.2188,-1638.6256,1374.6003);
					SetVehicleZAngle(vehicleid, 180.0000);
					foreach(new p: Player) if (IsPlayerInVehicle(p, vehicleid))
					{
						SetPlayerInterior(p, InfoNegocio[id][nInteriorInt]);
						InfoPlayer[p][pInterior] = InfoNegocio[id][nInteriorInt];
						SetPlayerVirtualWorld(p, InfoNegocio[id][nInteriorVW]);
						InfoPlayer[p][pVirtualWorld] = InfoNegocio[id][nInteriorVW];
					}
					SetCameraBehindPlayer(playerid);
				}
			}
			case 6,12: //fábrica y repartos
			{
				if (PermisosContrato(playerid, id) != 0)
				{
					if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
					{
						if (EnViajeQuimicos[playerid] == 2) return SendClientMessage(playerid, COLOR_GREY, "Debes entregar los químicos por la puerta del garaje.");
						if (EnViajeDrogas[playerid] == 2) return SendClientMessage(playerid, COLOR_GREY, "Debes entregar la camioneta por la puerta del garaje.");
						SetPosEx(playerid, InfoNegocio[id][nInteriorX], InfoNegocio[id][nInteriorY], InfoNegocio[id][nInteriorZ], InfoNegocio[id][nInteriorR], InfoNegocio[id][nInteriorInt], InfoNegocio[id][nInteriorVW], 1);
						LoadObjects(playerid);
						SetCameraBehindPlayer(playerid);
						return 1;
					}
					else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && InfoNegocio[id][nTipo] == 12)
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						SetPlayerInterior(playerid, InfoNegocio[id][nInteriorInt]);
						LinkVehicleToInterior(vehicleid, InfoNegocio[id][nInteriorInt]);
						SetPlayerVirtualWorld(playerid, InfoNegocio[id][nInteriorVW]);
						SetVehicleExVirtualWorld(vehicleid, InfoNegocio[id][nInteriorVW]);
						SetVehiclePos(vehicleid, -2144.1904, -247.4404, 544.8129);
						SetVehicleZAngle(vehicleid, 90.0000);
						foreach(new p: Player) if (IsPlayerInVehicle(p, vehicleid))
						{
							SetPlayerInterior(p, InfoNegocio[id][nInteriorInt]);
							InfoPlayer[p][pInterior] = InfoNegocio[id][nInteriorInt];
							SetPlayerVirtualWorld(p, InfoNegocio[id][nInteriorVW]);
							InfoPlayer[p][pVirtualWorld] = InfoNegocio[id][nInteriorVW];
						}
						SetCameraBehindPlayer(playerid);
						if (EnViajeDrogas[playerid] != 0) actualizar_barril(id, vehicleid);
						return 1;
					}
	        	}
				SendClientMessage(playerid, COLOR_GREY, "Sólo propietario o empleados de la empresa.");
			}
			default: //general
			{
				if (InfoNegocio[id][nSeguro] == 1) return SendClientMessage(playerid, COLOR_GREY, "* Este negocio está cerrado.");
				SetPosEx(playerid, InfoNegocio[id][nInteriorX], InfoNegocio[id][nInteriorY], InfoNegocio[id][nInteriorZ], InfoNegocio[id][nInteriorR], InfoNegocio[id][nInteriorInt], InfoNegocio[id][nInteriorVW], 1);
				LoadObjects(playerid);
				SetCameraBehindPlayer(playerid);
			}
		}
	}
	//garajes dinámicos
	Loop(x, MAX_GARAGES, 0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 5.0, InfoGarages[x][gExteriorPos][0], InfoGarages[x][gExteriorPos][1], InfoGarages[x][gExteriorPos][2]))
		{
			if (InfoGarages[x][gLocked] == 1) return SendClientMessage(playerid, COLOR_GREY, "Este garage esta cerrado.");
      		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
          		SetVehiclePos(GetPlayerVehicleID(playerid),  InfoGarages[x][gInteriorPos][0], InfoGarages[x][gInteriorPos][1], InfoGarages[x][gInteriorPos][2]);
            	SetVehicleZAngle(GetPlayerVehicleID(playerid), InfoGarages[x][gInteriorPos][3]);
         		SetPlayerVirtualWorld(playerid, x);
            	LinkVehicleToInterior(GetPlayerVehicleID(playerid), InfoGarages[x][gInterior]);
            	SetVehicleExVirtualWorld(GetPlayerVehicleID(playerid), x);
            	SetPlayerVirtualWorld(playerid, x);
            	SetPlayerInterior(playerid, InfoGarages[x][gInterior]);
				Streamer_Update(playerid);
				LoadObjects(playerid);
          	}
          	else
			{
				SetPosEx(playerid, InfoGarages[x][gInteriorPos][0], InfoGarages[x][gInteriorPos][1], InfoGarages[x][gInteriorPos][2], InfoGarages[x][gInteriorPos][3], InfoGarages[x][gInterior], x, 1);
				LoadObjects(playerid);
			}
			return 1;
		}
	}
	//otros
	if (IsPlayerInRangeOfPoint(playerid,3,2281.1748,-1724.4528,13.2521)) //  GARAGE 1
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid),  2233.9280,-1758.3882,2031.3885);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),  11.4);
		}
		else
		{
			SetPosEx(playerid, 2235.1851,-1763.5916,2032.9728, 14.9, 0, 0, 1);
			SetCameraBehindPlayer(playerid);
			LoadObjects(playerid);
		}
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid,3,1242.2382,-1732.4800,13.2911)) //  GARAGE 2
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid),  1134.0381,-1591.4459,6602.5879);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),  176.3030);
		}
		else
		{
			SetPosEx(playerid, 1134.0381,-1591.4459,6602.5879, 14.9, 0, 0, 1);
			SetCameraBehindPlayer(playerid);
			LoadObjects(playerid);
		}
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid,3,853.3862,-1387.1884,13.7470)) //  GARAGE VIP
	{
		if (InfoPlayer[playerid][pVIP] == 0) return GameTextForPlayer(playerid, "~r~No eres VIP", 4000, 4);
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid),  855.6053,-1412.6117,4202.1577);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),  0);
		}
		else
		{
			SetPosEx(playerid, 855.6053,-1412.6117,4202.1577, 0, 0, 0, 1);
			SetCameraBehindPlayer(playerid);
			LoadObjects(playerid);
		}
		return 1;
	}
	return 1;
}
CMD:enter(playerid) return cmd_entrar(playerid);

CMD:salir(playerid)
{
	if (InfoPlayer[playerid][pSancionado] != 0) return 1;
	if (GetPVarInt(playerid, "EstaCrack") != 0) return 1;
	//puertas dinámicas
	Loop(id, totalpuertas, 1) if (InfoPuerta[id][pdInteriorX] != 0.0)
	{
		new Float: radius = 1.5;
		if (InfoPuerta[id][pdStatusVehiculo] != 0) radius = 6.0; //new 23/01/2020
		if (IsPlayerInRangeOfPoint(playerid, radius, InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ]) && InfoPlayer[playerid][pVirtualWorld] == InfoPuerta[id][pdInteriorVW])
		{
			if (InfoPuerta[id][pdExteriorInt] != 0 || InfoPuerta[id][pdExteriorVW]) LoadObjects(playerid);
			if (InfoPuerta[id][pdStatusVehiculo] != 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				// Posición.
				SetVehiclePos(GetPlayerVehicleID(playerid), InfoPuerta[id][pdExteriorX],InfoPuerta[id][pdExteriorY],InfoPuerta[id][pdExteriorZ]);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), InfoPuerta[id][pdExteriorR]);
				// Vehículo.
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), InfoPuerta[id][pdExteriorInt]);
				SetVehicleExVirtualWorld(GetPlayerVehicleID(playerid), InfoPuerta[id][pdExteriorVW]);
				// Player.
				SetPlayerVirtualWorld(playerid, InfoPuerta[id][pdExteriorVW]);
				SetPlayerInterior(playerid,InfoPuerta[id][pdExteriorInt]);
				// new by EdinsonWalker (16-01-2020)
				foreach(new p: Player) if (IsPlayerInVehicle(p,GetPlayerVehicleID(playerid)))
				{
					SetPlayerInterior(p, InfoPuerta[id][pdExteriorInt]);
					SetPlayerVirtualWorld(p, InfoPuerta[id][pdExteriorVW]);
				}
			}
			else
			{
				SetPosEx(playerid, InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ], InfoPuerta[id][pdExteriorR], InfoPuerta[id][pdExteriorInt], InfoPuerta[id][pdExteriorVW], 1);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
	}
	//casas dinámicas
	Loop(p, totalcasas, 1) if (InfoCasa[p][cTipo] != 0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.5, InfoCasa[p][cInteriorX], InfoCasa[p][cInteriorY], InfoCasa[p][cInteriorZ]) && InfoPlayer[playerid][pInterior] == InfoCasa[p][cInteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoCasa[p][cInteriorVW])
		{
			SetPosEx(playerid, InfoCasa[p][cExteriorX], InfoCasa[p][cExteriorY], InfoCasa[p][cExteriorZ], InfoCasa[p][cExteriorR], InfoCasa[p][cExteriorInt], InfoCasa[p][cExteriorVW], 1);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
	}
	//negocios dinámicos
	if (GetIntNegocio(playerid) != -1)
	{
		new id = GetIntNegocio(playerid);
		if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPosEx(playerid, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ], InfoNegocio[id][nExteriorR], InfoNegocio[id][nExteriorInt], InfoNegocio[id][nExteriorVW], 1);
			SetCameraBehindPlayer(playerid);
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			Loop(veh, MAX_VEHICLES, 0) if (GetVehicleModel(veh) && GetVehicleVirtualWorld(veh) == InfoNegocio[id][nExteriorVW] && VehicleToPoint(5.0, veh, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ]))
			{
				SendClientMessage(playerid, COLOR_GREY, "Hay un vehículo en la entrada del negocio, espera a que se mueva.");
				return 1;
			}
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehicleid, InfoNegocio[id][nExteriorVehX_V], InfoNegocio[id][nExteriorVehY_V], InfoNegocio[id][nExteriorVehZ]);
			SetPlayerInterior(playerid, InfoNegocio[id][nExteriorInt]);
			SetPlayerVirtualWorld(playerid, InfoNegocio[id][nExteriorVW]);
			SetVehicleZAngle(vehicleid, InfoNegocio[id][nExteriorVehR]);
			LinkVehicleToInterior(vehicleid, InfoNegocio[id][nExteriorInt]);
			SetVehicleExVirtualWorld(vehicleid, InfoNegocio[id][nExteriorVW]);
			foreach(new p: Player) if (IsPlayerInVehicle(p, vehicleid))
			{
				SetPlayerInterior(p, InfoNegocio[id][nExteriorInt]);
				SetPlayerVirtualWorld(p, InfoNegocio[id][nExteriorVW]);
				InfoPlayer[p][pInterior] = InfoNegocio[id][nExteriorInt];
				InfoPlayer[p][pVirtualWorld] = InfoNegocio[id][nExteriorVW];
			}
			SetCameraBehindPlayer(playerid);
			if (EnViajeDrogas[playerid] != 0) actualizar_barril(id, vehicleid);
		}
		return 1;
	}
	//garajes dinámicos
	Loop(x, MAX_GARAGES, 0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 10.0, InfoGarages[x][gInteriorPos][0], InfoGarages[x][gInteriorPos][1], InfoGarages[x][gInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == x)
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
				SetVehiclePos(GetPlayerVehicleID(playerid), InfoGarages[x][gExteriorPos][0], InfoGarages[x][gExteriorPos][1], InfoGarages[x][gExteriorPos][2]);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), InfoGarages[x][gExteriorPos][3]);
				SetPlayerInterior(playerid, 0);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehicleExVirtualWorld(GetPlayerVehicleID(playerid), 0);
				LoadObjects(playerid);
			}
			else
			{
				SetPosEx(playerid, InfoGarages[x][gExteriorPos][0], InfoGarages[x][gExteriorPos][1], InfoGarages[x][gExteriorPos][2], InfoGarages[x][gExteriorPos][3], 0, 0, 1);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
	}
	//otros
	if (IsPlayerInRangeOfPoint(playerid,8,2233.9280,-1758.3882,2031.3885)) //  GARAGE 1
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid),  2281.1748,-1724.4528,13.2521);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),  179.93);
		}
		else
		{
			SetPosEx(playerid, 2280.5620,-1722.8878,13.5469, 181, 0, 0, 1);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid,8,1140.7430,-1592.1893,6602.4922)) //  GARAGE 1
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid),  1242.2382,-1732.4800,13.2911);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),  359.47);
		}
		else
		{
			SetPosEx(playerid, 1241.9020,-1734.0985,13.5899, 354.9746, 0, 0, 1);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid,8,855.6053,-1412.6117,4202.1577)) //  GARAGE VIP
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid),  853.3862,-1387.1884,13.7470);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),  182.4513);
		}
		else
		{
			SetPosEx(playerid, 853.3862,-1387.1884,13.7470, 182.4513, 0, 0, 1);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	return 1;
}
CMD:exit(playerid) return cmd_salir(playerid);

CMD:ip(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /ip (ip)");
	new string[170], IP[32];
	foreach(Player, i)
	{
		GetPlayerIp(i, IP, sizeof IP);
		if (strfind(IP, params, true) != -1)
		{
			format(string, sizeof string, "Jugador: %s (ID: %d) | IP: %s", NombreOriginal(i), i, IP);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:frecuencia(playerid, params[])
{
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	new string[128], frequency;
	if (sscanf(params, "d", frequency))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /frecuencia [frecuencia]");
		SendClientMessage(playerid, COLOR_WHITE, "* Ajusta la frecuencia de tu radio - 0 Si no quieres oir nada.");
		return 1;
	}
	if (frequency > 9999999 || frequency < -9999999) { SendClientMessage(playerid, COLOR_GREY, "Frecuencia no debe ser menor a -9999999 y mayor 9999999."); return 1; }

	InfoPlayer[playerid][pFrecuencia_radio] = frequency;
    guardar_int_mysql("cuentas", "Frecuencia_radio", InfoPlayer[playerid][pID], InfoPlayer[playerid][pFrecuencia_radio]);
	format(string, sizeof string, "Ajustaste la frecuencia de tu radio portable a %d khz.",frequency);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:pr(playerid, params[])
{
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	if (InfoPlayer[playerid][pFrecuencia_radio] >= 1 || InfoPlayer[playerid][pFrecuencia_radio] <= -1)
	{
		if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /pr - /wa - /wt (Char Radio Portátil)");
		if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage (playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar esto ahora.");
		RadioBroadCast(playerid, COLOR_GREY, params);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "* Primero ajusta la frecuencia. /frecuencia'");
	return 1;
}
CMD:wa(playerid, params[]) return cmd_pr(playerid, params);
CMD:wt(playerid, params[]) return cmd_pr(playerid, params);

CMD:prooc(playerid, params[])
{
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	if (InfoPlayer[playerid][pFrecuencia_radio] >= 1 || InfoPlayer[playerid][pFrecuencia_radio] <= -1)
	{
		if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /prooc");
		RadioBroadCastOOC(playerid, COLOR_GREY, params);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "* Primero ajusta la frecuencia. /frecuencia'");
	return 1;
}

CMD:moneda(playerid)
{
	new coin = random(2)+1, string[90], coinname[10];
	if (coin == 1) 	coinname = "cara";
	else 			coinname = "cruz";
	format(string, sizeof string, "*** %s lanza una moneda al aire y cae %s", NombreJugador(playerid), coinname);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:ven(playerid)
{
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Usted necesita estar en el vehiculo para utilizar esta función.");
	new string[128];
	if (VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
	{
		VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
		format(string, sizeof string, "* %s baja la ventana.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
		VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
		format(string, sizeof string, "* %s sube la ventanilla.", NombreJugador(playerid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:misil(playerid, params[])
{
	if (!member_faccion(playerid, 3)) return SendClientMessage(playerid, COLOR_GREY, "No formas parte de SAEM.");
	new Float:M_X, Float:M_Y, Float:M_Z, Float: radius, string[178];
	if (Misile_Launcher < 3)
	{
		if (IsPlayerInRangeOfPoint(playerid,5.0,2740.2664,-2423.1470,43.7594)) // Torre SAEM.
		{
			if (sscanf(params, "fffiii",M_X,M_Y,M_Z,radius,params[1],params[2])) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /misil (coordenada X) (coordenada Y) (coordenada Z) (radio) (tipo) (tiempo)");
			if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_RED, "Necesitas ser mayor de rango 3.");
			if (radius > 100 || radius < 0) return SendClientMessage(playerid, COLOR_GRAD2, "Radio máximo 100");
			if (params[1] > 13  || params[1] < 0) return SendClientMessage(playerid, COLOR_GRAD2, "Tipo explosión 0-13");
			if (params[2] > 60  || params[1] < 0) return SendClientMessage(playerid, COLOR_GRAD2, "Tiempo máximo 60 segundos");
			SetTimerEx("MissileLaunchEx", params[2]*1000, false, "fffii", M_X,M_Y,M_Z,radius,params[1]);
			Misile_Launcher++;
			SendRadioMessage(3, COLOR_RADIO, "[CENTRAL] ALERTA DE LANZAMIENTO DE MISIL");
			format(string, sizeof string, "%s ejecutará el misil en %d segundos, destino: %0.2f - %0.2f - %0.2f, radio: %d", NombreJugador(playerid), params[2], M_X, M_Y, M_Z, radius, params[1]);
			SendRadioMessage(3, COLOR_RADIO, string);
		}
		else if (IsPlayerInRangeOfPoint(playerid,1.0,275.4055,2044.6295,46.5048)) // Torre LV.
		{
			if (sscanf(params, "id",params[0], params[1])) return SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /misil (vehículo) (tiempo)");
			if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_RED, "Necesitas ser mayor de rango 3.");
			if (!GetVehicleModel(params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "Vehículo incorrecto.");
			SetTimerEx("MissileLaunch", params[1]*1000, false, "i", params[0]);
			Misile_Launcher++;
			SendRadioMessage(3, COLOR_RADIO, "[CENTRAL] ALERTA DE LANZAMIENTO DE MISIL");
			format(string, sizeof string, "%s ejecutará el misil en %d segundos, objetivo vehicular: %d.", NombreJugador(playerid), params[1], params[0]);
			SendRadioMessage(3, COLOR_RADIO, string);
		}
		else SendClientMessage(playerid, COLOR_WHITE, "No estás en ningún lanzamisiles.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Aún no han detonado los otros misiles.");
	return 1;
}

CMD:encontrar(playerid, params[])
{
	if (!member_faccion(playerid, 2)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de FBI.");
	if (OnDuty[playerid] == 0) return  SendClientMessage(playerid, COLOR_GREY, "No estas en servicio.");
	if (UsedFind[playerid] > 1) return SendClientMessage(playerid, 0xF2D068FF, "El sistema se está reiniciando, espere unos segundos para volver a usarlo.");
	new item[32], idspe, string[185];
	if (sscanf(params, "s[32]d",item, idspe)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /encontrar (Vehiculo o Persona) (ID)");
	if (strcmp(item,"vehiculo",true) == 0)
	{
		if (!GetVehicleModel(idspe)) return SendClientMessage(playerid, 0x006C00FF, "Vehículo no spawneado.");
		if (GetVehicleVirtualWorld(idspe) != 0) return SendClientMessage(playerid, 0x006C00FF, "Vehículo oculto. (VW)");
		new sat = random(10), luck = random(5), reuse_time = (sat+luck)*2;
		SendClientMessage(playerid, 0xF2D068FF, "[CPU] Estableciendo conexión ...");
		format(string, sizeof string, "Conectado con satélite #%d cobertura(%d)", sat*10,luck*20);
		SendClientMessage(playerid, COLOR_WHITE,string);
		format(string, sizeof string, "ID Vehículo: %d", idspe);
		SendClientMessage(playerid, COLOR_WHITE,string);
		if (luck > 2)
		{
			format(string, sizeof string, "Modelo Vehículo: %s", GetVehicleName(idspe));
			SendClientMessage(playerid, COLOR_WHITE,string);
		}
		SendClientMessage(playerid, 0xF2D068FF, "_____________________________________");
		UsedFind[playerid] = reuse_time;
		WhoFind[playerid] = idspe;
		format(string, sizeof string, "La información se marcara en el mapa en: %d segundos.", sat+luck);
		SendClientMessage(playerid, COLOR_GRAD1,string);
		format(string, sizeof string, "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
		SendClientMessage(playerid, COLOR_GRAD1,string);
		SetTimerEx("Detective_FindCar", sat+luck*1000, false, "i", playerid);
		return 1;
	}
	if (strcmp(item,"persona", true) == 0)
	{
		if (!IsPlayerConnectedEx(idspe)) return SendClientMessage(playerid, COLOR_GREY, "Jugador no conectado.");
		if (GetPlayerVirtualWorld(idspe) != 0) return SendClientMessage(playerid, 0x006C00FF, "Persona oculta. (VW)");
		if (GetPlayerInterior(idspe) != 0) return SendClientMessage(playerid, 0x006C00FF, "Persona oculta. (Int)");
		new Float:X[3], zone[MAX_ZONE_NAME];
		GetPlayerPos(idspe, X[0], X[1], X[2]);
		GetPlayer3DZone(idspe, zone, sizeof zone);
		new sat = random(10), luck = random(5), reuse_time = (sat+luck)*2;
		SendClientMessage(playerid, 0xF2D068FF, "[CPU] Estableciendo conexión ...");
		format(string, sizeof string, "** Conectado con satélite #%d cobertura(%d)", sat*10,luck*20);
		SendClientMessage(playerid, COLOR_WHITE,string);
		format(string, sizeof string, "** Persona a buscar: %s.", NombreJugador(idspe));
		SendClientMessage(playerid, COLOR_WHITE,string);
		format(string, sizeof string, "Localización apróximada: %s",zone);
		SendClientMessage(playerid, COLOR_WHITE,string);
		if (InfoPlayer[playerid][pTogTelefono] == 0 && InfoPlayer[idspe][pTelefono] != 0) // Teléfono apagado y lo tiene.
		{
			SendClientMessage(playerid, 0xF2D068FF, "No se han podido obtener más datos, teléfono desconectado. El sistema se ha ralentizado.");
			SendClientMessage(idspe, COLOR_LIGHTBLUE, "Su teléfono ha vibrado estando apagado, alguien está intentando localizar su número de teléfono.");
			UsedFind[playerid] = reuse_time+35;
			return 1;
		}
		if (luck > 1 && InfoPlayer[idspe][pSexo] == 1) 			SendClientMessage(playerid, COLOR_WHITE,"Sexo: Masculino");
		if (luck > 1 && InfoPlayer[idspe][pSexo] == 2) 			SendClientMessage(playerid, COLOR_WHITE,"Sexo: Femenino");
		if (luck > 2 && IsPlayerInAnyVehicle(idspe)) 	SendClientMessage(playerid, COLOR_WHITE,"Estado: En Automóvil");
		if (InfoPlayer[idspe][pTelefono] != 0)
		{
			format(string, sizeof string, "Teléfono: %d", InfoPlayer[idspe][pTelefono]);
			SendClientMessage(playerid, COLOR_WHITE,string); // Tiene número y no lo tiene en privado.
		}
		SendClientMessage(playerid, 0xF2D068FF, "_____________________________________");
		UsedFind[playerid] = reuse_time;
		WhoFind[playerid] = idspe;
		format(string, sizeof string, "La información se marcara en el mapa en: %d segundos.", sat+luck);
		SendClientMessage(playerid, COLOR_WHITE,string);
		format(string, sizeof string, "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
		SendClientMessage(playerid, COLOR_WHITE,string);
		SetTimerEx("Detective_FindPerson", sat+luck*1000, false, "i", playerid);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /encontrar (Vehiculo o Persona) (ID)");
	return 1;
}

funcion Detective_FindPerson(playerid)
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(WhoFind[playerid], X,Y,Z);
	SetPlayerCheckpoint(playerid, X,Y,Z, 6);
	SendClientMessage(playerid, 0xF2D068FF, "** Información: se estableció el destino de búsqueda en su radar.");
	WhoFind[playerid] = 0;
	return 1;
}

funcion Detective_FindCar(playerid)
{
	new Float:X,Float:Y,Float:Z;
	GetVehiclePos(WhoFind[playerid], X,Y,Z);
	SetPlayerCheckpoint(playerid, X,Y,Z, 10);
	SendClientMessage(playerid, 0xF2D068FF, "** Información: se estableció el destino de búsqueda en su radar.");
	WhoFind[playerid] = 0;
	return 1;
}

CMD:su(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (OnDuty[playerid] == 0) return  SendClientMessage(playerid, COLOR_WHITE, "No estas en servicio.");
	new string[256], playerid2;
	if (sscanf(params, "u", playerid2)) SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /su (PlayerID)");
	if (InfoPlayer[playerid2][pEstrellas] == 6) return SendClientMessage(playerid, 0xb00000ff, "Ese jugador ya tiene el máximo de estrellas (6).");
	InfoPlayer[playerid2][pEstrellas]++;
	switch (InfoPlayer[playerid2][pEstrellas])
	{
		case 1:
		{
			format(string, sizeof string, "%s{FFFFFF} quiere hablar contigo, no intentes escapar del policía.", NombreJugador(playerid));
			SendClientMessage(playerid2, COLOR_RADIO, string);
			format(string, sizeof string, "[CENTRAL] %s dice: %s parece sospechoso, voy a interrogarlo.", NombreJugador(playerid), NombreJugador(playerid2));
			SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, string);
			return 1;
		}
		case 2: format(string, sizeof string, "[CENTRAL] %s dice: %s se resistió al arresto, procedemos a su persecución.", NombreJugador(playerid), NombreJugador(playerid2));
		case 3: format(string, sizeof string, "[CENTRAL] %s dice: %s se encuentra armado, procedan con precaución.", NombreJugador(playerid), NombreJugador(playerid2));
		case 4: format(string, sizeof string, "[CENTRAL] %s dice: %s abrió fuego, necesito refuerzos.", NombreJugador(playerid), NombreJugador(playerid2));
		case 5: format(string, sizeof string, "[CENTRAL] %s dice: %s asesinó, detener vivo o muerto.", NombreJugador(playerid), NombreJugador(playerid2));
		case 6: format(string, sizeof string, "[CENTRAL] %s dice: %s es extremadamente peligroso, disparen a matar.", NombreJugador(playerid), NombreJugador(playerid2));
	}
	SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, string);
	SetPlayerWantedLevel(playerid2, InfoPlayer[playerid2][pEstrellas]);
	return 1;
}

CMD:sospechosos(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	new string[128], x;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sospechosos buscados:");
	foreach(Player, i)
	{
		if (InfoPlayer[i][pEstrellas] >= 1)
		{
			format(string, sizeof string, "%s%s: %d", string,NombreJugador(i),InfoPlayer[i][pEstrellas]);
			x++;
			if (x > 3)
			{
				SendClientMessage(playerid, COLOR_WHITE, string);
				x = 0;
				format(string, sizeof string, " ");
			}
			else format(string, sizeof string, "%s, ", string);
		}
	}
	if (x <= 3 && x > 0)
	{
		string[strlen(string)-2] = '.';
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:bk(playerid, params[])
{
	if (!member_faccion(playerid, 1)) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de la policía.");
	if (refuerzos_pd[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes un pedido de ayuda, usa /noref.");
	new string[256];
	refuerzos_pd[playerid] = 1;
	format(string, sizeof string, "[CENTRAL] Todas las unidades, %s necesita ayuda (Información marcada).", NombreJugador(playerid));
	SendRadioMessage(1, COLOR_RADIO, string);
	Loop(i, MAX_PLAYERS, 0) if (member_faccion(i, 1) && OnDuty[i] == 1)
	{
		SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
	}
	SendClientMessage(playerid, COLOR_ORANGE, "/noref, para cancelar los refuerzos.");
	return 1;
}
CMD:refuerzos(playerid, params[]) return cmd_bk(playerid, params);
CMD:ref(playerid, params[]) return cmd_bk(playerid, params);

CMD:bkc(playerid)
{
	if (!member_faccion(playerid, 1)) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de la policía.");
	if (refuerzos_pd[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás solicitando refuerzos.");
	new string[256];
	refuerzos_pd[playerid] = 0;
	format(string, sizeof string, "[CENTRAL] Todas las unidades que están de apoyo a %s, se ha cancelado el llamado.", NombreJugador(playerid));
	SendRadioMessage(1, COLOR_RADIO, string);
	Loop(i, MAX_PLAYERS, 0) if (member_faccion(i, 1) && OnDuty[i] == 1)
	{
		SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	}
	return 1;
}
CMD:bpc(playerid) return cmd_bkc(playerid);
CMD:norefuerzos(playerid) return cmd_bkc(playerid);
CMD:noref(playerid) return cmd_bkc(playerid);

CMD:drivebug(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No se encuentra en ningún vehículo.");
	if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER) return SendClientMessage(playerid, COLOR_GREY, "No se encuentra como pasajero.");
	ApplyAnimation(playerid, "PED", "CAR_GETIN_RHS", 4.1, 0, 0, 0, 0, 1, 1);
	SetPlayerArmedWeapon(playerid, 0);
    SetTimerEx("desbugdrive", 500, false, "ii", playerid, GetPlayerWeapon(playerid));
    return 1;
}

funcion desbugdrive(playerid, arma)
	SetPlayerArmedWeapon(playerid, arma);

CMD:darlicencia(playerid, params[])
{
	if (!member_faccion(playerid, 1, 4)) return SendClientMessage(playerid, COLOR_GREY, "No formas parte de LSPD o SASD.");
	if (InfoPlayer[playerid][pRango] < 5) return  SendClientMessage(playerid, COLOR_WHITE, "Debes ser mínimo rango 5 para hacer esto.");
	if (sscanf(params, "dd", params[0], params[1])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darlicencia (ID) (precio) ");
	if (!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (!CercaDelMarica(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Muy lejos de el jugador.");
	if (InfoPlayer[params[0]][pLicencia][3] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Este jugador ya tiene una licencia de armas trámitada.");
	if (params[1] < 0 || params[1] > 50000) return SendClientMessage(playerid, COLOR_WHITE, "El precio máximo para la licencia de armas es 50 mil dólares.");
	if (Facturing[params[0]] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Este jugador ya tiene una petición pendiente.");
	if (InfoPlayer[params[0]][pHorasOn] < 2 ) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR] Este usuario no tiene más de 2 horas de juego o dispone de restricción de armas.");
	new string[290];
	if (GetPlayerCash(params[0]) < params[1])
	{
		format(string, sizeof string, "* Esta persona no dispone de {FFFF00}%s${FFFFFF} para pagar la licencia de armas.", diner_coma(params[1]));
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	format(string, sizeof string, "* Oficial {3052DC}%s{EBEBEB} te ofrece una licencia de armas por {00CC00}$%s{EBEBEB}.", NombreJugador(playerid), diner_coma(params[1]));
	SendClientMessage(params[0], 0xEBEBEBFF, string);
	SendClientMessage(params[0], 0xEBEBEBFF, "Utiliza {FFBF00}/aceptar licencia{EBEBEB} ó {FFBF00}/cancelar licencia{EBEBEB}.");
	SendClientMessage(playerid, COLOR_WHITE, "Espera la respuesta del sujeto, espere un momento.");
	NombreLicencia[params[0]] = playerid;
	PrecioLicencia[params[0]] = params[1];
	Facturing[params[0]] = 1; // ID ocupado en la tarea.
	return 1;
}

CMD:multar(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (OnDuty[playerid] == 0) return  SendClientMessage(playerid, COLOR_GREY, "No estás en servicio.");
	if (sscanf(params, "dis[64]", params[0], params[1], params[2])) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /multar (ID) (precio) (razón)");
	if (!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (!CercaDelMarica(8.0,playerid,params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Muy lejos de el jugador.");
	if (Facturing[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Este jugador ya tiene una petición pendiente.");
	if (params[1] < 0 || params[1] > 50000) return SendClientMessage(playerid, COLOR_WHITE, "El máximo de multa son 50000$");
	new string[170];
	if (GetPlayerCash(params[0]) < params[1])
	{
		format(string, sizeof string, "* El infractor no tiene {FFFF00}%s${FFFFFF} para pagar la multa.", diner_coma(params[1]));
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	ClearChat(playerid);
	SendClientMessage(params[0], -1, "Estado de San Andreas");
	format(string, sizeof string, "Demandante: %s", NombreJugador(playerid));
	SendClientMessage(params[0], -1, string);
	format(string, sizeof string, "Infracción: %s", params[2]);
	SendClientMessage(params[0], -1, string);
	format(string, sizeof string, "Multa: %s$", diner_coma(params[1]));
	SendClientMessage(params[0], -1, string);
	SendClientMessage(playerid, COLOR_WHITE, "* Espera la respuesta del sujeto");
	SendClientMessage(params[0], COLOR_WHITE, "Te han multado. Utiliza /aceptar multa ó /cancelar multa, para pagar la multa.");
	TicketOffer[params[0]] = playerid;
	TicketMoney[params[0]] = params[1];
	Facturing[params[0]] = 1;
	return 1;
}

CMD:m(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un vehículo.");
	if (sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /m (texto)");
	new string[320];
	format(string, sizeof string, "(Megáfono) %s: %s",NombreJugador(playerid), params[0]);
	ProxDetector(60.0, playerid, string, COLOR_MEGAPHONE, COLOR_MEGAPHONE, COLOR_MEGAPHONE, COLOR_MEGAPHONE, COLOR_MEGAPHONE);
	return 1;
}

CMD:pagar(playerid, params[])
{
	if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Tienes que tener mínimo 2 Horas de juego para dar dinero.");
	if (InfoPlayer[playerid][pSancionado] >= 1) return SendClientMessage(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
	new string[256];
	if (sscanf(params, "dd", params[0], params[1])) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /pagar (Jugador) (Cantidad)");
	if (!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");
	if (params[1] > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No posees esa cantidad.");
	if (params[1] < 1 || params[1] > 50000) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Máximo: 50 Mil dólares.");
	if (!CercaDelMarica(3.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Jugador muy lejos.");
	GivePlayerCash(playerid, -params[1], "pagar");
	GivePlayerCash(params[0], params[1], "pagar");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	// Anticheat de dinero. - InfoPlayer[playerid][pIP]
	if (InfoPlayer[playerid][pMulticuenta] == 0 && InfoPlayer[params[0]][pMulticuenta] == 0)
	{
		if (!strcmp(InfoPlayer[playerid][pIP], InfoPlayer[params[0]][pIP], false))
		{
			// Si las IP son iguales y ambos son multicuentas NO AUTORIZADAS = 0.
			new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
			format(stringlog, sizeof(stringlog), "[ATENCIÓN] Posibles multicuentas: %s(%d) ha pagado [$%d] a %s(%d). [IP: %s]", NombreOriginal(playerid), playerid, params[1],NombreOriginal(params[0]), params[0], ipc);
			SendAdminMessage(COLOR_ORANGE, stringlog); Log("LOGS/multicuentas.log", stringlog);
		}
	}
	PlayerPlaySound(playerid, 1052, X, Y, Z);
	PlayerPlaySound(params[0], 1052, X, Y, Z);
	format(string, sizeof string, "saca $%s dólares y se los da %s", diner_coma(params[1]), NombreJugador(params[0]));
	cmd_me(playerid, string);
	format(string, sizeof string, "* %s pagó %d$ a %s", NombreDeCuenta(playerid), params[1], NombreDeCuenta(params[0]));
	Log("LOGS/pagos.log", string);
	return 1;
}

CMD:vehid(playerid)
{
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un vehiculo");
	new string[32];
	format(string, sizeof string, "* Vehiculo ID: %d.", GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:subirnivel(playerid)
{
	SendClientMessage(playerid, COLOR_GREY, "Este comando ha sido removido. Se sube de nivel automáticamente.");
	return 1;
}

CMD:quitar(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (OnDuty[playerid] == 0) return  SendClientMessage(playerid, COLOR_GREY, "No estás en servicio.");
	new item[32], string[190], playerid2;
	if (sscanf(params, "ds[32]",playerid2,item))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /quitar (JugadorID) (Item)");
		SendClientMessage(playerid, COLOR_GRAD2, "Items: lconduccion, lvuelo, larma, materiales, ganzuas, armas");
		return 1;
	}
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador no conectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	if (strcmp(item, "lconduccion", true) == 0)
	{
	    if (InfoPlayer[playerid2][pLicencia][0] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no tiene licencia de conducción.");
		InfoPlayer[playerid2][pLicencia][0] = 0;
		guardar_int_mysql("cuentas", "Licencia1", InfoPlayer[playerid2][pID], 0);
		format(string, sizeof string, "le quita la licencia de conducción a %s", NombreJugador(playerid2));
		cmd_me(playerid, string);
	}
	else if (strcmp(item, "lvuelo", true) == 0)
	{
	    if (InfoPlayer[playerid2][pLicencia][1] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no tiene licencia de vuelo.");
		InfoPlayer[playerid2][pLicencia][1] = 0;
		guardar_int_mysql("cuentas", "Licencia2", InfoPlayer[playerid2][pID], 0);
		format(string, sizeof string, "le quita la licencia de vuelo a %s", NombreJugador(playerid2));
		cmd_me(playerid, string);
	}
	else if (strcmp(item, "larma", true) == 0)
	{
	    if (InfoPlayer[playerid2][pLicencia][3] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no tiene licencia de armas.");
		InfoPlayer[playerid2][pLicencia][3] = 0;
		guardar_int_mysql("cuentas", "Licencia4", InfoPlayer[playerid2][pID], 0);
		format(string, sizeof string, "le quita la licencia de armas a %s", NombreJugador(playerid2));
		cmd_me(playerid, string);
	}
	else if (strcmp(item, "materiales", true) == 0)
	{
	    if (InfoPlayer[playerid2][pMateriales] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no tiene materiales.");
		InfoPlayer[playerid2][pMateriales] = 0;
		guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid2][pID], 0);
		format(string, sizeof string, "le quita los materiales a %s", NombreJugador(playerid2));
		cmd_me(playerid, string);
	}
	else if (strcmp(item, "ganzuas", true) == 0)
	{
	    if (InfoPlayer[playerid2][pGanzuas] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no tiene ganzúas.");
		InfoPlayer[playerid2][pGanzuas] = 0;
		guardar_int_mysql("cuentas", "Ganzuas", InfoPlayer[playerid2][pID], 0);
		format(string, sizeof string, "le quita las ganzúas a %s", NombreJugador(playerid2));
		cmd_me(playerid, string);
	}
	else if (strcmp(item, "armas", true) == 0)
	{
		new query[360];
		Loop(x, 10, 0) if (InfoInventario[InfoPlayer[playerid2][pBolsillo][x]][IDArma] != 0)
		{
			InfoPlayer[playerid2][pBolsillo][x] = 0;
			InfoPlayer[playerid2][pBolsilloCant][x] = 0;
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = 0, Cantidad_bolsillo_%d = 0 WHERE ID = '%d'", x+1, x+1, InfoPlayer[playerid2][pID]);
			mysql_tquery(DBcreative, query);
		}
		if (InfoInventario[InfoPlayer[playerid2][pManoIzquierda]][IDArma] != 0)
		{
			InfoPlayer[playerid2][pManoIzquierda] = 0;
			InfoPlayer[playerid2][pManoIzquierdaCant] = 0;
			RemovePlayerAttachedObject(playerid2, 8);
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
			mysql_tquery(DBcreative, query);
		}
		if (InfoInventario[InfoPlayer[playerid2][pManoDerecha]][IDArma] != 0)
		{
			InfoPlayer[playerid2][pManoDerecha] = 0;
			InfoPlayer[playerid2][pManoDerechaCant] = 0;
			RemovePlayerAttachedObject(playerid, 7);
			ResetPlayerWeapons(playerid2);
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
			mysql_tquery(DBcreative, query);
		}
		if (InfoInventario[InfoPlayer[playerid2][pEspalda]][IDArma] != 0)
		{
			InfoPlayer[playerid2][pEspalda] = 0;
			InfoPlayer[playerid2][pEspaldaCant] = 0;
			RemovePlayerAttachedObject(playerid2, 9);
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Espalda = 0, Cantidad_espalda = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
			mysql_tquery(DBcreative, query);
		}
		format(string, sizeof string, "le quita las armas a %s", NombreJugador(playerid2));
		cmd_me(playerid, string);
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Item incorrecto.");
	return 1;
}

CMD:obtenerip(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	if (sscanf(params, "d", params[0])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /obtenerip (PlayerID)");
	if (!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Esa ID es inválida.");
	new ip[20], string[170];
	GetPlayerIp(params[0],ip,sizeof(ip));
	format(string, sizeof string, "* La IP de %s es %s", NombreOriginal(params[0]), ip);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	return 1;
}

CMD:desbanip(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /desbanip (ip)");
	if (IsValidIP(params)) return SendClientMessage(playerid, COLOR_WHITE, "Esa IP no es válida!");
	new string[128];
	RemoveBan(params);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) desbaneó la IP %s", NombreOriginal(playerid), playerid, params);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s desbaneó la IP %s", NombreDeCuenta(playerid), params);
	Log("LOGS/desbanip.log", string);
	return 1;
}
CMD:desbanearip(playerid, params[]) return cmd_desbanip(playerid, params);

CMD:desban(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /desban (Nombre_Apellido)");
	if (verificar_cuenta(params))
	{
		new string[512], banex, list[32];
		alm(list, "niub");
		reg_int(0, "OtakuN_N", banex);
		if (banex == 0) return SendClientMessage(playerid, COLOR_WHITE, "Esa cuenta no está baneada.");
		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET OtakuN_N = 0, Apodo = '%e', JotoOtaku = 0, EncFac = 0 WHERE Nombre_Apellido = '%e'", list, params);
		mysql_tquery(DBcreative, string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) desbaneó la cuenta %s.", NombreOriginal(playerid), playerid, params);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s fue desbaneado por %s.", params, NombreDeCuenta(playerid));
		Log("LOGS/desban.log", string);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Esa cuenta no existe.");
	return 1;
}
CMD:desbanear(playerid, params[]) return cmd_desban(playerid, params);

CMD:expulsarstaff(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new string[512];
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /expulsarstaff (Nombre_Apellido)");
	if (verificar_cuenta(params))
	{
		new	banex, list[32];
		alm(list, "niub");
		reg_int(0, "JotoOtaku", banex);
		if (banex == 0) return SendClientMessage(playerid, COLOR_WHITE, "Esa cuenta no tiene variables admin.");
		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Apodo = '%e', JotoOtaku = 0, EncFac = 0 WHERE Nombre_Apellido = '%e'", list, params);
		mysql_tquery(DBcreative, string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) expulsó a %s de la administración. (OFFLINE)", NombreOriginal(playerid), playerid, params);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s expulsó a %s de la administración. (OFFLINE)", NombreDeCuenta(playerid), params);
		Log("LOGS/admin.log", string);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Está cuenta no existe.");
	return 1;
}

CMD:banoffline(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	new string[512], playername[MAX_PLAYER_NAME], reason[64];
	if (sscanf(params, "ss", playername, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /banear (Nombre_Apellido) (Razón)");
	if (verificar_cuenta(playername))
	{
		new banex, list[32];
		alm(list, "niub");
		reg_int(0, "OtakuN_N", banex);
		if (banex == 2) return SendClientMessage(playerid, COLOR_WHITE, "Esa cuenta ya está baneada.");

		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET OtakuN_N = 2, Apodo = '%e', JotoOtaku = 0, EncFac = 0 WHERE Nombre_Apellido = '%e'", list, playername);
		mysql_tquery(DBcreative, string);

		new year, month,day;
		getdate(year, month, day);
		format(string, sizeof string, "%s baneó a %s, razón: %s (OFFLINE)", NombreDeCuenta(playerid), playername, reason);
		Log("LOGS/offban.log", string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) baneó a %s, razón: %s (OFFLINE)", NombreOriginal(playerid), playerid, playername, reason);
		SendAdminMessage(0xFFFFFFFF, string);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Esa cuenta no existe." );
	return 1;
}
CMD:banoff(playerid, params[]) return cmd_banoffline(playerid, params);
CMD:banearoff(playerid, params[]) return cmd_banoffline(playerid, params);

CMD:changepass(playerid)
{
	Dialog_Show(playerid, ConfirmarPass, DIALOG_STYLE_PASSWORD, "Cambio de contraseña", "{cccccc}Introduce tu contraseña actual:", "Continuar", "Salir");
	return 1;
}
CMD:cambiarclave(playerid) return cmd_changepass(playerid);

Dialog:ConfirmarPass(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	OnPasswordChecked(playerid, 2, inputtext);
	return 1;
}

Dialog:NewPass(playerid, response, listitem, inputtext[])
{
	new string[256];
	if (!response) return 1;
	if (strlen(inputtext) < 5)
	{
		SendClientMessage(playerid, 0xccccccff, "No puedes tener una contraseña con menos de 4 carácteres.");
		Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Nueva contraseña", "{cccccc}Introduce la nueva contraseña:", "Cambiar", "Salir");
		return 1;
	}
	if (strlen(inputtext) > 23)
	{
		SendClientMessage(playerid, 0xccccccff, "No puedes tener una contraseña con más de 24 carácteres.");
		Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Nueva contraseña", "{cccccc}Introduce la nueva contraseña:", "Cambiar", "Salir");
		return 1;
	}
	OnPasswordHashed(playerid, 2, inputtext);
	format(string, sizeof string, "%s (IP: %s) ha cambiado su contraseña: %s", NombreDeCuenta(playerid), InfoPlayer[playerid][pIP], inputtext);
	Log("LOGS/password.log", string);
	format(string, sizeof string, "Has cambiado tu contraseña a: '%s'", inputtext);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:cuenta(playerid)
{
	Show_cuenta(playerid, playerid);
	return 1;
}
CMD:stats(playerid) return cmd_cuenta(playerid);
CMD:est(playerid) return cmd_cuenta(playerid);
CMD:estadisticas(playerid) return cmd_cuenta(playerid);

CMD:gob(playerid, params[])
{
	if (!leader_faccion(playerid, 1, 2, 3, 4, 5)) return SendClientMessage(playerid, COLOR_GREY, "No tienes acceso a este comando.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /gob (texto)");
	new string[256];
	if (leader_faccion(playerid, 1)) format(string, sizeof string, "{2641FE}[LSPD] %s: {FFFFFF}%s", NombreJugador(playerid), params[0]);
	else if (leader_faccion(playerid, 2)) format(string, sizeof string, "{2641FE}[FBI] %s: {FFFFFF}%s", NombreJugador(playerid), params[0]);
	else if (leader_faccion(playerid, 3)) format(string, sizeof string, "{2641FE}[SAEM] %s: {FFFFFF}%s", NombreJugador(playerid), params[0]);
	else if (leader_faccion(playerid, 4)) format(string, sizeof string, "{2641FE}[SASD] %s: {FFFFFF}%s", NombreJugador(playerid), params[0]);
	else if (leader_faccion(playerid, 5)) format(string, sizeof string, "{2641FE}[GOB] %s: {FFFFFF}%s", NombreJugador(playerid), params[0]);
	SendAllICMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:impuesto(playerid, params[])
{
	if (!leader_faccion(playerid, 5)) return SendClientMessage(playerid, COLOR_GREY, "No eres líder del Gobierno.");
	if (sscanf(params, "i", params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "* /impuesto <cantidad>");
	if (params[0] < 0 || params[0] > 1500) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Valor entre 1 - 1.500");

	new string[160];
	TaxValue = params[0];
	SaveStuff();
	format(string, sizeof string, "{00ACFF}[GOBIERNO] {FFFFFF}Nuevo pago por impuesto. ($%s)", diner_coma(TaxValue));
	SendAllICMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:derechos(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	new string[180];
	format(string, sizeof string,"%s dice: Tienes derecho a guardar silencio, todo lo que diga puede usarse en su contra.",NombreJugador(playerid));
	ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	format(string, sizeof string,"%s dice: Tiene derecho a un abogado, si no puede pagar uno, se le asignará uno a costas del Estado.",NombreJugador(playerid));
	ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	format(string, sizeof string,"%s dice: Tiene derecho a una llamada por teléfono.",NombreJugador(playerid));
	ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	format(string, sizeof string,"%s dice: ¿De acuerdo señor?",NombreJugador(playerid));
	ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	return 1;
}

CMD:codigos(playerid)
{
	if (!member_faccion(playerid, 1, 2, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de LSPD y FBI.");
	SendClientMessage(playerid,COLOR_LIGHTBLUE, "[LSPD-FBI-SASD] Códigos de radio de uso IC. [Disponible más detallado en el foro (URL en /foro).]");
	SendClientMessage(playerid,COLOR_WHITE,"10-0 Despejado. || 10-1 Persecución en ... || 10-2 Sospechoso en... || 10-3 Detenido. || 10-4 Recibido, OK. || 10-5 Retransmitir mensaje.");
	SendClientMessage(playerid,COLOR_WHITE,"10-6 Ocupado. || 10-7 Precaución en... || 10-8 Procesar al detenido. || 10-9 Llamada atendida. || 10-10 Unidad libre de asignación.");
	SendClientMessage(playerid,COLOR_WHITE,"10-11 Robo en progreso. || 10-14 Requisa,Revisión,Revisar. || 10-15 Disturbio por problema civil en... || 10-16 Reten.");
	SendClientMessage(playerid,COLOR_WHITE,"10-17 Situación controlada. || 10-20 Lugar donde se encuentra. || 10-21 Teléfono || 10-22 Moto/vehículo || 10-23 Esperar un momento.");
	SendClientMessage(playerid,COLOR_WHITE,"10-24 Ponerse en contacto || 10-25 Terminar tarea. || 10-26 Cancelar la última información. || 10-30 No está de acuerdo a las reglas.");
	SendClientMessage(playerid,COLOR_WHITE,"10-31 Coche mal aparcado en... || 10-33 Mi vida corre peligro. || 10-34 Solicitud de ayuda. || 10-35 Información Clasificada.");
	SendClientMessage(playerid,COLOR_WHITE,"10-36 Candado policial. || 10-37 Solicitud de grúa en... || 10-38 Solicitud de Paramédicos en ... || 10-39 Solicitud de Bomberos.");
	SendClientMessage(playerid,COLOR_WHITE,"10-40 Situación actual... || 10-42 Accidente de tránsito en... || 10-44 Tengo un recado. || 10-48 Mal uso de la radio. || 10-53 Civil/Persona");
	SendClientMessage(playerid,COLOR_WHITE,"10-54 Civil/es fuertemente armado/s. || 10-57 Irse del lugar.. || 10-68 Enviar información. || 10-73 Patrullando en... || 10-74 Negativo...");
	SendClientMessage(playerid,COLOR_WHITE,"10-76 Voy a/me dirijo a... || 10-80 Nos vemos en... || 10-81 Solicitud de extracción (Que alguien me recoja) en... || 10-86 Agente disponible");
	return 1;
}

CMD:autorizar(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (!IsPlayerInRangeOfPoint(playerid, 2.5, 1559.655151,-1649.434326,4990.585937)) return SendClientMessage(playerid, COLOR_GRAD2, "¡No estás en el acceso a la prisión!");
	if (sscanf(params, "d", params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /autorizar <ID> [Este comando sirve para permitir el acceso a un civil a la prisión]");
	if (params[0] == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "¡No puedes autorizarte a ti mismo!");
	if (params[0] == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador no conectado.");
	if (!CercaDelMarica(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "El jugador está muy lejos.");

	new string[160];
	format(string, sizeof string, "%s te autorizó para entrar a la prisión.", NombreJugador(playerid));
	SendClientMessage(params[0], COLOR_YELLOW, string);
	format(string, sizeof string, "Has autorizado a %s para que pueda acceder a la prisión.", NombreJugador(params[0]));
	SendClientMessage(playerid, COLOR_YELLOW, string);
	Autorizado[params[0]] = 1;
	return 1;
}

CMD:robar247(playerid, params[])
{
	if (!member_faccion(playerid, 7, 8)) return SendClientMessage(playerid, COLOR_GREY, "No formas parte de una pandilla o mafia.");
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
	if (InfoPlayer[playerid][pSancionado] != 0) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar esto aquí.");
	new string[256];
	if (InfoPlayer[playerid][pLimiteRobos] >= 5) return SendClientMessage(playerid, COLOR_WHITE, "Ya robaste, espera al próximo PayDay.");
	if (!Tienda_247(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en el 24/7.");
	new robmoney = random(4000);
	GivePlayerCash(playerid, robmoney, "robo 24-7");
	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 4000); // Rob
	InfoPlayer[playerid][pLimiteRobos]++;
	guardar_int_mysql("cuentas", "LimiteRobos", InfoPlayer[playerid][pID], InfoPlayer[playerid][pLimiteRobos]);
	cmd_me(playerid, "amenaza con un arma al vendedor");
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2) && member_faccion(playerid2, 1, 2, 4))
	{
		format(string, sizeof string, "[CENTRAL] Se ha detectado el un 24-7 sospechoso %s.", NombreJugador(playerid));
		SendSplitMessage(playerid2, COLOR_RADIO, string);
	}
	format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) acaba de robar un 24-7.", NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:ayudacoinsvip(playerid)
{
	SendClientMessage(playerid, COLOR_GREEN, "*** Información sobre: Coins VIP ***");
	SendClientMessage(playerid, COLOR_WHITE, "Coins VIP pueden ser canjeadas por armas en el VIP Locker.");
	SendClientMessage(playerid, COLOR_WHITE, "Coins VIP pueden ser ganadas en eventos o regalos.");
	SendClientMessage(playerid, COLOR_WHITE, "Las armas cuestan de 1 a 5 coins VIP cada una.");
	SendClientMessage(playerid, COLOR_WHITE, "Si tu deseas dar coins VIP usa /darcoinsvip");
	SendClientMessage(playerid, COLOR_WHITE, "Si tu deseas vender coins VIP usa /vendercoinsvip");
	return 1;
}

CMD:infofacciones(playerid)
{
	SendClientMessage(playerid, COLOR_RED, "[IMPORTANTE] Información respecto a facciones/familias. [Leer con atención]");
	SendClientMessage(playerid, COLOR_WHITE, "1. Hay 3 encargados, una persona se legales, otra de ilegales y otra de familias.");
	SendClientMessage(playerid, COLOR_WHITE, "Comunicate con el administrador correcto para que revise tu postulación en el foro.");
	SendClientMessage(playerid, COLOR_WHITE, "2. Listado de facciones en /facciones, cada facción puede tener como máximo 2 líderes.");
	SendClientMessage(playerid, COLOR_WHITE, "Los lideres están obligados a permanecer como mínimo 7 días en la facción. (Excepciones)");
	SendClientMessage(playerid, COLOR_WHITE, "3. Las facciones pueden ser limpiadas por el encargado cuando llegen a 3/3 ADV.");
	SendClientMessage(playerid, COLOR_WHITE, "Una vez superen el número de advertencias se saca a todo miembro de la facción.");
	SendClientMessage(playerid, COLOR_WHITE, "4. Despidos/Contrataciones se realizan con rol obligatorio, sea por abandono vuluntario o PK.");
	SendClientMessage(playerid, COLOR_WHITE, "En el foro se dispone de toda la información acerca de las facciones. WEB: www.cr-rp.com");
	SendClientMessage(playerid, COLOR_WHITE, "[NEW] Podrán hacerse cambios de liderazgo de manera IC sin necesidad de ser limpiada.");
	return 1;
}
CMD:infofacc(playerid) return cmd_infofacciones(playerid);

CMD:infoad(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_RED, "[IMPORTANTE] Requísitos al enviar un anuncio por /ad(s). [Leer con atención]");
		SendClientMessage(playerid, COLOR_WHITE, "1. No se permiten expresiones OOC, tipo: faccion, admin y similares.");
		SendClientMessage(playerid, COLOR_WHITE, "2. Todo término de rol está prohibido, sea MG, PG u otros.");
		SendClientMessage(playerid, COLOR_WHITE, "3. Prohibido anuncios que inciten al PG, publicidad de mafias o servicios ilegales.");
		SendClientMessage(playerid, COLOR_WHITE, "4. El Tag -EXTRA- es exclusivo para los miembros de SA News (Online), con su CMD propio.");
		SendClientMessage(playerid, COLOR_WHITE, "5. Los precios no pueden seguir el formaro 10K, 5KK. En su lugar usar 5 mil dólares por ejemplo.");
		SendClientMessage(playerid, COLOR_WHITE, "6. Queda totalmente prohibido la búsqueda de personas, para ello existe FBI, es su rol.");
		SendClientMessage(playerid, COLOR_WHITE, "7. Usar este canal para insultar llevará un jail directo por IOOC vía /ad.");
		SendClientMessage(playerid, COLOR_WHITE, "8. Cualquier información que no sea IC no será válido como AD, para dudas usen /duda [Texto].");
		SendClientMessage(playerid, COLOR_WHITE, " ");
	}
	return 1;
}

CMD:editargps(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[128], slot;
	if(sscanf(params, "ds", slot, params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editargps (GPS Slot) (String)");
	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editargps (GPS Slot) (Mensaje)");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) movió la ubicación %d del GPS.", NombreOriginal(playerid), playerid, slot);
	SendAdminMessage(0xFFFFFFFF, string);
	new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
	InfoGPS[slot][uPosicion][0] = x;
	InfoGPS[slot][uPosicion][1] = y;
	InfoGPS[slot][uPosicion][2] = z;
	alm(InfoGPS[slot][uNombre], params);
	saveUbicaciones(slot);
	return 1;

}

CMD:licencias(playerid, params[])
{
	if (InfoPlayer[playerid][pSancionado] != 0) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás en prisión.");
	new car[32], fly[32], boat[32], gun[32], playerid2, string[320];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /licencias (JugadorID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (!CercaDelMarica(4.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Estás demasiado lejos del jugador.");
	if (InfoPlayer[playerid][pLicencia][0] != 0) car = "{2CC705}Sí{EBEBEB}";
	else car = "{FC2710}No{EBEBEB}";
	if (InfoPlayer[playerid][pLicencia][1] != 0) boat = "{2CC705}Sí{EBEBEB}";
	else boat = "{FC2710}No{EBEBEB}";
	if (InfoPlayer[playerid][pLicencia][2] != 0) fly = "{2CC705}Sí{EBEBEB}";
	else fly = "{FC2710}No{EBEBEB}";
	if (InfoPlayer[playerid][pLicencia][3] != 0) gun = "{2CC705}Sí{EBEBEB}";
	else gun = "{FC2710}No{EBEBEB}";
	format(string, sizeof string, "LICENCIAS LEGALES | %s (%d)", NombreJugador(playerid), InfoPlayer[playerid][pDocumento]);
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "Conducir: %s - Vuelo: %s - Armas: %s - Navegación: %s", car, fly, gun, boat);
	SendClientMessage(playerid2, 0xEBEBEBFF, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "muestra sus licencias a %s", NombreJugador(playerid2));
	if (playerid != playerid2) cmd_me(playerid, string);
	return 1;
}
CMD:licencia(playerid, params[]) return cmd_licencias(playerid, params);
CMD:mostrarlicencias(playerid, params[]) return cmd_licencias(playerid, params);

CMD:dni(playerid, params[])
{
	if (InfoPlayer[playerid][pSancionado] != 0) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás en prisión.");
	new gformat[170], playerid2, sex[18], otext[36];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /dni (JugadorID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (!CercaDelMarica(4.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador muy lejos.");
	if (InfoPlayer[playerid][pSexo] == 1) sex = "Masculino";
	else sex = "Femenino";
	if (InfoPlayer[playerid][pCiudad] == 2) otext = "San Fierro";
	else if (InfoPlayer[playerid][pCiudad] == 1) otext = "Los Santos";
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, "PAPELES LEGALES | DOCUMENTO DE NACIONALIDAD");
	format(gformat, sizeof gformat, "Nombre completo: %s - Sexo: %s - Edad: %d", NombreJugador(playerid), sex, InfoPlayer[playerid][pEdad]);
	SendClientMessage(playerid2, 0xEBEBEBFF, gformat);
	format(gformat, sizeof gformat, "Nacionalidad: %s - Documento: %d", otext, InfoPlayer[playerid][pDocumento]);
	SendClientMessage(playerid2, 0xEBEBEBFF, gformat);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
	format(gformat, sizeof gformat, "le muestra su documento a %s", NombreJugador(playerid2));
	if (playerid != playerid2) cmd_me(playerid, gformat);
	return 1;
}
CMD:mostrardni(playerid, params[]) return cmd_dni(playerid, params);

CMD:dnifalso(playerid, params[])
{
	if (InfoPlayer[playerid][pFalsoDocumento] == 0) return SendClientMessage(playerid, COLOR_GREY, "No posees un documento falso.");
	if (InfoPlayer[playerid][pSancionado] != 0) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás en prisión.");
	new gformat[170], playerid2, sex[18], otext[36];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /dni (JugadorID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (!CercaDelMarica(4.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador muy lejos.");
	if (InfoPlayer[playerid][pSexo] == 1) sex = "Masculino";
	else sex = "Femenino";
	if (InfoPlayer[playerid][pCiudad] == 2) otext = "San Fierro";
	else if (InfoPlayer[playerid][pCiudad] == 1) otext = "Las Venturas";
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, "PAPELES LEGALES | DOCUMENTO DE NACIONALIDAD");
	format(gformat, sizeof gformat, "Nombre completo: %s - Sexo: %s - Edad: %d", InfoPlayer[playerid][pFalsoNombre], sex, InfoPlayer[playerid][pEdad]);
	SendClientMessage(playerid2, 0xEBEBEBFF, gformat);
	format(gformat, sizeof gformat, "Nacionalidad: %s - Documento: %d", otext, InfoPlayer[playerid][pFalsoDocumento]);
	SendClientMessage(playerid2, 0xEBEBEBFF, gformat);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
	format(gformat, sizeof gformat, "le muestra su documento a %s", NombreJugador(playerid2));
	if (playerid != playerid2) cmd_me(playerid, gformat);
	return 1;
}
CMD:mostrardnifalso(playerid, params[]) return cmd_dnifalso(playerid, params);

CMD:reportarbug(playerid)
{
	if (InfoPlayer[playerid][pBlockBug] != 0) return SendClientMessage(playerid, COLOR_RED, "[ATENCION]:{FFFFFF} No puedes reportar bugs, estás bloqueado del comando.");
	new string[190];
	if (!CheckTimer(180, TimerReportarBug))
	{
		TimerReportarBug = gettime();
		Dialog_Show(playerid, REBUG, DIALOG_STYLE_INPUT, "{FFBF00}Reportar Bug", "{EBEBEB}Escribe exactamente el bug que has encontrado, se quedará guardado en la base de datos\ncuando el equipo de desarrolladores lo revise, tratarán de solucionar el bug lo más rapido posible.\n\nGracias por reportar.", "Reportar", "Salir");
	}
	else
	{
		format(string, sizeof string, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(180, TimerReportarBug));
		SendClientMessage(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

Dialog:REBUG(playerid, response, listitem, inputtext[])
{
	if (!response) return SendClientMessage(playerid, COLOR_WHITE, "No dudes en reportar un bug si lo encuentras.");
	SendClientMessage(playerid, COLOR_YELLOW, "Gracias por reportar el bug, intentaremos arreglarlo lo más pronto posible.");
	new string[190];
	format(string, sizeof string, "{FFBF00}[BugReport]{FFFFFF} %s(%d) reportó: %s", NombreOriginal(playerid), playerid, inputtext);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s reportó: %s", NombreDeCuenta(playerid), inputtext);
	Log("LOGS/reportbug.log", string);
	return 1;
}

CMD:retips(playerid)
{
	Dialog_Show(playerid, ShowInvalido,DIALOG_STYLE_MSGBOX,"{FFBF00}Tips para Reportar","{FFFFFF}\n- Reporta lo que necesitas, no a quien necesitas.\n- Sé especifico y claro, reporta exactamente lo que necesitas.\n- No hacer falsos reportes [Advertencia].\n- No llames administradores.\n- Reporta sólo asuntos, In Game [IG].","Cerrar", "");
	return 1;
}

CMD:reply(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /reply (texto)");
	new string[128], reportid = -1;
	Loop(i, MAX_REPORTS, 0)
	{
		if (Reports[i][ReportFrom] == playerid && Reports[i][CheckingReport] != 999)
		{
			reportid = i;
		}
	}
	if (reportid == -1) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un reporte ahora mismo.");
	if (!IsPlayerConnectedEx(Reports[reportid][CheckingReport])) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	format(string, sizeof string, "{FF0000}[RID]{FFFFFF} %s(ID: %d): %s", NombreOriginal(playerid), playerid, params);
	SendClientMessage(Reports[reportid][CheckingReport], COLOR_YELLOW, string);
	format(string, sizeof string, "{FFBF00}Respuesta enviada{FFFFFF} a %s: %s", NombreOriginal(Reports[reportid][CheckingReport]), params);
	SendClientMessage(playerid,  COLOR_YELLOW, string);
	return 1;
}

CMD:limpiarreportes(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	new string[128];
	ClearReports();
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha limpiado todos los reportes activos.", NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:re(playerid, params[])
{
	if (InfoPlayer[playerid][pNivelMuteoReport] != 0) return Dialog_Show(playerid,ShowInvalido,DIALOG_STYLE_MSGBOX,"{F95322}Reporte Bloqueado.","{FFFFFF}\n- Estas bloqueado de los reportes, tienes que esperar.\n- Reporta lo que necesitas, no a quien necesitas.\n- Se especifico y claro, reporta exactamente lo que necesitas.\n- No hacer falsos reportes [Advertencia].\n- No llames administradores.\n- Reporta sólo asuntos, In Game [IG].","Cerrar", "");
	if (AdminOnlineCheck() == 0) return SendClientMessage(playerid, COLOR_WHITE, "No hay {FF0000}administradores online{FFFFFF} en este momento, intenta más tarde.");
	if (JustReported[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Espera 60 segundos para otro reporte.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /re (REPORTE)");

	SendReportToQue(playerid, params);
	SendClientMessage(playerid, COLOR_WHITE, "Tu reporte fue enviado al equipo de{FFBF00} administración{FFFFFF} en breve te ayudarán.");
	JustReported[playerid] = 60;
	//if(InfoPlayer[playerid][pBanco] >= 50000) InfoPlayer[playerid][pBanco] -= 1000; //removido by edinsonwalker
	return 1;
}

CMD:creporte(playerid)
{
	Loop(i, MAX_REPORTS, 0) if (Reports[i][ReportFrom] == playerid)
	{
		Reports[i][ReportFrom] = 999;
		Reports[i][BeingUsed] = 0;
		Reports[i][TimeToExpire] = 0;
		return SendClientMessage(playerid, COLOR_WHITE, "Cancelaste el reporte satisfactoriamente." );
	}
	SendClientMessage(playerid, COLOR_GRAD2, "Actualmente no tienes reportes pendientes.");
	return 1;
}

CMD:reportes(playerid)
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[320];
	SendClientMessage(playerid, COLOR_GREEN, "REPORTES:");
	Loop(id, MAX_REPORTS, 0) if (Reports[id][BeingUsed] == 1)
	{
		new playerid2 = Reports[id][ReportFrom];
		format(string, sizeof string, "[{FF9B6A}%s(ID: %d) | RID: %d{FFFFFF}] %s", NombreOriginal(playerid2), playerid2, id, Reports[id][Report]);
		SendSplitMessage(playerid, 0xFFFFFFFF, string);
	}
	return 1;
}

CMD:ar(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[180], reportid;
	if (sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /ar (Reporte ID)");
	if (reportid < 0 || reportid > 50) { SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}[AdmCmd]:{FFFFFF} ID del reporte no debe ser menor de 0 ni mayor de 499!"); return 1; }
	if (Reports[reportid][BeingUsed] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Ese RID ya fue atendido.");
	if (!IsPlayerConnectedEx(Reports[reportid][ReportFrom]))
	{
		SendClientMessage(playerid, COLOR_GREY, "El que reportó se ha desconectado !");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		return 1;
	}
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) aceptó el reporte de %s (ID: %i, RID: %i).", NombreOriginal(playerid), playerid, NombreOriginal(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s ha aceptado tu reporte, Puedes usar {A2DC35}/reply{FFFFFF} para explicar tu reporte. [T: 60 Seg.]", NombreOriginal(playerid));
	SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
	Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
	Reports[reportid][CheckingReport] = playerid;
	Reports[reportid][BeingUsed] = 0;
	Reports[reportid][TimeToExpire] = 0;
	alm(Reports[reportid][Report], "None");
	return 1;
}

CMD:rr(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[180], reportid;
	if (sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"USE: /rr [Report ID]");
	if (reportid < 0 || reportid > 499) { SendClientMessage(playerid, COLOR_WHITE, "ID del reporte no debe ser menor de 0 ni mayor de 499!"); return 1; }
	if (Reports[reportid][BeingUsed] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese RID ya fue atendido!");
	if (!IsPlayerConnectedEx(Reports[reportid][ReportFrom]))
	{
		SendClientMessage(playerid, COLOR_GREY, "El que reportó se ha desconectado !");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		return 1;
	}
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) rechazó el reporte de %s.", NombreOriginal(playerid), playerid, NombreOriginal(Reports[reportid][ReportFrom]));
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s marcó tu reporte como invalido. Usa y lee muy bien {FF0000}/retips{FFFFFF} antes de reportar.", NombreOriginal(playerid));
	SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
	Reports[reportid][ReportFrom] = 999;
	Reports[reportid][BeingUsed] = 0;
	Reports[reportid][TimeToExpire] = 0;
	alm(Reports[reportid][Report], "None");
	return 1;
}

CMD:mps(playerid)
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	if (See_MP[playerid] == 1)
	{
		See_MP[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Notificación de respuestas administrativas desactivada.");
	}
	else
	{
		See_MP[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Notificación de respuestas administrativas activada.");
	}
	return 1;
}
CMD:vermps(playerid) return cmd_mps(playerid);

CMD:verwalkie(playerid)
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (See_FRC[playerid] == 1)
	{
		See_FRC[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Notificación del uso de la radio portátil entre usuarios desactivada.");
	}
	else
	{
		See_FRC[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Notificación del uso de la radio portátil entre usuarios activada.");
	}
	return 1;
}

CMD:tipduda(playerid)
{
	if (GetPlayerAdmin(playerid, 1) != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}Tips para responder una duda.");
		SendClientMessage(playerid, COLOR_WHITE, "Sé claro y directo, simplemente una respuesta clara");
		SendClientMessage(playerid, COLOR_WHITE, "No es necesaria una conversación con el usuario, esto es sencillo, responde lo necesario.");
		SendClientMessage(playerid, COLOR_WHITE, "Termina una y atiende otra, no te apresures.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}Tips para enviar una duda.");
		SendClientMessage(playerid, COLOR_WHITE, "Sé claro y directo con el administrador, no necesitas conversar con él.");
		SendClientMessage(playerid, COLOR_WHITE, "Si no te dieron una respuesta clara tienes todo el derecho de mandar otra duda.");
		SendClientMessage(playerid, COLOR_WHITE, "Usa el CMD /soporte para buscar la respuesta de tu duda manualmente si lo deseas.");
	}
	return 1;
}

CMD:darvida(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, hpset, string[180];
	if (sscanf(params, "dd", playerid2, hpset)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darvida (PlayerID) (HP)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid,  COLOR_WHITE, "ID Inválida");
	dar_vida(playerid2, hpset);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) estableció la salud de %s(%d) a %dHP.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, hpset);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:darchaleco(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, hpset, string[180];
	if (sscanf(params, "dd", playerid2, hpset)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darchaleco (PlayerID) (Chaleco)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid,  COLOR_WHITE, "ID Inválida");
	dar_chaleco(playerid2, hpset);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) estableció el chaleco de %s(%d) a %d.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, hpset);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:darstat(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (sscanf(params, "ddd", params[0], params[1], params[2]))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darstat (playerid/nombre) (Numero) (valor)");
		SendClientMessage(playerid, COLOR_GRAD1, "1 Nivel | 2 Banco$ | 3 Número teléfono | 4 Experiencia | 5 Casa1 | 6 Casa2 | 7 Drunk | 8 Estilo de pelea");
		SendClientMessage(playerid, COLOR_GRAD1, "9 Materiales | 10 Edad | 11 NMute | 12 Adertencias | 13 Horas jugando | 14 Jails ooc | 15 Negocio1");
		SendClientMessage(playerid, COLOR_GRAD1, "16 Habilidad armero | 17 Negocio2 | 18 Total AD Mutes | 19 DiaVIP | 20 MesVIP");
		return 1;
	}
	new string[170];
	if (!IsPlayerConnectedEx(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "ID Inválida.");
	switch (params[1])
	{
		case 1:
		{
			//medida de seguridad 24/02/2020
			if (params[2] >= 100 && GetPlayerAdmin(playerid, 10) == 0)
			{
				format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó dar nivel %d a %s(%d), por ello fue baneado con IP.", NombreOriginal(playerid), playerid, params[2], NombreOriginal(params[0]), params[0]);
				SendAdminMessage(0xFFFFFFFF, string);
				guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid][pID], 2);
				guardar_int_mysql("cuentas", "JotoOtaku", InfoPlayer[playerid][pID], 0);
				guardar_int_mysql("cuentas", "EncFac", InfoPlayer[playerid][pID], 0);
				SetTimerEx("TimerBANIP",1000,false,"d",playerid);
				return 1;
			}
			//
			InfoPlayer[params[0]][pNivel] = params[2];
			SetPlayerScore(params[0], InfoPlayer[params[0]][pNivel]);
			format(string, sizeof string, "Nivel: %d", params[2]);
			guardar_int_mysql("cuentas", "Nivel", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pNivel]);
 		}
		case 2:
		{
			InfoPlayer[params[0]][pBanco] = params[2];
			format(string, sizeof string, "Cuenta bancaria: $%d", params[2]);
			guardar_int_mysql("cuentas", "BanescoOwO", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pBanco]);
 		}
		case 3:
		{
			InfoPlayer[params[0]][pTelefono] = params[2];
			format(string, sizeof string, "Teléfono: #%d", params[2]);
			guardar_int_mysql("cuentas", "Telefono", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pTelefono]);
		}
		case 4:
		{
			InfoPlayer[params[0]][pExperiencia] = params[2];
			format(string, sizeof string, "Experiencia: %d", params[2]);
			guardar_int_mysql("cuentas", "Experiencia", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pExperiencia]);
		}
		case 5:
		{
			InfoPlayer[params[0]][pCasa1] = params[2];
			format(string, sizeof string, "Casa 1: %d", params[2]);
			guardar_int_mysql("cuentas", "Casa", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pCasa1]);
		}
		case 6:
		{
			InfoPlayer[params[0]][pCasa2] = params[2];
			format(string, sizeof string, "Casa 2: %d", params[2]);
			guardar_int_mysql("cuentas", "Casa2", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pCasa2]);
		}
		case 7:
		{
			PlayerDrunk[params[0]] = params[2];
			format(string, sizeof string, "Drunk: %d", params[2]);
			SetPlayerDrunkLevel(playerid, params[2]);
		}
		case 8:
		{
			InfoPlayer[params[0]][pEstiloPelea] = params[2];
			format(string, sizeof string, "Tipo Lucha: %d", params[2]);
			guardar_int_mysql("cuentas", "EstiloPelea", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pEstiloPelea]);
		}
		case 9:
		{
			InfoPlayer[params[0]][pMateriales] = params[2];
			format(string, sizeof string, "Materiales: %d", params[2]);
			guardar_int_mysql("cuentas", "Materiales", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pMateriales]);
		}
		case 10:
		{
			InfoPlayer[params[0]][pEdad] = params[2];
			format(string, sizeof string, "Edad: %d", params[2]);
			guardar_int_mysql("cuentas", "Edad", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pEdad]);
		}
		case 11:
		{
			InfoPlayer[params[0]][pDudaBloqueado] = params[2];
			format(string, sizeof string, "Duda Bloqueado: %d", params[2]);
			guardar_int_mysql("cuentas", "DudaBloqueado", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pDudaBloqueado]);
		}
		case 12:
		{
			InfoPlayer[params[0]][pAdvertencia] = params[2];
			format(string, sizeof string, "Advertencias: %d", params[2]);
			guardar_int_mysql("cuentas", "Advertencia", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pAdvertencia]);
		}
		case 13:
		{
			InfoPlayer[params[0]][pHorasOn] = params[2];
			format(string, sizeof string, "Horas jugando: %d", params[2]);
			guardar_int_mysql("cuentas", "HorasOn", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pHorasOn]);
		}
		case 14:
		{
			InfoPlayer[params[0]][pJails] = params[2];
			format(string, sizeof string, "Jails: %d", params[2]);
			guardar_int_mysql("cuentas", "Jails", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pJails]);
		}
		case 15:
		{
			InfoPlayer[params[0]][pNegocio1] = params[2];
			format(string, sizeof string, "Negocio 1: %d.", params[2]);
			guardar_int_mysql("cuentas", "Negocio", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pNegocio1]);
		}
		case 16:
		{
			InfoPlayer[params[0]][pHabilidad][0] = params[2];
			format(string, sizeof string, "habilidad Guns: %d", params[2]);
			guardar_int_mysql("cuentas", "Habilidad1", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pHabilidad][0]);
		}
		case 17:
		{
			InfoPlayer[params[0]][pNegocio2] = params[2];
			format(string, sizeof string, "Negocio 2: %d.", params[2]);
			guardar_int_mysql("cuentas", "Negocio2", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pNegocio2]);
		}
		case 18:
		{
			InfoPlayer[params[0]][pAdvAD] = params[2];
			format(string, sizeof string, "Total Ad Mutes: %d.", params[2]);
			guardar_int_mysql("cuentas", "AdvAD", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pAdvAD]);
		}
		case 19:
		{
			InfoPlayer[params[0]][pDiaVIP] = params[2];
			format(string, sizeof string, "Dia VIP: %d.", params[2]);
			guardar_int_mysql("cuentas", "DiaVIP", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pDiaVIP]);
		}
		case 20:
		{
			InfoPlayer[params[0]][pMesVIP] = params[2];
			format(string, sizeof string, "Mes VIP: %d.", params[2]);
			guardar_int_mysql("cuentas", "MesVIP", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pMesVIP]);
		}
		default: return SendClientMessage(playerid, COLOR_WHITE, "Código inválido!");
	}
	SendClientMessage(playerid, COLOR_GRAD2, string);
	return 1;
}

CMD:verstat(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /vercuenta (JugadorID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");

	Show_cuenta(playerid, playerid2);
	return 1;
}
CMD:vercuenta(playerid, params[]) return cmd_verstat(playerid, params);
CMD:check(playerid, params[]) return cmd_verstat(playerid, params);

CMD:cambiarint(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (sscanf(params, "dd", params[0],params[1])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /cambiarint (PlayerID) (Interior)");
	if (!IsPlayerConnectedEx(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	new string[195];
	SetPlayerInterior(params[0], params[1]);
	format(string, sizeof string, "Cambiaste el interior (%d) de %s.", params[1], NombreOriginal(params[0]));
	SendClientMessage(playerid, COLOR_GRAD1, string);
	format(string, sizeof string, "%s te cambio el interior (%d).", NombreOriginal(playerid), params[1]);
	SendClientMessage(params[0], COLOR_GRAD1, string);
	return 1;
}
CMD:editarint(playerid, params[]) return cmd_cambiarint(playerid, params);
CMD:changeint(playerid, params[]) return cmd_cambiarint(playerid, params);

CMD:cambiarvw(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (sscanf(params, "dd", params[0],params[1])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /cambiarvw (PlayerID) (VirtualWorld)");
	if (!IsPlayerConnectedEx(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	new string[195];
	SetPlayerVirtualWorld(params[0], params[1]);
	format(string, sizeof string, "Cambiaste el virtualworld (%d) de %s.", params[1], NombreOriginal(params[0]));
	SendClientMessage(playerid, COLOR_GRAD1, string);
	format(string, sizeof string, "%s te cambio el virtualworld (%d).", NombreOriginal(playerid), params[1]);
	SendClientMessage(params[0], COLOR_GRAD1, string);
	return 1;
}
CMD:editarvw(playerid, params[]) return cmd_cambiarvw(playerid, params);
CMD:changevw(playerid, params[]) return cmd_cambiarvw(playerid, params);

CMD:autovw(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170];
	if (sscanf(params, "dd", params[0],params[1])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /autovw (VehicleID) (VirtualWorld)");
	if (!GetVehicleModel(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Vehículo inválido, intenta con otra ID.");
	SetVehicleExVirtualWorld(params[0], params[1]);
	format(string, sizeof string, "VirtualWorld del vehículo %d, ahora es %d.", params[0], params[1]);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	return 1;
}

CMD:autoint(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170];
	if (sscanf(params, "dd", params[0],params[1])) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /autoint (VehicleID) (Interior)");
	if (!GetVehicleModel(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Vehículo inválido, intenta con otra ID.");
	LinkVehicleToInterior(params[0], params[1]);
	format(string, sizeof string, "Interior del vehículo %d, ahora es %d.", params[0], params[1]);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	return 1;
}

CMD:warn(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (!CheckTimer(60, TimerCwarn[playerid]))
	{
		new string[190], reason[64];
		if (sscanf(params, "ds[64]", params[0], reason)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /warn (PlayerID)");
		if (!IsPlayerConnectedEx(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
		if (GetPlayerAdmin(params[0], 1) != 0) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en miembros de la administración.");
		if (InfoPlayer[params[0]][pAdvertencia] == 3)
		{
			new ip[32];
			GetPlayerIp(params[0],ip,sizeof(ip));
			InfoPlayer[params[0]][pBaneo] = 2;
			InfoPlayer[params[0]][pAdvertencia]= 0;
			format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) fue baneado automaticamente. Razón: Multiples advertencias.", NombreOriginal(params[0]), params[0]);
			SendAllMessage(0xFFFFFFFF, string);
			AddBan(ip);
			Kick(params[0]);
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Advertencia = '%d', OtakuN_N = '%d' WHERE ID = '%d'", InfoPlayer[params[0]][pAdvertencia], InfoPlayer[params[0]][pBaneo], InfoPlayer[params[0]][pID]);
			mysql_tquery(DBcreative, string);
			return 1;
		}
		InfoPlayer[params[0]][pAdvertencia]++;
		guardar_int_mysql("cuentas", "Advertencia", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pAdvertencia]);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) dió una advertencia a %s(%d), razón: %s",NombreOriginal(playerid), playerid, NombreOriginal(params[0]), params[0], reason);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s te dió una advertencia [%d/3], razón: %s (TIP: A la 3ra serás baneado automaticamente)",NombreOriginal(playerid), InfoPlayer[params[0]][pAdvertencia],reason);
		SendClientMessage(params[0], COLOR_LIGHTRED, string);
		//seguridad 24/02/2020
		CountWarn[playerid]++;
		if (CountWarn[playerid] == 10)
		{
			TimerCwarn[playerid] = gettime();
			CountWarn[playerid] = 0;
		}
	}
	else
	{
		new string[240];
		format(string, sizeof string, "Debes esperar %d segundos para usar este comando.", CheckTimer(60, TimerCwarn[playerid]));
		SendClientMessage(playerid, 0xEBEBEBFF, string);
	}
	return 1;
}

CMD:nowarn(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], reason[64];
	if (sscanf(params, "ds[64]", params[0], reason)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /warn (PlayerID)");
	if (!IsPlayerConnectedEx(params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (GetPlayerAdmin(params[0], 1) != 0) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en miembros de la administración.");
	if (InfoPlayer[params[0]][pAdvertencia] <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "Esta persona no tiene advertencias.");
	InfoPlayer[params[0]][pAdvertencia]--;
	guardar_int_mysql("cuentas", "Advertencia", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pAdvertencia]);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) le restó una advertencia a %s(%d), razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(params[0]), params[0], reason);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s te quitó una advertencia [%d/3], razón: %s.",NombreOriginal(playerid), InfoPlayer[params[0]][pAdvertencia],reason);
	SendClientMessage(params[0], COLOR_LIGHTRED, string);
	return 1;
}

CMD:staff(playerid) return cmd_admins(playerid);
CMD:admins(playerid)
{
	if (AdminOnlineCheck() == 0) return SendClientMessage(playerid, COLOR_WHITE, "No hay {FF0000}administradores online{FFFFFF} en este momento, intenta más tarde.");
	new string[128];
	SendClientMessage(playerid, 0x00CC00FF, "Miembros de la administración conectados:");
	foreach(Player, playerid2) if (GetPlayerAdmin(playerid2, 1) != 0)
	{
		format(string, sizeof string, "%s - Rango: {FFBF00}%s (%d)", NombreOriginal(playerid2), GetAdminName(playerid2), InfoPlayer[playerid2][pAdmin]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:a(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /a (Texto)");
	new string[256];
	format(string, sizeof string, "{FFBF00}** %s {FFFFFF}%s: %s", GetAdminName(playerid), NombreOriginal(playerid), params);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:ir(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, gformat[160];
	if (sscanf(params, "u", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /ir (PlayerID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	new Float:p_x, Float:p_y, Float:p_z;
	GetPlayerPos(playerid2, p_x, p_y, p_z);
	new interior = GetPlayerInterior(playerid2);
	new vw = GetPlayerVirtualWorld(playerid2);
	SetPosEx(playerid, p_x, p_y, p_z, 0, interior, vw, 1);
	format(gformat, sizeof gformat, "Fuiste hasta la posición de %s.", NombreOriginal(playerid2));
	SendClientMessage(playerid, COLOR_WHITE, gformat);
	return 1;
}
CMD:gotoplayer(playerid, params[]) return cmd_ir(playerid, params);
CMD:irplayer(playerid, params[]) return cmd_ir(playerid, params);

CMD:traer(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, gformat[160];
	if (sscanf(params, "u", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /traer (PlayerID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (InfoPlayer[playerid2][pSancionado] != 0) return SendClientMessage(playerid, COLOR_GRAD2, "Información: No puedes sacar a gente de jail, usa el CMD /ir o /liberar.");
	if (GetPlayerAdmin(playerid2, 10) != 0) return SendClientMessage(playerid, COLOR_GRAD2, "No puedes hacer esto con propietarios o programadores.");
	new Float:p_x, Float:p_y, Float:p_z;
	GetPlayerPos(playerid, p_x, p_y, p_z);
	new interior = GetPlayerInterior(playerid);
	new vw = GetPlayerVirtualWorld(playerid);
	SetPosEx(playerid2, p_x, p_y, p_z, 0, interior, vw, 1);
	format(gformat, sizeof gformat, "Llevaste hasta tu posición a %s.", NombreOriginal(playerid2));
	SendClientMessage(playerid, COLOR_WHITE, gformat);
	return 1;
}

CMD:limpiarchat(playerid)
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	CleanScreen();
	new string[170];
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) limpió el chat completo.", NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:leetodo(playerid)
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (!BigEar[playerid])
	{
		BigEar[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Chat global activado.");
	}
	else
	{
		BigEar[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Chat global desactivado.");
	}
	return 1;
}

CMD:slap(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, altura,  Float:slx, Float:sly, Float:slz, string[128];
	if (sscanf(params, "dd", playerid2, altura)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /slap (PlayerID) (Altura)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	GetPlayerPos(playerid2, slx, sly, slz);
	SetPlayerPos(playerid2, slx, sly, slz+altura);
	PlayerPlaySound(playerid2, 1130, slx, sly, slz+altura);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) golpeó a %s(%d). Altura: %d",NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, altura);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s(%d) te golpeó a una altura: %d", NombreOriginal(playerid), playerid, altura);
	SendClientMessage(playerid2, COLOR_YELLOW, string);
	return 1;
}

CMD:darskin(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, skin, string[128];
	if (sscanf(params, "dd", playerid2, skin)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /darskin (PlayerID) (SkinID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (IsValidSkin(skin) == 0) return SendClientMessage(playerid, COLOR_GREY, "Debes de escoger una id de skin entre 1 y 311.");
	GivePlayerSkin(playerid2, skin);
	format(string, sizeof string, "%s te cambió el skin, ID SKIN: %d.", NombreOriginal(playerid), skin);
	SendClientMessage(playerid2, COLOR_WHITE, string);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) cambió el skin(%d) de %s(%d).", NombreOriginal(playerid), playerid, skin, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:limpiarsuelo(playerid)
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new count = 0, string[180];
	Loop(id, sizeof InfoSuelo, 0) if (InfoInventario[InfoSuelo[id][DropID]][IDArma] != 0)
	{
		count++;
		SueloTime(id);
	}
	if (count == 0) return SendClientMessage(playerid, 0xebebebff, "No hay ningún objeto tirado en todo el servidor.");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) limpió %d armas del suelo.", NombreOriginal(playerid), playerid, count);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:verarmas(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, dialog[1024], dialog2[256], count = 0;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /verarmas (PlayerID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	format(dialog2, sizeof dialog2, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) usó /verarmas %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, dialog2);
	//indice
	Loop(x, 10, 0)
	{
		if (InfoPlayer[playerid2][pBolsillo][x] != 0)
		{
			format(dialog2, sizeof dialog2, "{FFFFFF}%s\n", slot_objeto(InfoPlayer[playerid2][pBolsillo][x], InfoPlayer[playerid2][pBolsilloCant][x])), count++;
			strcat(dialog, dialog2);
		}
	}
	//barra espacio
	if (count != 0) strcat(dialog, "{8000FF}--------------------\n");
	//mano derecha
	if (InfoPlayer[playerid2][pManoDerecha] != 0)
	{
		format(dialog2, sizeof dialog2, "{FFFFFF}Mano derecha: %s\n", slot_objeto(InfoPlayer[playerid2][pManoDerecha], InfoPlayer[playerid2][pManoDerechaCant])), count++;
		strcat(dialog, dialog2);
	}
	//mano izquierda
	if (InfoPlayer[playerid2][pManoIzquierda] != 0)
	{
		format(dialog2, sizeof dialog2, "{FFFFFF}Mano izquierda: %s\n", slot_objeto(InfoPlayer[playerid2][pManoIzquierda], InfoPlayer[playerid2][pManoIzquierdaCant])), count++;
		strcat(dialog, dialog2);
	}
	//espalda
	if (InfoPlayer[playerid2][pEspalda] != 0)
	{
		format(dialog2, sizeof dialog2, "{FFBF00}%s:{FFFFFF} %s\n", GetParteToy(playerid2, 7), slot_objeto(InfoPlayer[playerid2][pEspalda], InfoPlayer[playerid2][pEspaldaCant])), count++;
		strcat(dialog, dialog2);
	}
	//formato
	format(dialog2, sizeof dialog2, "{CCCCCC}Bolsillos de {FFBF00}%s", NombreJugador(playerid2));
	//show_dialog
	if (count == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, dialog2, "{CCCCCC}No tiene nada", "Cerrar", "");
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, dialog2, dialog, "Cerrar", "");
	return 1;
}

CMD:limpiararmas(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, string[256], count = 0, query[465];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /limpiararmas (PlayerID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	Loop(x, 10, 0) if (InfoInventario[InfoPlayer[playerid2][pBolsillo][x]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pBolsillo][x] = 0;
		InfoPlayer[playerid2][pBolsilloCant][x] = 0;
		count++;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = 0, Cantidad_bolsillo_%d = 0 WHERE ID = '%d'", x+1, x+1, InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pManoIzquierda]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pManoIzquierda] = 0;
		InfoPlayer[playerid2][pManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid2, 8);
		count++;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pManoDerecha]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pManoDerecha] = 0;
		InfoPlayer[playerid2][pManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
		ResetPlayerWeapons(playerid2);
		count++;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pEspalda]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pEspalda] = 0;
		InfoPlayer[playerid2][pEspaldaCant] = 0;
		RemovePlayerAttachedObject(playerid2, 9);
		count++;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Espalda = 0, Cantidad_espalda = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (count != 0)
	{
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) limpió %d armas a %s(%d).", NombreOriginal(playerid), playerid, count, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Ese jugador no lleva armas encima.");
	return 1;
}

CMD:vehslap(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new alt, vehiculo, Float:slx, Float:sly, Float:slz, string[128];
	if (sscanf(params, "dd", vehiculo, alt)) SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /vehslap (vehicleID) (Altitud)");
	if (!GetVehicleModel(vehiculo)) return SendClientMessage(playerid, COLOR_GRAD2, "El vehículo introducido no existe, verifica en /dl.");
	GetVehiclePos(vehiculo, slx, sly, slz);
	SetVehiclePos(vehiculo, slx, sly, slz+alt);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) golpeó el vehiculo id %d.", NombreOriginal(playerid), playerid, vehiculo);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:irpunto(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	else SetPosEx(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2], 0.0000, 0, 0, 1);
	SendClientMessage(playerid, COLOR_WHITE, "Teleportado.");
	return 1;
}

CMD:punto(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	SendClientMessage(playerid, COLOR_WHITE, "Posición guardada.");
	return 1;
}

CMD:traerauto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new Float:plocx, Float:plocy, Float:plocz, vehicleid;
	if (sscanf(params, "i", vehicleid)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /traerauto (Auto ID)");
	if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, COLOR_GRAD2, "El vehículo introducido no existe, verifica en /dl.");
	GetPlayerPos(playerid, plocx, plocy, plocz);
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
	SetVehicleExVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	SetVehiclePos(vehicleid, plocx, plocy+4, plocz);
	return 1;
}
CMD:traercar(playerid, params[]) return cmd_traerauto(playerid, params);
CMD:getcar(playerid, params[]) return cmd_traerauto(playerid, params);

CMD:irauto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new Float:cwx2, Float:cwy2, Float:cwz2, vehicleid;
	if (sscanf(params, "i", vehicleid)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /irauto (Auto ID)");
	if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, COLOR_GRAD2, "El vehículo introducido no existe, verifica en /dl.");
	GetVehiclePos(vehicleid, cwx2, cwy2, cwz2);
	SetPosEx(playerid, cwx2, cwy2, cwz2, 0.0, 0, 0, 1);
	return 1;
}
CMD:ircar(playerid, params[]) return cmd_irauto(playerid, params);
CMD:gotocar(playerid, params[]) return cmd_irauto(playerid, params);

CMD:repararveh(playerid)
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	RepairVehicle(vehicleid);
	if (GetVehicleModel(vehicleid) == 528 || GetVehicleModel(vehicleid) == 427) SetVehicleHealth(vehicleid, 5000.0);
	else SetVehicleHealth(vehicleid, 1000.0);
	SendClientMessage(playerid, COLOR_WHITE, "Vehículo reparado.");
	return 1;
}
CMD:fixveh(playerid) return cmd_repararveh(playerid);

CMD:mascara(playerid)
{
	new string[128];
	if (InfoPlayer[playerid][pMascara] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes máscara.");
	if (InfoPlayer[playerid][pUsoMascara] == 0)
	{
		SetPlayerAttachedObject(playerid, 0, 19036, 2, 0.090156, 0.045901, -0.005574, 90.110733, 81.638343, 4.973568, 0.887882, 1.139873, 1.000000);
		format(string, sizeof string, "* %s se pone una máscara.", NombreJugador(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		InfoPlayer[playerid][pUsoMascara] = 1;
		SetPlayerName(playerid, NombreJugador(playerid));
	}
	else
	{
		InfoPlayer[playerid][pUsoMascara] = 0;
		RemovePlayerAttachedObject(playerid, 0);
		format(string, sizeof string, "* %s se quita la máscara de su rostro.", NombreJugador(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPlayerName(playerid, InfoPlayer[playerid][pNombre_Apellido]);
	}
	guardar_int_mysql("cuentas", "UsoMascara", InfoPlayer[playerid][pID], InfoPlayer[playerid][pUsoMascara]);
	return 1;
}

CMD:ah(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	new dialog[4096];
	if (GetPlayerAdmin(playerid, 1) != 0)
	{
		strcat(dialog, "{FF2F2F}Ayudante\n");
		strcat(dialog, "{FFFFFF}/a - /irplayer - /ircar - /tipduda - /kick - /kickname - /darvida - /verjail - /encarcelados - /afks - /vergraffitis\n");
		strcat(dialog, "{FFFFFF}/enrenta - /dudas - /aduda - /rduda - /ls - /sf - /lv - /llevarls - /vip - /revivir - /spec - /nuevos - /qfa - /togvip\n\n");
	}
	if (GetPlayerAdmin(playerid, 2) != 0)
	{
		strcat(dialog, "{FF2F2F}Moderador I\n");
		strcat(dialog, "{FFFFFF}/vercuenta - /reportes - /ar - /rr - /darchaleco - /irfaccion - /irnegocio - /irgaraje - /ircajero\n");
		strcat(dialog, "{FFFFFF}/ao - /verarmas - /cambiarint - /cambiarvw - /traerplayer - /slap - /vehslap - /traercar\n");
		strcat(dialog, "{FFFFFF}/congelar - /descongelar - /darrol - /irpuerta - /irpuertainterior - /liberar - /iractor\n");
		strcat(dialog, "{FFFFFF}/darskin - /enmascarados - /sancionar - /sancionaroff - /checkllaves - /respawnauto - /ircasa\n\n");
	}
	if (GetPlayerAdmin(playerid, 3) != 0)
	{
		strcat(dialog, "{FF2F2F}Moderador II\n");
		strcat(dialog, "{FFFFFF}/jetpack - /verregalo - /quitardni - /autoint - /autovw - /limpiarchat - /limpiarsuelo - /ircoordenada\n");
		strcat(dialog, "{FFFFFF}/limpiararmas - /repararveh - /entrarauto - /bloqre - /desbloqre - /vercasa - /verinterior - /vertoys\n");
		strcat(dialog, "{FFFFFF}/borraranuncios - /desban - /desbanip - /getpos - /mutearad - /desmutearad - /warn - /nowarn\n");
		strcat(dialog, "{FFFFFF}/enmascaradospd - /enmascaradosadmin\n\n");
	}
	if (GetPlayerAdmin(playerid, 4) != 0)
	{
		strcat(dialog, "{FF2F2F}Moderador III\n");
		strcat(dialog, "{FFFFFF}/crearobjeto - /listaobjetos - /banear - /banearoff - /horaregalo - /limpiarregalo\n");
		strcat(dialog, "{FFFFFF}/amotor - /punto - /irpunto - /respawncars - /respawntodo - /rcategoria\n");
		strcat(dialog, "{FFFFFF}/limpiarobjetov - /adminmap - /reparartodo - /clima - /llenargas - /limpiarreportes\n\n");
	}
	if (GetPlayerAdmin(playerid, 5) != 0)
	{
		strcat(dialog, "{FF2F2F}Administrador\n");
		strcat(dialog, "{FFFFFF}/setpayday - /regaloatodos - /forzarpayday - /multicuenta - /verwalkie - /nombreactor\n");
		strcat(dialog, "{FFFFFF}/bloqbug - /desbloqbug - /crearactor - /borraractor - /skinactor - /animactor\n");
		strcat(dialog, "{FFFFFF}/crearregalo - /banip - /anunciostaff - /givegun - /musica - /darestilopelea - /stuff\n");
		strcat(dialog, "{FFFFFF}/creargraffiti - /darpuntosrol - /quitarpuntosrol - /serverstats - /smstodos - /showsound\n\n");
	}
	if (GetPlayerAdmin(playerid, 6) != 0)
	{
		strcat(dialog, "{FF2F2F}Encargado\n");
		strcat(dialog, "{FFFFFF}/darstat - /forzarpayday2 - /darcoinsvip - /quitarcoinsvip - /avenegocio - /negocioname - /avegarage\n");
		strcat(dialog, "{FFFFFF}/daradmin - /quitarstaff - /expulsarstaff - /daref - /daregame - /dareban - /leetodo - /quitardinero\n");
		strcat(dialog, "{FFFFFF}/dardinero - /darauto - /avecasa - /editarinterior - /expdoble - /darvest - /darvest2 - /venderlaser\n");
		strcat(dialog, "{FFFFFF}/quitarfaccionoff - /cambiarhora - /cambiarclima - /editarpuertanombre - /editargps\n");
		strcat(dialog, "{FFFFFF}/nombreadmin - /crearcajero - /borrarcajero\n\n");
	}
	if (GetPlayerAdmin(playerid, 10) != 0)
	{
		strcat(dialog, "{FF2F2F}Propietario\n");
		strcat(dialog, "{FFFFFF}/vermps - /darvip - /crearnegocio - /editarnegocio - /borrarnegocio - /crearcasa\n");
		strcat(dialog, "{FFFFFF}/creargarage - /movergarage - /gtipo - /agaragename - /gprecio - /gname - /gnivel - /editarh\n");
		strcat(dialog, "{FFFFFF}/ip - /obtenerip - /cambiarclaveusuario - /borrarcasa - /crearpuerta - /editarpuerta - /borrarpuerta\n\n");
	}
	if (InfoPlayer[playerid][pEncFac] != 0)
	{
		strcat(dialog, "{FFFF00}Encargado de facciones\n");
		strcat(dialog, "{FFFFFF}/facciones - /crearfaccion - /editarfnombre - /editarflogo - /editarflider - /editarfsublider\n");
		strcat(dialog, "{FFFFFF}/statusfacciones - /irfaccion - /editarfaccion - /editarfskin - /editarfequipo - /limpiarfaccion\n");
		strcat(dialog, "{FFFFFF}/supervisar - /facchat - /hacerlider - /hacersublider - /hacermiembro - /borrarfaccion\n");
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Comandos administrativos", dialog, "Cerrar", "");
	return 1;
}
CMD:adminayuda(playerid) return cmd_ah(playerid);
CMD:ahelp(playerid) return cmd_ah(playerid);

CMD:multicuenta(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[128], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "USE: /multicuenta [playerid]");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador desconectado.");
	if (InfoPlayer[playerid2][pMulticuenta] == 0)
	{
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) autorizó la multicuenta a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s autorizó la multicuenta a %s.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
		Log("LOGS/multicuenta.log", string);
		InfoPlayer[playerid2][pMulticuenta] = 1; // Multicuenta Autorizada.
	}
	else
	{
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) rechazó la multicuenta a %s(%d). Sólo puede tener una cuenta.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s rechazó la multicuenta a %s.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
		Log("LOGS/multicuenta.log", string);
		InfoPlayer[playerid2][pMulticuenta] = 0; // Mlticuenta No Autorizada.
	}
	guardar_int_mysql("cuentas", "Multicuenta", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pMulticuenta]);
	return 1;
}

CMD:bloqbug(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[190], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /bloqbug (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador desconectado.");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) bloqueó del /reportarbug a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[AdmCmd] %s bloqueó a %s del /reportarbug.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
	Log("LOGS/reportbug.log", string);
	InfoPlayer[playerid2][pBlockBug] = 1;
	guardar_int_mysql("cuentas", "BlockBug", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pBlockBug]);
	Kick(playerid2);
	return 1;
}

CMD:desbloqbug(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[190], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /desbloqbug (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador desconectado.");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) desbloqueó del /reportarbug a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[AdmCmd] %s desbloqueó a %s del /reportarbug.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
	Log("LOGS/reportbug.log", string);
	InfoPlayer[playerid2][pBlockBug] = 0;
	guardar_int_mysql("cuentas", "BlockBug", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pBlockBug]);
	return 1;
}

CMD:quitarstaff(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new string[512], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /quitarstaff (playerid)");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) limpió variables administrativas a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	Log("LOGS/admin.log", string);
	SendClientMessage(playerid2, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Restearon tus variables de administrador a 0.");
	alm(InfoPlayer[playerid2][pApodo], "niub");
	InfoPlayer[playerid2][pAdmin] = 0;
	InfoPlayer[playerid2][pEncFac] = 0;
	mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Apodo = '%e', JotoOtaku = 0, EncFac = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pApodo], InfoPlayer[playerid2][pID]);
	mysql_tquery(DBcreative, string);
	papilla[playerid2] = 0;
	SetPlayerColor(playerid2, 0xFFFFFF00);
	return 1;
}

CMD:nog(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[128], playerid2;
	if (sscanf(params, "u", playerid2)) return SendClientMessage(playerid, COLOR_GREY, "USA: /nog [playerid]");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador no conectado.");
	if (InfoPlayer[playerid2][pTogGraffiti] == 0)
	{
		InfoPlayer[playerid2][pTogGraffiti] = 1;
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) le a bloqueado el uso del CMD /graffiti a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s le a bloqueado el uso del CMD /graffiti a %s.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
		Log("LOGS/admin.log", string);
		SendClientMessage(playerid2, COLOR_GREY, "[Aviso]: Fuiste bloqueado del comando /graffiti.");
	}
	else
	{
		InfoPlayer[playerid2][pTogGraffiti] = 0;
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha desbloqueado el uso del CMD /graffiti a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s ha desbloqueado el uso del CMD /graffiti a %s.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
		Log("LOGS/admin.log", string);
		SendClientMessage(playerid2, COLOR_GREY, "[Aviso]: Fuiste desbloqueado del comando /graffiti.");
	}
	guardar_int_mysql("cuentas", "BlockG", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTogGraffiti]);
	return 1;
}
CMD:bloqueargraffiti(playerid, params[]) return cmd_nog(playerid, params);

CMD:removergps(playerid)
{
	DisablePlayerCheckpoint(playerid);
	return 1;
}

CMD:stopanim(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
	if (GetPVarInt(playerid, "PlayerCuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "No puedes usar esto ahora.");
	ClearAnimations(playerid);
	return 1;
}

CMD:daradmin(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new playerid2, level, string[340];
	if (sscanf(params, "di", playerid2, level)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /daradmin (PlayerID) (Nivel) [Niveles: 1 Ayudante, 2 Mod I, 3 Mod II, 4 Mod III, 5 Admin, 6 Encargado]");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (level < 0 || level > 6) return SendClientMessage(playerid, COLOR_GRAD2, "Sólo existen 6 rangos administrativos.");
	if (level == 0)
	{
		SetPlayerColor(playerid2, 0xFFFFFF00);
		papilla[playerid2] = 0;
		alm(InfoPlayer[playerid2][pApodo], "niub");
		InfoPlayer[playerid2][pEncFac] = 0;
		InfoPlayer[playerid2][pAdmin] = 0;
		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Apodo = '%e', JotoOtaku = 0, EncFac = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pApodo], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, string);
		format(string, sizeof string, "%s(%d) te ha expulsado de la administración.", NombreOriginal(playerid), playerid);
		SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) expulsó de la administración a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s expulsó a %s de la administración.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
		Log("LOGS/admins.log", string);
		return 1;
	}
	InfoPlayer[playerid2][pAdmin] = level;
	guardar_int_mysql("cuentas", "JotoOtaku", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pAdmin]);
	format(string, sizeof string, "%s(%d) lo ha asignado %s(%d).", NombreOriginal(playerid), playerid, GetAdminName(playerid2), level);
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha asignado %s(%d) a %s(%d).", NombreOriginal(playerid), playerid, GetAdminName(playerid2), level, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s asignó %s a %s.", NombreDeCuenta(playerid), GetAdminName(playerid2), NombreDeCuenta(playerid2));
	Log("LOGS/admins.log", string);
	return 1;
}

CMD:daref(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new string[178], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /daref (ID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (InfoPlayer[playerid2][pEncFac] == 0)
	{
		InfoPlayer[playerid2][pEncFac] = 1;
		format(string, sizeof string, "%s(%d) lo ha asignado moderador de facciones.", NombreOriginal(playerid), playerid);
		SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha asignado moderador de facciones a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s ha asignado moderador de facciones a %s.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
		Log("LOGS/security.log", string);
	}
	else
	{
		InfoPlayer[playerid2][pEncFac] = 0;
		format(string, sizeof string, "%s(%d) le ha retirado el moderador de facciones.", NombreOriginal(playerid), playerid);
		SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha retirado el moderador de facciones a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s ha retirado el moderador de facciones a %s.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
		Log("LOGS/security.log", string);
	}
	guardar_int_mysql("cuentas", "EncFac", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pEncFac]);
	return 1;
}

CMD:qdinero(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, money, reason[64], string[256];
	if (sscanf(params, "dds[64]", playerid2, money, reason)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /qdinero (PlayerID) (Dinero) (Razón)");
	if (money > 99999999 || money < 0) return SendClientMessage(playerid, COLOR_WHITE, "Sólo de 0 - 99999999 de dinero");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");

	GivePlayerCash(playerid2, -money, "qdinero (admin)");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) quitó $%s a %s(%d), razón: %s.", NombreOriginal(playerid), playerid, diner_coma(money), NombreOriginal(playerid2), playerid2,reason);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s quitó $%s a %s, razón: %s.", NombreDeCuenta(playerid), diner_coma(money), NombreDeCuenta(playerid2),reason);
	Log("LOGS/removemoney.log", string);
	return 1;
}
CMD:quitardinero(playerid, params[]) return cmd_qdinero(playerid, params);

CMD:jail(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[256], time, playerid2, reason[64];
	if (CommandSpamTimes[playerid] == 30)
	{
		format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) fue baneado automáticamente, razón: Flood Cmd´s", NombreOriginal(playerid), playerid);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s fue baneado automáticamente, razón: Flood Cmd´s", NombreDeCuenta(playerid));
		Log("LOGS/hackeraction.log", string);
		InfoPlayer[playerid][pBaneo] = 2;
		Kick(playerid);
		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET OtakuN_N = 2 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
		mysql_tquery(DBcreative, string);
		return 1;
	}
	//cmd
	if (sscanf(params, "dds[64]", playerid2, time, reason)) return SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /jail (playerid) (minutos) (razón)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "ID inválida.");
	if (strlen(reason) >= sizeof(reason)-1) return SendClientMessage(playerid, COLOR_GREY, "El motivo del jail no puede ocupar más de 64 carácteres.");
	if (InfoPlayer[playerid2][pJails] >= 14)
	{
		format(string, sizeof string, "AdmCmd: %s fue baneado, razón: +15 Jails", NombreOriginal(playerid2));
		Log("LOGS/ban.log", string);
		format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) fue baneado. Razón: +15 Jails", NombreOriginal(playerid2), playerid2);
		SendAllMessage(0xFFFFFFFF, string);
		SetTimerEx("TimerKICK", 500, false, "d", playerid2);
		guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid2][pID], 2);
	    return 1;
	}
	alm(InfoPlayer[playerid2][pBySancion], NombreDeCuenta(playerid));
	alm(InfoPlayer[playerid2][pRazonSancion], reason);
	CommandSpamTimes[playerid]++;
	CommandSpamUnmute[playerid] = 60;
	InfoPlayer[playerid2][pJails] += 1;
	InfoPlayer[playerid2][pSancionado] = 1;
	InfoPlayer[playerid2][pTogTelefono] = 0;
	InfoPlayer[playerid2][pTiempoSancion] = time*60;
	new query[410];
	Loop(x, 10, 0) if (InfoInventario[InfoPlayer[playerid2][pBolsillo][x]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pBolsillo][x] = 0;
		InfoPlayer[playerid2][pBolsilloCant][x] = 0;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = 0, Cantidad_bolsillo_%d = 0 WHERE ID = '%d'", x+1, x+1, InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pManoIzquierda]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pManoIzquierda] = 0;
		InfoPlayer[playerid2][pManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid2, 8);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pManoDerecha]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pManoDerecha] = 0;
		InfoPlayer[playerid2][pManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
		ResetPlayerWeapons(playerid2);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pEspalda]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pEspalda] = 0;
		InfoPlayer[playerid2][pEspaldaCant] = 0;
		RemovePlayerAttachedObject(playerid2, 9);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Espalda = 0, Cantidad_espalda = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	SetPlayerPos(playerid2, 2687.3630, 2705.2537, 22.9472);
	SetPlayerInterior(playerid2, 0);
	SetPlayerVirtualWorld(playerid2, playerid2+1);
	TogglePlayerControllable(playerid2, false);
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Sancionado = 1, TiempoSancion = '%d', BySancion = '%e', RazonSancion = '%e', Jails = '%d' WHERE ID = '%d'", InfoPlayer[playerid2][pTiempoSancion], InfoPlayer[playerid2][pBySancion], InfoPlayer[playerid2][pRazonSancion], InfoPlayer[playerid2][pJails], InfoPlayer[playerid2][pID]);
	mysql_tquery(DBcreative, query);
	format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) sancionó a %s(%d). Razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, InfoPlayer[playerid2][pRazonSancion]);
	SendAllMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[AdmCmd]: %s encarceló a %s, razón: %s, tiempo: %d minuto(s)", NombreDeCuenta(playerid), NombreDeCuenta(playerid2), InfoPlayer[playerid2][pRazonSancion], time);
	Log("LOGS/sancionar.log", string);
	format(string, sizeof string, "Tiempo: %d minuto(s)", time);
	SendClientMessage(playerid2, COLOR_GRAD2, string);
	StopAudioStreamForPlayer(playerid2);
	return 1;
}
CMD:sancionar(playerid, params[]) return cmd_jail(playerid, params);

CMD:jailoffline(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new gformat[512], pide, name[MAX_PLAYER_NAME], minutes, reason[64];
	if (sscanf(params, "uds[64]", pide, minutes, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /jailoffline (Nombre_Apellido) (Minutos) (Razón)");
	if (IsPlayerConnected(pide)) return SendClientMessage(playerid, COLOR_GRAD2, "Ese jugador está conectado, usa /jail.");
	if (sscanf(params, "s[24]ds[64]", name, minutes, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /jailoffline (Nombre_Apellido) (Minutos) (Razón)");
	if (verificar_cuenta(name))
	{
		new total_jails;
		reg_int(0, "Jails", total_jails);
		mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Jails = '%d', Sancionado = 1, TiempoSancion = '%d', PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', Interior = 0, VirtualWorld = '%d', BySancion = '%e', RazonSancion = '%e' WHERE Nombre_Apellido = '%e'", total_jails, minutes*60, 2687.3630, 2705.2537, 22.9472, playerid+1, NombreDeCuenta(playerid), reason, name);
		mysql_tquery(DBcreative, gformat);
		format(gformat, sizeof gformat, "AdmCmd: %s fue jaileado por %s, razon: %s. [CMD OFFLINE]", name, NombreDeCuenta(playerid), reason);
		Log("LOGS/admin.log", gformat);
		format(gformat, sizeof gformat, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) sancionó %d minutos a %s, razon: %s. (OFFLINE)", NombreOriginal(playerid), playerid, minutes, name, reason);
		SendAdminMessage(0xFFFFFFFF, gformat);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Esa cuenta no existe.");
	return 1;
}
CMD:jailcuenta(playerid, params[]) return cmd_jailoffline(playerid, params);
CMD:sancionaroff(playerid, params[]) return cmd_jailoffline(playerid, params);

CMD:checkjail(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[256], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /checkjail (PlayerID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "Esa ID es inválida.");
	if (InfoPlayer[playerid2][pSancionado] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Este usuario no ha sido jaileado (Ni IC, ni OOC). En caso de estar en jail, usar /mandarls.");
	new minutos = (InfoPlayer[playerid2][pTiempoSancion]/60)+1;
	format(string, sizeof string, "%s - %d segundos restantes. {FFFFFF}(Menos de %d minuto/s).", NombreOriginal(playerid2), InfoPlayer[playerid2][pTiempoSancion], minutos);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof string, "(ID %d) ha sido jaileado por %s, motivo: %s", playerid2, InfoPlayer[playerid2][pBySancion], InfoPlayer[playerid2][pRazonSancion]);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	return 1;
}
CMD:verjail(playerid, params[]) return cmd_checkjail(playerid, params);

CMD:encarcelados(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	SendClientMessage(playerid, COLOR_GRAD1, "Encarcelados (Tanto IC como OOC)- Más información con /checkjail:");
	new string[180];
	for(new i = 0; i < MAX_PLAYERS; i++) if (IsPlayerConnected(i))
	{
		if (InfoPlayer[i][pSancionado] != 0)
		{
			format(string, sizeof string, "(ID: %d) - %s, tiempo de jail: %d minutos. [Encarcelado por %s]", i, NombreOriginal(i), (InfoPlayer[i][pTiempoSancion]/60)+1, InfoPlayer[i][pBySancion]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	return 1;
}

CMD:darpuntosrol(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, COLOR_GRAD2, "CMD: /darpuntosrol [ID] [Cantidad]");
	if (!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_GRAD2, " Jugador no conectado.");
	new string[170];
	InfoPlayer[params[0]][pPuntosRol] += params[1];
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha otorgado [%d] puntos de rol a %s(%d).", NombreOriginal(playerid), playerid, params[1], NombreOriginal(params[0]), params[0]);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[Información] %s tiene ahora un total de %d puntos de rol.", NombreOriginal(params[0]), InfoPlayer[params[0]][pPuntosRol]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(params[0], COLOR_WHITE, "Has recibido puntos de rol, felicidades.");
	guardar_int_mysql("cuentas", "PuntosRol", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pPuntosRol]);
	return 1;
}
CMD:dpr(playerid, params[]) return cmd_darpuntosrol(playerid, params);

CMD:quitarpuntosrol(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, COLOR_GRAD2, "CMD: /quitarpuntosrol [ID] [Cantidad]");
	if (!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_GRAD2, " Jugador no conectado.");
	new string[170];
	InfoPlayer[params[0]][pPuntosRol] -= params[1];
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha quitado [%d] puntos de rol a %s(%d).", NombreOriginal(playerid), playerid, params[1], NombreOriginal(params[0]), params[0]);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[Información] %s tiene ahora un total de %d puntos de rol.", NombreOriginal(params[0]), InfoPlayer[params[0]][pPuntosRol]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(params[0], COLOR_WHITE, "Le han retirado parte de sus puntos de rol.");
	guardar_int_mysql("cuentas", "PuntosRol", InfoPlayer[params[0]][pID], InfoPlayer[params[0]][pPuntosRol]);
	return 1;
}
CMD:qpr(playerid, params[]) return cmd_quitarpuntosrol(playerid, params);

CMD:ls(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), 1529.6, -1705.5, 13.4); //1529.6,-1691.2,13.3
	else SetPosEx(playerid, 1529.6, -1705.5, 13.4, 0, 0, 0, 1); //1529.6,-1691.2,13.3
	return 1;
}

CMD:sf(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), -2016.4399,-79.7714,35.3203);
	else SetPosEx(playerid, -2016.4399,-79.7714,35.3203, 0, 0, 0, 1);
	return 1;
}

CMD:lv(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), 1694.6566,1453.4523,10.7632);
	else SetPosEx(playerid, 1694.6566,1453.4523,10.7632, 0, 0, 0, 1);
	return 1;
}

CMD:entrarauto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new vehicleid;
	if (sscanf(params, "i", vehicleid)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /entrarauto (VehicleID)");
	if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "Vehículo no encontrado, intenta con otra ID.");

	PutPlayerInVehicle(playerid, vehicleid, 1);
	SendClientMessage(playerid, COLOR_WHITE, "Teleportado.");
	return 1;
}
CMD:entercar(playerid, params[]) return cmd_entrarauto(playerid, params);

CMD:llenargas(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new gformat[170];
	format(gformat, sizeof gformat, "{FF6347}Administración:{FFFFFF} %s(%d) llenó la gasolina de todos los vehículos.", NombreOriginal(playerid), playerid);
	SendAllMessage(0xFFFFFFFF, gformat);
	Loop(veh, MAX_VEHICLES, 0) if (GetVehicleModel(veh))
	{
		veh_gasolina[veh] = 200;
	}
	return 1;
}

CMD:anunciostaff(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new text[64], type;
	if (sscanf(params, "is[64]", type, text)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /anunciostaff (Tipo) (Texto)");
	if (type == 2) return SendClientMessage(playerid, COLOR_WHITE, "No puedes elegir el numero 2.");
	for(new i = 0; i < MAX_PLAYERS; i++){ if (IsPlayerConnectedEx(i)){ GameTextForPlayer(i, text, 5000, type); } }
	new string[170];
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) usó el comando /anunciostaff.", NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:apgarage(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 15.0, 1622.9014, -1852.7107, 13.5014))
	{
		if (!member_faccion(playerid, 1, 4)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de LSPD o SASD.");
		if (open_embargo == 1) return SendClientMessage(playerid, COLOR_GREY, "* El portón del depósito ya está abierto.");
        MoveDynamicObject(depositoembargo, 1612.0996,-1861.5996,15.3000, 2.5);
		SetTimer("ClosedDeposito", 7000, false);
		open_embargo = 1;
		cmd_me(playerid, "abre el portón del depósito de embargos");
	}
	//lspd
	if (IsPlayerInRangeOfPoint(playerid, 15.0, 1545.9229, -1627.4286, 13.5087))
	{
		if (!member_faccion(playerid, 1)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de LSPD.");
		MoveDynamicObject(porton_lspd, 1546.1990, -1627.5966, 9.5763, 3.0);
		SetTimer("ClosedPortonLSPD", 7000, false);
	}
	//saem
	if (IsPlayerInRangeOfPoint(playerid,30, 2457.80, -2254.76, 26.90))
	{
		if (!member_faccion(playerid, 3)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de SAEM.");
		MoveDynamicObject(saem1, 2457.7957, -2254.7603, 21.2877, 5.0);
		SetTimer("OpenDoorNG", 7000, 0);
	}
	if (IsPlayerInRangeOfPoint(playerid,30, 2338.10571, -2353.88281, 15.2))
	{
		if (!member_faccion(playerid, 3)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de SAEM.");
		MoveDynamicObject(saem2, 2338.10571, -2353.88281, 20.72, 5.0);
		SetTimer("OpenDoorNG2", 7000, 0);
	}
	if (IsPlayerInRangeOfPoint(playerid,30, 2273.59570, -2663.29053, 15.2))
	{
		if (!member_faccion(playerid, 3)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de SAEM.");
		MoveDynamicObject(saem3, 2273.59570, -2663.29053, 20.72, 5.0);
		SetTimer("OpenDoorNG3", 7000, 0);
	}
	if (IsPlayerInRangeOfPoint(playerid,30, -1529.0433, 482.4390, 9.0600))
	{
		if (!member_faccion(playerid, 3)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de SAEM.");
		MoveDynamicObject(saemSF, -1529.0433, 482.4390, 3.4648, 5.0);
		SetTimer("OpenDoorNGSF", 7000, 0);
	}
	if (IsPlayerInRangeOfPoint(playerid,30, 135.2415, 1941.0129, 26.1857))
	{
		if (!member_faccion(playerid, 3)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de SAEM.");
		MoveDynamicObject(saemLV, 135.2415, 1941.0129, 26.1857, 5.0);
		SetTimer("OpenDoorNGLV", 7000, 0);
	}
	if (IsPlayerInRangeOfPoint(playerid,30, 348.9841, 1801.1180, 25.4055))
	{
		if (!member_faccion(playerid, 3)) return SendClientMessage(playerid, COLOR_GREY, "* No eres miembro de SAEM.");
		MoveDynamicObject(saemLV2, 348.9841, 1801.1180, 25.4055, 5.0, 0.00000, 358.25000, 41.75000);
		SetTimer("OpenDoorNGLV2", 7000, 0);
	}
	return 1;
}
CMD:deposito(playerid) return cmd_apgarage(playerid);


forward ClosedPortonLSPD();
public ClosedPortonLSPD()
{
	MoveDynamicObject(porton_lspd, 1546.19897, -1627.59656, 15.28090, 3.0);
	return 1;
}

forward ClosedDeposito();
public ClosedDeposito()
{
	open_embargo = 0;
	MoveDynamicObject(depositoembargo, 1620.6500244,-1861.5996094,15.3000002,2.5);
	return 1;
}

CMD:ap(playerid)
{
	if (!member_faccion(playerid, 1, 4)) return SendClientMessage(playerid, COLOR_GREY, "No formas parte de LSPD o SASD.");
	new playAP = 0;
	if (IsPlayerInRangeOfPoint(playerid, 5, 1556.67175, -1698.34778, 4991.90405)) MoveDynamicObject(LSPD_NEW1, 1556.67175, -1694.8400, 4991.5, 1.0, 0.0000000, 0.0000000, 270.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 5, 1556.77905, -1636.08850, 4991.912)) MoveDynamicObject(LSPD_NEW2, 1556.77905, -1632.6560, 4991.5, 1.0, 0.0000000, 0.0000000, 270.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 2, 1562.7060, -1659.93030, 4989.41101)) MoveDynamicObject(LSPD_NEW3, 1562.7060, -1658.4360, 4989.4110, 1.0, 0.0000000, 0.0000000, -90.000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 2, 1570.5215, -1643.77222, 4989.41101)) MoveDynamicObject(LSPD_NEW4, 1570.5215, -1645.2640, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 2, 1570.5500, -1649.62769, 4989.41101)) MoveDynamicObject(LSPD_NEW5, 1570.5500, -1651.1120, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 2, 1570.51929, -1661.46106, 4989.41101)) MoveDynamicObject(LSPD_NEW6, 1570.51929, -1662.9520, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 3.5, 1569.067016,-1698.031372,4990.585937))
	{
		MoveDynamicObject(LSPD_NEW7, 1569.6000, -1700.284, 4989.5800, 1.0, 0.0000000, 0.0000000, 90.0000000);
		MoveDynamicObject(LSPD_NEW8, 1569.6000, -1695.756, 4989.5800, 1.0, 0.0000000, 0.0000000, -90.000000);
		playAP=1;
	}
	else if (IsPlayerInRangeOfPoint(playerid,8.0, 1452.554199,-1506.351440,1604.029052)) MoveDynamicObject(PJCELDA3,1451.96338, -1507.66687, 1607.5, 2.0,  0.00000, 0.00000, 90.00000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid,8.0, 1443.826171,-1524.709960,1604.029052)) MoveDynamicObject(PJCELDA4,1444.35950, -1523.42847, 1607.5,  2.0, 0.00000, 0.00000, 90.00000), playAP=1;
	if (playAP == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás en ninguna puerta para abrir.");
	else SendClientMessage(playerid, COLOR_GREY, "Abriste una puerta, escribe '/cp' para cerrarla.");
	return 1;
}

CMD:cp(playerid)
{
	if (!member_faccion(playerid, 1, 4)) return SendClientMessage(playerid, COLOR_GREY, "No formas parte de LSPD o SASD.");
	new playAP = 0;
	if (IsPlayerInRangeOfPoint(playerid, 5, 1556.67175, -1698.34778, 4991.90405)) MoveDynamicObject(LSPD_NEW1, 1556.67175, -1698.34778, 4991.5, 1.0, 0.0000000, 0.0000000, 270.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 5, 1556.77905, -1636.08850, 4991.91199)) MoveDynamicObject(LSPD_NEW2, 1556.77905, -1636.08850, 4991.5, 1.0, 0.0000000, 0.0000000, 270.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 2, 1562.7060, -1659.93030, 4989.41101)) MoveDynamicObject(LSPD_NEW3, 1562.7060, -1659.93030, 4989.4110, 1.0, 0.0000000, 0.0000000, -90.000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 2, 1570.5215, -1643.77222, 4989.41101)) MoveDynamicObject(LSPD_NEW4, 1570.5215, -1643.77222, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 2, 1570.5500, -1649.62769, 4989.41101)) MoveDynamicObject(LSPD_NEW5, 1570.5500, -1649.62769, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 2, 1570.51929, -1661.46106, 4989.41101)) MoveDynamicObject(LSPD_NEW6, 1570.51929, -1661.46106, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 3.5, 1569.067016,-1698.031372,4990.585937 ))
	{
		MoveDynamicObject(LSPD_NEW7, 1569.59998, -1699.50000, 4989.57996, 1.0, 0.0000000, 0.0000000, 90.0000000);
		MoveDynamicObject(LSPD_NEW8, 1569.59998, -1696.50000, 4989.57996, 1.0, 0.0000000, 0.0000000, -90.000000);
		playAP=1;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 8.0, 1452.379394,-1506.422851,1604.029052)) MoveDynamicObject(PJCELDA3,1451.96338, -1507.66687, 1605.03467, 2.0,  0.00000, 0.00000, 90.00000), playAP=1;
	else if (IsPlayerInRangeOfPoint(playerid, 8.0, 1443.875610,-1524.978759,1604.029052)) MoveDynamicObject(PJCELDA4,1444.35950, -1523.42847, 1605.03467,  2.0, 0.00000, 0.00000, 90.00000), playAP=1;
	if (playAP == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás en ninguna puerta para cerrar.");
	else SendClientMessage(playerid, COLOR_GREY, "Cerraste una puerta, escribe '/ap' para abrirla.");
	return 1;
}

CMD:atar(playerid, params[])
{
	if (InfoPlayer[playerid][pNivel] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser nivel 2 para arriba.");
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
	if (Rope[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una cuerda.");
	new playerid2, string[129];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /atar (ID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");
	if (!CercaDelMarica(4.0,playerid,playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador muy lejos.");
	if (Tied[playerid2] == 0)
	{
		Tied[playerid2] = 1;
		format(string, sizeof string, "* %s agarra una cuerda y ata a %s", NombreJugador(playerid), NombreJugador(playerid2));
		ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		TogglePlayerControllable(playerid2, false);
	}
	else
	{
		Tied[playerid2] = 0;
		format(string, sizeof string, "* %s agarra una cuerda y desata a %s", NombreJugador(playerid), NombreJugador(playerid2));
		ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		TogglePlayerControllable(playerid2, true);
	}
	return 1;
}

CMD:vendar(playerid, params[])
{
	if (InfoPlayer[playerid][pNivel] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser nivel 2 para arriba.");
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
	if (Rope[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes venda.");
	new playerid2, string[129];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /vendar (ID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");
	if (!CercaDelMarica(4.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador muy lejos.");
	if (Blinded[playerid2] == 0)
	{
		Blinded[playerid2] = 1;
		format(string, sizeof string, "* %s venda los ojos de %s", NombreJugador(playerid), NombreJugador(playerid2));
		ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPlayerCameraPos(playerid2,0.0,0.0,1000);
		SetPlayerCameraLookAt(playerid2,0.0,0.0,5000);
	}
	else
	{
		Blinded[playerid2] = 0;
		format(string, sizeof string, "* %s desvenda los ojos de %s", NombreJugador(playerid), NombreJugador(playerid2));
		ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetCameraBehindPlayer(playerid2);
	}
	return 1;
}

CMD:mccomprar(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid,10, 1294.7615,-988.5920,32.6953)) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en el mercado negro!");
	new dialg_products[1028];
	strcat(dialg_products, "Producto\tValor\n");
	strcat(dialg_products, "{EBEBEB}Puño americano\t{04B404}$20\n");
	strcat(dialg_products, "{EBEBEB}Máscara\t{04B404}$50\n");
	strcat(dialg_products, "{EBEBEB}Ganzúas (3 unidades)\t{04B404}$500\n");
	strcat(dialg_products, "{EBEBEB}Soga + Venda\t{04B404}$120\n");
	strcat(dialg_products, "{EBEBEB}Dinamita\t{04B404}$25,000\n");
	strcat(dialg_products, "{EBEBEB}Documento falso\t{04B404}$15,000");
	Dialog_Show(playerid, ShowMercadoNegro, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Mercado negro", dialg_products, "Comprar", "Salir");
	return 1;
}

Dialog:ShowMercadoNegro(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new string[170];
	switch (listitem)
	{
		case 0:
		{
			if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_GREY, "* Debes jugar al menos 2 horas el servidor.");
			new precio = 20;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Puño americano{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (PlayerWeapon(playerid, 1) == 0) return 1;
			GivePlayerCash(playerid, -precio, "compra de puño americano");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste un puño americano por $20.");
		}
		case 1:
		{
			if (InfoPlayer[playerid][pHorasOn] < 3) return SendClientMessage(playerid, COLOR_GREY, "* Debes jugar al menos 3 horas el servidor.");
			new precio = 50;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Máscara{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (InfoPlayer[playerid][pMascara] != 0) return SendClientMessage(playerid, COLOR_GREY, "* Ya tienes una máscara comprada.");
			GivePlayerCash(playerid, -precio, "compra de máscara");
			InfoPlayer[playerid][pMascara] = 1;
			guardar_int_mysql("cuentas", "Mascara", InfoPlayer[playerid][pID], 1);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste una máscara por $50.");
		}
		case 2:
		{
			if (InfoPlayer[playerid][pHorasOn] < 4) return SendClientMessage(playerid, COLOR_GREY, "* Debes jugar al menos 4 horas el servidor.");
			new precio = 500;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Ganzúas{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			GivePlayerCash(playerid, -precio, "compra de ganzúas");
			InfoPlayer[playerid][pGanzuas] += 3;
			guardar_int_mysql("cuentas", "Ganzuas", InfoPlayer[playerid][pID], InfoPlayer[playerid][pGanzuas]);
			format(string, sizeof string, "Compraste tres ganzúas por $500, ahora tienes %d ganzúas.", InfoPlayer[playerid][pGanzuas]);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		}
		case 3:
		{
			if (InfoPlayer[playerid][pHorasOn] < 3) return SendClientMessage(playerid, COLOR_GREY, "* Debes jugar al menos 3 horas el servidor.");
			new precio = 120;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Venta + soga{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			Rope[playerid] = 1;
			GivePlayerCash(playerid, -precio, "compra de venda+soga");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste venda + soga por $120.");
		}
		case 4:
		{
			if (InfoPlayer[playerid][pHorasOn] < 15) return SendClientMessage(playerid, COLOR_GREY, "* Debes jugar al menos 15 horas el servidor.");
			new precio = 25000;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Dinamita{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 52, 10) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste dinamita por $25,000 dólares.");
			GivePlayerCash(playerid, -precio, "compra de dinamita");
		}
		case 5:
		{
			if (InfoPlayer[playerid][pHorasOn] < 3) return SendClientMessage(playerid, COLOR_GREY, "* Debes jugar al menos 3 horas el servidor.");
			if (InfoPlayer[playerid][pFalsoDocumento] != 0) return SendClientMessage(playerid, COLOR_GREY, "* Ya posees un documento falso.");
			new precio = 15000;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Documento falso{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			Dialog_Show(playerid, ShowDNIFalso, DIALOG_STYLE_INPUT, "{FFBF00}Documento falso", "{FFFFFF}Ingresa el nombre que quieres usar para el documento falso:", "Continuar", "Salir");
		}
	}
	return 1;
}

Dialog:ShowDNIFalso(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new string[512];
	if (strlen(inputtext) < 1 || strlen(inputtext) > 32 || strfind(inputtext, "_", true) != -1)
	{
		SendClientMessage(playerid, 0xccccccff, "Formato inválido sigue {ffffff}Nombre_Apellido");
		Dialog_Show(playerid, ShowDNIFalso, DIALOG_STYLE_INPUT, "{FFBF00}Documento falso", "{FFFFFF}Ingresa el nombre que quieres usar para el Documento falso, precio: {00CC00}$15.000", "Continuar", "Salir");
	}
	else
	{
		alm(InfoPlayer[playerid][pFalsoNombre], inputtext);
		format(string, sizeof string, "{FFFFFF}¿Estás seguro que quieres usar el nombre de\n\t{FFBF00}%s{FFFFFF} en tu Documento falso? Precio: {00CC00}$40.000", InfoPlayer[playerid][pFalsoNombre]);
		Dialog_Show(playerid, Show2DNIFalso, DIALOG_STYLE_MSGBOX, "{FFBF00}Documento falso", string, "Continuar", "Volver");
	}
	return 1;
}

Dialog:Show2DNIFalso(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, ShowDNIFalso, DIALOG_STYLE_INPUT, "{FFBF00}Documento falso", "{FFFFFF}Ingresa el nombre que quieres usar para el Documento falso, precio: {00CC00}$15.000", "Continuar", "Salir");
	new dni = 100000 + random(899999);
	InfoPlayer[playerid][pFalsoDocumento] = dni;
	new query[256];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET FalsoDocumento = '%d', FalsoNombre = '%e' WHERE ID = '%d'", InfoPlayer[playerid][pFalsoDocumento], InfoPlayer[playerid][pFalsoNombre], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	format(query, sizeof query, "* Compraste una identificación falsa (/dnifalso para mostrarlo) con el nombre de %s.", InfoPlayer[playerid][pFalsoNombre]);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, query);
	GivePlayerCash(playerid, -15000, "compra de dni falso");
	return 1;
}

CMD:ganzua(playerid)
{
	if (InfoPlayer[playerid][pGanzuas] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ganzúas.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No eres el conductor.");
	if (InfoPlayer[playerid][pNivel] < 15) return SendClientMessage(playerid, COLOR_WHITE, "Sólo los usuarios nivel 15 para adelante pueden usar este comando.");
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un vehículo.");

	new string[128], vehicleid;
	format(string, sizeof string, "* %s utiliza unas ganzúas y cruza los cables.", NombreJugador(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	SetTimerEx("SetVehicleEngine", 2500, 0, "dd",  vehicleid, playerid);
	GameTextForPlayer(playerid, "~p~haciendo puente.",2500,3);
	return 1;
}

new slot_agenda[MAX_PLAYERS];

CMD:agenda(playerid)
{
	if (InfoPlayer[playerid][pTelefono] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes un número telefónico.");
	if (no_tiene_manos(playerid, 50) == 0) return 1;
	new dialog[1024], gformat[512];
	Loop(x, 10, 0)
	{
		if (InfoPlayer[playerid][pNumeroContacto][x] != 0) format(gformat, sizeof gformat, "{cccccc}%d\t{008000}%s{cccccc} (%d)\n", x+1, nombre_contacto[playerid][x], InfoPlayer[playerid][pNumeroContacto][x]);
		else format(gformat, sizeof gformat, "{cccccc}%d\t{ffffff}vacío\n", x+1);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowAgenda, DIALOG_STYLE_LIST, "Agenda", dialog, "Continuar", "Volver");
	return 1;
}

Dialog:ShowAgenda(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_telefono(playerid);
	new x = listitem;
	slot_agenda[playerid] = x;
	if (InfoPlayer[playerid][pNumeroContacto][x] == 0)
	{
		Dialog_Show(playerid, AgregarContacto, DIALOG_STYLE_INPUT, "Número telefónico", "{cccccc}Escribe el número de teléfono del contacto a agregar:", "Continuar", "Volver");
		return 1;
	}
	Dialog_Show(playerid, OpcionContacto, DIALOG_STYLE_LIST, "Opciones", "{90C3D4}Llamar contacto\n{00a2ff}Enviar mensaje\n{00c200}Eliminar contacto", "Continuar", "Volver");
	return 1;
}

Dialog:OpcionContacto(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_agenda(playerid);
	new id = slot_agenda[playerid];
	switch (listitem)
	{
		case 0: //llamar
		{
			new gformatenvie[128];
			format(gformatenvie, sizeof gformatenvie, "%d", InfoPlayer[playerid][pNumeroContacto][id]);
			cmd_llamar(playerid, gformatenvie);
		}
		case 1: //enviar mensaje
		{
			Dialog_Show(playerid, ShowSMS, DIALOG_STYLE_INPUT, "Enviar mensaje", "{ffffff}Introduce el texto que vas a enviar:", "Enviar", "Volver");
		}
		case 2: //eliminar contacto
		{
			alm(nombre_contacto[playerid][id], "none");
			InfoPlayer[playerid][pNumeroContacto][id] = 0;
			slot_agenda[playerid] = -1;
			cmd_agenda(playerid);
			new query[256];
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET NombreContacto%d = '%e', NumeroContacto%d = 0 WHERE ID = '%d'", id+1, nombre_contacto[playerid][id], id+1, InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, query);
			SendClientMessage(playerid, 0xaaaa00ff, "Contacto eliminado de tu agenda telefónica.");
		}
	}
	return 1;
}

Dialog:ShowSMS(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_agenda(playerid);
	new id = slot_agenda[playerid], gformatenvie[320];
	format(gformatenvie, sizeof gformatenvie, "%d %s", InfoPlayer[playerid][pNumeroContacto][id], inputtext);
	cmd_sms(playerid, gformatenvie);
	return 1;
}

Dialog:AgregarContacto(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_agenda(playerid);
	new amount = strval(inputtext);
	new id = slot_agenda[playerid];
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GRAD2, "Sólo números porfavor, vuelve a intentarlo.");
	if (amount > 99999999 || amount < 1000) return SendClientMessage(playerid, COLOR_GRAD2, "El número no puede ser mayor a 999999 o menor a 1000.");

	InfoPlayer[playerid][pNumeroContacto][id] = amount;
	Dialog_Show(playerid, Agregar2Contacto, DIALOG_STYLE_INPUT, "Nombre del contacto", "{cccccc}Escribe el nombre del contacto", "Continuar", "Volver");
	return 1;
}

Dialog:Agregar2Contacto(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, AgregarContacto, DIALOG_STYLE_INPUT, "Número telefónico", "{cccccc}Escribe el número de teléfono del contacto a agregar:", "Continuar", "Volver");
	if (!strlen(inputtext)) return Dialog_Show(playerid, Agregar2Contacto, DIALOG_STYLE_INPUT, "Nombre del contacto", "{cccccc}Escribe el nombre del contacto", "Continuar", "Volver");
	if (strlen(inputtext) > 20 || strlen(inputtext) < 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Sólo puedes escribir menos de 20 carácteres.");
		Dialog_Show(playerid, Agregar2Contacto, DIALOG_STYLE_INPUT, "Nombre del contacto", "{cccccc}Escribe el nombre del contacto", "Continuar", "Volver");
		return 1;
	}
	new id = slot_agenda[playerid];
	alm(nombre_contacto[playerid][id], inputtext);
	slot_agenda[playerid] = -1;
	cmd_agenda(playerid);
	new query[500];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET NombreContacto%d = '%e', NumeroContacto%d = '%d' WHERE ID = '%d'", id+1, nombre_contacto[playerid][id], id+1, InfoPlayer[playerid][pNumeroContacto][id], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	SendClientMessage(playerid, 0x00cc00ff, "Nuevo contacto agregado a tu agenda telefónica.");
	return 1;
}

CMD:estado(playerid, params[])
{
	if (InfoPlayer[playerid][pNivel] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "Debes ser mínimo nivel 3 para utilizar este comando.");
	new result[32], string[256];
	if (sscanf(params, "s[32]", result)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /estado (Texto)");
	if (isnull(result) || strlen(result) > 32) return SendClientMessage(playerid, COLOR_GREY, "* El estado sólo puede contener 32 caracteres.");
	if (!isnull(InfoPlayer[playerid][pEstadoYo])) //quitar
	{
		format(string, sizeof string, "** {E81700}Retiraste{EBEBEB} tu estado: {00A5AA}%s", InfoPlayer[playerid][pEstadoYo]);
		SendClientMessage(playerid, 0xEBEBEBFF, string);
		DestroyDynamic3DTextLabel(InfoPlayer[playerid][pNameTag]);
		alm(InfoPlayer[playerid][pEstadoYo], "");
	}
	else //poner
	{
		format(string, sizeof string, "** {54C822}Colocaste{EBEBEB} un nuevo estado: {00A5AA}%s", result);
		SendClientMessage(playerid, 0xEBEBEBFF, string);
		SendClientMessage(playerid, COLOR_YELLOW, "El estado queda permanente (sin importar re-login), si deseas retirarlo usa '/estado' nuevamente.");
		alm(InfoPlayer[playerid][pEstadoYo], result);
		DestroyDynamic3DTextLabelEx(InfoPlayer[playerid][pNameTag]);
		InfoPlayer[playerid][pNameTag] = CreateDynamic3DTextLabel(result, 0x00A5AAFF, 0, 0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	}
	guardar_string_mysql("cuentas", "EstadoYo", InfoPlayer[playerid][pID], InfoPlayer[playerid][pEstadoYo]);
	return 1;
}
CMD:yo(playerid, params[]) return cmd_estado(playerid, params);

CMD:me(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /me (acción)");
	new string[256];
	format(string, sizeof string, "* %s %s.", NombreJugador(playerid), params);
	ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:b(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /b (ooc chat)");
	new string[320];
	if (AdminDuty[playerid] != 0) format(string, sizeof string, "[OOC {FF2F2F}%s{C8C8C8} | %d] %s: %s", GetAdminName(playerid), playerid, NombreOriginal(playerid), params);
	else format(string, sizeof string, "[OOC | %d] %s: %s", playerid, NombreOriginal(playerid), params);
	ProxDetector(25.0, playerid, string, 0xC8C8C8FF, 0xC8C8C8FF, 0xC8C8C8FF, 0xC8C8C8FF, 0xC8C8C8FF);
	return 1;
}

CMD:intentar(playerid, params[])
{
	if (Intentar[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Espera 10 segundos para volver a utilizar este comando!");
	new randa = random(3);
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /intentar (acción)");
	new string[256];
	if (randa == 1)
	{
		format(string, sizeof string, "* %s intenta %s y lo logra.", NombreJugador(playerid), params);
		ProxDetector(20.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
	}
	else
	{
		format(string, sizeof string, "* %s intenta %s pero falla.", NombreJugador(playerid), params);
		ProxDetector(30.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
	}
	Intentar[playerid] = 1;
	SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
	return 1;
}

CMD:c(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /c (ic chat)");
	new string[256];
	format(string, sizeof string, "%s: %s", NombreJugador(playerid), params);
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	return 1;
}

CMD:do(playerid, params[])
{
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /do (entorno o aclaración)");
	new string[256];
	format(string, sizeof string, "* %s (( %s ))", params, NombreJugador(playerid));
	ProxDetector(30.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
	return 1;
}

CMD:s(playerid, params[])
{
	new string[256];
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /s (texto a susurrar)");
	format(string, sizeof string, "%s susurra: %s", NombreJugador(playerid), params);
	ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	return 1;
}

CMD:g(playerid, params[])
{
	new string[256];
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /g (texto a gritar)");
	format(string, sizeof string, "%s grita: ¡¡%s!!", NombreJugador(playerid), params);
	ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
	return 1;
}

CMD:ao(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /ao (general chat)");
	new string[256];
	format(string, sizeof string, "{FFBF00}[GENERAL] %s{FFFFFF} %s: %s", GetAdminName(playerid), NombreJugador(playerid), params);
	SendAllMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:enmascarados(playerid)
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Enmascarados:");
	Loop(playerid2, MAX_PLAYERS, 0) if (InfoPlayer[playerid2][pUsoMascara] == 1)
	{
		new string[190];
		format(string, sizeof string, "** %s (%d) - usando: {FF2F2F}%s", NombreOriginal(playerid2), playerid2, NombreJugador(playerid2));
		SendClientMessage(playerid, COLOR_GRAD2, string);
	}
	return 1;
}

CMD:enmascaradospd(playerid)
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Enmascarados policiales:");
	Loop(playerid2, MAX_PLAYERS, 0) if (!isnull(InfoPlayer[playerid2][pNombre_PD]))
	{
		new string[190];
		format(string, sizeof string, "** %s (%d) - usando: {FF2F2F}%s", NombreOriginal(playerid2), playerid2, InfoPlayer[playerid2][pNombre_PD]);
		SendClientMessage(playerid, COLOR_GRAD2, string);
	}
	return 1;
}

CMD:enmascaradosadmin(playerid)
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Enmascarados admins:");
	Loop(playerid2, MAX_PLAYERS, 0) if (!isnull(InfoPlayer[playerid2][pNombre_Temporal]))
	{
		new string[190];
		format(string, sizeof string, "** %s (%d) - usando: {FF2F2F}%s", NombreOriginal(playerid2), playerid2, InfoPlayer[playerid2][pNombre_Temporal]);
		SendClientMessage(playerid, COLOR_GRAD2, string);
	}
	return 1;
}

CMD:comprar(playerid)
{
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "No estás en el interior de ningún negocio.");
	if (InfoNegocio[id][nVenta] != 0)
	{
		if (InfoNegocio[id][nProductos] < 1) return SendClientMessage(playerid, COLOR_GREY, "Este negocio no tiene productos.");
	}
	if (!IsPlayerInRangeOfPoint(playerid, 4.0, InfoNegocio[id][nLugarCompraX], InfoNegocio[id][nLugarCompraY], InfoNegocio[id][nLugarCompraZ])) return SendClientMessage(playerid, COLOR_GREY, "No estás en el lugar de compra.");
	id_negocio[playerid] = id;
	new dialg_products[1028];
	switch (InfoNegocio[id][nTipo])
	{
		case 1: // 24-7
		{
			strcat(dialg_products, "Producto\tValor\tUnidades\n");
			strcat(dialg_products, "{EBEBEB}Número de teléfono\t{04B404}$500\t{FFBF00}1\n");
			strcat(dialg_products, "{EBEBEB}Teléfono S10 color oro\t{04B404}$2,500\t{FFBF00}1\n");
			strcat(dialg_products, "{EBEBEB}Paquete de cigarros\t{04B404}$120\t{FFBF00}20\n");
			strcat(dialg_products, "{EBEBEB}Encendedor\t{04B404}$70\t{FFBF00}20\n");
			strcat(dialg_products, "{EBEBEB}Cámara fotográfica\t{04B404}$1,200\t{FFBF00}50\n");
			strcat(dialg_products, "{EBEBEB}Boombox\t{04B404}$3,800\t{FFBF00}1");
			Dialog_Show(playerid, Show24siete, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}24/7", dialg_products, "Comprar", "Salir");
		}
		case 2: // ropa
		{
			if (InfoPlayer[playerid][pSexo] == 1)
			{
				strcat(dialg_products, "Ropa de civil\n");
				strcat(dialg_products, "Ropa de pandillero\n");
				strcat(dialg_products, "Ropa de mafioso\n");
				strcat(dialg_products, "Ropa sexy\n");
				strcat(dialg_products, "Toys");
			}
			else
			{
				strcat(dialg_products, "Ropa de civil\n");
				strcat(dialg_products, "Ropa de pandillera\n");
				strcat(dialg_products, "Ropa de mafiosa\n");
				strcat(dialg_products, "Ropa sexy\n");
				strcat(dialg_products, "Toys");
			}
			Dialog_Show(playerid, ShowRopa, DIALOG_STYLE_LIST, "{FFBF00}Tienda de ropa", dialg_products, "Continuar", "Salir");
		}
		case 3,8: // restaurantes y bar
		{
			strcat(dialg_products, "Producto\tValor\n");
			strcat(dialg_products, "{EBEBEB}Huevos con Chorizo\t{04B404}$20\n");
			strcat(dialg_products, "{EBEBEB}Jamón Ibérico\t{04B404}$30\n");
			strcat(dialg_products, "{EBEBEB}Sopa de Marisco\t{04B404}$25\n");
			strcat(dialg_products, "{EBEBEB}Macarrones a la Bolognesa\t{04B404}$15\n");
			strcat(dialg_products, "{EBEBEB}Ensalada\t{04B404}$10\n");
			strcat(dialg_products, "{EBEBEB}Cerveza\t{04B404}$3\n");
			strcat(dialg_products, "{EBEBEB}Vino tinto\t{04B404}$5\n");
			strcat(dialg_products, "{EBEBEB}Champagne\t{04B404}$6\n");
			strcat(dialg_products, "{EBEBEB}Coca-Cola\t{04B404}$2\n");
			strcat(dialg_products, "{EBEBEB}Agua\t{04B404}$1");
			Dialog_Show(playerid, ShowRestaurante, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Menú de produtos", dialg_products, "Comprar", "Salir");
		}
		case 4: // gasolinera
		{
			strcat(dialg_products, "Producto\tValor\n");
			strcat(dialg_products, "{EBEBEB}Lata de gasolina\t{04B404}$200\n");
			strcat(dialg_products, "{EBEBEB}Bolsa de patatas\t{04B404}$30\n");
			strcat(dialg_products, "{EBEBEB}Refresco\t{04B404}$20\n");
			strcat(dialg_products, "{EBEBEB}Paquete de cigarros\t{04B404}$40\n");
			strcat(dialg_products, "{EBEBEB}Encendedor\t{04B404}$20");
			Dialog_Show(playerid, ShowGasolinera, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Gasolinera", dialg_products, "Comprar", "Salir");
		}
		case 5: // ammunation
		{
			if (InfoPlayer[playerid][pLicencia][3] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Vendedor dice: Es imposible venderte armas, no tienes licencia para portarlas.");
			if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_GREY, "Debes tener al menos dos horas de juego para comprar armas.");
			strcat(dialg_products, "Producto\tValor\n");
			strcat(dialg_products, "{EBEBEB}Puño americano\t{04B404}$25\n");
			strcat(dialg_products, "{EBEBEB}Bate\t{04B404}$50\n");
			strcat(dialg_products, "{EBEBEB}Pistola 9mm\t{04B404}$15,000\n");
			strcat(dialg_products, "{EBEBEB}Escopeta\t{04B404}$28,000\n");
			strcat(dialg_products, "{EBEBEB}Rifle de caza\t{04B404}$35,000\n");
			strcat(dialg_products, "{EBEBEB}Comprar balas");
			Dialog_Show(playerid, ShowAmmunation, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Ammunation", dialg_products, "Comprar", "Salir");
		}
		case 7: // sex shop
		{
			strcat(dialg_products, "Producto\tValor\n");
			strcat(dialg_products, "{EBEBEB}Dildo\t{04B404}$350\n");
			strcat(dialg_products, "{EBEBEB}Consolador\t{04B404}$200");
			Dialog_Show(playerid, ShowSexShop, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Tienda erótica", dialg_products, "Comprar", "Salir");
		}
		case 10: // concesionario
		{
			if (DetectarMaxVehiculos(playerid) == 1) return 1;
			new showConcesionario[4056] = "Modelo\tValor\n", gformat[256], iCount = 0;
			Loop(xd, sizeof infovehicle, 0) if (infovehicle[xd][elPrecio] != 0)
			{
				format(gformat, sizeof gformat, "{EBEBEB}%s\t{04B404}$%s\n", infovehicle[xd][elNombre], diner_coma(infovehicle[xd][elPrecio]));
				strcat(showConcesionario, gformat);
				//conteo
				new gformat2[64];
				format(gformat2, sizeof gformat2, "vehConcesinx%d", iCount);
				SetPVarInt(playerid, gformat2, xd);
				iCount++;
			}
			Dialog_Show(playerid, ComprarVehiculo, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Concesionaria", showConcesionario, "Continuar", "Salir");
		}
		case 11: // pescadería
		{
			Dialog_Show(playerid, ShowPescaderia, DIALOG_STYLE_LIST, "Tienda del Puerto", "Carnada\nLineas", "Continuar", "Salir");
		}
		case 13: // clínicas
		{
			new precio = 1500, string[190];
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Botiquin{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 53, 1) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste un botiquin. (/hpsave)");
			GivePlayerCash(playerid, -precio, "compra botiquin");
			CobroNegocio(id_negocio[playerid], precio);
		}
	}
	return 1;
}
CMD:tomarhp(playerid) return cmd_comprar(playerid);

Dialog:ComprarVehiculo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new veh = listitem, gformat[40];
	format(gformat, sizeof gformat, "vehConcesinx%d", veh);
	new id = GetPVarInt(playerid, gformat), color1 = random(250), color2 = random(250);
	if (infovehicle[id][elPrecio] == 0) return SendClientMessage(playerid, 0xebebebff, "Ese vehículo es premium o de facción.");
	TextDrawShowForPlayer(playerid, CocheVS[0]);
	//modelo nombre
	format(gformat, sizeof gformat, "%s", infovehicle[id][elNombre]);
	PlayerTextDrawSetStringEx(playerid, pCocheVS[playerid][0], gformat);
	PlayerTextDrawShow(playerid, pCocheVS[playerid][0]);
	//angulo1
	PlayerTextDrawSetPreviewModel(playerid, pCocheVS[playerid][1], infovehicle[id][elModelo]);
	PlayerTextDrawSetPreviewVehCol(playerid, pCocheVS[playerid][1], color1, color2);
	PlayerTextDrawShow(playerid, pCocheVS[playerid][1]);
	//angulo2
	PlayerTextDrawSetPreviewModel(playerid, pCocheVS[playerid][2], infovehicle[id][elModelo]);
	PlayerTextDrawSetPreviewVehCol(playerid, pCocheVS[playerid][2], color1, color2);
	PlayerTextDrawShow(playerid, pCocheVS[playerid][2]);
	//angulo3
	PlayerTextDrawSetPreviewModel(playerid, pCocheVS[playerid][3], infovehicle[id][elModelo]);
	PlayerTextDrawSetPreviewVehCol(playerid, pCocheVS[playerid][3], color1, color2);
	PlayerTextDrawShow(playerid, pCocheVS[playerid][3]);
	//angulo4
	PlayerTextDrawSetPreviewModel(playerid, pCocheVS[playerid][4], infovehicle[id][elModelo]);
	PlayerTextDrawSetPreviewVehCol(playerid, pCocheVS[playerid][4], color1, color2);
	PlayerTextDrawShow(playerid, pCocheVS[playerid][4]);
	//precio
	format(gformat, sizeof gformat, "$%s", diner_coma(infovehicle[id][elPrecio]));
	PlayerTextDrawSetStringEx(playerid, pCocheVS[playerid][5], gformat);
	PlayerTextDrawShow(playerid, pCocheVS[playerid][5]);
	//espacios maletero
	if (infovehicle[id][elModelo] == 509 || infovehicle[id][elModelo] == 481 || infovehicle[id][elModelo] == 510) PlayerTextDrawSetStringEx(playerid, pCocheVS[playerid][6], "Maletero:_0_ranuras");
	else
	{
		format(gformat, sizeof gformat, "Maletero:_%d_ranuras", infovehicle[id][elMaxMaletero]);
		PlayerTextDrawSetStringEx(playerid, pCocheVS[playerid][6], "");
	}
	//regresar
	TextDrawShowForPlayer(playerid, CocheVS[1]);
	//comprar
	TextDrawShowForPlayer(playerid, CocheVS[2]);
	//selección
	SelectTextDraw(playerid, 0x00FF00FF);
	CompraVehiculo[playerid] = id;
	return 1;
}

Dialog:Show24siete(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new string[195];
	switch (listitem)
	{
		case 0:
		{
		    new precio = 500;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Número de teléfono{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			InfoPlayer[playerid][pTelefono] = 100000+random(899999);
			guardar_int_mysql("cuentas", "Telefono", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTelefono]);
			format(string, sizeof string, "Compraste nuevo chip de teléfono. (Número: %d)", InfoPlayer[playerid][pTelefono]);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			GivePlayerCash(playerid, -precio, "compra de chip de telefono");
			CobroNegocio(id_negocio[playerid], precio);
		}
		case 1:
		{
		    new precio = 2500;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Teléfono S10 color oro{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 50, 1) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste teléfono S10 color oro.");
			GivePlayerCash(playerid, -precio, "compra de telefono");
			CobroNegocio(id_negocio[playerid], precio);
		}
		case 2:
		{
		    new precio = 120;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Paquete de cigarros{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 42, 20) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste un paquete de 20 cigarros. (/fumar)");
			GivePlayerCash(playerid, -precio, "compra de 20 cigarros");
			CobroNegocio(id_negocio[playerid], precio);
		}
		case 3:
		{
		    new precio = 70;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Encendedor{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 41, 20) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste un encendedor.");
			GivePlayerCash(playerid, -precio, "compra de encendedor");
			CobroNegocio(id_negocio[playerid], precio);
		}
		case 4:
		{
		    new precio = 1200;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Cámara fotográfica{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (PlayerWeapon(playerid, 43) == 0) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste una cámara fotográfica.");
			GivePlayerCash(playerid, -precio, "compra de cámara fotográfica");
			CobroNegocio(id_negocio[playerid], precio);
		}
		case 5:
		{
		    new precio = 3800;
			if (GetPlayerCash(playerid) < precio)
			{
				format(string, sizeof string, "Te hacen falta $%s para comprar '{FFBF00}Boombox{EBEBEB}' por $%s.", diner_coma(precio-GetPlayerCash(playerid)), diner_coma(precio));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
				return 1;
			}
			if (DarObjeto(playerid, 51, 1) == 2) return 1;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Compraste un boombox. (/equiposonido).");
			GivePlayerCash(playerid, -precio, "compra de boombox");
			CobroNegocio(id_negocio[playerid], precio);
		}
	}
	return 1;
}

Dialog:ShowRopa(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (listitem == 4)
	{
		new max_cToys = 4;
		if (InfoPlayer[playerid][pVIP] == 3) max_cToys = 7;
		Loop(id, max_cToys, 0) if (InfoPlayer[playerid][ptModelo][id] == 0)
		{
			slotselection[playerid] = id;
			new ToyMuestra[180], count = 0;
			Loop(x, sizeof InfoToy, 0) if (InfoToy[x][accTipo] == 1)
			{
				ToyMuestra[count] = InfoToy[x][accModelo];
				count++;
			}
			ShowModelSelectionMenuEx(playerid, ToyMuestra, count, "Toys", Compra_Toy);
			return 1;
		}
		new gformat[128];
		format(gformat, sizeof gformat, "No puedes tener más de %d toys.", max_cToys);
		SendClientMessage(playerid, COLOR_GREY, gformat);
		return 1;
	}
	new SkinMuestra[150], name_tip[42], count = 0, id_tip = listitem+1;
	switch (id_tip)
	{
		case 1: alm(name_tip, "Ropa de civil");
		case 2:
		{
			if (InfoPlayer[playerid][pSexo] == 1) alm(name_tip, "Ropa de pandillero");
			else alm(name_tip, "Ropa de pandillera");
		}
		case 3:
		{
			if (InfoPlayer[playerid][pSexo] == 1) alm(name_tip, "Ropa de mafioso");
			else alm(name_tip, "Ropa de mafiosa");
		}
		case 4: alm(name_tip, "Ropa sexy");
	}
	Loop(x, sizeof InfoSkin, 0) if (InfoSkin[x][sSexo] == InfoPlayer[playerid][pSexo] && InfoSkin[x][sTipo] == id_tip)
	{
		SkinMuestra[count] = x;
		count++;
	}
	ShowModelSelectionMenuEx(playerid, SkinMuestra, count, name_tip, Compra_Skin, -11.0, 0.0, -55.0, 1.0);
	return 1;
}

Dialog:ShowRestaurante(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new Float:Health = InfoPlayer[playerid][pVida];
	switch (listitem)
	{
		case 0:
		{
			if (Health < 101) dar_vida(playerid, Health+20);
			cmd_me(playerid, "come un plato de huevos con chorizo");
			GivePlayerCash(playerid, -20, "compra de plato huevos");
			CobroNegocio(id_negocio[playerid], 20);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha comido");
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
		}
		case 1:
		{
			if (Health < 101) dar_vida(playerid, Health+30);
			cmd_me(playerid, "come un plato de jamón ibérico");
			GivePlayerCash(playerid, -30, "compra de jamón");
			CobroNegocio(id_negocio[playerid], 30);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha comido");
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
		}
		case 2:
		{
			if (Health < 101) dar_vida(playerid, Health+25);
			cmd_me(playerid, "come una tasa de sopa de marisco");
			GivePlayerCash(playerid, -25, "compra de tasa sopa");
			CobroNegocio(id_negocio[playerid], 25);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha comido");
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
		}
		case 3:
		{
			if (Health < 101) dar_vida(playerid, Health+15);
			cmd_me(playerid, "come un plato de macarrones a la bolognesa");
			GivePlayerCash(playerid, -15, "compra de plato macarrones");
			CobroNegocio(id_negocio[playerid], 15);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha comido");
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
		}
		case 4:
		{
			if (Health < 101) dar_vida(playerid, Health+10);
			cmd_me(playerid, "come un plato de ensalada");
			GivePlayerCash(playerid, -10, "compra de ensalada");
			CobroNegocio(id_negocio[playerid], 10);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha comido");
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
		}
		case 5:
		{
			if (Health < 101) dar_vida(playerid, Health+3);
			cmd_me(playerid, "bebe una cerveza");
			GivePlayerCash(playerid, -3, "compra de cerveza");
			CobroNegocio(id_negocio[playerid], 3);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha bebido");
				PlayerDrunk[playerid]  += 1;
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		}
		case 6:
		{
			if (Health < 101) dar_vida(playerid, Health+5);
			cmd_me(playerid, "bebe una copa de vino");
			GivePlayerCash(playerid, -5, "compra de copa de vino");
			CobroNegocio(id_negocio[playerid], 5);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha bebido");
				PlayerDrunk[playerid]  += 1;
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		}
		case 7:
		{
			if (Health < 101) dar_vida(playerid, Health+6);
			cmd_me(playerid, "bebe una copa de champagne");
			GivePlayerCash(playerid, -6, "compra de copa champagne");
			CobroNegocio(id_negocio[playerid], 6);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha bebido");
				PlayerDrunk[playerid]  += 1;
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		}
		case 8:
		{
			if (Health < 101) dar_vida(playerid, Health+2);
			cmd_me(playerid, "bebe una coca cola");
			GivePlayerCash(playerid, -2, "compra de cocacola");
			CobroNegocio(id_negocio[playerid], 2);
			PlayerDrunk[playerid] += 2;
			if (PlayerDrunk[playerid] > 10)
			{
				quitar_vida(playerid, -20);
				cmd_me(playerid, "vomita lo que ha bebido");
				PlayerDrunk[playerid]  += 1;
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			}
			else SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		}
		case 9:
		{
			if (Health < 101) dar_vida(playerid, Health+1);
			cmd_me(playerid, "bebe una coca cola");
			GivePlayerCash(playerid, -1, "compra de cocacola");
			CobroNegocio(id_negocio[playerid], 1);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			if (PlayerDrunk[playerid] > 0) { PlayerDrunk[playerid]--; }
		}
	}
	return 1;
}

Dialog:ShowGasolinera(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (CheckMoney(playerid, 200) == 0) return 1;
			autorepara[playerid] = 1;
			SendClientMessage(playerid, 0xA2DC35FF, "[Gas]:{FFFFFF} Compraste una lata de gasolina. Comandos: /rellenarauto");
			GivePlayerCash(playerid, -200, "compra de lata de gasolina");
			CobroNegocio(id_negocio[playerid], 200);
		}
		case 1:
		{
			if (CheckMoney(playerid, 30) == 0) return 1;
			new Float:Health = InfoPlayer[playerid][pVida];
			if (Health < 101)	{	dar_vida(playerid, Health+20); 	}
			cmd_me(playerid, "come una bolsa de patatas");
			ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0, 1);
			GivePlayerCash(playerid, -30, "compra de bolsa de patatas");
			CobroNegocio(id_negocio[playerid], 30);
		}
		case 2:
		{
			if (CheckMoney(playerid, 20) == 0) return 1;
			new Float:Health = InfoPlayer[playerid][pVida];
			if (Health < 101)	{	dar_vida(playerid, Health+2); 	}
			cmd_me(playerid, "bebe un refresco");
			GivePlayerCash(playerid, -20, "compra de refresco");
			CobroNegocio(id_negocio[playerid], 20);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		}
		case 3:
		{
			if (CheckMoney(playerid, 40) == 0) return 1;
			if (DarObjeto(playerid, 42, 8) == 2) return 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, 0xA2DC35FF, "[Gas]:{FFFFFF} Compraste una caja de cigarros (8 unidades). Comandos: /fumar");
			GivePlayerCash(playerid, -40, "compra de 8 cigarros");
			CobroNegocio(id_negocio[playerid], 40);
		}
		case 4:
		{
			if (CheckMoney(playerid, 20) == 0) return 1;
			if (DarObjeto(playerid, 41, 8) == 2) return 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, 0xA2DC35FF, "[Gas]:{FFFFFF} Compraste un encendedor (8 usos).");
			GivePlayerCash(playerid, -20, "compra de encendedor 8u");
			CobroNegocio(id_negocio[playerid], 20);
		}
	}
	return 1;
}

Dialog:ShowAmmunation(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: //puño americano
		{
			if (CheckMoney(playerid, 25) == 0) return 1;
			if (PlayerWeapon(playerid, 1) == 0) return 1;
			GivePlayerCash(playerid, -25, "compra de puño americano");
			CobroNegocio(id_negocio[playerid], 25);
		}
		case 1: //bate
		{
			if (CheckMoney(playerid, 50) == 0) return 1;
			if (PlayerWeapon(playerid, 5) == 0) return 1;
			GivePlayerCash(playerid, -50, "compra de bate");
			CobroNegocio(id_negocio[playerid], 50);
		}
		case 2: //9mm
		{
			if (CheckMoney(playerid, 15000) == 0) return 1;
			if (PlayerWeapon(playerid, 22) == 0) return 1;
			GivePlayerCash(playerid, -15000, "compra de 9mm");
			CobroNegocio(id_negocio[playerid], 15000);
		}
		case 3: //escopeta
		{
			if (CheckMoney(playerid, 28000) == 0) return 1;
			if (PlayerWeapon(playerid, 25) == 0) return 1;
			GivePlayerCash(playerid, -28000, "compra de escopeta");
			CobroNegocio(id_negocio[playerid], 28000);
		}
		case 4: //rifle de caza
		{
			if (CheckMoney(playerid, 35000) == 0) return 1;
			if (PlayerWeapon(playerid, 33) == 0) return 1;
			GivePlayerCash(playerid, -35000, "compra de rifle de caza");
			CobroNegocio(id_negocio[playerid], 35000);
		}
		case 5: //comprar balas
		{
			new mano = InfoPlayer[playerid][pManoDerecha], cantidad = InfoPlayer[playerid][pManoDerechaCant];
			new weaponid = InfoInventario[mano][IDArma], gformat[470];
			if (!weaponid) return SendClientMessage(playerid, COLOR_GREY, "No estás sosteniendo un arma en tu mano derecha.");
			if (cantidad == InfoInventario[mano][MaxCantidad])
			{
				format(gformat, sizeof gformat, "El máximo de balas de tu %s es de %d.", InfoInventario[mano][NombreObjeto], InfoInventario[mano][MaxCantidad]);
				SendClientMessage(playerid, COLOR_GREY, gformat);
				return 1;
			}
			format(gformat, sizeof gformat, "{FFFFFF}El costo de cada bala es de {00CC00}10${FFFFFF}.\n\nPuedes comprar {FFBF00}%d balas{FFFFFF} más para tu {FFBF00}%s{FFFFFF}.\n", InfoInventario[mano][MaxCantidad]-cantidad, InfoInventario[mano][NombreObjeto]);
			Dialog_Show(playerid, BuyBalas, DIALOG_STYLE_INPUT, "{FFBF00}Compra de balas", gformat, "Comprar", "Volver");
		}
	}
	return 1;
}

Dialog:BuyBalas(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_comprar(playerid);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Sólo números para las balas, vuelve a intentarlo.");
	new balasCant = strval(inputtext);
	new mano = InfoPlayer[playerid][pManoDerecha], cantidad = InfoPlayer[playerid][pManoDerechaCant];
	new weaponid = InfoInventario[mano][IDArma], gformat[470];
	if (cantidad+balasCant >= InfoInventario[mano][MaxCantidad]+1)
	{
		format(gformat, sizeof gformat, "No puedes comprar %d balas, si tu %s tiene %d balas, el máximo es %d.", balasCant, InfoInventario[mano][NombreObjeto], cantidad, InfoInventario[mano][MaxCantidad]);
		SendClientMessage(playerid, COLOR_GREY, gformat);
		return 1;
	}
	new costo = balasCant*10;
	if (CheckMoney(playerid, costo) == 0) return 1;
	//quita dinero
	GivePlayerCash(playerid, -costo, "compra de balas");
	CobroNegocio(id_negocio[playerid], costo);
	//actualiza balas
	InfoPlayer[playerid][pManoDerechaCant] += balasCant;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, weaponid, InfoPlayer[playerid][pManoDerechaCant]);
	//guarda variables
	ActualizarManos(playerid);
	//mensaje de compra uwu
	format(gformat, sizeof gformat, "Compraste {FFBF00}%d balas{FFFFFF} a tu {FFBF00}%s{FFFFFF} por {00CC00}$%s{FFFFFF}, ahora tienes {FFBF00}%d balas{FFFFFF}.", balasCant, InfoInventario[mano][NombreObjeto], diner_coma(costo), InfoPlayer[playerid][pManoDerechaCant]);
	SendClientMessage(playerid, 0xFFFFFFFF, gformat);
	return 1;
}

Dialog:ShowSexShop(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (CheckMoney(playerid, 350) == 0) return 1;
			if (PlayerWeapon(playerid, 10) == 0) return 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			cmd_me(playerid, "compra un dildo morado");
			GivePlayerCash(playerid, -350, "compra de dildo morado");
			CobroNegocio(id_negocio[playerid], 350);
		}
		case 1:
		{
			if (CheckMoney(playerid, 200) == 0) return 1;
			if (PlayerWeapon(playerid, 12) == 0) return 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			cmd_me(playerid, "compra un consolador");
			GivePlayerCash(playerid, -200, "compra de consolador");
			CobroNegocio(id_negocio[playerid], 200);
		}
	}
	return 1;
}

hide_comprarvehiculo(playerid)
{
	Loop(x, 3, 0)
		TextDrawHideForPlayer(playerid, CocheVS[x]);
	Loop(x, 7, 0)
		PlayerTextDrawHide(playerid, pCocheVS[playerid][x]);
}

Dialog:ShowPescaderia(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (Carnada[playerid] > 20) return SendClientMessage(playerid, COLOR_GREY, "{A2DC35}PESCA:{FFFFFF} Ya has comprado 20 carnadas para pescar, gastalas.");
			if (CheckMoney(playerid, 15) == 0) return 1;
			GivePlayerCash(playerid, -15, "compra de lata de carnadas");
			CobroNegocio(id_negocio[playerid], 15);
			SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}[PESCA]:{FFFFFF} Compraste una lata de carnadas. (20)");
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			Carnada[playerid] += 20;
		}
		case 1:
		{
			if (Lineas[playerid] > 20 ) return SendClientMessage(playerid, COLOR_GREY, "{A2DC35}[PESCA]:{FFFFFF} Ya has comprado 20 lineas para pescar, gastalas.");
			if (CheckMoney(playerid, 30) == 0) return 1;
			GivePlayerCash(playerid, -30, "compra de caña de pesca");
			CobroNegocio(id_negocio[playerid], 30);
			SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}[PESCA]:{FFFFFF} Compraste 10 lineas para la caña de pesca.");
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			Lineas[playerid] += 10;
		}
	}
	return 1;
}

CMD:acento(playerid, params[])
{
	new accent, gformat[256];
	if (sscanf(params, "d", accent))
	{
		SendClientMessage(playerid, COLOR_GREEN, "USO: /acento [id acento]");
		SendClientMessage(playerid, COLOR_WHITE, "Acentos: [1]Normal, [2]Britanico, [3,4,5]Asiatico, [6]Venezolano, [7]Peruano, [8]Ruso, [9]Americano.");
		SendClientMessage(playerid, COLOR_WHITE, "Acentos: [10]Español, [11]Colombiano, [12]Francés, [13]Italiano, [14]Gangster, [15]Uruguayo.");
		SendClientMessage(playerid, COLOR_WHITE, "Acentos: [16]Brasilero, [17]Argentino, [18]Chileno, [19]Cubano, [20]Israeli, [21]Alemán, [22]Hippie.");
		SendClientMessage(playerid, COLOR_WHITE, "Acentos: [23] Méxicano, [24]Árabe, [25]Noruego, [26]Australiano.");
		return 1;
	}
	InfoPlayer[playerid][pAcento] = accent;
	guardar_int_mysql("cuentas", "Acento", InfoPlayer[playerid][pID], InfoPlayer[playerid][pAcento]);
	format(gformat, sizeof gformat, "Ahora tu acento es {FFBF00}%s{FFFFFF}, usa {FFBF00}/acento{FFFFFF} para cambiarlo de nuevo.", GetNameAcento(accent));
	SendClientMessage(playerid, 0xFFFFFFFF, gformat);
	return 1;
}
CMD:acentos(playerid, params[]) return cmd_acento(playerid, params);

CMD:crearregalo(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "No puedes usar este comando mientras estás en un vehículo.");
	new string[170], Float:Position[4];
	if(dynamicgift == 0)
	{
		GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
		GetPlayerFacingAngle(playerid, Position[3]);
		dynamicgift = CreateDynamicObject(19054, Position[0], Position[1], Position[2]-0.4, 0.0, 0.0, Position[3], -1, -1, -1, 200.0);
		dynamicgift3DText = CreateDynamic3DTextLabel("Para recibir tu premio\n{FFFFFF}/regalo",COLOR_YELLOW,Position[0], Position[1], Position[2]+0.25,8.0);
		SetPlayerPos(playerid, Position[0], Position[1], Position[2]+3);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) pusó un regalo temporal.", NombreOriginal(playerid), playerid);
		SendAdminMessage(0xFFFFFFFF, string);
	}
	else
	{
		DestroyDynamicObject(dynamicgift);
		dynamicgift = 0;
		DestroyDynamic3DTextLabel( Text3D:dynamicgift3DText );
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) eliminó un regalo temporal.", NombreOriginal(playerid), playerid);
		SendAdminMessage(0xFFFFFFFF, string);
	}
	return 1;
}

CMD:regalo(playerid, params[])
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 3.0,799.3140,-1419.6476,1016.4688) || (playerid, 3.0,2376.4890, 1115.3467, 34.9547))
	{
		if(InfoPlayer[playerid][pVIP] >= 1)
		{
			if(InfoPlayer[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_WHITE, "La caja está bloqueada.");
	        if(InfoPlayer[playerid][pTiempoRegalo] != 0){
				format(string, sizeof string, "* Necesitas esperar %i hora(s) para abrir de nuevo el regalo.", InfoPlayer[playerid][pTiempoRegalo] / 3600);
				return SendClientMessage(playerid, COLOR_WHITE, string);
	        }
			format(string, sizeof string, "* %s abre el regalo con los ojos cerrados.", NombreJugador(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            InfoPlayer[playerid][pTiempoRegalo] = 18000;
			guardar_int_mysql("cuentas", "TiempoRegalo", InfoPlayer[playerid][pID], 18000);
			GiftPlayer(playerid);
		}
	}
	else if(dynamicgift != 0)
	{
		new Float:Position[3];
		GetDynamicObjectPos(dynamicgift, Position[0], Position[1], Position[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
		{
			if(InfoPlayer[playerid][pNivel] >= 1)
			{
	        	if(InfoPlayer[playerid][pTiempoRegalo] != 0){
					format(string, sizeof string, "* Necesitas esperar %i hora(s) para abrir de nuevo el regalo.", InfoPlayer[playerid][pTiempoRegalo] / 3600);
					return SendClientMessage(playerid, COLOR_WHITE, string);
	       	 	}
				format(string, sizeof string, "* %s mira el interior del regalo.", NombreJugador(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                InfoPlayer[playerid][pTiempoRegalo] = 18000;
				guardar_int_mysql("cuentas", "TiempoRegalo", InfoPlayer[playerid][pID], 18000);
				return GiftPlayer(playerid);
			}
			else SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		}
	}
	return 1;
}

CMD:bloqre(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[512], playerid2, reason[64];
	if (sscanf(params, "ds[64]", playerid2, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /bloqre(ID) (razón)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (InfoPlayer[playerid2][pNivelMuteoReport] != 0) SendClientMessage(playerid, COLOR_WHITE, "Ese jugador ya está deshabilitado de /re.");
	switch (InfoPlayer[playerid2][pAdvMuteoReport])
	{
		case 0:
		{
			InfoPlayer[playerid2][pAdvMuteoReport] = 1;
			format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha dado a %s(%d) su primera advertencia sobre abuso de reportes, razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
			SendAdminMessage(0xFFFFFFFF, string);
			format(string, sizeof string, "Un administrador te ha advertido sobre un abuso en el comando /re.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.");
			Dialog_Show(playerid2,ShowInvalido,DIALOG_STYLE_MSGBOX,"{FFBF00}Advertencia de abuso", string,"OK", "");
			format(string, sizeof string, "%s ha dado a %s su primera advertencia sobre abuso, razón: %s", NombreDeCuenta(playerid), NombreDeCuenta(playerid2), reason);
			Log("LOGS/mute.log", string);
		}
		case 1:
		{
  			InfoPlayer[playerid2][pNivelMuteoReport] = 2;
  			InfoPlayer[playerid2][pAdvMuteoReport] = 2;
			InfoPlayer[playerid2][pTiempoMuteoReport] = 15*60;
			format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha bloqueado temporalmente a %s(%d) del comando /re, razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
			SendAdminMessage(0xFFFFFFFF, string);
			format(string, sizeof string, "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la segunda vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 15 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", NombreOriginal(playerid), reason);
			Dialog_Show(playerid2,ShowInvalido,DIALOG_STYLE_MSGBOX,"{FFBF00}Bloqueo temporal", string,"OK", "");
			format(string, sizeof string, "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", NombreDeCuenta(playerid2), NombreDeCuenta(playerid), reason);
			Log("LOGS/mute.log", string);
		}
		case 2:
		{
			InfoPlayer[playerid2][pNivelMuteoReport] = 2;
			InfoPlayer[playerid2][pAdvMuteoReport] = 3;
			InfoPlayer[playerid2][pTiempoMuteoReport] = 30*60;
			format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha bloqueado temporalmente a %s(%d) del comando /re, razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
			SendAdminMessage(0xFFFFFFFF, string);
			format(string, sizeof string, "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la tercera vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 30 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", NombreOriginal(playerid), reason);
			Dialog_Show(playerid2,ShowInvalido,DIALOG_STYLE_MSGBOX,"{FFBF00}Bloqueo temporal", string,"OK", "");
			format(string, sizeof string, "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", NombreDeCuenta(playerid2), NombreDeCuenta(playerid), reason);
			Log("LOGS/mute.log", string);
		}
		case 3:
		{
			InfoPlayer[playerid2][pNivelMuteoReport] = 2;
			InfoPlayer[playerid2][pAdvMuteoReport] = 4;
			InfoPlayer[playerid2][pTiempoMuteoReport] = 45*60;
			format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha bloqueado temporalmente a %s(%d) del comando /re, razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
			SendAdminMessage(0xFFFFFFFF, string);
			format(string, sizeof string, "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la cuarta vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 45 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", NombreOriginal(playerid), reason);
			Dialog_Show(playerid2,ShowInvalido,DIALOG_STYLE_MSGBOX,"{FFBF00}Bloqueo temporal", string,"OK", "");
			format(string, sizeof string, "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", NombreDeCuenta(playerid2), NombreDeCuenta(playerid), reason);
			Log("LOGS/mute.log", string);
		}
		case 4:
		{
			InfoPlayer[playerid2][pNivelMuteoReport] = 2;
			InfoPlayer[playerid2][pAdvMuteoReport] = 5;
			InfoPlayer[playerid2][pTiempoMuteoReport] = 60*60;
			format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha bloqueado temporalmente a %s(%d) del comando /re, razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
			SendAdminMessage(0xFFFFFFFF, string);
			format(string, sizeof string, "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la quinta vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 60 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", NombreOriginal(playerid), reason);
			Dialog_Show(playerid2,ShowInvalido,DIALOG_STYLE_MSGBOX,"{FFBF00}Bloqueo temporal", string,"OK", "");
			format(string, sizeof string, "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", NombreDeCuenta(playerid2), NombreDeCuenta(playerid), reason);
			Log("LOGS/mute.log", string);
		}
		case 5:
		{
			InfoPlayer[playerid2][pNivelMuteoReport] = 1;
			InfoPlayer[playerid2][pAdvMuteoReport] = 6;
			format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha bloqueado permanentemente a %s(%d) del comando /re, razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
			SendAdminMessage(0xFFFFFFFF, string);
			format(string, sizeof string, "Tu has sido bloqueado permanentemente de los reportes por %s, razón: %s.\n\nComo está es la sexta vez que tu has sido bloqueado de los reportes, ya no podrás usar este comando, lo sentimos pero lo advertimos desde mucho antes.", NombreOriginal(playerid), reason);
			Dialog_Show(playerid2, ShowInvalido, DIALOG_STYLE_MSGBOX,"{FFBF00}Bloqueo indefinido de reportes", string,"OK", "");
			format(string, sizeof string, "AdmCmd: %s fue bloqueado permanentemente (6 Mutes) del comando /re por %s, razón: %s", NombreDeCuenta(playerid2), NombreDeCuenta(playerid), reason);
			Log("LOGS/mute.log", string);
		}
	}
	mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET NivelMuteoReport = '%d', AdvMuteoReport = '%d', TiempoMuteoReport = '%d' WHERE ID = '%d'", InfoPlayer[playerid2][pNivelMuteoReport], InfoPlayer[playerid2][pAdvMuteoReport], InfoPlayer[playerid2][pTiempoMuteoReport], InfoPlayer[playerid2][pID]);
	mysql_tquery(DBcreative, string);
	for(new i = 0; i < MAX_REPORTS; i++) if (Reports[i][ReportFrom] == playerid2)
	{
		Reports[i][BeingUsed] = 0;
	}
	return 1;
}

CMD:desbloqre(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[512], playerid2, reason[64];
	if (sscanf(params, "ds[64]", playerid2, reason)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /desbloqre (playerid) (reason)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (InfoPlayer[playerid2][pNivelMuteoReport] == 2)
	{
		InfoPlayer[playerid2][pNivelMuteoReport] = 0;
		InfoPlayer[playerid2][pAdvMuteoReport]--;
		InfoPlayer[playerid2][pTiempoMuteoReport] = 0;
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha desbloqueado del comando /re a %s(%d), razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
		SendAdminMessage(0xFFFFFFFF, string);
		SendClientMessage(playerid2, COLOR_GRAD2, "Has sido desbloqueado del comando de reportes, y ahora puedes usar el sistema de reportes de nuevo.");
		SendClientMessage(playerid2, COLOR_GRAD2, "Por favor acepta nuestras disculpas por cualquier error y molestias que esto pueda haber causado.");
		format(string, sizeof string, "AdmCmdExe: %s fue desbloqueado del cmd /re por %s, razón: %s", NombreDeCuenta(playerid2), NombreDeCuenta(playerid), reason);
		Log("LOGS/mute.log", string);
	}
	else if (InfoPlayer[playerid2][pNivelMuteoReport] == 1)
	{
		InfoPlayer[playerid2][pNivelMuteoReport] = 0;
		InfoPlayer[playerid2][pAdvMuteoReport] = 0;
		InfoPlayer[playerid2][pTiempoMuteoReport] = 0;
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha desbloqueado del cmd /re a %s(%d), razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
		SendAdminMessage(0xFFFFFFFF, string);
		SendClientMessage(playerid2, COLOR_GRAD2, "Has sido desbloqueado del comando de reportes, y ahora puedes usar el sistema de reportes de nuevo.");
		SendClientMessage(playerid2, COLOR_GRAD2, "Por favor acepta nuestras disculpas por cualquier error y molestias que esto pueda haber causado.");
		format(string, sizeof string, "AdmCmdExe: %s fue desbloqueado del cmd /re por %s, razón: %s", NombreDeCuenta(playerid2), NombreDeCuenta(playerid), reason);
		Log("LOGS/mute.log", string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no está bloqueado de los reportes.");
	}
	mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET NivelMuteoReport = '%d', AdvMuteoReport = '%d', TiempoMuteoReport = '%d' WHERE ID = '%d'", InfoPlayer[playerid2][pNivelMuteoReport], InfoPlayer[playerid2][pAdvMuteoReport], InfoPlayer[playerid2][pTiempoMuteoReport], InfoPlayer[playerid2][pID]);
	mysql_tquery(DBcreative, string);
	return 1;
}

CMD:callsign(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo miembros de la ley.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "* Debes ser el conductor de un vehículo.");

	new result[32], vehicleid = GetPlayerVehicleID(playerid), string[256];
	new id = verificar_id_vehiculo(vehicleid);

	if (vehiculos_legales(vehicleid) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Sólo se puede usar CallSign en vehículos legales.");
	if (llaves_faccion(playerid, vehicleid) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este vehículo de facción.");

	if (sscanf(params, "s[32]", result)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /callsign (Texto)");
	if (isnull(result) || strlen(result) > 32) return SendClientMessage(playerid, COLOR_GREY, "El callsign sólo puede contener 32 caracteres.");

	if (!isnull(InfoVehiculo[id][vCallSign])) //quitar
	{
		DestroyDynamic3DTextLabel(InfoVehiculo[id][vOnCallSign]);
		alm(InfoVehiculo[id][vCallSign], "");
		format(string, sizeof string, "** %s %s removió el callsign [%d].", fac_rango[InfoPlayer[playerid][pMiembro]][InfoPlayer[playerid][pRango]-1], NombreJugador(playerid), vehicleid);
	}
	else //poner
	{
		alm(InfoVehiculo[id][vCallSign], result);
		DestroyDynamic3DTextLabel(InfoVehiculo[id][vOnCallSign]);
		InfoVehiculo[id][vOnCallSign] = CreateDynamic3DTextLabel(result, 0xEBEBEBFF, -1.0, -2.8, 0.0, 30.0, INVALID_PLAYER_ID, vehicleid);
		format(string, sizeof string, "** %s %s fijó el callsign [%d]: %s", fac_rango[InfoPlayer[playerid][pMiembro]][InfoPlayer[playerid][pRango]-1], NombreJugador(playerid), vehicleid, result);
	}
	SendFaccionMessage(InfoPlayer[playerid][pMiembro], 0x989898FF, string);
	guardar_string_mysql("vehiculos", "CallSign", InfoVehiculo[id][vID_sql], InfoVehiculo[id][vCallSign]);
	return 1;
}

CMD:regalararma(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new sstring[256], playa, gun;
	if (sscanf(params, "dd", playa, gun))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Usa: /regalararma (ID) (ID Arma)");
		SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________________________________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_WHITE, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flores 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_WHITE, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle");
		SendClientMessage(playerid, COLOR_WHITE, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_WHITE, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_WHITE, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________________________________________________________________________________");
		return 1;
	}
	if (!IsPlayerConnected(playa)) return SendClientMessage(playerid, -1, "Jugador no conectado.");
	if ((InfoPlayer[playa][pHorasOn] < 2 ) && gun != 46 && gun != 43) return SendClientMessage(playerid, COLOR_GRAD2, "Ese jugador tiene restricción de armas de momento.");
	if (gun == 21)
	{
		JetPack[playa] = 1;
		SetPlayerSpecialAction(playa, SPECIAL_ACTION_USEJETPACK);
		return 1;
	}
	if (gun < 1||gun > 47) { SendClientMessage(playerid, COLOR_GRAD1, "{FFFF00}[ADM]:{FFFFFF} ID de Arma invalido."); return 1; }
	if (PlayerWeapon(playa, gun) == 0) return 1;
	format(sstring, sizeof sstring, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) le dió a %s(%d) [ID Arma: %d]", NombreOriginal(playerid), playerid, NombreOriginal(playa), playa, gun);
	SendAdminMessage(0xFFFFFFFF, sstring);
	format(sstring, sizeof sstring, "Has dado a %s [ID Arma: %d]", NombreOriginal(playa), gun);
	SendClientMessage(playerid, COLOR_GRAD1, sstring);
	return 1;
}
CMD:givegun(playerid, params[]) return cmd_regalararma(playerid, params);

CMD:aprender(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1401.1886, 174.4594, 1002.5007)) return SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}No estás en el lugar adecuado para aprender.");
	switch (InfoPlayer[playerid][pHabilidad][0])
	{
	    case 0:
		{
	    	Dialog_Show(playerid, Show1Aprender, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00} Compra tus conocimientos", "Nivel\tPrecio\n\
			Nivel 1, Lo básico\t200.000$\n\
			Nivel 2, Armas de fuego\t+300.000$\n\
			Nivel 3, Armas Avanzadas\t+500.000$",
			"Comprar", "Cancelar");
		}
	    case 1:
		{
	 		Dialog_Show(playerid, Show2Aprender, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00} Compra tus conocimientos", "Nivel\tPrecio\n\
			Nivel 1, Lo básico\t200.000$\n\
			Nivel 2, Armas de fuego\t+300.000$\n\
			Nivel 3, Armas Avanzadas\t+500.000$",
			"Comprar", "Cancelar");
		}
	    case 2:
		{
	 		Dialog_Show(playerid, Show3Aprender, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00} Compra tus conocimientos", "Nivel\tPrecio\n\
			Nivel 1, Lo básico\t200.000$\n\
			Nivel 2, Armas de fuego\t+300.000$\n\
			Nivel 3, Armas Avanzadas\t+500.000$",
			"Comprar", "Cancelar");
		}
		default:
		{
			SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}¡Felicitaciones! Ya lo sabes todo sobre armas, no puedes aprender más.");
		}
	}
	return 1;
}

Dialog:Show1Aprender(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (GetPlayerCash(playerid) >= 200000)
			{
				GivePlayerCash(playerid, -200000, "habilidad de armas (1)");
				SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}¡Felicidades! Has aprendido algo sobre la creación de armas, ahora podrás crear algunas.");
				InfoPlayer[playerid][pHabilidad][0]++;
				guardar_int_mysql("cuentas", "Habilidad1", InfoPlayer[playerid][pID], InfoPlayer[playerid][pHabilidad][0]);
				return 1;
			}
			SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Lo sentimos, no tienes el dinero suficiente para pagar el curso (200.000$).");
		}
		case 1: SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Para adquirir los conocimientos de esta clase primero deberás pasar por el primer nivel.");
	   	case 2: SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Para adquirir los conocimientos de esta clase primero deberás pasar por el segundo nivel.");
	}
	return 1;
}

Dialog:Show2Aprender(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Ya aprendiste este nivel, es innecesario gastar dinero en la misma clase.");
		case 1:
		{
			if (GetPlayerCash(playerid) >= 300000)
			{
				GivePlayerCash(playerid, -300000, "habilidad de armas (2)");
				SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}¡Felicidades! Has adquirido más conocimiento y ahora podrás crear más armas.");
				InfoPlayer[playerid][pHabilidad][0]++;
				guardar_int_mysql("cuentas", "Habilidad1", InfoPlayer[playerid][pID], InfoPlayer[playerid][pHabilidad][0]);
				return 1;
			}
			SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Lo sentimos, no tienes el dinero suficiente para pagar el curso (300.000$).");
		}
		case 2: SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Para adquirir los conocimientos de esta clase primero deberás pasar por el segundo nivel.");
	}
	return 1;
}

Dialog:Show3Aprender(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Ya aprendiste este nivel, es innecesario gastar dinero en la misma clase.");
		case 1: SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Ya aprendiste este nivel, es innecesario gastar dinero en la misma clase.");
		case 2:
		{
			if (GetPlayerCash(playerid) >= 500000)
			{
				GivePlayerCash(playerid, -500000, "habilidad de armas (3)");
				SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}¡Felicidades! Has adquirido los máximos conocimientos posibles para crear armamento.");
				InfoPlayer[playerid][pHabilidad][0]++;
				guardar_int_mysql("cuentas", "Habilidad1", InfoPlayer[playerid][pID], InfoPlayer[playerid][pHabilidad][0]);
				return 1;
			}
			SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}Lo sentimos, no tienes el dinero suficiente para pagar el curso (500.000$).");
		}
	}
	return 1;
}

CMD:creararma(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 3.0,1403.3466,169.7050,1002.5013)) return SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}No estás en el lugar adecuado para crear armas.");
	if (!CheckTimer(60, TimerWeaponCreate[playerid]))
	{
		switch (InfoPlayer[playerid][pHabilidad][0])
		{
			case 0: SendClientMessage(playerid, COLOR_GENERAL, "[!] {ffffff}No tienes ningún conocimiento para poder crear un arma.");
			case 1: Dialog_Show(playerid, ShowCreateWeapon, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Crear un arma", "Arma\tMateriales\n\
				{FFBF00}Balas\n\
				{DA81F5}Katana\t150m\n\
				{DA81F5}Bastón\t90m\n\
				{DA81F5}Palo billar\t90m\n\
				{DA81F5}Bate baseball\t90m\n\
				{DA81F5}Pala\t90m\n\
				{F7819F}Pistola 9mm\t700m",
				"Crear", "Cancelar");
			case 2: Dialog_Show(playerid, ShowCreateWeapon, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Crear un arma", "Arma\tMateriales\n\
				{FFBF00}Balas\n\
				{DA81F5}Katana\t150m\n\
				{DA81F5}Bastón\t90m\n\
				{DA81F5}Palo billar\t90m\n\
				{DA81F5}Bate baseball\t90m\n\
				{DA81F5}Pala\t90m\n\
				{F7819F}Pistola 9mm\t700m\n\
				{F7819F}Pistola silenciada\t780m\n\
				{F7819F}Escopeta\t1740m\n\
				{FE2E64}Desert Eagle\t1300m",
				"Crear", "Cancelar");
			case 3: Dialog_Show(playerid, ShowCreateWeapon, DIALOG_STYLE_TABLIST_HEADERS, "{FFBF00}Crear un arma", "Arma\tMateriales\n\
		 		{FFBF00}Balas\n\
				{DA81F5}Katana\t150m\n\
				{DA81F5}Bastón\t90m\n\
				{DA81F5}Palo billar\t90m\n\
				{DA81F5}Bate baseball\t90m\n\
				{DA81F5}Pala\t90m\n\
				{F7819F}Pistola 9mm\t700m\n\
				{F7819F}Pistola silenciada\t780m\n\
				{F7819F}Escopeta\t1740m\n\
				{FE2E64}Desert Eagle\t1300m\n\
				{FE2E64}MP5\t1310m\n\
				{FF0040}AK-47\t3980m\n\
				{FF0040}M4A1\t4950m\n\
				{FF0040}Sniper\t6500m\n\
				{FF0040}Tec-9\t1200m",
				"Crear", "Cancelar");
		}
	}
	else
	{
	    new string[190];
		format(string, sizeof string, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(60, TimerWeaponCreate[playerid]));
		SendClientMessage(playerid, 0xb0b0b0ff, string);
	}
	return 1;
}

Dialog:ShowCreateWeapon(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			new mano = InfoPlayer[playerid][pManoDerecha], cantidad = InfoPlayer[playerid][pManoDerechaCant];
			new weaponid = InfoInventario[mano][IDArma], gformat[470];
			if (!weaponid) return SendClientMessage(playerid, COLOR_GREY, "No estás sosteniendo un arma en tu mano derecha.");
			if (cantidad == InfoInventario[mano][MaxCantidad]+1)
			{
				format(gformat, sizeof gformat, "El máximo de balas de tu %s es de %d.", InfoInventario[mano][NombreObjeto], InfoInventario[mano][MaxCantidad]);
				SendClientMessage(playerid, COLOR_GREY, gformat);
				return 1;
			}
			format(gformat, sizeof gformat, "{FFFFFF}El valor de cada bala es de {00CC00}2 materiales{FFFFFF}.\n\nPuedes crear {FFBF00}%d balas{FFFFFF} más para tu {FFBF00}%s{FFFFFF}.\n", InfoInventario[mano][MaxCantidad]-cantidad, InfoInventario[mano][NombreObjeto]);
			Dialog_Show(playerid, CreateMunition, DIALOG_STYLE_INPUT, "{FFBF00}Creación de balas", gformat, "Crear", "Volver");
			return 1;
		}
		case 1:
		{
			if (InfoPlayer[playerid][pMateriales] < 150) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 8) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 150;
			cmd_me(playerid, "crea una katana con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 2:
		{
			if (InfoPlayer[playerid][pMateriales] < 90) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 15) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 90;
			cmd_me(playerid, "crea un bastón con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 3:
		{
			if (InfoPlayer[playerid][pMateriales] < 90) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 7) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 90;
			cmd_me(playerid, "crea un palo de billar con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 4:
		{
			if (InfoPlayer[playerid][pMateriales] < 90) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 5) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 90;
			cmd_me(playerid, "crea un bate con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 5:
		{
			if (InfoPlayer[playerid][pMateriales] < 90) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 6) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 90;
			cmd_me(playerid, "crea una Pala con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 6:
		{
			if (InfoPlayer[playerid][pMateriales] < 700) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 22) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 700;
			cmd_me(playerid, "crea una pistola 9mm con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 7:
		{
			if (InfoPlayer[playerid][pMateriales] < 780) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 23) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 780;
			cmd_me(playerid, "crea una pistola con silenciador con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 8:
		{
			if (InfoPlayer[playerid][pMateriales] < 1740) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 25) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 1740;
			cmd_me(playerid, "crea una shotgun con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 9:
		{
			if (InfoPlayer[playerid][pMateriales] < 1300) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 24) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 1300;
			cmd_me(playerid, "crea una Desert Eagle con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 10:
		{
			if (InfoPlayer[playerid][pMateriales] < 1310) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 29) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 1310;
			cmd_me(playerid, "crea una MP5 con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 11:
		{
			if (InfoPlayer[playerid][pMateriales] < 3980) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 30) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 3980;
			cmd_me(playerid, "crea una AK-47 con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 12:
		{
			if (InfoPlayer[playerid][pMateriales] < 4950) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 31) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 4950;
			cmd_me(playerid, "crea una M4A1 con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 13:
		{
			if (InfoPlayer[playerid][pMateriales] < 6500) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 34) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 6500;
			cmd_me(playerid, "crea un sniper rifle con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
		case 14:
		{
			if (InfoPlayer[playerid][pMateriales] < 1200) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
			if (PlayerWeapon(playerid, 32) == 0) return 1;
			InfoPlayer[playerid][pMateriales] -= 1200;
			cmd_me(playerid, "crea una tec-nine con sus materiales");
			TimerWeaponCreate[playerid] = gettime();
		}
	}
	guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
	return 1;
}

Dialog:CreateMunition(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_creararma(playerid);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Sólo números para las balas, vuelve a intentarlo.");
	new balasCant = strval(inputtext);
	new mano = InfoPlayer[playerid][pManoDerecha], cantidad = InfoPlayer[playerid][pManoDerechaCant];
	new weaponid = InfoInventario[mano][IDArma], gformat[470];
	if (cantidad+balasCant > InfoInventario[mano][MaxCantidad])
	{
		format(gformat, sizeof gformat, "No puedes crear %d balas, si tu %s tiene %d balas, el máximo es %d.", balasCant, InfoInventario[mano][NombreObjeto], cantidad, InfoInventario[mano][MaxCantidad]);
		SendClientMessage(playerid, COLOR_GREY, gformat);
		return 1;
	}
	new costo = balasCant*2;
	if (InfoPlayer[playerid][pMateriales] < costo) return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
	InfoPlayer[playerid][pMateriales] -= costo;
	//actualiza balas
	InfoPlayer[playerid][pManoDerechaCant] += balasCant;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, weaponid, InfoPlayer[playerid][pManoDerechaCant]);
	//guarda variables
	ActualizarManos(playerid);
	//mensaje de compra uwu
	format(gformat, sizeof gformat, "Creaste {FFBF00}%d balas{FFFFFF} a tu {FFBF00}%s{FFFFFF} por {00CC00}%d materiales{FFFFFF}, ahora tienes {FFBF00}%d balas{FFFFFF}.", balasCant, InfoInventario[mano][NombreObjeto], costo, InfoPlayer[playerid][pManoDerechaCant]);
	SendClientMessage(playerid, 0xFFFFFFFF, gformat);
	format(gformat, sizeof gformat, "crea %d balas para su %s con sus materiales", balasCant, InfoInventario[mano][NombreObjeto]);
	cmd_me(playerid, gformat);
	TimerWeaponCreate[playerid] = gettime();
	guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
	return 1;
}

CMD:cancelar(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessage(playerid, COLOR_GREEN, "|__________________ Cancelar __________________|");
		SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /cancelar (Nombre)");
		SendClientMessage(playerid, COLOR_GREY, "materiales - arma - divorcio - testigo - vip");
		SendClientMessage(playerid, COLOR_GREY, "multa - coche - mecanico - droga - casa - coinsvip");
		return 1;
	}
 	else if(strcmp(choice,"materiales",true) == 0) { MatsOffer[playerid] = 999; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
	else if(strcmp(choice,"arma",true) == 0)
	{
	    if (GunCliente[playerid] == -1) return SendClientMessage(playerid, -1, "Nadie te ha ofrecido un arma.");
		if (IsPlayerConnected(GunCliente[playerid]))
		{
			GunVendedor[GunCliente[playerid]] = -1;
			SendClientMessage(GunCliente[playerid], -1, "Cancelaron la compra.");
		}
		GunCliente[playerid] = -1;
		GunObjeto[playerid] = 0;
		GunCantidad[playerid] = 0;
		GunPrecio[playerid] = 0;
		SendClientMessage(playerid, -1, "Cancelaste la compra.");
	}
	else if(strcmp(choice,"coche",true) == 0) { Pla_vehicle[playerid] = 999; Price_vehicle[playerid] = 0; Osql_vehicle[playerid] = 0; }
	else if(strcmp(choice,"casa",true) == 0) { HouseOffer[playerid] = 999; HousePrice[playerid] = 0; House[playerid] = 0; }
	else if(strcmp(choice,"coinsvip",true) == 0) { FOffer[playerid] = 999; FPrice[playerid] = 0; FAmount[playerid] = 0; }
    else if(strcmp(choice,"vip",true) == 0){ VIPOffer[playerid] = 999; VIPPrice[playerid] = 0; }
	else if(strcmp(choice,"multa",true) == 0)
	{
	    if(TicketOffer[playerid] == 999) return SendClientMessage(playerid, COLOR_WHITE, "Nadie te multado.");
	    format(string, sizeof string, " %s se niega a pagar una multa", NombreJugador(playerid));
	    ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof string, "* %s canceló el pago de una multa de %d$.", NombreJugador(playerid), TicketMoney[playerid]);
	    SendClientMessage(TicketOffer[playerid], -1, string);
	    TicketOffer[playerid] = 999;
	    TicketMoney[playerid] = 0;
	    Facturing[playerid] = 0;
	}
	else if(strcmp(choice,"licencia",true) == 0)
	{
	    if(NombreLicencia[playerid] == 999) return SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido una licencia de armas.");
	    format(string, sizeof string, " %s se niega a pagar la licencia de armas.", NombreJugador(playerid));
	    ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof string, "* %s canceló el pago de la licencia por %d dólares.", NombreJugador(playerid), PrecioLicencia[playerid]);
	    SendClientMessage(NombreLicencia[playerid], -1, string);  // Mensaje al policia.
	    NombreLicencia[playerid] = 999;
	    PrecioLicencia[playerid] = 0;
	    Facturing[playerid] = 0;
	}
	else { return 1; }
	format(string, sizeof string, "* Cancelaste: %s.", choice);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:habilidad(playerid)
{
	new habilidad[248], habilidad2[2056];
	strcat(habilidad2, "Habilidad\tNivel\tProgreso\n");
	//vendedor de armas
	format(habilidad, sizeof habilidad, "{FB2828}Armas\t{EBEBEB}%s\t{74D805}%s\n", GetHabilidadArmas(playerid, 0), GetHabilidadArmas(playerid, 1));
	strcat(habilidad2, habilidad);
	//pescador
	format(habilidad, sizeof habilidad, "{0093D9}Pesca\t{EBEBEB}%s\t{74D805}%s\n", GetHabilidadPesca(playerid, 0), GetHabilidadPesca(playerid, 1));
	strcat(habilidad2, habilidad);
	//repartidor
	format(habilidad, sizeof habilidad, "{DE9203}Repartos\t{EBEBEB}%s\t{74D805}%s\n", GetHabilidadReparto(playerid, 0), GetHabilidadReparto(playerid, 1));
	strcat(habilidad2, habilidad);
	//
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, "Habilidades", habilidad2, "Cerrar", "");
	return 1;
}
CMD:skills(playerid) return cmd_habilidad(playerid);
CMD:habilidades(playerid) return cmd_habilidad(playerid);

/*
[2] //disponible
[3] //disponible
*/

NivelHabilidad(playerid, type)
{
	new nivel_actual = 0;
	switch (type)
	{
		case 0: //armas
		{
		    nivel_actual = InfoPlayer[playerid][pHabilidad][0];
		}
		case 1: //repartos
		{
			switch (InfoPlayer[playerid][pHabilidad][1])
			{
				case 0..50: nivel_actual = 1;
				case 51..100: nivel_actual = 2;
				case 101..150: nivel_actual = 3;
				case 151..250: nivel_actual = 4;
				default: nivel_actual = 5;
			}
		}
		case 4: //pesca
		{
			switch (InfoPlayer[playerid][pHabilidad][4])
			{
				case 0..50: nivel_actual = 1;
				case 51..100: nivel_actual = 2;
				case 101..200: nivel_actual = 3;
				case 201..400: nivel_actual = 4;
				default: nivel_actual = 5;
			}
		}
	}
	return nivel_actual;
}

GetHabilidadArmas(playerid, type)
{
	new status[32];
	if (type == 0)
	{
		switch (InfoPlayer[playerid][pHabilidad][0])
		{
			case 0: alm(status, "ninguno");
			case 1: alm(status, "básico");
			case 2: alm(status, "armas de fuego");
			case 3: alm(status, "armas avanzadas");
		}
	}
	else
	{
		if (InfoPlayer[playerid][pHabilidad][0] == 3) alm(status, "máximo");
		else format(status, sizeof status, "%d/3", InfoPlayer[playerid][pHabilidad][0]);
	}
	return status;
}

GetHabilidadPesca(playerid, type)
{
	new status[32];
	if (type == 0)
	{
		switch (InfoPlayer[playerid][pHabilidad][4])
		{
			case 0..50: alm(status, "básico");
			case 51..100: alm(status, "miembro");
			case 101..200: alm(status, "avanzado");
			case 201..400: alm(status, "competidor");
			default: alm(status, "maestro");
		}
	}
	else
	{
		if (InfoPlayer[playerid][pHabilidad][4] >= 400) alm(status, "máximo");
		else format(status, sizeof status, "%d/400", InfoPlayer[playerid][pHabilidad][4]);
	}
	return status;
}

GetHabilidadReparto(playerid, type)
{
	new status[32];
	if (type == 0)
	{
		switch (InfoPlayer[playerid][pHabilidad][1])
		{
			case 0..50: alm(status, "básico");
			case 51..100: alm(status, "miembro");
			case 101..150: alm(status, "avanzado");
			case 151..250: alm(status, "competidor");
			default: alm(status, "maestro");
		}
	}
	else
	{
		if (InfoPlayer[playerid][pHabilidad][1] >= 300) alm(status, "máximo");
		else format(status, sizeof status, "%d/300", InfoPlayer[playerid][pHabilidad][1]);
	}
	return status;
}


	CMD:teamspeak(playerid, params[])
	{
		return cmd_ts3(playerid, params);
	}
	CMD:informacion(playerid, params[])
	{
		SendClientMessage(playerid, COLOR_WHITE, "El Sistema de Información no está habilitado todavía." );
	}
	CMD:puntosrol(playerid, params[])
	{
		SendClientMessage(playerid, COLOR_WHITE, "Para obtener soporte del sistema de Puntos de rol, contácte con un miembro del staff." );
	}
    CMD:teamspeak3(playerid, params[])
	{
		return cmd_ts3(playerid, params);
	}
 	CMD:ts(playerid, params[])
	{
		return cmd_ts3(playerid, params);
	}
	CMD:ts3(playerid, params[])
	{
	    SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}[TS3]:{FFFFFF}IP: creativeroleplay.ts3host.es" );
	    return 1;
	}
	CMD:idiomas(playerid, params[])
	{
	    SendClientMessage(playerid, COLOR_GREY, "[INFO]: (Idiomas disponibles en el servidor) - /ing, /ale, /rus, /ita, /ara y /jap.");
	    return 1;
	}

CMD:pesca(playerid)
{
	SendClientMessage(playerid, COLOR_GREY, "[Sistema de pesca]: /liberarpez - /venderpez - /pescar.");
	return 1;
}

CMD:foro(playerid)
{
	SendClientMessage(playerid, COLOR_GENERAL, "FORO:{FFFFFF} www.cr-rp.com");
	return 1;
}

CMD:pendejo(playerid)
{
	SendClientMessage(playerid, COLOR_WHITE, "Usted quiso decir {FFBF00}Pablo Prieto{FFFFFF}.");
	return 1;
}

CMD:puente(playerid)
{
	if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes la experiencia necesaria para hacer esto. Necesitas más tiempo de juego.");
	if (member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GRAD2, "¡Los policias no pueden realizar puentes a los vehículos!");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "¡Tienes que ser el conductor de un vehículo!");
	if (InfoPlayer[playerid][pGanzuas] == 0) return SendClientMessage(playerid, COLOR_WHITE, "¡Primero necesitas una ganzúa para hacer el puente!");
	if (IntentarPuente[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "¡Espera 30 segundos para volver a utilizar este comando!");
	if (PlazaAyuntamiento(playerid))  return SendClientMessage(playerid, COLOR_GREY, "¡No puedes robar vehículos aquí, estás en una zona muy transitada!");
	new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid = GetPlayerVehicleID(playerid), string[245];
	if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes usar /puente en vehículos de facciones legales o de trabajos.");
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if ((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
	{
		format(string, sizeof string, "cruza los cables e intenta encender el motor del %s con unas ganzúas", GetVehicleName(vehicleid));
		cmd_me(playerid, string);
		new arranque = random(3)+1;
		if (arranque == 1 || arranque == 3)
		{
			format(string, sizeof string, "* %s intentó arrancar el vehículo y lo logró.", NombreJugador(playerid));
			ProxDetector(15.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			SetTimerEx("SetVehicleEngine", 2000, 0, "dd",  vehicleid, playerid); // Se ejecuta el arranque del coche.
			GameTextForPlayer(playerid, "~w~Realizando puente...",2500,3);
			SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective );
			InfoPlayer[playerid][pGanzuas] -= 1;
			guardar_int_mysql("cuentas", "Ganzuas", InfoPlayer[playerid][pID], InfoPlayer[playerid][pGanzuas]);
			IntentarPuente[playerid] = 1;
			new Float:cx,Float:cy,Float:cz;
			GetPlayerPos(playerid, cx, cy, cz);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof zone);
			Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2) && member_faccion(playerid2, 1, 2, 4))
			{
				format(string, sizeof string, "[CENTRAL] Se ha detectado el robo del vehìculo '%s' sospechoso %s cerca de %s.", GetVehicleName(vehicleid), NombreJugador(playerid), zone);
				SendSplitMessage(playerid2, COLOR_RADIO, string);
			}
			SetTimerEx("IntentarPuenteTimer", 30000, false, "i", playerid);
		}
		else
		{
			format(string, sizeof string, "* %s intentó arrancar el vehículo, pero falló.", NombreJugador(playerid));
			ProxDetector(3.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
			GameTextForPlayer(playerid, "~w~Realizando puente...",2500,3);
			InfoPlayer[playerid][pGanzuas] -= 1;
			guardar_int_mysql("cuentas", "Ganzuas", InfoPlayer[playerid][pID], InfoPlayer[playerid][pGanzuas]);
			IntentarPuente[playerid] = 1;
			format(string, sizeof string, "[INFO]: {FFFFFF}No has podido puntear el vehículo, te quedan %d ganzúas.", InfoPlayer[playerid][pGanzuas]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			SetTimerEx("IntentarPuenteTimer", 30000, false, "i", playerid);
		}
		return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD2, "[ERROR] No puedes usar el comando con el motor encendido.");
	return 1;
}

CMD:motor(playerid) // 19-02-2020
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid = GetPlayerVehicleID(playerid), string[180];
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if (EstaEnBicis(vehicleid))
	{
		if ((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)) { SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective); }
		SendClientMessage(playerid, COLOR_WHITE, "Las bicicletas no tienen motor tonto XDXD1!!1");
		return 1;
	}
	if (engine == VEHICLE_PARAMS_ON)
	{
		format(string, sizeof string, "apaga el motor de su vehículo");
		cmd_me(playerid, string);
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		arr_Engine{vehicleid} = 0;
	}
	else if ((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
	{
		//dinámicos
		Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
		{
		    if (InfoVehiculo[id][vNegocio] != 0)
		    {
				if (llaves_negocio(playerid, vehicleid) == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo de negocio o empresa.");
				GameTextForPlayer(playerid,"~g~encendiendo...",2500,3);
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
		    }
		    else
			{
				switch (InfoVehiculo[id][vTipo])
				{
					case 1..50: //facciones
					{
						if (llaves_faccion(playerid, vehicleid) == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo de facción.");
						GameTextForPlayer(playerid,"~g~encendiendo...",2500,3);
						SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
					}
					case 200: //vip
					{
						if (llaves_vip(playerid, vehicleid) == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo VIP.");
						GameTextForPlayer(playerid,"~g~encendiendo...",2500,3);
						SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
					}
					case 600: //rentable
					{
						if (llaves_renta(playerid, vehicleid) == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo rentable.");
						GameTextForPlayer(playerid,"~g~encendiendo...",2500,3);
						SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
					}
					default: //usuarios
					{
						if (InfoVehiculo[id][vEmbargo] != 0) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo se encuentra embargado.");
						if (InfoVehiculo[id][vLlavePrestada] == playerid)
						{
							GameTextForPlayer(playerid,"~g~encendiendo...",2500,3);
							SetTimerEx("SetVehicleEngine", 1500, 0, "dd",  vehicleid, playerid);
							return 1;
						}
						if (llaves_vehiculo(playerid, vehicleid) == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo.");
						GameTextForPlayer(playerid,"~g~encendiendo...",2500,3);
						SetTimerEx("SetVehicleEngine", 1500, 0, "dd",  vehicleid, playerid);
					}
				}
			}
		}
		//fábrica
		if (EsVehFabrica(vehicleid))
		{
			new id = EsVehFabrica(vehicleid);
			if (PermisosContrato(playerid, id) != 0)
			{
				GameTextForPlayer(playerid,"~g~encendiendo...",2500,3);
				SetTimerEx("SetVehicleEngine", 1500, 0, "dd",  vehicleid, playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo de fábrica.");
			}
		}
	}
	return 1;
}

CMD:luces(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);
	if (EstaEnBicis(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo no tiene luces.");
	SetVehicleLights(vehicleid, playerid);
	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	return 1;
}

CMD:capo(playerid)
{
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (EstaEnBicis(vehicleid) || IsAPlane(vehicleid) || IsABike(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo no tiene capo.");
 		SetVehicleHood(vehicleid, playerid);
	}
	else
	{
		new vehicleid = GetClosestCar(playerid);
		if (IsPlayerInRangeOfVehicle(playerid, vehicleid, 5.0))
		{
			if (EstaEnBicis(vehicleid) || IsAPlane(vehicleid) || IsABike(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo no tiene capo.");
			SetVehicleHood(vehicleid, playerid);
		}
	}
	return 1;
}

CMD:maletero(playerid)
{
	new vehicleid = -1;
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		vehicleid = GetPlayerVehicleID(playerid);
	}
	else if (!IsPlayerInAnyVehicle(playerid))
	{
		new closestcar = GetClosestCar(playerid);
		if (IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
		{
			vehicleid = closestcar;
		}
	}
	if (vehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "* No se ha detectado ningún vehículo cerca.");
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] == vehicleid)
	{
		if (EstaEnBicis(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo no tiene maletero.");
		new access = 0;
		if (InfoVehiculo[id][vNegocio] != 0)
		{
			if (llaves_negocio(playerid, vehicleid) != 0) access = 1;
		}
		else
		{
			switch (InfoVehiculo[id][vTipo])
			{
				case 1..50: //facciones
				{
					if (llaves_faccion(playerid, vehicleid) != 0) access = 1;
				}
				case 200: //vip
				{
					if (llaves_vip(playerid, vehicleid) != 0) access = 1;
				}
				case 600: //rentable
				{
					if (llaves_renta(playerid, vehicleid) != 0) access = 1;
				}
				default: //usuarios
				{
					if (InfoVehiculo[id][vLlavePrestada] == playerid) access = 1;
					if (llaves_vehiculo(playerid, vehicleid) != -1) access = 1;
				}
			}
		}
		if (access == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo o no hay permisos para abrirlo.");
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if (InfoVehiculo[id][vMaleteroOn] != 0)
		{
			InfoVehiculo[id][vMaleteroOn] = 0;
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Maletero del vehiculo fue cerrado.");
		}
		else
		{
			InfoVehiculo[id][vMaleteroOn] = 1;
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Maletero del vehiculo fue abierto.");
		}
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Debes estar cerca del maletero de un vehículo dinámico.");
	return 1;
}

CMD:vestado(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);
	new engine, lights, alarm, doors, bonnet, boot, objective, enginestatus[15], lightstatus[15], string[128];
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if (EstaEnBicis(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "Este vehiculo no necesita gasolina.");
	if (engine != VEHICLE_PARAMS_ON) format(enginestatus, sizeof(enginestatus), "Apagado");
	else format(enginestatus, sizeof(enginestatus), "Prendido");
	if (lights != VEHICLE_PARAMS_ON) format(lightstatus, sizeof(lightstatus), "Apagadas");
	else format(lightstatus, sizeof(lightstatus), "Prendidas");
	format(string, sizeof string, "Motor: %s | Luces: %s | Gasolina: %d",enginestatus,lightstatus,veh_gasolina[vehicleid]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:v(playerid, params[])
{
	if (isnull(params))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /v (opción)");
		SendClientMessage(playerid, COLOR_WHITE, "Opciones: estado, luces, maletero, capo");
		return 1;
	}
	if (strcmp(params, "luces", true) == 0) cmd_luces(playerid);
	else if (strcmp(params, "capo", true) == 0) cmd_capo(playerid);
	else if (strcmp(params, "maletero", true) == 0) cmd_maletero(playerid);
	else if (strcmp(params, "estado", true) == 0) cmd_vestado(playerid);
	return 1;
}

CMD:llenar(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	    if(engine == VEHICLE_PARAMS_ON) return SendClientMessage(playerid, COLOR_WHITE, "Es necesario apagar el motor antes de llenar el tanque ({5ABAFF}pulsa [N]{FFFFFF}).");
	    if(!IsAtGasStation(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No estás en la gasolineria.");
	    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessage(playerid,COLOR_RED,"Este vehiculo no necesita gasolina.");
	    if(veh_gasolina[vehicleid] >= 200) return SendClientMessage(playerid, COLOR_RED, "El tanque de gasolina de este vehiculo está lleno.");
	    if(RefuelingVehicle[playerid] == 1) return SendClientMessage(playerid, COLOR_RED, "Se está recargando el tanque de tu vehículo.");
       	SendClientMessage(playerid, COLOR_WHITE, "Recargando tanque de tu vehiculo, no bajes del vehiculo y por favor espera.");
       	RefuelingVehicle[playerid] = 1;
       	RefuelingVehicleTimer[playerid] = SetTimerEx("ReFill", 1000, true, "i", playerid);
	}
	return 1;
}

CMD:amotor(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes estar dentro de un vehículo como conductor.");
	new engine,lights, alarm, doors, bonnet, boot, objective, vehicleid = GetPlayerVehicleID(playerid);
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessage(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if (engine == VEHICLE_PARAMS_ON)
	{
		SendClientMessage(playerid, COLOR_RED, "[ADM] El motor del vehículo ha sido apagado correctamente.");
		SetVehicleEngine(vehicleid, playerid);
	}
	else if ((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
	{
		SendClientMessage(playerid, COLOR_RED, "[ADM] El motor del vehículo ha sido encendido correctamente.");
		SetVehicleEngine(vehicleid, playerid);
	}
	return 1;
}

CMD:darauto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
 	new string[170], playerid2, modelid, color1, color2;
	if (sscanf(params, "dddd", playerid2, modelid, color1, color2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darauto (PlayerID) (ModeloID) (Color1) (Color2)");
	if (color1 < 0 || color1 > 250) { SendClientMessage(playerid, COLOR_GREY, "El color 1 no puede super el ID 250."); return 1; }
	if (color2 < 0 || color2 > 250) { SendClientMessage(playerid, COLOR_GREY, "El color 2 no puede super el ID 250."); return 1; }
	if (modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "Modelo inválido, intenta entre 400 y 611."); return 1; }
 	new carsamount = VehicleCount(playerid);
	if (carsamount >= 12) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no puede tener más de 12 vehículos.");
	new Float: X, Float: Y, Float: Z, Float: Angle;
    GetPlayerPos(playerid2,X,Y,Z);
    GetPlayerFacingAngle(playerid2,Angle);
  	crear_vehiculo(playerid2, modelid, X, Y, Z, Angle, GetPlayerInterior(playerid2), GetPlayerVirtualWorld(playerid2), color1, color2, 0, 5, 0, -1);
	format(string, sizeof string, "%s creó [M-%d C1-%d C2-%d] a %s", NombreDeCuenta(playerid), modelid, color1, color2, NombreDeCuenta(playerid2));
	SendClientMessage(playerid, 0xA2DC35FF, string);
	Log("LOGS/shoplog.log", string);
	return 1;
}
CMD:shopveh(playerid, params[]) return cmd_darauto(playerid, params);
CMD:crearauto(playerid, params[]) return cmd_darauto(playerid, params);

new actual_vehModel[MAX_PLAYERS];
new actual_vehColor1[MAX_PLAYERS];
new actual_vehColor2[MAX_PLAYERS];

CMD:borrarvehiculo(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new vehicleid, string[160];
	if (sscanf(params, "d", vehicleid)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /borrarfvehiculo (VehiculoID) [para saber ID exacta acercate al vehículo con /dl]");
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[v][vTipo] == 0 && InfoVehiculo[v][vNegocio] == 0) return SendClientMessage(playerid, COLOR_GREY, "No puedes borrar vehículos de usuarios.");
		format(string, sizeof string, "Borraste %s de %s.", GetNameVehicle(InfoVehiculo[v][vModelo]), InfoVehiculo[v][vPropietario]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		borrar_vehiculo(v);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Ese vehículo no está spawneado o no existe.");
	return 1;
}

CMD:crearvehiculo(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new modelid, color1, color2;
	if (sscanf(params, "ddd", modelid, color1, color2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /crearvehiculo (ModeloID) (Color1) (Color2)");
	if (color1 < 0 || color1 > 250) { SendClientMessage(playerid, COLOR_GREY, "El color 1 no puede super el ID 250."); return 1; }
	if (color2 < 0 || color2 > 250) { SendClientMessage(playerid, COLOR_GREY, "El color 2 no puede super el ID 250."); return 1; }
	if (modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "Modelo inválido, intenta entre 400 y 611."); return 1; }
	Dialog_Show(playerid, ShowCreateVehicle, DIALOG_STYLE_LIST, "Elige donde crear el vehículo", "Facción\nVIP\nRenta\nNegocio/Empresa", "Continuar", "Salir");
	actual_vehModel[playerid] = modelid;
	actual_vehColor1[playerid] = color1;
	actual_vehColor2[playerid] = color2;
	return 1;
}

Dialog:ShowCreateVehicle(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new gformat[250], modelid = actual_vehModel[playerid], color1 = actual_vehColor1[playerid], color2 = actual_vehColor2[playerid];
	switch (listitem)
	{
		case 0: //facciones
		{
			new gformat3[320], dialog[2048] = "#ID\tNombre\n", count = 0;
			Loop(id, totalfacciones, 1) if (InfoFaccion[id][fTipo] != 0)
			{
				format(gformat3, sizeof gformat3, "{EBEBEB}%d\t%s\n", id, InfoFaccion[id][fNombre]);
				strcat(dialog, gformat3);
				//conteo
				new gformat2[64];
				format(gformat2, sizeof gformat2, "VehIDcreate%d", count);
				SetPVarInt(playerid, gformat2, id);
				count++;
			}
			Dialog_Show(playerid, ShowCreateFacVehicle, DIALOG_STYLE_TABLIST_HEADERS, "Facciones", dialog, "Continuar", "Salir");
		}
		case 1: //vip
		{
			new Float: X, Float: Y, Float: Z, Float: Angle;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, Angle);
			crear_vehiculo(-1, modelid, X, Y, Z, Angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), color1, color2, 0, 10, 200, -1);
			format(gformat, sizeof gformat, "Creaste un %s (%d) (Color1: %d) (Color2: %d) para los usuarios VIP, recuerda /estacionar.", GetNameVehicle(modelid), modelid, color1, color2);
			SendClientMessage(playerid, 0xA2DC35FF, gformat);
			format(gformat, sizeof gformat, "[VIP] %d creó un %s (%d) (Color1: %d) (Color2: %d)", NombreDeCuenta(playerid), GetNameVehicle(modelid), modelid, color1, color2);
			Log("LOGS/CrearVehiculo.log", gformat);
		}
		case 2: //renta
		{
			new Float: X, Float: Y, Float: Z, Float: Angle;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, Angle);
			crear_vehiculo(-1, modelid, X, Y, Z, Angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), color1, color2, 0, 6, 600, -1);
			format(gformat, sizeof gformat, "Creaste un %s (%d) (Color1: %d) (Color2: %d) para rentar, recuerda /estacionar.", GetNameVehicle(modelid), modelid, color1, color2);
			SendClientMessage(playerid, 0xA2DC35FF, gformat);
			format(gformat, sizeof gformat, "[RENTA] %d creó un %s (%d) (Color1: %d) (Color2: %d)", NombreDeCuenta(playerid), GetNameVehicle(modelid), modelid, color1, color2);
			Log("LOGS/CrearVehiculo.log", gformat);
		}
		case 3: //negocio/empresa
		{
			Dialog_Show(playerid, ShowCreateNegVehicle, DIALOG_STYLE_INPUT, "Negocio:", "{EBEBEB}Introduce el {00CC00}ID{EBEBEB} del negocio:", "Continuar", "Salir");
		}
	}
	return 1;
}

Dialog:ShowCreateNegVehicle(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	new negocio = strval(inputtext);
	if (negocio < 1 || negocio >= totalnegocios) return SendClientMessage(playerid, COLOR_GREY, "* ID de negocio inválida.");
	if (InfoNegocio[negocio][nTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "* Esa ID está vacía.");

	new gformat[250], modelid = actual_vehModel[playerid], color1 = actual_vehColor1[playerid], color2 = actual_vehColor2[playerid];
	new Float: X, Float: Y, Float: Z, Float: Angle;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	crear_vehiculo(-1, modelid, X, Y, Z, Angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), color1, color2, 0, 10, 0, negocio);
	format(gformat, sizeof gformat, "Creaste un %s (%d) (Color1: %d) (Color2: %d) para el negocio %s, recuerda /estacionar.", GetNameVehicle(modelid), modelid, color1, color2, InfoNegocio[negocio][nNombre]);
	SendClientMessage(playerid, 0xA2DC35FF, gformat);
	format(gformat, sizeof gformat, "[NEGOCIO: %d] %d creó un %s (%d) (Color1: %d) (Color2: %d)", negocio, NombreDeCuenta(playerid), GetNameVehicle(modelid), modelid, color1, color2);
	Log("LOGS/CrearVehiculo.log", gformat);
	return 1;
}

Dialog:ShowCreateFacVehicle(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat2[64];
	format(gformat2, sizeof gformat2, "VehIDcreate%d", ID);
	new faccion = GetPVarInt(playerid, gformat2);
	if (CountVehs(faccion) >= 80) return SendClientMessage(playerid, COLOR_GREY, "* No puedes crear más de 80 vehículos para esta facción.");
	new gformat[250], modelid = actual_vehModel[playerid], color1 = actual_vehColor1[playerid], color2 = actual_vehColor2[playerid];
	new Float: X, Float: Y, Float: Z, Float: Angle;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	crear_vehiculo(-1, modelid, X, Y, Z, Angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), color1, color2, 0, 10, faccion, -1);
	format(gformat, sizeof gformat, "Creaste un %s (%d) (Color1: %d) (Color2: %d) para %s, recuerda /estacionar.", GetNameVehicle(modelid), modelid, color1, color2, InfoFaccion[faccion][fLogo]);
	SendClientMessage(playerid, 0xA2DC35FF, gformat);
	format(gformat, sizeof gformat, "[FACCIÓN: %s] %d creó un %s (%d) (Color1: %d) (Color2: %d)", InfoFaccion[faccion][fLogo], NombreDeCuenta(playerid), GetNameVehicle(modelid), modelid, color1, color2);
	Log("LOGS/CrearVehiculo.log", gformat);
	return 1;
}

CMD:ponerneon(playerid)
{
	if (InfoPlayer[playerid][pVIP] != 3) return SendClientMessage(playerid, COLOR_WHITE, "Debes ser mínimo VIP gold.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new vehicleid = GetPlayerVehicleID(playerid), id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return SendClientMessage(playerid, 0xebebebff, "Este vehículo no admite componente neon.");
	if (llaves_vehiculo(playerid, vehicleid) == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo.");
	if (Valid_Vehicle_Neon(InfoVehiculo[id][vModelo]) == 0) return SendClientMessage(playerid, 0xebebebff, "Este vehículo no admite componente neon.");
	Dialog_Show(playerid, ShowNeon, DIALOG_STYLE_LIST, "¿Qué neon pondrás?", "{FF0000}Rojo\n{2641FE}Azul\n{1EB032}Verde\n{FFFF00}Amarillo\n{FFC0CB}Rosado\n{FFFFFF}Blanco\n{FFBF00}Remover neon", "Instalar", "Salir");
	return 1;
}

Dialog:ShowNeon(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new vehicleid = GetPlayerVehicleID(playerid), id = verificar_id_vehiculo(vehicleid), gformat[270];
	if (listitem == 6)
	{
	    if (InfoVehiculo[id][vModeloNeon] == 0) return SendClientMessage(playerid, 0xebebebff, "Este vehículo no tiene neon instalado.");
		if (InfoVehiculo[id][vOnNeon] != 0)
		{
			DestroyDynamicObject(InfoVehiculo[id][vObjetoNeonL]);
			DestroyDynamicObject(InfoVehiculo[id][vObjetoNeonR]);
		}
		InfoVehiculo[id][vModeloNeon] = 0;
		InfoVehiculo[id][vOnNeon] = 0;
		mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE vehiculos SET OnNeon = 0, ModeloNeon = 0 WHERE ID = '%d'", InfoVehiculo[id][vID_sql]);
		mysql_tquery(DBcreative, gformat);
		format(gformat, sizeof gformat, "Has removido el neon de tu %s.", GetVehicleName(vehicleid));
		SendClientMessage(playerid, 0xccccffff, gformat);
		Streamer_Update(playerid);
		return 1;
	}
	new modelo_neon = 18647+listitem;
	if (InfoVehiculo[id][vModeloNeon] == modelo_neon) return SendClientMessage(playerid, 0xebebebff, "Ese color de neon ya está instalado.");
	InfoVehiculo[id][vOnNeon] = 1;
	InfoVehiculo[id][vModeloNeon] = modelo_neon;
	Colocar_Neon(id, vehicleid);
	format(gformat, sizeof gformat, "Instalaste neon %s en tu %s, ahora puedes usar /neon.", Es_Neon(modelo_neon), GetVehicleName(vehicleid));
	SendClientMessage(playerid, 0xccccffff, gformat);
	Streamer_Update(playerid);
	PlayerPlaySound(playerid, 1133, 0, 0, 0);
	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE vehiculos SET OnNeon = 1, ModeloNeon = '%d' WHERE ID = '%d'", InfoVehiculo[id][vModeloNeon], InfoVehiculo[id][vID_sql]);
	mysql_tquery(DBcreative, gformat);
	return 1;
}

CMD:neon(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new vehicleid = GetPlayerVehicleID(playerid), id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return SendClientMessage(playerid, 0xebebebff, "Este vehículo no admite componente neon.");
	if (llaves_vehiculo(playerid, vehicleid) == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo.");
	if (InfoVehiculo[id][vModeloNeon] == 0) return SendClientMessage(playerid, 0xebebebff, "Este vehículo no tiene neon instalado.");
	if (InfoVehiculo[id][vOnNeon] != 0)
	{
		InfoVehiculo[id][vOnNeon] = 0;
		DestroyDynamicObject(InfoVehiculo[id][vObjetoNeonL]);
		DestroyDynamicObject(InfoVehiculo[id][vObjetoNeonR]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has desactivado el neon de tu vehículo.");
	}
	else
	{
		InfoVehiculo[id][vOnNeon] = 1;
		Colocar_Neon(id, vehicleid);
		SendClientMessage(playerid, COLOR_GENERAL, "Has activado el neon de tu vehículo.");
	}
	Streamer_Update(playerid);
    guardar_int_mysql("vehiculos", "OnNeon", InfoVehiculo[id][vID_sql], InfoVehiculo[id][vOnNeon]);
	return 1;
}

CMD:rentarveh(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes ser el conductor de un vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (Vehiculo_Renta(vehicleid) == 0) return SendClientMessage(playerid, COLOR_GREY, "No estás dentro de un vehículo rentable.");
	new id = verificar_id_vehiculo(vehicleid), string[170];
	if (InfoVehiculo[id][vRentaTiempo] != 0) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo ya está rentado.");
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vRentaTiempo] != 0)
	{
		if (strcmp(NombreDeCuenta(playerid), InfoVehiculo[v][vRentaDueno], true) == 0)
		{
			format(string, sizeof string, "Ya posees un vehículo con renta, ID %d.", InfoVehiculo[v][vIG_id]);
			SendClientMessage(playerid, 0xFF6347AA, string);
			return 1;
		}
	}
	if (GetPlayerCash(playerid) < 3000) return SendClientMessage(playerid, COLOR_GREY, "No tienes 3,000$ dólares.");
	GivePlayerCash(playerid, -3000, "rentarveh");
	alm(InfoVehiculo[id][vRentaDueno], NombreDeCuenta(playerid));
	InfoVehiculo[id][vRentaTiempo] = 60;
	SendClientMessage(playerid, 0x90C3D4FF, "Rentaste este vehículo por 60 minutos en $3,000 dólares.");
	return 1;
}

CMD:enrenta(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	new string[185];
	SendClientMessage(playerid, 0x90C3D4FF, "Vehículos rentados:");
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vRentaTiempo] != 0)
	{
		format(string, sizeof string, "[ID: %d] %s - tiempo: {90C3D4}%d minutos", InfoVehiculo[id][vIG_id], InfoVehiculo[id][vRentaDueno], InfoVehiculo[id][vRentaTiempo]);
		SendClientMessage(playerid, 0xEBEBEBFF, string);
	}
	return 1;
}

CMD:estacionar(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes ser el conductor de un vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[v][vEmbargo] != 0) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo se encuentra embargado.");
		new access = 0, string[160];
		if (InfoVehiculo[v][vNegocio] != 0)
		{
			if (CheckAdminCMD(playerid, 6)) return 1;
			access = 5;
		}
		else
		{
			switch (InfoVehiculo[v][vTipo])
			{
				case 1..50: //facciones
				{
					if (llaves_lider(playerid, vehicleid) != 0) access = 3;
				}
			    case 200:
			    {
					if (CheckAdminCMD(playerid, 6)) return 1;
					access = 4;
				}
			    case 600:
			    {
					if (CheckAdminCMD(playerid, 6)) return 1;
					access = 6;
				}
				default: //usuarios
				{
					if (llaves_vehiculo(playerid, vehicleid) != -1) access = 1;
					else
					{
						if (InfoVehiculo[v][vLlavePrestada] == playerid) access = 2;
					}
				}
			}
		}
		if (access == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo.");
		//mensaje de estacionar
		switch (access)
		{
			case 1: format(string, sizeof string, "estaciona su %s", GetVehicleName(vehicleid));
			case 2: format(string, sizeof string, "estaciona el %s de %s", GetVehicleName(vehicleid), InfoVehiculo[v][vPropietario]);
			case 3: format(string, sizeof string, "estaciona el %s de facción", GetVehicleName(vehicleid));
			case 4: format(string, sizeof string, "estaciona el %s VIP", GetVehicleName(vehicleid));
			case 5: format(string, sizeof string, "estaciona el %s de negocio/empresa", GetVehicleName(vehicleid));
			case 6: format(string, sizeof string, "estaciona el %s de renta", GetVehicleName(vehicleid));
		}
		cmd_me(playerid, string);
		//apaga motor
		if (!EstaEnBicis(vehicleid))
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		}
		//save
		GetVehicleHealth(vehicleid, InfoVehiculo[v][vVida]);
		GetVehicleDamageStatus(vehicleid, InfoVehiculo[v][vDanioSuperficie], InfoVehiculo[v][vDanioPuertas], InfoVehiculo[v][vDanioLuces], InfoVehiculo[v][vDanioRuedas]);
		GetVehiclePos(vehicleid, InfoVehiculo[v][vPosicionX], InfoVehiculo[v][vPosicionY], InfoVehiculo[v][vPosicionZ]);
		GetVehicleZAngle(vehicleid, InfoVehiculo[v][vPosicionR]);
		InfoVehiculo[v][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
		InfoVehiculo[v][vInterior] = GetPlayerInterior(playerid);
		InfoVehiculo[v][vGasolina] = veh_gasolina[vehicleid];
		new query[1200];
		mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET Posicion_X = '%f', Posicion_Y = '%f', Posicion_Z = '%f', Posicion_R = '%f', Interior = '%d', VirtualWorld = '%d', Vida = '%f', \
		DanioSuperficie = '%d', DanioPuertas = '%d', DanioLuces = '%d', DanioRuedas = '%d', Gasolina = '%d' WHERE ID = '%d'",
		InfoVehiculo[v][vPosicionX],
		InfoVehiculo[v][vPosicionY],
		InfoVehiculo[v][vPosicionZ],
		InfoVehiculo[v][vPosicionR],
		InfoVehiculo[v][vInterior],
		InfoVehiculo[v][vVirtualWorld],
		InfoVehiculo[v][vVida],
		InfoVehiculo[v][vDanioSuperficie],
		InfoVehiculo[v][vDanioPuertas],
		InfoVehiculo[v][vDanioLuces],
		InfoVehiculo[v][vDanioRuedas],
		InfoVehiculo[v][vGasolina],
		InfoVehiculo[v][vID_sql]);
		mysql_tquery(DBcreative, query);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Debes estar dentro de un vehículo propio o con llaves.");
	return 1;
}

CMD:verllaves(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	new playerid2, string[256];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /verllaves (jugador)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, -1, "Jugador desconectado.");
	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	format(string, sizeof string, "*** Vehículos de %s  ***", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	Loop(veh, totalvehiculos, 1) if (InfoVehiculo[veh][vTipo] == 0 && strcmp(InfoPlayer[playerid2][pNombre_Apellido], InfoVehiculo[veh][vPropietario], true) == 0)
	{
		if (InfoVehiculo[veh][vEmbargo] != 0) format(string, sizeof string, "Registro vehicular: EMBARGADO | Modelo:{A2DC35} %s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.", VehicleName[InfoVehiculo[veh][vModelo] - 400], InfoVehiculo[veh][vMulta]);
		else format(string, sizeof string, "Registro vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.", InfoVehiculo[veh][vIG_id], GetVehicleName(InfoVehiculo[veh][vIG_id]), InfoVehiculo[veh][vMulta]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	return 1;
}

CMD:vcoche(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	new carid = GetPlayerVehicleID(playerid), closestcar = GetClosestCar(playerid, carid), string[256];
	if (IsTrailerAttachedToVehicle(carid))
	{
		new carbeingtowed = GetVehicleTrailer(carid);
		Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == carbeingtowed)
		{
			format(string, sizeof string, "Registro Vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Dueño: {A2DC35}%s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",carbeingtowed,GetVehicleName(InfoVehiculo[v][vIG_id]),InfoVehiculo[v][vPropietario],InfoVehiculo[v][vMulta]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "Este vehículo no pertenece a nadie.");
	}
	else if (IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0) && !IsTrailerAttachedToVehicle(carid))
	{
		Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == closestcar)
		{
			format(string, sizeof string, "Registro Vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Dueño: {A2DC35}%s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",closestcar,GetVehicleName(InfoVehiculo[v][vIG_id]),InfoVehiculo[v][vPropietario],InfoVehiculo[v][vMulta]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "Este vehículo no pertenece a nadie.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No estás cerca de un vehículo.");
	return 1;
}

CMD:embargar(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (!IsPlayerInRangeOfPoint(playerid, 5.0,1636.041259,-1811.950317,13.524469)) return SendClientMessage(playerid, COLOR_GREY, "No estás cerca del punto de incautación, no puedes confiscar!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!IsTrailerAttachedToVehicle(vehicleid)) return SendClientMessage(playerid, -1, "No estás en una grua.");
	new vehicleid2 = GetVehicleTrailer(vehicleid), veh = 0, gformat[256];
	if (!GetVehicleModel(vehicleid2)) return SendClientMessage(playerid, COLOR_WHITE, "El vehículo en el remolque se ha desenganchado y por lo tanto no puede ser confiscado.");
	//usuarios
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid2)
	{
		veh = v;
		break;
	}
	if (veh == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "No se pudo encontrar ningún tipo de registro en el vehículo y se ha soltado.");
		DetachTrailerFromVehicle(vehicleid);
		return 1;
	}
	if (InfoVehiculo[veh][vMulta] <= 1000) return SendClientMessage(playerid, COLOR_WHITE, "Para embargar un vehiculo es necesario que este mismo tenga mínimo 2 multas.");
	format(gformat, sizeof gformat,"* Has confiscado el vehiculo de %s - Modelo %s.", InfoVehiculo[veh][vPropietario], VehicleName[InfoVehiculo[veh][vModelo] - 400]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
	foreach(Player, playerid2) if (llaves_vehiculo(playerid2, vehicleid2) != -1)
	{
		format(gformat, sizeof gformat, "Su %s ha sido confiscado. Es posible que lo pueda sacar pagando la multa en LSPD.", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
		SendClientMessage(playerid2, COLOR_LIGHTBLUE, gformat);
	}
	format(gformat, sizeof gformat, "[CENTRAL] %s ha confiscado el vehiculo de %s - Modelo %s (No pagó $%s de multa).", NombreJugador(playerid), InfoVehiculo[veh][vPropietario], VehicleName[InfoVehiculo[veh][vModelo] - 400], diner_coma(InfoVehiculo[veh][vMulta]));
	SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, gformat);
	InfoVehiculo[veh][vEmbargo] = 1;
	DetachTrailerFromVehicle(vehicleid);
	DestroyVehicle(vehicleid2);
	InfoVehiculo[veh][vMaleteroOn] = 0;
	if (InfoVehiculo[veh][vModeloNeon] != 0 && InfoVehiculo[veh][vOnNeon] != 0)
	{
		DestroyDynamicObject(InfoVehiculo[veh][vObjetoNeonL]);
		DestroyDynamicObject(InfoVehiculo[veh][vObjetoNeonR]);
	}
	Loop(x, 5, 0) if (InfoVehiculo[veh][vObjModelo][x] != 0) { DestroyDynamicObject(InfoVehiculo[veh][vTuneo][x]); }
	if (!isnull(InfoVehiculo[veh][vCallSign])) DestroyDynamic3DTextLabel(InfoVehiculo[veh][vOnCallSign]);
	InfoVehiculo[veh][vIG_id] = 0;
	return 1;
}

CMD:pagarm(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 3.0, 240.4770,112.7777,1003.2188) || IsPlayerInRangeOfPoint(playerid, 3.0, 358.236083,182.073394,1008.382812)) // Map de LSPD y DGT respectivamente.
	{
		if (InfoPlayer[playerid][pLicencia][0] == 0) return SendClientMessage(playerid, 0xA2DC35FF, "[MULTA]:{FFFFFF} Una licencia de conducir válida es necesaria para liberar su vehículo del depósito municipal.");
		new dialog[2048], gformat[256], iCount = 0, iMultas = 0;
		Loop(veh, totalvehiculos, 1) if (InfoVehiculo[veh][vTipo] == 0 && strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[veh][vPropietario], true) == 0)
		{
			if (InfoVehiculo[veh][vPrecio] < 1)
			{
				InfoVehiculo[veh][vPrecio] = 10000;
				//guardar_int_mysql("vehiculos", "Precio", InfoVehiculo[veh][vID_sql], InfoVehiculo[veh][vPrecio]);
			}
			//vehículo embargado
			if (InfoVehiculo[veh][vEmbargo] != 0)
			{
				format(gformat, sizeof gformat, "%s (Multa - $%s) (Embargado - $%s Liberación)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400], diner_coma(InfoVehiculo[veh][vMulta]), diner_coma((InfoVehiculo[veh][vPrecio] / 10) + InfoVehiculo[veh][vMulta] + (InfoPlayer[playerid][pNivel] * 500))), iMultas++;
			}
			else //vehículo status normal o con multa
			{
				if (InfoVehiculo[veh][vMulta] != 0) format(gformat, sizeof gformat, "%s (Multa - $%s)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400], diner_coma(InfoVehiculo[veh][vMulta])), iMultas++;
				else format(gformat, sizeof gformat, "%s\n", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
			}
			strcat(dialog, gformat);
			//conteo
			new gformat2[64];
			format(gformat2, sizeof gformat2, "multevehuwu%d", iCount);
			SetPVarInt(playerid, gformat2, veh);
			iCount++;
		}
		if (iMultas == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes multas para pagar o vehículos para ser liberados.");
		if (iCount == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes vehículos a tu nombre.");
		Dialog_Show(playerid, ShowMultas, DIALOG_STYLE_LIST, "{FFBF00}Vehiculos", dialog, "Liberar", "Salir");
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Las multas pueden ser pagadas en la DGT, Dirección General de Tráfico.");
	return 1;
}
CMD:pagarmulta(playerid) return cmd_pagarm(playerid);

Dialog:ShowMultas(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat2[40], gformat[256];
	format(gformat2, sizeof gformat2, "multevehuwu%d", ID);
	new veh = GetPVarInt(playerid, gformat2);
	if (InfoVehiculo[veh][vModelo] == 0) return SendClientMessage(playerid, 0xEBEBEBFF, "Vehículo inválido (model 0). Si el error continua contacta con el programador.");

	if (InfoPlayer[playerid][pEstrellas] != 0)
	{
		format(gformat, sizeof gformat, "[CENTRAL] %s intentó pagar sus multas, está en busqueda y captura. Estrellas: %d", NombreJugador(playerid), InfoPlayer[playerid][pEstrellas]);
		SendRadioMessage(1, COLOR_RADIO, gformat);
		SendRadioMessage(2, COLOR_RADIO, gformat);
		SendClientMessage(playerid, COLOR_YELLOW, "La policía viene en camino, hemos alertado a ellos dado que estás en ByC.");
		return 1;
	}
	if (InfoVehiculo[veh][vEmbargo])
	{
		new iCost = ((InfoVehiculo[veh][vPrecio] / 10) + InfoVehiculo[veh][vMulta] + (InfoPlayer[playerid][pNivel] * 500));
		new xspawn = random(sizeof point_embargo);
		if (GetPlayerCash(playerid) < iCost)
		{
			format(gformat, sizeof gformat, "Te faltan $%s para pagar la liberación de tu vehículo.", diner_coma(iCost-GetPlayerCash(playerid)));
			SendClientMessage(playerid, COLOR_GRAD2, gformat);
			return 1;
		}
		format(gformat, sizeof gformat, "Liberaste tu %s por $%s.", VehicleName[InfoVehiculo[veh][vModelo] - 400], diner_coma(iCost));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
		SendClientMessage(playerid, 0xA2DC35FF, "[INFO]:{FFFFFF} Tu auto se encuentra en el depósito municipal, contácta con un policia para que lo saque.");
		GivePlayerCash(playerid, -iCost, "pago embargo");
		Tax += iCost;
		InfoVehiculo[veh][vEmbargo] = 0; // Depósito.
		InfoVehiculo[veh][vPosicionX] = point_embargo[xspawn][0];
		InfoVehiculo[veh][vPosicionY] = point_embargo[xspawn][1];
		InfoVehiculo[veh][vPosicionZ] = point_embargo[xspawn][2];
		InfoVehiculo[veh][vPosicionR] = point_embargo[xspawn][3];
		InfoVehiculo[veh][vMulta] = 0;
		InfoVehiculo[veh][vInterior] = 0;
		InfoVehiculo[veh][vVirtualWorld] = 0;
		new Coche = CreateVehicle(InfoVehiculo[veh][vModelo], InfoVehiculo[veh][vPosicionX], InfoVehiculo[veh][vPosicionY], InfoVehiculo[veh][vPosicionZ], InfoVehiculo[veh][vPosicionR], InfoVehiculo[veh][vColor_1], InfoVehiculo[veh][vColor_2], -1, InfoVehiculo[veh][vSirena]);
        InfoVehiculo[veh][vIG_id] = Coche;
		LinkVehicleToInterior(Coche, InfoVehiculo[veh][vInterior]);
		SetVehicleExVirtualWorld(Coche, InfoVehiculo[veh][vVirtualWorld]);
		if (InfoVehiculo[veh][vModelo] == 528 || InfoVehiculo[veh][vModelo] == 427) SetVehicleHealth(Coche, 5000.0);
		else SetVehicleHealth(Coche, InfoVehiculo[veh][vVida]);
		UpdateVehicleDamageStatus(Coche, InfoVehiculo[veh][vDanioSuperficie], InfoVehiculo[veh][vDanioPuertas], InfoVehiculo[veh][vDanioLuces], InfoVehiculo[veh][vDanioRuedas]);
		veh_gasolina[Coche] = InfoVehiculo[veh][vGasolina];
		if (InfoVehiculo[veh][vSeguro] != 0) LockPlayerVehicle(Coche);
		Load_Mods(veh);
		if (!isnull(InfoVehiculo[veh][vCallSign]))
		{
			DestroyDynamic3DTextLabel(InfoVehiculo[veh][vOnCallSign]);
			InfoVehiculo[veh][vOnCallSign] = CreateDynamic3DTextLabel(InfoVehiculo[veh][vCallSign], 0xEBEBEBFF, -1.0, -2.8, 0.0, 30.0, INVALID_PLAYER_ID, Coche);
		}
		new query[512];
		mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET Posicion_X = '%f', Posicion_Y = '%f', Posicion_Z = '%f', Posicion_R = '%f', Interior = 0, VirtualWorld = 0, Multa = 0, Embargo = 0 WHERE ID = '%d'", InfoVehiculo[veh][vPosicionX], InfoVehiculo[veh][vPosicionY], InfoVehiculo[veh][vPosicionZ], InfoVehiculo[veh][vPosicionR], InfoVehiculo[veh][vID_sql]);
		mysql_tquery(DBcreative, query);
		return 1;
	}
	if (InfoVehiculo[veh][vMulta])
	{
		new iCost = InfoVehiculo[veh][vMulta];
		if (GetPlayerCash(playerid) < iCost)
		{
			format(gformat, sizeof gformat, "Te faltan $%s para pagar la multa de tu vehículo.", diner_coma(iCost-GetPlayerCash(playerid)));
			SendClientMessage(playerid, COLOR_GRAD2, gformat);
			return 1;
		}
		Tax += iCost;
		format(gformat, sizeof gformat, "Pagaste la multa de $%s de tu %s.", diner_coma(iCost), VehicleName[InfoVehiculo[veh][vModelo] - 400]);
		SendClientMessage(playerid, COLOR_GRAD2, gformat);
		InfoVehiculo[veh][vMulta] = 0;
		guardar_int_mysql("vehiculos", "Multa", InfoVehiculo[veh][vID_sql], 0);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD2, "Ese vehículo no necesita ser liberado o tiene multas a pagar.");
	return 1;
}

CMD:enganchar(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Tienes que estar en un vehículo.");
	new carid = GetPlayerVehicleID(playerid);
	if (!IsATowTruck(carid)) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes remolcar en este tipo de vehículo.");
	new closestcar = GetClosestCar(playerid, carid);
	if (GetDistancePlayerVeh(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid))
	{
		foreach(Player, i) if (llaves_vehiculo(i, carid) != -1)
		{
			if (CercaDelMarica(30.0, playerid, i))
				SendClientMessage(i, COLOR_LIGHTBLUE, "Alguien está tratando de remolcar tu vehículo!");
		}
		SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo no tiene ningún registro, está disponible para embargar");
		AttachTrailerToVehicle(closestcar,carid);
		arr_Towing[playerid] = closestcar;
	}
	return 1;
}

CMD:desenganchar(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!IsTrailerAttachedToVehicle(vehicleid)) return SendClientMessage(playerid, COLOR_WHITE,"Aún no has enganchado nada.");
	SendClientMessage(playerid, COLOR_WHITE,"Has desenganchado el vehículo que traías.");
	arr_Towing[playerid] = INVALID_VEHICLE_ID;
	DetachTrailerFromVehicle(vehicleid);
	return 1;
}

CMD:dejarmulta(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /dejarmulta (VehicleID /dl)");
	if (InfoPlayer[playerid][pRango] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Sólo rangos 2 y superiores pueden dejar multas!");
	new Float: x, Float: y, Float: z, vehicleid = strval(params), gformat[190];
	GetVehiclePos(vehicleid, x, y, z);
	if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, -1, "El vehículo seleccionado no se encuentra spawneado.");
	new veh = -1;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		veh = v;
		break;
	}
	if (veh == -1) return SendClientMessage(playerid, COLOR_WHITE, "Ese vehículo no tiene ningún registro o no tiene propietario, llevalo al depósito.");
	if (InfoVehiculo[veh][vMulta] >= 3000) return SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya excedio el máximo de multas, se debe embargar.");
	InfoVehiculo[veh][vMulta] += 1000;
	format(gformat, sizeof gformat, "Dejaste una multa de $1,000 en el vehículo de %s, modelo %s.", InfoVehiculo[veh][vPropietario], GetVehicleName(vehicleid));
	SendClientMessage(playerid, COLOR_WHITE, gformat);
    guardar_int_mysql("vehiculos", "Multa", InfoVehiculo[veh][vID_sql], InfoVehiculo[veh][vMulta]);
	return 1;
}

CMD:seguro(playerid)
{
	new Float: x, Float: y, Float: z;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] != 0)
	{
		new vehicleid = InfoVehiculo[v][vIG_id];
		GetVehiclePos(vehicleid, x, y, z);
		if (IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			switch (InfoVehiculo[v][vTipo])
			{
				case 0: //usuarios
				{
					new access = 0;
					if (InfoVehiculo[v][vLlavePrestada] == playerid) access = 1;
					if (llaves_vehiculo(playerid, vehicleid) != -1) access = 1;
					if (access == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo.");
					if (!IsPlayerInAnyVehicle(playerid))
						if (IsVehicleBusy(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "El vehículo posee jugadores dentro de el, no puedes colocar seguro.");
					if (InfoVehiculo[v][vSeguro] == 0)
					{
						GameTextForPlayer(playerid,"~r~Vehiculo bloqueado!",5000,6);
						PlayerPlaySoundEx(1145, x, y, z);
						InfoVehiculo[v][vSeguro] = 1;
						LockPlayerVehicle(vehicleid);
					}
					else
					{
						GameTextForPlayer(playerid,"~g~Vehiculo desbloqueado!",5000,6);
						PlayerPlaySoundEx(1145, x, y, z);
						InfoVehiculo[v][vSeguro] = 0;
						UnLockPlayerVehicle(vehicleid);
					}
					guardar_int_mysql("vehiculos", "ConSeguro", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vSeguro]);
					return 1;
				}
				case 1..50: //facciones
				{
					if (llaves_faccion(playerid, vehicleid) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de este vehículo de facción.");
					if (!IsPlayerInAnyVehicle(playerid))
						if (IsVehicleBusy(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "El vehículo posee jugadores dentro de el, no puedes colocar seguro.");
					if (InfoVehiculo[v][vSeguro] == 0)
					{
						GameTextForPlayer(playerid,"~r~Vehiculo bloqueado!",5000,6);
						PlayerPlaySoundEx(1145, x, y, z);
						InfoVehiculo[v][vSeguro] = 1;
						LockPlayerVehicle(vehicleid);
					}
					else
					{
						GameTextForPlayer(playerid,"~g~Vehiculo desbloqueado!",5000,6);
						PlayerPlaySoundEx(1145, x, y, z);
						InfoVehiculo[v][vSeguro] = 0;
						UnLockPlayerVehicle(vehicleid);
					}
					guardar_int_mysql("vehiculos", "ConSeguro", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vSeguro]);
					return 1;
				}
			}
		}
	}
    SendClientMessage(playerid, COLOR_WHITE, "Debes estar cerca de un vehículo que sea tuyo o de facción.");
    return 1;
}
CMD:lock(playerid) return cmd_seguro(playerid);

new id_veh_actual[MAX_PLAYERS];

CMD:llaves(playerid)
{
	new dialog[3084], gformat[370], iCount = 0;
	strcat(dialog, "Modelo - (ID)\tMatricula\tLocalización\n");
	Loop(veh, totalvehiculos, 1) if (InfoVehiculo[veh][vTipo] == 0 && strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[veh][vPropietario], true) == 0)
	{
		if (InfoVehiculo[veh][vEmbargo] != 0) format(gformat, sizeof gformat, "{FFBF00}%s\t{0073E6}LS%03d-CRP\t{00CC00}Embargado{FFFFFF}\n", VehicleName[InfoVehiculo[veh][vModelo] - 400], InfoVehiculo[veh][vID_sql]);
		else
		{
			new Float: carPos[3], zone[MAX_ZONE_NAME];
			GetVehiclePos(InfoVehiculo[veh][vIG_id], carPos[0], carPos[1], carPos[2]);
			GetCar3DZone(InfoVehiculo[veh][vIG_id], zone, sizeof zone);
			format(gformat, sizeof gformat, "{FFBF00}%s {FFFFFF}- ({C0C0C0}ID: %d{FFFFFF})\t{0073E6}LS%03d-CRP\t{00D500}%s\n", VehicleName[InfoVehiculo[veh][vModelo] - 400], InfoVehiculo[veh][vIG_id], InfoVehiculo[veh][vID_sql], zone);
		}
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "keyvehowo%d", iCount);
		SetPVarInt(playerid, gformat2, veh);
		iCount++;
	}
	if (iCount == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ningún vehículo a tu nombre.");
	Dialog_Show(playerid, MenuVehiculos, DIALOG_STYLE_TABLIST_HEADERS, "Tus Vehículos", dialog, "Continuar", "Salir");
	return 1;
}
CMD:localizar(playerid) return cmd_llaves(playerid);
CMD:coches(playerid) return cmd_llaves(playerid);
CMD:vehiculos(playerid) return cmd_llaves(playerid);

Dialog:MenuVehiculos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40], gtitulo[170];
	format(gformat, sizeof gformat, "keyvehowo%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vModelo] == 0) return SendClientMessage(playerid, 0xEBEBEBFF, "Vehículo inválido (model 0). Si el error continua contacta con el programador.");
 	if (InfoVehiculo[veh][vEmbargo]) return SendClientMessage(playerid, COLOR_WHITE, "No puedes realizar operaciones con un vehículo confiscado.");
	id_veh_actual[playerid] = veh;
	format(gtitulo, sizeof gtitulo, "Opciones para tu {FFBF00}%s", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
	Dialog_Show(playerid, Menu2Vehiculos, DIALOG_STYLE_LIST, gtitulo, "{0073E6}-{FFFFFF} Localizar\n{0073E6}-{FFFFFF} Información\n{0073E6}-{FFFFFF} Maletero\n{0073E6}-{FFFFFF} Eliminar", "Continuar", "Volver");
	return 1;
}

Dialog:Menu2Vehiculos(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_llaves(playerid);
	new id = id_veh_actual[playerid], string[235], dialog[1428];
	if (InfoVehiculo[id][vModelo] == 0) return SendClientMessage(playerid, 0xEBEBEBFF, "Vehículo inválido (model 0). Si el error continua contacta con el programador.");
 	if (InfoVehiculo[id][vEmbargo]) return SendClientMessage(playerid, COLOR_WHITE, "No puedes realizar operaciones con un vehículo confiscado.");
	switch (listitem)
	{
		case 0: //localizar
		{
			new Float: carPos[3], zone[MAX_ZONE_NAME];
			GetVehiclePos(InfoVehiculo[id][vIG_id], carPos[0], carPos[1], carPos[2]);
			GetCar3DZone(InfoVehiculo[id][vIG_id], zone, sizeof(zone));
			format(string, sizeof string, "Tu {FFBF00}%s{FFFFFF} fue localizado en {00D500}%s{FFFFFF}. (Vé al checkpoint)", GetVehicleName(InfoVehiculo[id][vIG_id]), zone);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
			PlayerPlaySound(playerid, 1138, 0, 0, 0);
			SetPVarInt(playerid, "TrackCar", 1);
		}
		case 1: //información
		{
			format(string, sizeof string, "{FFFFFF}Modelo: {FFBF00}%s {FFFFFF}({0073E6}%d{FFFFFF})\n", GetVehicleName(InfoVehiculo[id][vIG_id]), InfoVehiculo[id][vModelo]); strcat(dialog, string);
			format(string, sizeof string, "{FFFFFF}Propietario: {FFBF00}%s\n", InfoVehiculo[id][vPropietario]); strcat(dialog, string);
			format(string, sizeof string, "{FFFFFF}Gasolina: {FFBF00}%d\n", veh_gasolina[InfoVehiculo[id][vIG_id]]); strcat(dialog, string);
			format(string, sizeof string, "{FFFFFF}Valor: {00B000}$%s\n", diner_coma(InfoVehiculo[id][vPrecio])); strcat(dialog, string);
			if (InfoVehiculo[id][vModeloNeon] != 0) { format(string, sizeof string, "{FFFFFF}Neon: {C0C0C0}%s\n", Es_Neon(InfoVehiculo[id][vModeloNeon])); strcat(dialog, string); }
			if (InfoVehiculo[id][vMulta] != 0) { format(string, sizeof string, "{FFFFFF}Multas: {D70000}$%s\n", diner_coma(InfoVehiculo[id][vMulta])); strcat(dialog, string); }
			format(string, sizeof string, "{FFFFFF}Slots maletero: {FFBF00}%d\n", InfoVehiculo[id][vMaxMaletero]); strcat(dialog, string);
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Opción: {FFBF00}Información", dialog, "Cerrar", "");
		}
		case 2: //maletero
		{
			new count = 0;
			Loop(x, 10, 0) if (InfoVehiculo[id][vMaletero][x] != 0)
			{
				count++;
				format(string, sizeof string, "#%d %s", x+1, slot_objeto(InfoVehiculo[id][vMaletero][x], InfoVehiculo[id][vMaleteroCant][x]));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No hay nada en el maletero.");
			SendClientMessage(playerid, -1, "Recuerda que los comandos de maletero son: {FFBF00}/gmaletero {FFFFFF}-{FFBF00} /smaletero");
		}
		case 3: //eliminar
		{
			format(dialog, sizeof dialog, "{EBEBEB}El uso de esta opción {9c2828}eliminará completamente{EBEBEB} tú {FFBF00}%s{EBEBEB} y no habrá reembolso.\n\
			Si estás seguro de que quieres eliminar el vehículo, por favor presiona {9c2828}continuar{EBEBEB}.\n", VehicleName[InfoVehiculo[id][vModelo] - 400]);
			Dialog_Show(playerid, EliminarVehiculo, DIALOG_STYLE_MSGBOX, "Opción: {FFBF00}Eliminar", dialog, "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:EliminarVehiculo(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_llaves(playerid);
	new id = id_veh_actual[playerid];
	if (InfoVehiculo[id][vModelo] == 0) return SendClientMessage(playerid, 0xEBEBEBFF, "Vehículo inválido (model 0). Si el error continua contacta con el programador.");
 	if (InfoVehiculo[id][vEmbargo]) return SendClientMessage(playerid, COLOR_WHITE, "No puedes realizar operaciones con un vehículo confiscado.");
	borrar_vehiculo(id);
	SendClientMessage(playerid, COLOR_WHITE, "Su vehículo fue desmantelado con éxito.");
	return 1;
}

CMD:gps(playerid)
{
	Dialog_Show(playerid, ShowGPS, DIALOG_STYLE_LIST, "{EBEBEB}GPS - {088A4B}Menú", "Tus Vehículos\nCasas & Negocios\nLugares de la ciudad", "Continuar", "Salir");
	return 1;
}

CMD:vermapa(playerid) return cmd_gps(playerid);

Dialog:ShowGPS(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: //vehículos
		{
		    cmd_localizar(playerid);
		}
		case 1:
		{
			new pstring[170], totalstring[640];
			if (InfoPlayer[playerid][pNegocio1] != -1) format(pstring, sizeof(pstring), "{EBEBEB}Negocio (1): {088A4B}%s\n", InfoNegocio[InfoPlayer[playerid][pNegocio1]][nNombre]);
			else format(pstring, sizeof(pstring), "{EBEBEB}Negocio (1) vacío\n", playerid);
			strcat(totalstring,pstring);
			if (InfoPlayer[playerid][pNegocio2] != -1) format(pstring, sizeof(pstring), "{EBEBEB}Negocio (2): {088A4B}%s\n", InfoNegocio[InfoPlayer[playerid][pNegocio2]][nNombre]);
			else format(pstring, sizeof(pstring), "{EBEBEB}Negocio (2) vacío\n", playerid);
			strcat(totalstring,pstring);
			if (InfoPlayer[playerid][pCasa1] != -1) format(pstring, sizeof(pstring), "{EBEBEB}Casa (1): {088A4B}%d\n", InfoPlayer[playerid][pCasa1]);
			else format(pstring, sizeof(pstring), "{EBEBEB}Casa (1) vacía\n", playerid);
			strcat(totalstring,pstring);
			if (InfoPlayer[playerid][pCasa2] != -1) format(pstring, sizeof(pstring), "{EBEBEB}Casa (2): {088A4B}%d\n", InfoPlayer[playerid][pCasa2]);
			else format(pstring, sizeof(pstring), "{EBEBEB}Casa (2) vacía\n", playerid);
			strcat(totalstring,pstring);
			Dialog_Show(playerid, UbicarPropiedad, DIALOG_STYLE_LIST, "{EBEBEB}GPS - {088A4B}Propiedades", totalstring, "Localizar", "Atrás");
		}
		case 2:
		{
			new stringo[256], totalstring[2048], iCount = 0;
			Loop(id, sizeof InfoGPS, 0) if (InfoGPS[id][uPosicion][0] != 0.0)
			{
				format(stringo, sizeof stringo, "%s\n", InfoGPS[id][uNombre]);
				strcat(totalstring, stringo);
				//conteo
				new gformat2[64];
				format(gformat2, sizeof gformat2, "ubicgps%d", iCount);
				SetPVarInt(playerid, gformat2, id);
				iCount++;
			}
			Dialog_Show(playerid, ShowUbicaciones, DIALOG_STYLE_LIST, "{EBEBEB}GPS - {088A4B}Ubicaciones", totalstring, "Localizar", "Atrás");
		}
	}
	return 1;
}

Dialog:UbicarPropiedad(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_gps(playerid);
	switch (listitem)
	{
		case 0: // Negocio.
		{
			if (InfoPlayer[playerid][pNegocio1] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes un negocio en el slot 1.");
			new id = InfoPlayer[playerid][pNegocio1];
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, 0xEBEBEBFF, "Se marcó en el mapa la ubicación de tu {088A4B}negocio 1");
			SetPlayerCheckpoint(playerid, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ], 5.0);
		}
		case 1: // Negocio 2.
		{
			if (InfoPlayer[playerid][pNegocio2] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes un negocio en el slot 2.");
			new id = InfoPlayer[playerid][pNegocio2];
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, 0xEBEBEBFF, "Se marcó en el mapa la ubicación de tu {088A4B}negocio 2");
			SetPlayerCheckpoint(playerid, InfoNegocio[id][nExteriorX], InfoNegocio[id][nExteriorY], InfoNegocio[id][nExteriorZ], 5.0);
		}
		case 2: // Casa.
		{
			if (InfoPlayer[playerid][pCasa1] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes una casa en el slot 1.");
			new id = InfoPlayer[playerid][pCasa1];
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, 0xEBEBEBFF, "Se marcó en el mapa la ubicación de tu {088A4B}casa 1");
			SetPlayerCheckpoint(playerid, InfoCasa[id][cExteriorX], InfoCasa[id][cExteriorY], InfoCasa[id][cExteriorZ], 5.0);
		}
		case 3: // Casa 2.
		{
			if (InfoPlayer[playerid][pCasa2] == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes una casa en el slot 2.");
			new id = InfoPlayer[playerid][pCasa2];
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, 0xEBEBEBFF, "Se marcó en el mapa la ubicación de tu {088A4B}casa 2");
			SetPlayerCheckpoint(playerid, InfoCasa[id][cExteriorX], InfoCasa[id][cExteriorY], InfoCasa[id][cExteriorZ], 5.0);
		}
	}
	return 1;
}

Dialog:ShowUbicaciones(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_gps(playerid);
	new xdxd = listitem, gformat[40], gstring[250];
	format(gformat, sizeof gformat, "ubicgps%d", xdxd);
	new id = GetPVarInt(playerid, gformat);
	SetPlayerCheckpoint(playerid, InfoGPS[id][uPosicion][0], InfoGPS[id][uPosicion][1], InfoGPS[id][uPosicion][2], 5.0);
	PlayerPlaySound(playerid, 1138, 0, 0, 0);
	format(gstring, sizeof gstring, "Se marcó en el mapa la ubicación del {088A4B}%s", InfoGPS[id][uNombre]);
	SendClientMessage(playerid, 0xEBEBEBFF, gstring);
	return 1;
}

CMD:darllave(playerid, params[])
{
	new playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /darllave (id)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_RED, "Jugador desconectado.");
	if (playerid == playerid2) return SendClientMessage(playerid, COLOR_RED, "No puedes darte las llaves de vehículo a ti mismo.");
	if (!CercaDelMarica(8.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_RED, "No estás cerca de ese jugador.");
	if (InfoPlayer[playerid2][pLlaveVehicle] != 0) return SendClientMessage(playerid, COLOR_RED, "Ese jugador ya tiene llaves prestadas.");
	new dialog[2048], gformat[256], iCount = 0;
	Loop(veh, totalvehiculos, 1) if (InfoVehiculo[veh][vTipo] == 0 && strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[veh][vPropietario], true) == 0)
	{
		if (InfoVehiculo[veh][vEmbargo] != 0) format(gformat, sizeof gformat, "%s (Embargado)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
		else format(gformat, sizeof gformat, "%s\n", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "sedvehkey%d", iCount);
		SetPVarInt(playerid, gformat2, veh);
		iCount++;
	}
	if (iCount == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ningún vehículo que puedas dar llaves.");
	Dialog_Show(playerid, DarVehLlaves, DIALOG_STYLE_LIST, "{FFBF00}Vehiculos", dialog, "Continuar", "Salir");
	GiveKeysTo[playerid] = playerid2;
	return 1;
}

Dialog:DarVehLlaves(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40], string[170];
	format(gformat, sizeof gformat, "sedvehkey%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vModelo] == 0)
	{
		GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		SendClientMessage(playerid, 0xEBEBEBFF, "Vehículo inválido (model 0). Si el error continua contacta con el programador.");
		return 1;
	}
 	if (InfoVehiculo[veh][vEmbargo]) return SendClientMessage(playerid, COLOR_WHITE, "No puedes realizar operaciones con un vehículo confiscado.");
 	new playerid2 = GiveKeysTo[playerid];
	if (!IsPlayerConnected(playerid2))
	{
		GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		SendClientMessage(playerid, COLOR_RED, "Jugador desconectado.");
		return 1;
	}
	if (InfoVehiculo[veh][vLlavePrestada] != -1)
	{
		SendClientMessage(playerid, 0xA2DC35FF, "Ya diste las llaves de este vehículo.");
		GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		return 1;
	}
	InfoVehiculo[veh][vLlavePrestada] = playerid2;
	InfoPlayer[playerid2][pLlaveVehicle] = veh;
	format(string, sizeof string, "%s{FFFFFF} te ha dado las llaves de su %s.", NombreJugador(playerid), GetVehicleName(InfoVehiculo[veh][vIG_id]));
	SendClientMessage(playerid2, 0x5ABAFFFF, string);
	format(string, sizeof string, "Has dado a {5ABAFF}%s{FFFFFF} las llaves de tu %s.", NombreJugador(playerid2), GetVehicleName(InfoVehiculo[veh][vIG_id]));
	SendClientMessage(playerid, COLOR_WHITE, string);
	GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	return 1;
}

CMD:quitarllave(playerid)
{
	new dialog[2048], gformat[256], iCount = 0, QuitCount = 0;
	Loop(veh, totalvehiculos, 1) if (InfoVehiculo[veh][vTipo] == 0 && strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[veh][vPropietario], true) == 0)
	{
		if (InfoVehiculo[veh][vLlavePrestada] != -1)
		{
			if (!IsPlayerConnected(InfoVehiculo[veh][vLlavePrestada]))
			{
				InfoVehiculo[veh][vLlavePrestada] = -1;
				cmd_quitarllave(playerid);
				return 1;
			}
			if (InfoVehiculo[veh][vEmbargo] != 0) format(gformat, sizeof gformat, "%s (Llaves: %s) (Embargado)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400], NombreJugador(InfoVehiculo[veh][vLlavePrestada]));
			else format(gformat, sizeof gformat, "%s (Llaves: %s)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400], NombreJugador(InfoVehiculo[veh][vLlavePrestada]));
            QuitCount++;
		}
		else
		{
			if (InfoVehiculo[veh][vEmbargo] != 0) format(gformat, sizeof gformat, "%s (Embargado)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
			else format(gformat, sizeof gformat, "%s\n", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
		}
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "keyvehquit%d", iCount);
		SetPVarInt(playerid, gformat2, veh);
		iCount++;
	}
	if (iCount == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ningún vehículo a tu nombre.");
	if (QuitCount == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ningún vehículo con llaves prestadas.");
	Dialog_Show(playerid, QuitarVehLlaves, DIALOG_STYLE_LIST, "{FFBF00}Vehiculos", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:QuitarVehLlaves(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40], string[170];
	format(gformat, sizeof gformat, "keyvehquit%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vModelo] == 0) return SendClientMessage(playerid, 0xEBEBEBFF, "Vehículo inválido (model 0). Si el error continua contacta con el programador.");
	if (InfoVehiculo[veh][vLlavePrestada] == -1) return SendClientMessage(playerid, 0xA2DC35FF, "No has dado las llaves de este vehículo.");
	new playerid2 = InfoVehiculo[veh][vLlavePrestada];
	if (!IsPlayerConnected(playerid2))
	{
		InfoVehiculo[veh][vLlavePrestada] = INVALID_PLAYER_ID;
		SendClientMessage(playerid, COLOR_RED, "Jugador desconectado, de igual manera se retiraron las llaves.");
		return 1;
	}
	InfoPlayer[playerid2][pLlaveVehicle] = 0;
	format(string, sizeof string, "%s{FFFFFF} te retiró las llaves de su {5ABAFF}%s{FFFFFF}.", NombreJugador(playerid), GetVehicleName(InfoVehiculo[veh][vIG_id]));
	SendClientMessage(playerid2, 0x5ABAFFFF, string);
	format(string, sizeof string, "Le quitaste las llaves a {5ABAFF}%s{FFFFFF} de tu {5ABAFF}%s{FFFFFF}.", NombreJugador(playerid2), GetVehicleName(InfoVehiculo[veh][vIG_id]));
	SendClientMessage(playerid, COLOR_WHITE, string);
	InfoVehiculo[veh][vLlavePrestada] = INVALID_PLAYER_ID;
	return 1;
}

CMD:vendermicoche(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Debes estar dentro de tu vehículo como conductor.");
	new string[256], playerid2, price;
	new Float: health, vehicleid = GetPlayerVehicleID(playerid);
	Loop(d, totalvehiculos, 1) if (InfoVehiculo[d][vIG_id] == vehicleid)
	{
		if (llaves_vehiculo(playerid, vehicleid) == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo.");
		GetVehicleHealth(vehicleid, health);
		if (sscanf(params, "dd", playerid2, price)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /vendermicoche (id) (precio)");
		if (price < 1) return SendClientMessage(playerid, COLOR_GREY, "Precio debe ser mayor a 0.");
		if (playerid == playerid2) return SendClientMessage(playerid, COLOR_GREY, "No puedes venderte el vehículo a ti mismo.");
		if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
		if (!CercaDelWeon(8.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Estás lejos del jugador.");
		if (InfoPlayer[playerid2][pNivel] == 1) return SendClientMessage(playerid, COLOR_WHITE, "El jugador tiene que ser nivel 2 o más para que puedas venderle vehiculos.");
		if (health < 500) return SendClientMessage(playerid, COLOR_WHITE, "El vehiculo está muy dañado como para ser vendido.");
		if (CountObjVeh(d) != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes vender un vehículo con objetos VIP.");

		Pla_vehicle[playerid2] = playerid;
		Osql_vehicle[playerid2] = d;
		Price_vehicle[playerid2] = price;

		format(string, sizeof string, "* Ofreciste a %s para comprar este %s por $%d.", NombreJugador(playerid2), GetVehicleName(vehicleid), price);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "* %s te ha ofrecidor su %s por $%d, (usa /aceptar coche).", NombreJugador(playerid), GetVehicleName(vehicleid), price);
		SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
		return 1;
	}
    SendClientMessage(playerid, COLOR_GREY, " Tu necesitas estar dentro de un vehiculo que te pertenece.");
    return 1;
}

CMD:checkllaves(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /checkllaves (Jugador)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "ID no válida.");
	new dialog[2048], gformat[256], iCount = 0;
	Loop(veh, totalvehiculos, 1) if (InfoVehiculo[veh][vTipo] == 0 && strcmp(InfoPlayer[playerid2][pNombre_Apellido], InfoVehiculo[veh][vPropietario], true) == 0)
	{
		if (InfoVehiculo[veh][vEmbargo] != 0) format(gformat, sizeof gformat, "%s (Embargado)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
		else format(gformat, sizeof gformat, "%s (ID: %d)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400], InfoVehiculo[veh][vIG_id]);
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "cehvehkey%d", iCount);
		SetPVarInt(playerid, gformat2, veh);
		iCount++;
	}
	if (iCount == 0) return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no tiene ningún vehículo a su nombre.");
	format(gformat, sizeof gformat, "{FFBF00}Vehículos de %s.", NombreDeCuenta(playerid2));
	Dialog_Show(playerid, GotoVehU, DIALOG_STYLE_LIST, gformat, dialog, "Ir", "Salir");
	return 1;
}

Dialog:GotoVehU(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "cehvehkey%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vModelo] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Seleccionaste un slot vacío.");
	if (InfoVehiculo[veh][vEmbargo]) return SendClientMessage(playerid, COLOR_WHITE, "No se puede tpear a un vehículo confiscado.");
	new Float: carPos[3], vehicleid = InfoVehiculo[veh][vIG_id];
	GetVehiclePos(vehicleid, carPos[0], carPos[1], carPos[2]);
	SetPosEx(playerid, carPos[0], carPos[1], carPos[2], 0.0000, 0, GetVehicleVirtualWorld(vehicleid), 1);
	return 1;
}

CMD:respawncars(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], radius;
	if (sscanf(params, "d", radius)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /respawncars (Radio)");
	if (radius < 1 || radius > 50) return SendClientMessage(playerid, COLOR_WHITE, "El radio debe ser de 1 a 50.");
	RespawnNearbyVehicles(playerid, radius);
	format(string, sizeof string, "Usted ha respawneado los vehículos dentro del radio de %d.", radius);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:respawnauto(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], carid;
	if (sscanf(params, "d", carid)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /respawnauto (carid)");
	if (EsVehFabrica(carid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes respawnear un vehículo de fábrica, que el dueño lo haga.");
	SetVehicleToRespawn(carid);
	format(string, sizeof string, "Vehículo ID %d - Respawneado.", carid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:respawncar(playerid, params[]) return cmd_respawnauto(playerid, params);
CMD:rtcar(playerid, params[]) return cmd_respawnauto(playerid, params);

CMD:remolcar(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new Float:vX,Float:vY,Float:vZ,Found=0,vid=0,idcar = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(idcar) == 525)
		{
			new Float:pX,Float:pY,Float:pR;
				GetPlayerPos(playerid,pX,pY,pR);

			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pR-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
		   				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
			   		else
			   		{
		   				AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
					}
				}
			}
			if(!Found)
			{
				SendClientMessage(playerid,COLOR_WHITE,"No hay ningún vehículo cerca.");
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "No puedes remolcar con este vehículo.");
	}
	return 1;
}

new SQLIDVEH[MAX_PLAYERS];

CMD:qmod(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "Debes ser el conductor de un vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[v][vEmbargo] != 0) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo se encuentra embargado.");
		new access = 0, string[160], modList[512], count = 0;
		if (InfoVehiculo[v][vLlavePrestada] == playerid) access = 1;
		if (llaves_vehiculo(playerid, vehicleid) != -1) access = 1;
		if (access == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo.");
		Loop(f, MAX_MODIFICACIONES, 0) if (GetVehicleComponentInSlot(vehicleid, f) != 0)
		{
			if (f != 9 && f != 7 && f != 8)
			{
				format(modList, sizeof modList, "%s\n%s - %s", modList, partType(f), partName(GetVehicleComponentInSlot(vehicleid, f)));
			}
			else format(modList, sizeof(modList), "%s\n%s", modList, partType(f));
			format(string, sizeof string, "partList%d", count);
			SetPVarInt(playerid, string, GetVehicleComponentInSlot(vehicleid, f));
			count++;
		}
		if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "Este vehiculo no tiene ninguna modificación.");
		format(modList, sizeof modList, "%s\nTodo", modList);
		format(string, sizeof string, "partList%d", count);
		SetPVarInt(playerid, string, 999);
		count++;
		SetPVarInt(playerid, "modCount", count);
		Dialog_Show(playerid, QuitMods, DIALOG_STYLE_LIST, "{FFBF00}Partes", modList, "Continuar", "Salir");
		SQLIDVEH[playerid] = v;
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Debes estar dentro de un vehículo propio o con llaves.");
 	return 1;
}
CMD:quitarmodificaciones(playerid) return cmd_qmod(playerid);

Dialog:QuitMods(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new veh = SQLIDVEH[playerid], count = GetPVarInt(playerid, "modCount"), string[64];
	Loop(i, count, 0) if (listitem == i)
	{
		format(string, sizeof string, "partList%i", i);
		new partID = GetPVarInt(playerid, string), vehicleid = InfoVehiculo[veh][vIG_id];
		if (partID == 999)
		{
			Loop(f, MAX_MODIFICACIONES, 0)
			{
				RemoveVehicleComponent(vehicleid, GetVehicleComponentInSlot(vehicleid, f));
				InfoVehiculo[veh][vModificacion][f] = 0;
				format(string, sizeof string, "Modificacion%d", f+1);
				guardar_int_mysql("vehiculos", string, InfoVehiculo[veh][vID_sql], 0);
			}
			SendClientMessage(playerid, 0xA2DC35FF, "[INFO]:{FFFFFF} Todas las modificaciones se han eliminado de tu vehículo.");
			return 1;
		}
		RemoveVehicleComponent(vehicleid, partID);
		InfoVehiculo[veh][vModificacion][GetVehicleComponentType(partID)] = 0;
		format(string, sizeof string, "Modificacion%d", GetVehicleComponentType(partID)+1);
		guardar_int_mysql("vehiculos", string, InfoVehiculo[veh][vID_sql], 0);
		SendClientMessage(playerid, 0xA2DC35FF, "[INFO]:{FFFFFF} La modificación que has seleccionado ha sido eliminado.");
	}
	return 1;
}

CMD:oldcar(playerid)
{
	if (gLastCar[playerid] == 0) return SendClientMessage(playerid, -1, "No te has subido a ningún vehículo.");
	new string[170];
	format(string, sizeof string, "Tu último vehiculo manejado fue el ID %d.", gLastCar[playerid]);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:mandarls(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /mandarls (ID/Jugador)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Usuario desconectado.");
	if (InfoPlayer[playerid2][pSancionado] != 0) return SendClientMessage(playerid, COLOR_GRAD2, "Información: No puedes sacar a gente de jail, usa el CMD /ir o /liberar.");
	if (GetPlayerAdmin(playerid2, 10) != 0) return SendClientMessage(playerid, COLOR_GRAD2, "No puedes hacer esto con propietarios o programadores.");

	SendClientMessage(playerid2, COLOR_WHITE, "Fuiste llevado a Los Santos por un miembro de la administración.");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha mandado %s(%d) a Los Santos.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	SetPosEx(playerid2, 1529.6, -1705.5, 13.4, 0.0, 0, 0, 1);
	return 1;
}
CMD:llevarls(playerid, params[]) return cmd_mandarls(playerid, params);

CMD:musica(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /musica (URL.mp3)");
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2) && InfoPlayer[playerid2][pTogMusic] == 1)
	{
		PlayAudioStreamForPlayer(playerid2, params);
	}
	return 1;
}

//renovación de sistema de casas by EdinsonWalker
LlavesCasa(playerid, id)
{
	if (InfoPlayer[playerid][pCasa1] == id) return 1;
	if (InfoPlayer[playerid][pCasa2] == id) return 2;
	return 0;
}

CMD:comprarcasa(playerid)
{
    new string[256], p = -1;
	Loop(x, sizeof InfoCasa, 0) if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[x][cExteriorX], InfoCasa[x][cExteriorY], InfoCasa[x][cExteriorZ]) && InfoPlayer[playerid][pInterior] == InfoCasa[x][cExteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoCasa[x][cExteriorVW])
	{
		p = x;
		break;
	}
	if (p == -1) return SendClientMessage(playerid, COLOR_GREY, "No estás en la entrada de ninguna casa.");
	if (InfoCasa[p][cVenta] != 0) return SendClientMessage( playerid, COLOR_GREY, "* Esta casa ya tiene dueño.");
	if (InfoPlayer[playerid][pNivel] < InfoCasa[p][cNivel])
	{
		format(string, sizeof string, "Necesitas ser nivel %d para comprar esta casa.", InfoCasa[p][cNivel]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if (GetPlayerCash(playerid) < InfoCasa[p][cPrecio])
	{
		format(string, sizeof string, "* Te hacen falta $%s para comprar esta casa.", diner_coma(InfoCasa[p][cPrecio]-GetPlayerCash(playerid)));
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if (InfoPlayer[playerid][pVIP] == 0 || InfoPlayer[playerid][pVIP] == 1)
	{
		if (InfoPlayer[playerid][pCasa1] != -1) return SendClientMessage(playerid, COLOR_GREY, "Las cuentas comunes o VIP bronce, sólo pueden comprar una casa.");
		InfoPlayer[playerid][pCasa1] = p;
		guardar_int_mysql("cuentas", "Casa", InfoPlayer[playerid][pID], p);
	}
	else
	{
		if (InfoPlayer[playerid][pCasa1] == -1)
		{
			InfoPlayer[playerid][pCasa1] = p;
			guardar_int_mysql("cuentas", "Casa", InfoPlayer[playerid][pID], p);
		}
		else if (InfoPlayer[playerid][pCasa2] == -1)
		{
			InfoPlayer[playerid][pCasa2] = p;
			guardar_int_mysql("cuentas", "Casa2", InfoPlayer[playerid][pID], p);
		}
		else { SendClientMessage(playerid, COLOR_GREY, "Ya tienes el máximo de casas."); return 1; }
	}
	InfoCasa[p][cVenta] = 1;
	alm(InfoCasa[p][cPropietario], NombreDeCuenta(playerid));
	GivePlayerCash(playerid, -InfoCasa[p][cPrecio], "comprar casa");
	Tax += (InfoCasa[p][cPrecio] * 40 ) / ( 100 );
	SetPlayerPos(playerid, InfoCasa[p][cExteriorX], InfoCasa[p][cExteriorY], InfoCasa[p][cExteriorZ]);
	SendClientMessage(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra!");
	SendClientMessage(playerid, COLOR_WHITE, "Escribe {FFBF00}/ayuda casa{FFFFFF} para ver los comandos disponibles!");

	mysql_format(DBcreative, string, sizeof string, "UPDATE casas SET Venta = 1, Propietario = '%e' WHERE ID = '%d'", InfoCasa[p][cPropietario], InfoCasa[p][cID_sql]);
	mysql_tquery(DBcreative, string);

	format(string, sizeof string, "%s (IP: %s) compró la casa ID %d por $%d.", NombreDeCuenta(playerid), InfoPlayer[playerid][pIP], p, InfoCasa[p][cPrecio]);
	Log("LOGS/house.log", string);

	LabelPickup_casa(p);
	return 1;
}

CMD:timbre(playerid)
{
    new string[256], h = -1;
	Loop(x, sizeof InfoCasa, 0) if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[x][cExteriorX], InfoCasa[x][cExteriorY], InfoCasa[x][cExteriorZ]) && InfoPlayer[playerid][pInterior] == InfoCasa[x][cExteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoCasa[x][cExteriorVW])
	{
		h = x;
		break;
	}
	if (h == -1) return SendClientMessage(playerid, COLOR_GREY, "No estás en la entrada de ninguna casa.");
	foreach(Player, i) if (InfoPlayer[i][pInterior] == InfoCasa[h][cInteriorInt] && InfoPlayer[i][pVirtualWorld] == InfoCasa[h][cInteriorVW])
	{
		format(string,sizeof string, "Timbre de %s suena.", InfoCasa[h][cPropietario]);
		SendClientMessage(i, COLOR_PURPLE, string);
		GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~p~Timbre...", 4000, 3);
	}
	if (InfoCasa[h][cVenta] != 0) format(string, sizeof string, "presiona el timbre de la casa de %s", InfoCasa[h][cPropietario]);
	else format(string, sizeof string, "presiona el timbre de la casa %d", h);
	cmd_me(playerid, string);
	return 1;
}

CMD:vendercasa(playerid)
{
    new string[256], casa = -1;
	Loop(x, sizeof InfoCasa, 0) if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[x][cExteriorX], InfoCasa[x][cExteriorY], InfoCasa[x][cExteriorZ]) && InfoPlayer[playerid][pInterior] == InfoCasa[x][cExteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoCasa[x][cExteriorVW])
	{
		casa = x;
		break;
	}
	if (casa == -1) return SendClientMessage(playerid, COLOR_GREY, "No estás en la entrada de ninguna casa.");
	if (LlavesCasa(playerid, casa) == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres dueño de esta casa.");
	ClearPropiedad(casa);
	GivePlayerCash(playerid, InfoCasa[casa][cPrecio], "vender casa");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	if (LlavesCasa(playerid, casa) == 1)
	{
		InfoPlayer[playerid][pCasa1] = -1;
		guardar_int_mysql("cuentas", "Casa", InfoPlayer[playerid][pID], InfoPlayer[playerid][pCasa1]);
	}
	else if (LlavesCasa(playerid, casa) == 2)
	{
		InfoPlayer[playerid][pCasa2] = -1;
		guardar_int_mysql("cuentas", "Casa2", InfoPlayer[playerid][pID], InfoPlayer[playerid][pCasa2]);
	}
	if (InfoPlayer[playerid][pVirtualWorld] == InfoCasa[casa][cInteriorVW]) SetPosEx(playerid,InfoCasa[casa][cExteriorX], InfoCasa[casa][cExteriorY], InfoCasa[casa][cExteriorZ], InfoCasa[casa][cExteriorR], InfoCasa[casa][cExteriorInt], InfoCasa[casa][cExteriorVW], 1);
	format(string, sizeof string, "~w~Vendiste tu casa por ~n~~g~$%s", diner_coma(InfoCasa[casa][cPrecio]));
	GameTextForPlayer(playerid, string, 4000, 3);
	format(string,sizeof string, "%s (IP: %s) vendió su casa (ID %d) for $%d.", NombreDeCuenta(playerid), InfoPlayer[playerid][pIP], casa, InfoCasa[casa][cPrecio]);
	Log("LOGS/house.log", string);
	return 1;
}

CMD:avecasa(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[256], house;
	if (sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /avecasa (CasaID)");
    if (house < 1 || house > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
	if (InfoCasa[house][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
	if (InfoCasa[house][cVenta] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa ya está en venta.");

	foreach(Player, p)
	{
		if (InfoPlayer[p][pCasa1] == house)
		{
			format(string, sizeof string, "Admin %s vendió tu casa (1) %d.", NombreOriginal(playerid), house);
			SendClientMessage(playerid, COLOR_ORANGE, string);
			InfoPlayer[p][pCasa1] = -1;
		}
		if (InfoPlayer[p][pCasa2] == house)
		{
			format(string, sizeof string, "Admin %s vendió tu casa (2) %d.", NombreOriginal(playerid), house);
			SendClientMessage(playerid, COLOR_ORANGE, string);
			InfoPlayer[p][pCasa2] = -1;
		}
	}
	//limpiar casa
	if (verificar_cuenta(InfoCasa[house][cPropietario]))
	{
		new casita1, casita2;
		reg_int(0, "Casa", casita1);
		reg_int(0, "Casa2", casita2);
		if (casita1 == house)
		{
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Casa = -1 WHERE Nombre_Apellido = '%e'", InfoCasa[house][cPropietario]);
			mysql_tquery(DBcreative, string);
		}
		if (casita2 == house)
		{
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Casa2 = -1 WHERE Nombre_Apellido = '%e'", InfoCasa[house][cPropietario]);
			mysql_tquery(DBcreative, string);
		}
	}
	//mensaje
	format(string, sizeof string, "Admin %s (IP: %s) vendió la casa %d (propietario %s).", NombreDeCuenta(playerid), InfoPlayer[playerid][pIP], house, InfoCasa[house][cPropietario]);
	Log("LOGS/house.log", string);
	ClearPropiedad(house);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof string, "~w~Vendiste la casa %d.", house);
	GameTextForPlayer(playerid, string, 6000, 3);
	return 1;
}

CMD:ircasa(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new house;
	if (sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /ircasa (CasaID)");
    if (house < 1 || house > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
	if (InfoCasa[house][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
	SetPosEx(playerid, InfoCasa[house][cExteriorX], InfoCasa[house][cExteriorY], InfoCasa[house][cExteriorZ], InfoCasa[house][cExteriorR], InfoCasa[house][cExteriorInt], InfoCasa[house][cExteriorVW], 1);
	GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
	return 1;
}

CMD:cseguro(playerid)
{
	new casa = -1;
	Loop(x, totalcasas, 1)
	{
		if ((IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[x][cExteriorX], InfoCasa[x][cExteriorY], InfoCasa[x][cExteriorZ]) && InfoCasa[x][cExteriorInt] == InfoPlayer[playerid][pInterior] && InfoCasa[x][cExteriorVW] == InfoPlayer[playerid][pVirtualWorld]) ||
		(IsPlayerInRangeOfPoint(playerid, 5.0, InfoCasa[x][cInteriorX], InfoCasa[x][cInteriorY], InfoCasa[x][cInteriorZ]) && InfoCasa[x][cInteriorInt] == InfoPlayer[playerid][pInterior] && InfoCasa[x][cInteriorVW] == InfoPlayer[playerid][pVirtualWorld]) )
		{
			casa = x;
		}
	}
	if (casa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en la entrada o salida de alguna casa.");
	if (LlavesCasa(playerid, casa) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de esta casa.");
	if (!InfoCasa[casa][cSeguro])
	{
		InfoCasa[casa][cSeguro] = 1;
		cmd_me(playerid, "saca sus llaves de casa y la cierra");
	}
	else if (InfoCasa[casa][cSeguro])
	{
		InfoCasa[casa][cSeguro] = 0;
		cmd_me(playerid, "saca sus llaves de casa y la abre");
	}
	guardar_int_mysql("casas", "Seguro", InfoCasa[casa][cID_sql], InfoCasa[casa][cSeguro]);
	return 1;
}
CMD:casaseguro(playerid) return cmd_cseguro(playerid);

CMD:casamenu(playerid)
{
	new casa = EnCasa(playerid);
	if (casa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	if (LlavesCasa(playerid, casa) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de esta casa.");
	Dialog_Show(playerid, CasaOpciones, DIALOG_STYLE_LIST, "Menú de casa", "{FFBF00}»{EBEBEB} Dinero\n{FFBF00}»{EBEBEB} Armario\n{FFBF00}»{EBEBEB} Materiales", "Continuar", "Salir");
	return 1;
}
CMD:casa(playerid) return cmd_casamenu(playerid);
CMD:menucasa(playerid) return cmd_casamenu(playerid);

Dialog:CasaOpciones(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new idcasa = EnCasa(playerid), gformat[370];
	if (idcasa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	switch (listitem)
	{
		case 0:
		{
		    format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoCasa[idcasa][cDinero]));
			Dialog_Show(playerid, DineroCasa, DIALOG_STYLE_LIST, gformat, "{FFBF00}»{EBEBEB} Retirar dinero\n{FFBF00}»{EBEBEB} Depositar dinero", "Continuar", "Volver");
		}
		case 1:
		{
			SendClientMessage(playerid, 0xEBEBEBFF, "Para guardar objetos/armas en el armario, usa: {FFBF00}/guardararmario{EBEBEB} o {FFBF00}/garmario");
			SendClientMessage(playerid, 0xEBEBEBFF, "Para sacar objetos/armas del armario, usa: {FFBF00}/sacararmario (slot){EBEBEB} o {FFBF00}/garmario (slot)");
		}
		case 2:
		{
			format(gformat, sizeof gformat, "Materiales: {8080FF}%d", InfoCasa[idcasa][cMateriales]);
			Dialog_Show(playerid, CasaMateriales, DIALOG_STYLE_LIST, gformat, "{FFBF00}»{EBEBEB} Retirar materiales\n{FFBF00}»{EBEBEB} Depositar materiales", "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:DineroCasa(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_casamenu(playerid);
	new idcasa = EnCasa(playerid), gformat[370];
	if (idcasa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	switch (listitem)
	{
		case 0:
		{
			format(gformat, sizeof gformat, "{EBEBEB}Ingresa el monto que quieres retirar del baúl de tu casa.\n\nTienes {00CC00}$%s{EBEBEB} dólares.\n", diner_coma(InfoCasa[idcasa][cDinero]));
			Dialog_Show(playerid, DineroRCasa, DIALOG_STYLE_INPUT, "Sacar dinero", gformat, "Continuar", "Volver");
		}
		case 1:
		{
			format(gformat, sizeof gformat, "{EBEBEB}Ingresa el monto que quieres depositar en el baúl de tu casa.\n\nTienes {00CC00}$%s{EBEBEB} dólares.\n", diner_coma(InfoCasa[idcasa][cDinero]));
			Dialog_Show(playerid, DineroDCasa, DIALOG_STYLE_INPUT, "Guardar dinero", gformat, "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:DineroRCasa(playerid, response, listitem, inputtext[])
{
	new idcasa = EnCasa(playerid), gformat[370];
	if (idcasa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoCasa[idcasa][cDinero]));
		Dialog_Show(playerid, DineroCasa, DIALOG_STYLE_LIST, gformat, "{FFBF00}»{EBEBEB} Retirar dinero\n{FFBF00}»{EBEBEB} Depositar dinero", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	if (amount < 1) return SendClientMessage(playerid, COLOR_GREY, "* No puedes retirar menos de un dolar.");
	if (InfoCasa[idcasa][cDinero] >= amount)
	{
		InfoCasa[idcasa][cDinero] -= amount;
		GivePlayerCash(playerid, amount, "retiro baul casa");
		format(gformat, sizeof gformat, "Retiraste $%s de tu casa dejaste en el baúl $%s, ahora tienes en bolsillos $%s.", diner_coma(amount), diner_coma(InfoCasa[idcasa][cDinero]), diner_coma(GetPlayerCash(playerid)));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
		guardar_int_mysql("casas", "BolosUwU", InfoCasa[idcasa][cID_sql], InfoCasa[idcasa][cDinero]);
		return 1;
	}
	format(gformat, sizeof gformat, "* No puedes retirar $%s, si sólo tienes en el bául $%s.", diner_coma(amount), diner_coma(InfoCasa[idcasa][cDinero]));
	SendClientMessage(playerid, COLOR_GREY, gformat);
	return 1;
}

Dialog:DineroDCasa(playerid, response, listitem, inputtext[])
{
	new idcasa = EnCasa(playerid), gformat[370];
	if (idcasa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoCasa[idcasa][cDinero]));
		Dialog_Show(playerid, DineroCasa, DIALOG_STYLE_LIST, gformat, "{FFBF00}»{EBEBEB} Retirar dinero\n{FFBF00}»{EBEBEB} Depositar dinero", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	if (amount < 1) return SendClientMessage(playerid, COLOR_GREY, "* No puedes depositar menos de un dolar.");
	if (GetPlayerCash(playerid) >= amount)
	{
		InfoCasa[idcasa][cDinero] += amount;
		GivePlayerCash(playerid, -amount, "deposito baul casa");
		format(gformat, sizeof gformat, "Depositaste $%s en tu casa (total: $%s), ahora tienes en bolsillos $%s.", diner_coma(amount), diner_coma(InfoCasa[idcasa][cDinero]), diner_coma(GetPlayerCash(playerid)));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
		guardar_int_mysql("casas", "BolosUwU", InfoCasa[idcasa][cID_sql], InfoCasa[idcasa][cDinero]);
		return 1;
	}
	format(gformat, sizeof gformat, "* No puedes depositar $%s, si sólo tienes en bolsillos $%s.", diner_coma(amount), diner_coma(GetPlayerCash(playerid)));
	SendClientMessage(playerid, COLOR_GREY, gformat);
	return 1;
}

Dialog:CasaMateriales(playerid, response, listitem, inputtext[])
{
	new idcasa = EnCasa(playerid), gformat[370];
	if (idcasa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	if (!response) return cmd_casamenu(playerid);
	format(gformat, sizeof gformat, "Materiales: {8080FF}%d", InfoCasa[idcasa][cMateriales]);
	switch (listitem)
	{
		case 0: Dialog_Show(playerid, CasaRMateriales, DIALOG_STYLE_INPUT, gformat, "{EBEBEB}Ingresa el monto de materiales que retirarás del baúl de tu casa.", "Continuar", "Volver");
		case 1: Dialog_Show(playerid, CasaDMateriales, DIALOG_STYLE_INPUT, gformat, "{EBEBEB}Ingresa el monto de materiales que depositarás en el baúl de tu casa.", "Continuar", "Volver");
	}
	return 1;
}

Dialog:CasaRMateriales(playerid, response, listitem, inputtext[])
{
	new idcasa = EnCasa(playerid), gformat[370];
	if (idcasa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Materiales: {8080FF}%d", InfoCasa[idcasa][cMateriales]);
		Dialog_Show(playerid, CasaMateriales, DIALOG_STYLE_LIST, gformat, "{FFBF00}»{EBEBEB} Retirar materiales\n{FFBF00}»{EBEBEB} Depositar materiales", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (amount < 1) SendClientMessage(playerid, COLOR_GREY, "* No puedes retirar menos de un material.");
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	if (InfoCasa[idcasa][cMateriales] >= amount)
	{
		InfoCasa[idcasa][cMateriales] -= amount;
		InfoPlayer[playerid][pMateriales] += amount;
		format(gformat, sizeof gformat, "Retiraste %d materiales de tu casa (total: %d), ahora tienes en inventario %d materiales.", amount, InfoPlayer[playerid][pMateriales]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
		guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
		guardar_int_mysql("casas", "Materiales", InfoCasa[idcasa][cID_sql], InfoCasa[idcasa][cMateriales]);
		return 1;
	}
	format(gformat, sizeof gformat, "* No puedes retirar %d materiales, si sólo tienes en casa %d.", amount, InfoCasa[idcasa][cMateriales]);
	SendClientMessage(playerid, COLOR_GREY, gformat);
	return 1;
}

Dialog:CasaDMateriales(playerid, response, listitem, inputtext[])
{
	new idcasa = EnCasa(playerid), gformat[370];
	if (idcasa == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Materiales: {8080FF}%d", InfoCasa[idcasa][cMateriales]);
		Dialog_Show(playerid, CasaMateriales, DIALOG_STYLE_LIST, gformat, "{FFBF00}»{EBEBEB} Retirar materiales\n{FFBF00}»{EBEBEB} Depositar materiales", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (amount < 1) return SendClientMessage(playerid, COLOR_GREY, "* No puedes depositar menos de un material.");
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	if (InfoPlayer[playerid][pMateriales] >= amount)
	{
		InfoCasa[idcasa][cMateriales] += amount;
		InfoPlayer[playerid][pMateriales] -= amount;
		format(gformat, sizeof gformat, "Depositaste %d materiales en tu casa (total: %d), ahora tienes en inventario %d materiales.", amount, InfoCasa[idcasa][cMateriales], InfoPlayer[playerid][pMateriales]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
		guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
		guardar_int_mysql("casas", "Materiales", InfoCasa[idcasa][cID_sql], InfoCasa[idcasa][cMateriales]);
		return 1;
	}
	format(gformat, sizeof gformat, "* No puedes depositar %d materiales, si sólo tienes en inventario %d.", amount, InfoPlayer[playerid][pMateriales]);
	SendClientMessage(playerid, COLOR_GREY, gformat);
	return 1;
}

CMD:garmario(playerid)
{
	new id = EnCasa(playerid), gformat[370];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de esta casa.");
	if (InfoPlayer[playerid][pManoDerecha] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes un objeto en tu mano derecha.");
	new objeto = InfoPlayer[playerid][pManoDerecha], objetocant = InfoPlayer[playerid][pManoDerechaCant];
	new rSlot = -1;
	Loop(xs, 10, 0) if (InfoCasa[id][cArmario][xs] == 0)
	{
		rSlot = xs;
		break;
	}
	if (rSlot == -1) return SendClientMessage(playerid, COLOR_RED, "No puedes guardar más cosas en tu armario, máximo 10 slots.");
	InfoCasa[id][cArmario][rSlot] = objeto;
	InfoCasa[id][cArmarioCant][rSlot] = objetocant;
	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE casas SET Armario%d = '%d', ArmarioCant%d = '%d' WHERE ID = '%d'", rSlot+1, objeto, rSlot+1, objetocant, InfoCasa[id][cID_sql]);
	mysql_tquery(DBcreative, gformat);
	ResetPlayerWeapons(playerid);
	RemovePlayerAttachedObject(playerid, 7);
	InfoPlayer[playerid][pManoDerecha] = 0;
	InfoPlayer[playerid][pManoDerechaCant] = 0;
	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, gformat);
	if (objetocant == 0 || objetocant == 1) format(gformat, sizeof gformat, "Guardaste en el armario tu %s.", InfoInventario[objeto][NombreObjeto]);
	else
	{
		if (InfoInventario[objeto][IDArma] != 0) format(gformat, sizeof gformat, "Guardaste en el armario tu %s con %d balas.", InfoInventario[objeto][NombreObjeto], objetocant);
		else format(gformat, sizeof gformat, "Guardaste en el armario tu %s con %d de cantidad.", InfoInventario[objeto][NombreObjeto], objetocant);
	}
	SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
	format(gformat, sizeof gformat, "guarda en el armario su %s", InfoInventario[objeto][NombreObjeto]);
	cmd_me(playerid, gformat);
	return 1;
}
CMD:guardararmario(playerid) return cmd_garmario(playerid);

CMD:sarmario(playerid, params[])
{
	new id = EnCasa(playerid), gformat[370];
	if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de esta casa.");
	if (InfoPlayer[playerid][pManoDerecha] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes un objeto en tu mano derecha.");
	if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Tienes restricción de armas.");
	new rSlot;
	if (sscanf(params, "i", rSlot))
	{
		new count = 0;
		Loop(xs, 10, 0) if (InfoCasa[id][cArmario][xs] != 0) count++;
		if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en tu armario.");
		SendClientMessage(playerid, COLOR_GREY, "Utiliza: /sarmario (Slot)");
		Loop(xs, 10, 0) if (InfoCasa[id][cArmario][xs] != 0)
		{
			format(gformat, sizeof gformat, "Tienes en {FFBF00}slot %d{EBEBEB}: %s", xs+1, slot_objeto(InfoCasa[id][cArmario][xs], InfoCasa[id][cArmarioCant][xs]));
			SendClientMessage(playerid, 0xEBEBEBFF, gformat);
		}
		return 1;
	}
	if (rSlot < 1 || rSlot > 10) { SendClientMessage(playerid, COLOR_GREY, "El número de slot debe estar entre 1 y 10."); return 1; }
	rSlot--;
	if (InfoCasa[id][cArmario][rSlot] == 0) return SendClientMessage(playerid, COLOR_RED, "No tienes nada en ese slot.");
	new objeto = InfoCasa[id][cArmario][rSlot], objetocant = InfoCasa[id][cArmarioCant][rSlot];
	InfoCasa[id][cArmario][rSlot] = 0;
	InfoCasa[id][cArmarioCant][rSlot] = 0;
	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE casas SET Armario%d = 0, ArmarioCant%d = 0 WHERE ID = '%d'", rSlot+1, rSlot+1, InfoCasa[id][cID_sql]);
	mysql_tquery(DBcreative, gformat);
	InfoPlayer[playerid][pManoDerecha] = objeto;
	InfoPlayer[playerid][pManoDerechaCant] = objetocant;
	mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", objeto, objetocant, InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, gformat);
	if (objetocant == 1 || objetocant == 0) format(gformat, sizeof gformat, "Sacaste tu %s del armario.", InfoInventario[objeto][NombreObjeto]);
	else
	{
		if (InfoInventario[objeto][IDArma] != 0) format(gformat, sizeof gformat, "Sacaste tu %s con %d balas del armario.", InfoInventario[objeto][NombreObjeto], objetocant);
		else format(gformat, sizeof gformat, "Sacaste tu %s con %d de cantidad del armario.", InfoInventario[objeto][NombreObjeto], objetocant);
	}
	SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
	format(gformat, sizeof gformat, "saca su %s del armario", InfoInventario[objeto][NombreObjeto]);
	cmd_me(playerid, gformat);
	ResetPlayerWeapons(playerid);
	if (InfoInventario[objeto][IDArma] > 0)
	{
		GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], objetocant);
	}
	PonerObjeto(playerid, 1, objeto);
	return 1;
}
CMD:sacararmario(playerid, params[]) return cmd_sarmario(playerid, params);

CMD:editarh(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new string[512], id, valor;
	if (sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarcasa (Opción) (CasaID) (Monto)");
		SendClientMessage(playerid, COLOR_GREY, "Opciones: exterior, interior, clase (1-4), nivel, precio");
		return 1;
	}
	if (!strcmp(params, "clase", true, 5))
	{
		if (sscanf(params, "s[32]ii", params, id, valor)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarcasa clase (CasaID) (Clase)");
		if (id < 1 || id > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
		if (InfoCasa[id][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
		if (valor < 1 || valor > 5) return SendClientMessage(playerid, COLOR_WHITE, "Sólo hay 4 clases (1 baja, 2 media-baja, 3 media, 4 media-alta, 5 alta)");
		InfoCasa[id][cTipo] = valor;
		format(string, sizeof string, "Cambiaste la clase de la casa %d a clase: %s.", id, GetClaseCasa(InfoCasa[id][cTipo]));
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_int_mysql("casas", "Tipo", InfoCasa[id][cID_sql], InfoCasa[id][cTipo]);
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarcasa interior (CasaID)");
		if (id < 1 || id > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
		if (InfoCasa[id][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
		GetPlayerPos(playerid, InfoCasa[id][cInteriorX], InfoCasa[id][cInteriorY], InfoCasa[id][cInteriorZ]);
		GetPlayerFacingAngle(playerid, InfoCasa[id][cInteriorR]);
		InfoCasa[id][cInteriorInt] = GetPlayerInterior(playerid);
		InfoCasa[id][cInteriorVW] = 400+id;
		format(string, sizeof string, "Cambiaste el interior de la casa %d.", id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		new query[1048];
		mysql_format(DBcreative, query, sizeof query, "UPDATE casas SET Interior_X = '%f', Interior_Y = '%f', Interior_Z = '%f', Interior_R = '%f', Interior_Int = '%d', Interior_VW = '%d' WHERE ID = '%d'", InfoCasa[id][cInteriorX], InfoCasa[id][cInteriorY], InfoCasa[id][cInteriorZ], InfoCasa[id][cInteriorR], InfoCasa[id][cInteriorInt], InfoCasa[id][cInteriorVW], InfoCasa[id][cID_sql]);
		mysql_tquery(DBcreative, query);
		LabelPickup_casa(id);
	}
	else if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarcasa exterior (CasaID)");
		if (id < 1 || id > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
		if (InfoCasa[id][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
		GetPlayerPos(playerid, InfoCasa[id][cExteriorX], InfoCasa[id][cExteriorY], InfoCasa[id][cExteriorZ]);
		GetPlayerFacingAngle(playerid, InfoCasa[id][cExteriorR]);
		InfoCasa[id][cExteriorInt] = GetPlayerInterior(playerid);
		InfoCasa[id][cExteriorVW] = GetPlayerVirtualWorld(playerid);
		format(string, sizeof string, "Cambiaste el exterior de la casa %d.", id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		new query[1048];
		mysql_format(DBcreative, query, sizeof query, "UPDATE casas SET Exterior_X = '%f', Exterior_Y = '%f', Exterior_Z = '%f', Exterior_R = '%f', Exterior_Int = '%d', Exterior_VW = '%d' WHERE ID = '%d'", InfoCasa[id][cExteriorX], InfoCasa[id][cExteriorY], InfoCasa[id][cExteriorZ], InfoCasa[id][cExteriorR], InfoCasa[id][cExteriorInt], InfoCasa[id][cExteriorVW], InfoCasa[id][cID_sql]);
		mysql_tquery(DBcreative, query);
		LabelPickup_casa(id);
	}
	else if (!strcmp(params, "nivel", true, 5))
	{
		if (sscanf(params, "s[32]ii", params, id, valor)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarcasa exterior (CasaID)");
		if (id < 1 || id > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
		if (InfoCasa[id][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
		if (valor < 1 || valor > 99) return SendClientMessage(playerid, COLOR_WHITE, "Sólo hasta el nivel 99.");
		InfoCasa[id][cNivel] = valor;
		format(string, sizeof string, "Cambiaste el nivel %d de la casa %d.", valor, id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_int_mysql("casas", "Nivel", InfoCasa[id][cID_sql], InfoCasa[id][cNivel]);
		LabelPickup_casa(id);
	}
	else if (!strcmp(params, "precio", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, id, valor)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarcasa exterior (CasaID)");
		if (id < 1 || id > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
		if (InfoCasa[id][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
		InfoCasa[id][cPrecio] = valor;
		format(string, sizeof string, "Cambiaste el precio a $%s de la casa %d.", diner_coma(valor), id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_int_mysql("casas", "Precio", InfoCasa[id][cID_sql], InfoCasa[id][cPrecio]);
		LabelPickup_casa(id);
	}
	return 1;
}
CMD:editarc(playerid, params[]) return cmd_editarh(playerid, params);
CMD:editarcasa(playerid, params[]) return cmd_editarh(playerid, params);

CMD:borrarcasa(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new id, gformat[235], query[1028];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREY, "USA: /borrarcasa [Casa ID]");
	if (id < 1 || id > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
	if (InfoCasa[id][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
	//por si tenia dueño
	if (InfoCasa[id][cVenta] != 0)
	{
		foreach(Player, p)
		{
			if (InfoPlayer[p][pCasa1] == id)
			{
				format(gformat, sizeof gformat, "Admin %s borró tu casa (1) %d.", NombreOriginal(playerid), id);
				SendClientMessage(playerid, COLOR_ORANGE, gformat);
				InfoPlayer[p][pCasa1] = -1;
			}
			if (InfoPlayer[p][pCasa2] == id)
			{
				format(gformat, sizeof gformat, "Admin %s borró tu casa (2) %d.", NombreOriginal(playerid), id);
				SendClientMessage(playerid, COLOR_ORANGE, gformat);
				InfoPlayer[p][pCasa2] = -1;
			}
		}
		//limpiar casa
		if (verificar_cuenta(InfoCasa[id][cPropietario]))
		{
			new casita1, casita2;
			reg_int(0, "Casa", casita1);
			reg_int(0, "Casa2", casita2);
			if (casita1 == id)
			{
				mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Casa = -1 WHERE Nombre_Apellido = '%e'", InfoCasa[id][cPropietario]);
				mysql_tquery(DBcreative, gformat);
			}
			if (casita2 == id)
			{
				mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Casa2 = -1 WHERE Nombre_Apellido = '%e'", InfoCasa[id][cPropietario]);
				mysql_tquery(DBcreative, gformat);
			}
		}
	}
	//destroy pickup+label
	noexitcasa(id);
	//clear sell
	InfoCasa[id][cSeguro] = 1;
	alm(InfoCasa[id][cPropietario], "gobielno");
	InfoCasa[id][cVenta] = 0; // Casa en venta.
	InfoCasa[id][cDinero] = 0;
	InfoCasa[id][cMateriales] = 0;
	Loop(x, 10, 0)
	{
		InfoCasa[id][cArmario][x] = 0;
		InfoCasa[id][cArmarioCant][x] = 0;
		mysql_format(DBcreative, query, sizeof query, "UPDATE casas SET Armario%d = 0 , ArmarioCant%d = 0 WHERE ID = '%d'", x+1, x+1, InfoCasa[id][cID_sql]);
		mysql_tquery(DBcreative, query);
	}
	mysql_format(DBcreative, query, sizeof query, "UPDATE casas SET Propietario = '%e', Seguro = 1, Venta = 0, BolosUwU = 0, Materiales = 0 WHERE ID = '%d'", InfoCasa[id][cPropietario], InfoCasa[id][cID_sql]);
	mysql_tquery(DBcreative, query);
	//coordenadas
	InfoCasa[id][cExteriorX] = 0.0;
	InfoCasa[id][cExteriorY] = 0.0;
	InfoCasa[id][cExteriorZ] = 0.0;
	InfoCasa[id][cExteriorR] = 0.0;
	InfoCasa[id][cExteriorInt] = 0;
	InfoCasa[id][cExteriorVW] = 0;
	InfoCasa[id][cInteriorX] = 0.0;
	InfoCasa[id][cInteriorY] = 0.0;
	InfoCasa[id][cInteriorZ] = 0.0;
	InfoCasa[id][cInteriorR] = 0.0;
	InfoCasa[id][cInteriorInt] = 0;
	InfoCasa[id][cInteriorVW] = 0;
	//otros
	InfoCasa[id][cPrecio] = 0;
	InfoCasa[id][cNivel] = 0;
	InfoCasa[id][cTipo] = 0;
	mysql_format(DBcreative, query, sizeof query, "UPDATE casas SET Exterior_X = 0.0, Exterior_Y = 0.0, Exterior_Z = 0.0, Exterior_R = 0.0, Exterior_Int = 0, Exterior_VW = 0, Interior_X = 0.0, Interior_Y = 0.0, \
	Interior_Z = 0.0, Interior_R = 0.0, Interior_Int = 0, Interior_VW = 0, Precio = 0, Nivel = 0, Tipo = 0 WHERE ID = '%d'", InfoCasa[id][cID_sql]);
	mysql_tquery(DBcreative, query);
	//mensaje
	format(gformat, sizeof gformat, "Borraste la casa ID %d, SQL vacía: %d", id, InfoCasa[id][cID_sql]);
	SendClientMessage(playerid, -1, gformat);
	return 1;
}

CMD:vercasa(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new house;
	if (sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /vercasa (CasaID)");
    if (house < 1 || house > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
	if (InfoCasa[house][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
	SetPosEx(playerid, InfoCasa[house][cInteriorX], InfoCasa[house][cInteriorY], InfoCasa[house][cInteriorZ], InfoCasa[house][cInteriorR], InfoCasa[house][cInteriorInt], InfoCasa[house][cInteriorVW], 1);
	GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
	return 1;
}

CMD:verinterior(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new interior;
	if (sscanf(params, "d", interior)) return SendClientMessage(playerid, COLOR_GREY, "Utiliza: /verinterior (InteriorID)");
	if (interior < 1 || interior > 14) return SendClientMessage(playerid, 0xFF6347AA, "Sólo hay interiores ID desde 1 hasta el 14.");
	SetInteriorCasa(playerid, -1, interior);
	return 1;
}

CMD:editarinterior(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new casa, interior, gformat[195];
	if (sscanf(params, "dd", casa, interior)) return SendClientMessage(playerid, COLOR_GREY, "Utiliza: /editarinterior (CasaID) (InteriorID)");
    if (casa < 1 || casa > totalcasas) return SendClientMessage(playerid, COLOR_WHITE, "Casa no encontrada.");
	if (InfoCasa[casa][cTipo] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esa casa no existe.");
	if (interior < 1 || interior > 14) return SendClientMessage(playerid, 0xFF6347AA, "Sólo hay interiores ID desde 1 hasta el 14.");
	SetInteriorCasa(-1, casa, interior);
	LabelPickup_casa(casa);
	format(gformat, sizeof gformat, "Ahora la casa ID: %d, tiene le interior ID: %d - Clase: %s.", casa, interior, GetClaseCasa(InfoCasa[casa][cTipo]));
	SendClientMessage(playerid, 0x00cc00ff, gformat);
	return 1;
}

CMD:crearcasa(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new interior, precio, nivel, gformat[210];
	if (sscanf(params, "ddd", interior, precio, nivel)) return SendClientMessage(playerid, COLOR_GREY, "Utiliza: /crearcasa (InteriorID) (Precio) (Nivel)");
	if (interior < 1 || interior > 14) return SendClientMessage(playerid, 0xFF6347AA, "Sólo hay interiores ID desde 1 hasta el 14. Si quieres saber las ID usa: /VerInterior");
	if (nivel < 1 || nivel > 99) return SendClientMessage(playerid, 0xFF6347AA, "Sólo niveles desde 1 hasta el 99.");
	Loop(cid, MAX_CASAS, 1) if (!InfoCasa[cid][cTipo])
	{
		GetPlayerPos(playerid, InfoCasa[cid][cExteriorX], InfoCasa[cid][cExteriorY], InfoCasa[cid][cExteriorZ]);
		GetPlayerFacingAngle(playerid, InfoCasa[cid][cExteriorR]);
		InfoCasa[cid][cExteriorVW] = GetPlayerVirtualWorld(playerid);
		InfoCasa[cid][cExteriorInt] = GetPlayerInterior(playerid);
		InfoCasa[cid][cSeguro] = 1;
		InfoCasa[cid][cVenta] = 0;
		alm(InfoCasa[cid][cPropietario], "gobielno");
		InfoCasa[cid][cPrecio] = precio;
		new Float: x, Float: y, Float: z, Float: r, int, clase;
		switch (interior)
		{
			//baja
			case 1: x = 266.5080, y = 304.9096, z = 999.1484, r = 271.8487, int = 2, clase = 1;
			case 2: x = 2218.4019, y = -1076.2317, z = 1050.4844, r = 94.0354, int = 1, clase = 1;
			case 3: x = 2233.7324, y = -1115.2200, z = 1050.8828, r = 4.4446, int = 5, clase = 1;
			//media-baja
			case 4: x = 2468.8379, y = -1698.2688, z = 1013.5078, r = 90.6120, int = 2, clase = 2;
			case 5: x = 217.2689, y = 1275.1978, z = 1059.0253, r = 1.2881, int = 4, clase = 2;
			case 6: x = 295.1263, y = 1472.2615, z = 1080.2578, r = 358.1545, int = 15, clase = 2;
			case 7: x = 226.7467, y = 1239.9583, z = 1082.1406, r = 87.4319, int = 2, clase = 2;
			//media
			case 8: x = 2270.4004, y = -1210.5198, z = 1047.5625, r = 91.5055, int = 10, clase = 3;
			case 9: x = 2196.8484, y = -1204.3329, z = 1049.0234, r = 94.3722, int = 6, clase = 3;
			//media-alta
			case 10: x = 83.0492, y = 1322.2887, z = 1083.8662, r = 0.9745, int = 9, clase = 4;
			case 11: x = 2317.7004, y = -1026.5896, z = 1050.2178, r = 7.2412, int = 9, clase = 4;
			case 12: x = 2324.4644, y = -1149.5463, z = 1050.7101, r = 2.8840, int = 12, clase = 4;
			//alta
			case 13: x = 140.2607, y = 1365.9283, z = 1083.8594, r = 3.7945, int = 5, clase = 5;
			case 14: x = 1260.6597, y = -785.3624, z = 1091.9063, r = 272.6137, int = 5, clase = 5;
		}
		InfoCasa[cid][cTipo] = clase;
		InfoCasa[cid][cNivel] = nivel;
		InfoCasa[cid][cInteriorX] = x;
		InfoCasa[cid][cInteriorY] = y;
		InfoCasa[cid][cInteriorZ] = z;
		InfoCasa[cid][cInteriorR] = r;
		InfoCasa[cid][cInteriorInt] = int;
		InfoCasa[cid][cInteriorVW] = 400+cid;
		format(gformat, sizeof gformat, "Casa nueva ID: %d - Precio: $%s - Clase: %s.", cid, diner_coma(precio), GetClaseCasa(clase));
		SendClientMessage(playerid, 0x90C3D4FF, gformat);
		LabelPickup_casa(cid);
		new que2ry[1000], query[1500];
		//opción idsql ya creada.
		if (InfoCasa[cid][cID_sql] != 0)
		{
			format(que2ry, sizeof que2ry, "UPDATE casas SET Propietario = '%s', Tipo = '%d', Seguro = '%d', Venta = '%d', Exterior_X = '%f', Exterior_Y = '%f', Exterior_Z = '%f', Exterior_R = '%f', Exterior_Int = '%d', Exterior_VW = '%d',",
			InfoCasa[cid][cPropietario],
			InfoCasa[cid][cTipo],
			InfoCasa[cid][cSeguro],
			InfoCasa[cid][cVenta],
			InfoCasa[cid][cExteriorX],
			InfoCasa[cid][cExteriorY],
			InfoCasa[cid][cExteriorZ],
			InfoCasa[cid][cExteriorR],
			InfoCasa[cid][cExteriorInt],
			InfoCasa[cid][cExteriorVW]);
			mysql_format(DBcreative, query, sizeof query, "%s Interior_X = '%f', Interior_Y = '%f', Interior_Z = '%f', Interior_R = '%f', Interior_Int = '%d', Interior_VW = '%d', Precio = '%d', Nivel = '%d' WHERE ID = '%d'",
			que2ry,
			InfoCasa[cid][cInteriorX],
			InfoCasa[cid][cInteriorY],
			InfoCasa[cid][cInteriorZ],
			InfoCasa[cid][cInteriorR],
			InfoCasa[cid][cInteriorInt],
			InfoCasa[cid][cInteriorVW],
			InfoCasa[cid][cPrecio],
			InfoCasa[cid][cNivel],
			InfoCasa[cid][cID_sql]);
			mysql_tquery(DBcreative, query);
			cid = MAX_CASAS;
			return 1;
		}
		format(que2ry, sizeof que2ry, "INSERT INTO casas (Propietario, Tipo, Seguro, Venta, Exterior_X, Exterior_Y, Exterior_Z, Exterior_R, Exterior_Int, Exterior_VW, Interior_X, Interior_Y, Interior_Z, Interior_R, Interior_Int, Interior_VW, Precio, Nivel)");
		mysql_format(DBcreative, query, sizeof query, "%s VALUES ('%e', '%d', '%d',  '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d')",
		que2ry,
		InfoCasa[cid][cPropietario],
		InfoCasa[cid][cTipo],
		InfoCasa[cid][cSeguro],
		InfoCasa[cid][cVenta],
		InfoCasa[cid][cExteriorX],
		InfoCasa[cid][cExteriorY],
		InfoCasa[cid][cExteriorZ],
		InfoCasa[cid][cExteriorR],
		InfoCasa[cid][cExteriorInt],
		InfoCasa[cid][cExteriorVW],
		InfoCasa[cid][cInteriorX],
		InfoCasa[cid][cInteriorY],
		InfoCasa[cid][cInteriorZ],
		InfoCasa[cid][cInteriorR],
		InfoCasa[cid][cInteriorInt],
		InfoCasa[cid][cInteriorVW],
		InfoCasa[cid][cPrecio],
		InfoCasa[cid][cNivel]);
		mysql_tquery(DBcreative, query, "OnCasaCreate", "i", cid);
		cid = MAX_CASAS;
		return 1;
	}
	SendClientMessage(playerid, COLOR_RED, "Se alcanzó el máximo de casas (500)");
	return 1;
}

forward OnCasaCreate(cid);
public OnCasaCreate(cid)
{
	InfoCasa[cid][cID_sql] = cache_insert_id();
	cache_unset_active();
	totalcasas++;
    return 1;
}

CMD:rcategoria(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	Dialog_Show(playerid, RespawnCategoria, DIALOG_STYLE_LIST, "Elige cuales respawnear", "Facciones\nVIPs\nNegocios\nRentables\nUsuarios", "Continuar", "Salir");
	return 1;
}

Dialog:RespawnCategoria(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (listitem == 0)
	{
		new gformat[320], dialog[3048], iCount = 0;
		Loop(id, totalfacciones, 1) if (InfoFaccion[id][fTipo] != 0)
		{
			format(gformat, sizeof gformat, "{EBEBEB}%s ({589DA0}%d{EBEBEB})\n", InfoFaccion[id][fNombre], id);
			strcat(dialog, gformat);
			//conteo
			new gformat2[64];
			format(gformat2, sizeof gformat2, "countfacr%d", iCount);
			SetPVarInt(playerid, gformat2, id);
			iCount++;
		}
		Dialog_Show(playerid, RespawnFacciones, DIALOG_STYLE_LIST, "Facciones", dialog, "Continuar", "Volver");
		return 1;
	}
	new tipo = listitem+1, bool:unwanted[MAX_VEHICLES], string[170], count = 0;
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerInAnyVehicle(playerid2))
	{
		unwanted[GetPlayerVehicleID(playerid2)] = true;
	}
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] != 0)
	{
		new vehicleid = InfoVehiculo[id][vIG_id];
		if (InfoVehiculo[id][vNegocio] != 0)
		{
			if (!unwanted[vehicleid] && tipo == 3)
			{
				SetVehicleToRespawn(vehicleid);
				SetVehicleParamsEx(vehicleid,0,0,0,0,0,0,0);
				arr_Engine{vehicleid} = 0;
				count++;
			}
		}
		else
		{
			if (!unwanted[vehicleid] && InfoVehiculo[id][vTipo] == 200 && tipo == 2)
			{
				SetVehicleToRespawn(vehicleid);
				SetVehicleParamsEx(vehicleid,0,0,0,0,0,0,0);
				arr_Engine{vehicleid} = 0;
				count++;
			}
			if (!unwanted[vehicleid] && InfoVehiculo[id][vTipo] == 600 && tipo == 4)
			{
				SetVehicleToRespawn(vehicleid);
				SetVehicleParamsEx(vehicleid,0,0,0,0,0,0,0);
				arr_Engine{vehicleid} = 0;
				count++;
			}
			if (!unwanted[vehicleid] && InfoVehiculo[id][vTipo] == 0 && tipo == 5 && InfoVehiculo[id][vNegocio] == 0)
			{
				SetVehicleToRespawn(vehicleid);
				SetVehicleParamsEx(vehicleid,0,0,0,0,0,0,0);
				arr_Engine{vehicleid} = 0;
				count++;
			}
		}
	}
	new namecato[19];
	switch (listitem)
	{
		case 1: alm(namecato, "vips");
		case 2: alm(namecato, "negocios");
		case 3: alm(namecato, "rentables");
		case 4: alm(namecato, "usuarios");
	}
	format(string, sizeof string, "Se respawnearon %d vehículos de la categoria '%s'.", count, namecato);
	SendClientMessage(playerid, 0xFFBF00FF, string);
	return 1;
}

Dialog:RespawnFacciones(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "countfacr%d", ID);
	new faccion = GetPVarInt(playerid, gformat);
	new bool:unwanted[MAX_VEHICLES], string[170], count = 0;
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerInAnyVehicle(playerid2))
	{
		unwanted[GetPlayerVehicleID(playerid2)] = true;
	}
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] != 0)
	{
		new vehicleid = InfoVehiculo[id][vIG_id];
		if (InfoVehiculo[id][vTipo] == faccion)
		{
			if (!unwanted[vehicleid])
			{
				SetVehicleToRespawn(vehicleid);
				SetVehicleParamsEx(vehicleid,0,0,0,0,0,0,0);
				arr_Engine{vehicleid} = 0;
				count++;
			}
		}
	}
	format(string, sizeof string, "Se respawnearon %d vehículos de la facción %d '%s'.", count, faccion, InfoFaccion[faccion][fNombre]);
	SendClientMessage(playerid, 0xFFBF00FF, string);
	return 1;
}

CMD:respawntodo(playerid)
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	SendClientMessage(playerid, 0x00CCCCFF, "* Por el momento dejamos habilitado /rcategoria, saludos te manda Elias Moss :D!");
/*	new bool:unwanted[MAX_VEHICLES], string[170], count = 0;
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerInAnyVehicle(playerid2))
	{
		unwanted[GetPlayerVehicleID(playerid2)] = true;
	}
	Loop(car, MAX_VEHICLES, 0) if (GetVehicleModel(car))
	{
		if (!unwanted[car] && !EsVehFabrica(car))
		{
			SetVehicleToRespawn(car);
			SetVehicleParamsEx(car,0,0,0,0,0,0,0);
			arr_Engine{car} = 0;
			count++;
		}
	}
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %d vehículos fueron respawneados por %s(%d).", count, NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);*/
	return 1;
}
CMD:racall(playerid) return cmd_respawntodo(playerid);

CMD:reparartodo(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], count = 0;
	Loop(car, MAX_VEHICLES, 0) if (GetVehicleModel(car))
	{
		RepairVehicle(car);
		if (GetVehicleModel(car) == 528 || GetVehicleModel(car) == 427) SetVehicleHealth(car, 5000.0);
		else SetVehicleHealth(car, 1000.0);
		count++;
	}
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %d vehículos fueron reparados por %s(%d).", count, NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
    return 1;
}

CMD:eliminarcheckpoint(playerid, params[])
{
    DeletePVar(playerid, "TrackCar");
    DisablePlayerCheckpoint(playerid);
    SendClientMessage(playerid,COLOR_WHITE,"{A2DC35}[INFO]:{FFFFFF} Todos los checkpoints fueron eliminados.");
	return 1;
}

CMD:revisarmaletero(playerid)
{
	new string[256];
	if (!member_faccion(playerid, 1, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	new veh = check_vehicles(playerid, 9.0);
	if (veh == -1) return SendClientMessage(playerid, COLOR_GREY, "No estás cerca de ningún vehiculo de usuario.");
	new count = 0;
	Loop(x, 10, 0) if (InfoVehiculo[veh][vMaletero][x] != 0)
	{
		count++;
		format(string, sizeof string, "#%d %s", x+1, slot_objeto(InfoVehiculo[veh][vMaletero][x], InfoVehiculo[veh][vMaleteroCant][x]));
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No hay nada en el maletero.");
	return 1;
}

CMD:limpiarmaletero(playerid)
{
	if (!member_faccion(playerid, 1, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	new veh = check_vehicles(playerid, 9.0);
	if (veh == -1) return SendClientMessage(playerid, COLOR_GREY, "No estás cerca de ningún vehiculo de usuario.");
	if (InfoVehiculo[veh][vMaleteroOn] == 0) return SendClientMessage(playerid, COLOR_GRAD3, "El maletero está cerrado.");
	new dex_query[170];
	Loop(x, 10, 0)
	{
		InfoVehiculo[veh][vMaletero][x] = 0;
		InfoVehiculo[veh][vMaleteroCant][x] = 0;
		mysql_format(DBcreative, dex_query, sizeof dex_query, "UPDATE vehiculos SET Maletero%d = 0, MaleteroCant%d = 0 WHERE ID = '%d'", x+1, x+1, InfoVehiculo[veh][vID_sql]);
		mysql_tquery(DBcreative, dex_query);
	}
	SendClientMessage(playerid, COLOR_WHITE,  "Removiste todos los objetos del maletero.");
	return 1;
}

CMD:revivir(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /revivir (playerid)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Usuario desconectado.");
	if (GetPVarInt(playerid2, "EstaCrack") == 0) return SendClientMessage(playerid, COLOR_GREY, "Usuario no herido.");

	DestroyDynamic3DTextLabelEx(InfoPlayer[playerid2][pNameTag]);
	SendClientMessage(playerid2, COLOR_WHITE, "Un miembro de la administración te revivió.");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha revivido a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	KillEMSQueue(playerid2);
	ClearAnimations(playerid2);
	ResetPlayerDamages(playerid2);
	dar_vida(playerid2, 100);
	timer_herido[playerid2] = 0;
	guardar_int_mysql("cuentas", "Hospital", InfoPlayer[playerid2][pID], 0);
	ActualizarEstado(playerid2);
	return 1;
}

CMD:reanimar(playerid, params[])
{
	new string[170], playerid2;
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo para LSPD, FBI, SAEM & SASD.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes reanimar a alguien desde un vehículo.");
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto, tu también estás herido.");
    if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /reanimar (PlayerID)");
    if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (playerid == playerid2) return SendClientMessage(playerid, COLOR_GREY, "No te puedes reanimar a tí mismo, abusadol de mielda :v");
	if (!CercaDelMarica(3.5, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador no está cerca tuyo.");
	if (GetPVarInt(playerid2, "mueltito") == 1) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador está en estado muerto.");
	if (GetPVarInt(playerid2, "EstaCrack") == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no está en estado herido.");
	if (InfoPlayer[playerid2][pMiembro] == InfoPlayer[playerid][pMiembro]) return SendClientMessage(playerid, COLOR_GREY, "No puedes reanimar a los de tu facción.");
	timer_herido[playerid2] = 0;
	KillEMSQueue(playerid2);
	ResetPlayerDamages(playerid2);
	DestroyDynamic3DTextLabelEx(InfoPlayer[playerid2][pNameTag]);
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(playerid2, 0);
	SetTimerEx("Descongelar", 8000, false, "i", playerid);
	SetTimerEx("Descongelar", 8000, false, "i", playerid2);
	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 1, 1, 0, 0, 1);
	ApplyAnimation(playerid2, "CRACK", "crckidle2", 4.1, 1, 1, 1, 0, 0, 1);
	SetCameraBehindPlayer(playerid2);
	SetPlayerHealth(playerid2, 70);
	InfoPlayer[playerid2][pVida] = 70;
	format(string, sizeof string, "* %s reanima a %s mediante primeros auxilios.", NombreJugador(playerid), NombreJugador(playerid2));
	ProxDetector(20.0, playerid, string, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF, 0x1EB032FF);
	guardar_int_mysql("cuentas", "Hospital", InfoPlayer[playerid2][pID], 0);
	ActualizarEstado(playerid2);
	return 1;
}

funcion Descongelar(playerid) return TogglePlayerControllable(playerid, true);

CMD:comprarlicencia(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid,5.0,1407.6,-1921.669311,1227.8) || IsPlayerInRangeOfPoint(playerid,3.0,1564.0000, -1676.8358, 4989.5386))
	{
		if (InfoPlayer[playerid][pEstrellas] != 0) return SendClientMessage(playerid, COLOR_GREY, "Tienes órden de arresto, te prohibieron la adquisición de licencias.");
		SendClientMessage(playerid, COLOR_YELLOW, "INFO: {FBFBFB}Las licencias de armas son otorgadas por el jefe de policias de LSPD, disculpe las molestias.");
		Dialog_Show(playerid, ShowBuyLicencias, DIALOG_STYLE_LIST, "{A2DC35}Selecciona el tipo de licencia que deseas.", "Licencia de conducir ($2,000)\r\nLicencia de Navegación ($3,000)\r\nLicencia de Vuelo ($5,000)", "Comprar", "Salir");
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} Las licencias sólo pueden ser obtenidas en la Universidad, el edificio delante de Unity o en el mostrador de LSPD.");
	return 1;
}

Dialog:ShowBuyLicencias(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoPlayer[playerid][pLicencia][0] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes la licencia de conducción.");
			if (GetPlayerCash(playerid) < 2000) return SendClientMessage(playerid, COLOR_RED, "No puedes pagar esta licencia de conducir.");
			GivePlayerCash(playerid,-2000, "licencia de conducción");
			Tax += 2000;
			InfoPlayer[playerid][pLicencia][0] = 1;
			guardar_int_mysql("cuentas", "Licencia1", InfoPlayer[playerid][pID], 1);
			SendClientMessage(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido con éxito una licencia de conducción.");
		}
		case 1:
		{
			if (InfoPlayer[playerid][pLicencia][2] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes la licencia de navegación.");
			if (GetPlayerCash(playerid) < 3000) return SendClientMessage(playerid, COLOR_GREY, "No puedes pagar esta licencia de navegación.");
			GivePlayerCash(playerid,-3000, "licencia de navegación");
			Tax += 3000;
			InfoPlayer[playerid][pLicencia][2] = 1;
			guardar_int_mysql("cuentas", "Licencia3", InfoPlayer[playerid][pID], 1);
			SendClientMessage(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido con éxito una licencia de navegación.");
		}
		case 2:
		{
			if (InfoPlayer[playerid][pNivel] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser nivel 3 para comprar la licencia de piloto.");
			if (InfoPlayer[playerid][pLicencia][1] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes la licencia de piloto.");
			if (GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COLOR_GREY, "No puedes pagar esta licencia de piloto.");
			GivePlayerCash(playerid,-5000, "licencia de aviación");
			Tax += 5000;
			InfoPlayer[playerid][pLicencia][1] = 1;
			guardar_int_mysql("cuentas", "Licencia2", InfoPlayer[playerid][pID], 1);
			SendClientMessage(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido con éxito una licencia de piloto; ahora será capaz de manejar aeronaves.");
		}
	}
	return 1;
}
		
CMD:spec(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new tmp[32];
	if(sscanf(params, "s[32]", tmp)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /spec (playerid/off)");
	if(strcmp("off", tmp, true, strlen(tmp)) == 0)
	{
		if(Spectating[playerid] > 0)
		{
			GettingSpectated[Spectate[playerid]] = 999;
			Spectating[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecState", -1);
			SetPVarInt(playerid, "SpecOff", 1 );
			TogglePlayerSpectating( playerid, false );
			SetCameraBehindPlayer(playerid);
			return 1;
		}
	}
	new playerid2 = ReturnUser(tmp);
	if(IsPlayerConnected(playerid2))
	{
		if(playerid2 != INVALID_PLAYER_ID)
		{
			if(Spectating[playerid] == 0)
			{
				new Float: pPositions[ 3 ];
				GetPlayerPos(playerid, pPositions[ 0 ], pPositions[ 1 ], pPositions[ 2 ]);
				SetPVarFloat(playerid, "SpecPosX", pPositions[ 0 ]);
				SetPVarFloat(playerid, "SpecPosY", pPositions[ 1 ]);
				SetPVarFloat(playerid, "SpecPosZ", pPositions[ 2 ]);
				SetPVarInt(playerid, "SpecInt", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "SpecVW", GetPlayerVirtualWorld(playerid));

				if(IsPlayerInAnyVehicle(playerid2))
				{
					TogglePlayerSpectating(playerid, true);
					new carid = GetPlayerVehicleID( playerid2 );
					PlayerSpectateVehicle( playerid, carid );
					SetPlayerInterior( playerid, GetPlayerInterior( playerid2 ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( playerid2 ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
				}
				else
				{
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer( playerid, playerid2 );
					SetPlayerInterior( playerid, GetPlayerInterior( playerid2 ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( playerid2 ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
				}
				GettingSpectated[playerid2] = playerid;
				Spectate[playerid] = playerid2;
				Spectating[playerid] = 1;
			}
			else
			{
				if(IsPlayerInAnyVehicle(playerid2))
				{
					TogglePlayerSpectating(playerid, true);
					new carid = GetPlayerVehicleID( playerid2 );
					PlayerSpectateVehicle( playerid, carid );
					SetPlayerInterior( playerid, GetPlayerInterior( playerid2 ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( playerid2 ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
				}
				else
				{
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer( playerid, playerid2 );
					SetPlayerInterior( playerid, GetPlayerInterior( playerid2 ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( playerid2 ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
				}
				GettingSpectated[Spectate[playerid]] = 999;
				GettingSpectated[playerid2] = playerid;
				Spectate[playerid] = playerid2;
				Spectating[playerid] = 1;
			}
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Ese jugador está desconectado.");
	return 1;
}

CMD:liberar(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[256], playerid2, query[410];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /liberar (JugadorID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador no conectado.");
	if (InfoPlayer[playerid2][pSancionado] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jgador no está sancionado o en prisión.");
	format(string, sizeof string, "[AdmCmd]: %s fue liberado de prisión por %s.", NombreDeCuenta(playerid2), NombreDeCuenta(playerid));
	Log("LOGS/admin.log", string);
	format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) sacó de prisión a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAllMessage(0xFFFFFFFF, string);
	if (InfoPlayer[playerid2][pSancionado] == 1) InfoPlayer[playerid2][pJails]--;
	InfoPlayer[playerid2][pSancionado] = 0;
	InfoPlayer[playerid2][pEstrellas] = 0;
	SetPlayerWantedLevel(playerid2, 0);
	InfoPlayer[playerid2][pTiempoSancion] = 0;
	SetPosEx(playerid2, 1529.6, -1705.5, 13.4, 0.0, 0, 0, 1);
	alm(InfoPlayer[playerid2][pBySancion], "none");
	alm(InfoPlayer[playerid2][pRazonSancion], "none");
	TogglePlayerControllable(playerid2, true);
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Sancionado = 0, Estrellas = 0, TiempoSancion = 0, Jails = '%d', BySancion = '%e', RazonSancion = '%e' WHERE ID = '%d'", InfoPlayer[playerid2][pJails], InfoPlayer[playerid2][pBySancion], InfoPlayer[playerid2][pRazonSancion], InfoPlayer[playerid2][pID]);
	mysql_tquery(DBcreative, query);
	return 1;
}

CMD:dardinero(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, dinero, string[170];
	if (sscanf(params, "dd", playerid2, dinero)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /dardinero (PlayerID) ($)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (dinero > 99999999 || dinero < 0) return SendClientMessage(playerid, COLOR_WHITE, "Sólo de 0 - 99,999,999 de dinero");
	//medida de seguridad 24/02/2020
	if (dinero >= 9999999 && GetPlayerAdmin(playerid, 10) == 0)
	{
		format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó dar $%s a %s(%d), por ello fue baneado con IP.", NombreOriginal(playerid), playerid, diner_coma(dinero), NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid][pID], 2);
		guardar_int_mysql("cuentas", "JotoOtaku", InfoPlayer[playerid][pID], 0);
		guardar_int_mysql("cuentas", "EncFac", InfoPlayer[playerid][pID], 0);
		SetTimerEx("TimerBANIP",1000,false,"d",playerid);
		return 1;
	}
	//
	GivePlayerCash(playerid2, dinero, "dardinero (admin)");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha dado $%s dólares a %s(%d).", NombreOriginal(playerid), playerid, diner_coma(dinero), NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s ha dado $%s dólares a %s.", NombreDeCuenta(playerid), diner_coma(dinero), NombreDeCuenta(playerid2));
	Log("LOGS/dardinero.log", string);
	return 1;
}

CMD:darestilopelea(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[160], playerid2, fightstyle;
	if (sscanf(params, "dd", playerid2, fightstyle))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darestilopelea (playerid) (estilo)");
		SendClientMessage(playerid, COLOR_GRAD2, "Estilo pelea: 4, 5, 6, 7, 15, 26.");
		return 1;
	}
	if (IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
	{
		format(string, sizeof string, " Tu estilo de pelea ha sido cambiado al ID %d.", fightstyle);
		SendClientMessage(playerid2,COLOR_YELLOW,string);
		format(string, sizeof string, " Cambiaste el estilo de pelea de %s a %d.", NombreOriginal(playerid2), fightstyle);
		SendClientMessage(playerid,COLOR_YELLOW,string);
		SetPlayerFightingStyle(playerid2, fightstyle);
		InfoPlayer[playerid2][pEstiloPelea] = fightstyle;
		guardar_int_mysql("cuentas", "EstiloPelea", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pEstiloPelea]);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Estilo de pelea inválido, prueba con las id: 4, 5, 6, 7, 15, 26.");
	return 1;
}

CMD:id(playerid, params[])
{
	new id, string[232], colorping[19];

	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /id (Nombre o ID)");

	if (isnumeric(params))
	{
		sscanf(params, "d", id);

		if (!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
		if (InfoPlayer[id][pNivel] == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador está logeando.");

		switch (GetPlayerPing(id))
		{
			case 0..150: alm(colorping, "{46e800}");
			case 151..200: alm(colorping, "{00cbf7}");
			case 201..250: alm(colorping, "{E0F600}");
			case 251..300: alm(colorping, "{f7e300}");
			default: alm(colorping, "{f74000}");
		}

		format(string, sizeof string, "[ID: %d] {FFBF00}%s{C4C4FF} (Nivel: %d) (Ping: %s%d{C4C4FF})", id, Nombre2Original(id),  InfoPlayer[id][pNivel], colorping, GetPlayerPing(id));
		SendClientMessage(playerid, 0xC4C4FFFF, string);
	}
	else
	{
		if (strlen(params) < 3 || strlen(params) > MAX_PLAYER_NAME) return SendClientMessage(playerid, COLOR_GREY, "El nombre del jugador debe estar entre 3 a 24 caracteres.");

		new count;

		foreach (new playerid2: Player) if (strfind(ReturnName(playerid2), params, true) != -1)
		{
			if (InfoPlayer[playerid2][pNivel] != 0)
			{
				switch (GetPlayerPing(playerid2))
				{
					case 0..150: alm(colorping, "{46e800}");
					case 151..200: alm(colorping, "{00cbf7}");
					case 201..250: alm(colorping, "{E0F600}");
					case 251..300: alm(colorping, "{f7e300}");
					default: alm(colorping, "{f74000}");
				}
				format(string, sizeof string, "[ID: %d] {FFBF00}%s{C4C4FF} (Nivel: %d) (Ping: %s%d{C4C4FF})", playerid2, Nombre2Original(playerid2),  InfoPlayer[playerid2][pNivel], colorping, GetPlayerPing(playerid2));
				SendClientMessage(playerid, 0xC4C4FFFF, string);
				count++;
			}
		}

		if (!count) return SendClientMessage(playerid, COLOR_GREY, "No hay ningún jugador con ese nombre conectado.");
	}
	return 1;
}

ReturnName(playerid)
{
    new name[MAX_PLAYER_NAME];

    if(playerid == -1) name = "Vuoto";
    else GetPlayerName(playerid, name, MAX_PLAYER_NAME);

    return name;
}

CMD:venderlaser(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], playerid2, slot, color[32], invoice[64];
	if (sscanf(params, "ddss[64]", playerid2, slot, color, invoice)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /venderlaser (playerid) (slot(0-9)) (red/green/orange/yellow/pink/blue) (precio)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (slot < 0 || slot > 6) return SendClientMessage(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} Los Slots de los toys son del número 0 al 6.");
	if (strcmp(color,"red",true) == 0)
	{
		InfoPlayer[playerid2][ptModelo][slot] = 18643;
		InfoPlayer[playerid2][ptHueso][slot] = 6;
		InfoPlayer[playerid2][ptPosX][slot] = 0.0;
		InfoPlayer[playerid2][ptPosY][slot] = 0.0;
		InfoPlayer[playerid2][ptPosZ][slot] = 0.0;
		InfoPlayer[playerid2][ptRotX][slot] = 0.0;
		InfoPlayer[playerid2][ptRotY][slot] = 0.0;
		InfoPlayer[playerid2][ptRotZ][slot] = 0.0;
	}
	else if(strcmp(color,"green",true) == 0)
	{
		InfoPlayer[playerid2][ptModelo][slot] = 19083;
		InfoPlayer[playerid2][ptHueso][slot] = 6;
		InfoPlayer[playerid2][ptPosX][slot] = 0.0;
		InfoPlayer[playerid2][ptPosY][slot] = 0.0;
		InfoPlayer[playerid2][ptPosZ][slot] = 0.0;
		InfoPlayer[playerid2][ptRotX][slot] = 0.0;
		InfoPlayer[playerid2][ptRotY][slot] = 0.0;
		InfoPlayer[playerid2][ptRotZ][slot] = 0.0;
	}
	else if(strcmp(color,"orange",true) == 0)
	{
		InfoPlayer[playerid2][ptModelo][slot] = 19082;
		InfoPlayer[playerid2][ptHueso][slot] = 6;
		InfoPlayer[playerid2][ptPosX][slot] = 0.0;
		InfoPlayer[playerid2][ptPosY][slot] = 0.0;
		InfoPlayer[playerid2][ptPosZ][slot] = 0.0;
		InfoPlayer[playerid2][ptRotX][slot] = 0.0;
		InfoPlayer[playerid2][ptRotY][slot] = 0.0;
		InfoPlayer[playerid2][ptRotZ][slot] = 0.0;
	}
	else if(strcmp(color,"yellow",true) == 0)
	{
		InfoPlayer[playerid2][ptModelo][slot] = 19084;
		InfoPlayer[playerid2][ptHueso][slot] = 6;
		InfoPlayer[playerid2][ptPosX][slot] = 0.0;
		InfoPlayer[playerid2][ptPosY][slot] = 0.0;
		InfoPlayer[playerid2][ptPosZ][slot] = 0.0;
		InfoPlayer[playerid2][ptRotX][slot] = 0.0;
		InfoPlayer[playerid2][ptRotY][slot] = 0.0;
		InfoPlayer[playerid2][ptRotZ][slot] = 0.0;
	}
	else if(strcmp(color,"pink",true) == 0)
	{
		InfoPlayer[playerid2][ptModelo][slot] = 19081;
		InfoPlayer[playerid2][ptHueso][slot] = 6;
		InfoPlayer[playerid2][ptPosX][slot] = 0.0;
		InfoPlayer[playerid2][ptPosY][slot] = 0.0;
		InfoPlayer[playerid2][ptPosZ][slot] = 0.0;
		InfoPlayer[playerid2][ptRotX][slot] = 0.0;
		InfoPlayer[playerid2][ptRotY][slot] = 0.0;
		InfoPlayer[playerid2][ptRotZ][slot] = 0.0;
	}
	else if(strcmp(color,"blue",true) == 0)
	{
		InfoPlayer[playerid2][ptModelo][slot] = 19080;
		InfoPlayer[playerid2][ptHueso][slot] = 6;
		InfoPlayer[playerid2][ptPosX][slot] = 0.0;
		InfoPlayer[playerid2][ptPosY][slot] = 0.0;
		InfoPlayer[playerid2][ptPosZ][slot] = 0.0;
		InfoPlayer[playerid2][ptRotX][slot] = 0.0;
		InfoPlayer[playerid2][ptRotY][slot] = 0.0;
		InfoPlayer[playerid2][ptRotZ][slot] = 0.0;
	}
	ActualizarToy(playerid2, slot);
	format(string, sizeof string, "Recibiste un laser de color %s en el slot %d, usa /toys para verlo.", color, slot);
	SendClientMessage(playerid2, COLOR_LIGHTGREEN, string);
	format(string, sizeof string, "Le diste a %s laser de color %s en el slot %d", NombreJugador(playerid2), color, slot);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof string, "[SHOPLASER] %s dió %s un laser toy - Pagó fue de %s", NombreJugador(playerid), NombreJugador(playerid2), invoice);
	Log("LOGS/shoplog.log", string);
	return 1;
}

CMD:congelar(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /congelar (playerid)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Usuario desconectado.");
	if (InfoPlayer[playerid2][pAdmin] > InfoPlayer[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "No puedes congelar a un administrador de mayor nivel.");
	SetPVarInt(playerid2, "IsFrozen", 1);
	TogglePlayerControllable(playerid2, 0);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) congeló a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:descongelar(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /descongelar (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Usuario desconectado.");
	DeletePVar(playerid2, "IsFrozen");
	TogglePlayerControllable(playerid2, 1);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) descongeló a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:cambiarhora(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[160], time;
	if(sscanf(params, "d", time)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /cambiarhora [hora] (0-23)");
	SetWorldTime(time);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) cambió la hora a %d.", NombreOriginal(playerid), playerid, time);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:clima(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new weather;
	if (sscanf(params, "d", weather)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /clima [clima id]");
	if (weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "Climas: 0 a 45."); return 1; }
	SetPlayerWeather(playerid, weather);
	return 1;
}

CMD:climatodos(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new weather, string[170];
	if (sscanf(params, "d", weather)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /climatodos (clima id)");
	if (weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "Climas: 0 a 45."); return 1; }
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2))
	{
		if (InfoPlayer[playerid2][pDrogaTipo] == 0)
			SetPlayerWeather(playerid2, weather);
	}
	ClimaGeneral = weather;
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) cambió el clima al ID %d", NombreOriginal(playerid), playerid, ClimaGeneral);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}
CMD:cambiarclima(playerid, params[]) return cmd_climatodos(playerid, params);

CMD:gotoco(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new Float: pos[3], int, vw;
	if(sscanf(params, "fffdd", pos[0], pos[1], pos[2], int, vw)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /gotoco (coordenada x) (coordenada y) (coordenada z) (interior) (virtualworld)");
	SendClientMessage(playerid, COLOR_GRAD2, "Fuiste a las coordenadas.");
	SetPosEx(playerid, pos[0], pos[1], pos[2], 0.0000, int, vw, 1);
	return 1;
}
CMD:ircor(playerid, params[]) return cmd_gotoco(playerid, params);
CMD:ircordenada(playerid, params[]) return cmd_gotoco(playerid, params);
CMD:ircoordenada(playerid, params[]) return cmd_gotoco(playerid, params);

CMD:getpos(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	format(string,sizeof string, "X: %f | Y: %f | Z: %f | Int: %d | VW: %d", X,Y,Z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	SendClientMessage(playerid, 0xF5DEB3AA, string);
	return 1;
}

CMD:bar(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");

	ShowModelSelectionMenu(playerid, bars, "Seleccione la barrera a colocar.");
	return 1;
}

CMD:bar2(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
	new string[170], Float:Position[4];
	Loop(i, MAX_BARRICADES, 0) if (Barricade[i] == 0)
	{
		GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
		GetPlayerFacingAngle(playerid, Position[3]);
		Barricade[i] = CreateDynamicObject(3091, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
		SetPlayerPos(playerid, Position[0], Position[1], Position[2]+5);
		new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, sizeof(zone));
		format(string, sizeof string, "HQ: Una barricada ha sido puesta en %s.", zone);
		SendClientMessage(playerid, COLOR_RADIO, string);
		SendClientMessage(playerid, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	return 1;
}

CMD:bar3(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
	new string[170], Float:Position[4];
	Loop(i, MAX_BARRICADES, 0) if (Barricade[i] == 0)
	{
		GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
		GetPlayerFacingAngle(playerid, Position[3]);
		Barricade[i] = CreateDynamicObject(978, Position[0], Position[1], Position[2]+0.6, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
		SetPlayerPos(playerid, Position[0], Position[1], Position[2]+5);
		new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, sizeof(zone));
		format(string, sizeof string, "HQ: Una barricada ha sido puesta en %s.", zone);
		SendClientMessage(playerid, COLOR_RADIO, string);
		SendClientMessage(playerid, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Todas las barreras disponibles se han desplegado.");
	return 1;
}

CMD:bengala(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
	new string[170], Float:Position[4];
	Loop(i, MAX_BARRICADES, 0) if (Barricade[i] == 0)
	{
		GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
		GetPlayerFacingAngle(playerid, Position[3]);
		Barricade[i] = CreateDynamicObject(18728, Position[0], Position[1], Position[2]-2.8, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
		new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, sizeof(zone));
		format(string, sizeof string, "HQ: Una bengala ha sido puesta en %s.", zone);
		SendClientMessage(playerid, COLOR_RADIO, string);
		SendClientMessage(playerid, COLOR_YELLOW, "Puedes eliminar una bengala escribiendo /qb.");
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	return 1;
}

CMD:cono(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
	new string[170], Float:Position[4];
	Loop(i, MAX_BARRICADES, 0) if (Barricade[i] == 0)
	{
		GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
		GetPlayerFacingAngle(playerid, Position[3]);
		Barricade[i] = CreateDynamicObject(1238, Position[0], Position[1], Position[2]-0.7, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
		new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, sizeof(zone));
		format(string, sizeof string, "HQ: Un cono ha sido puesto en %s.", zone);
		SendClientMessage(playerid, COLOR_RADIO, string);
		SendClientMessage(playerid, COLOR_YELLOW, "Puedes eliminar el cono escribiendo /qb.");
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	return 1;
}

CMD:qb(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
	new string[170], Float:Position[3];
	Loop(i, MAX_BARRICADES, 0)
	{
		GetDynamicObjectPos(Barricade[i], Position[0], Position[1], Position[2]);
		if (IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
		{
			DestroyDynamicObject(Barricade[i]);
			Barricade[i] = 0;
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof(zone));
			format(string, sizeof string, "HQ: Un bloqueo a sido destruido en %s.", zone);
			SendClientMessage(playerid, COLOR_RADIO, string);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "No estás cerca de ninguna barricada.");
	return 1;
}

CMD:spikes(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
	SendClientMessage(playerid, COLOR_GREEN, "Spikes actuales:");
	new string[180], count = 0;
	Loop(i, sizeof SpikeStrips, 0) if (SpikeStrips[i][sX] != 0)
	{
		format(string, sizeof string, "HQ: Spike ID: %d | Localización: %s | Puesto por: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
		SendClientMessage(playerid, COLOR_GRAD2, string);
		count++;
	}
	if (count == 0) SendClientMessage(playerid, -1, "No hay ningún spike creado.");
	return 1;
}

CMD:pspikes(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
	Loop(i, sizeof SpikeStrips, 0) if (SpikeStrips[i][sX] == 0)
	{
		new Float: f_TempAngle, string[128];
		GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
		GetPlayerFacingAngle(playerid, f_TempAngle);
		SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
		GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
		alm(SpikeStrips[i][sDeployedBy], NombreDeCuenta(playerid));
		format(string,sizeof string,"Spike ID: %d fue creado exitosamente.", i);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof string, "HQ: Un spike fue puesto en %s.", SpikeStrips[i][sDeployedAt]);
		SendClientMessage(playerid, COLOR_RADIO, string);
		SendClientMessage(playerid, COLOR_YELLOW, "Puedes remover el spike usando /qspikes.");
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "No es posible generar más spikes, límite es de 5." );
	return 1;
}

CMD:qspikes(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
	if (InfoPlayer[playerid][pRango] < 3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
	if (isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /qspike (spikeid)");
	new id = strval(params);
	if (!(0 <= id <= sizeof(SpikeStrips)) || SpikeStrips[id][sX] == 0)
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Spike ID Inválido.");
	}
	new string[170];
	DestroyDynamicObject(SpikeStrips[id][sObjectID]);
	SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
	SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
	format(string,sizeof string,"Spike ID: %d borrado.", id);
	SendClientMessage(playerid, COLOR_WHITE, string);
	new zone[MAX_ZONE_NAME];
	GetPlayer3DZone(playerid, zone, sizeof(zone));
	format(string, sizeof string, "HQ: Un spike a sido borrado en %s.", zone);
	SendClientMessage(playerid, COLOR_RADIO, string);
	return 1;
}

CMD:nuevos(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	SendClientMessage(playerid, COLOR_GREEN, "Lista de todos los usuarios nivel 1.");
	new szNoobs[120];
	foreach(Player, i) if (InfoPlayer[i][pNivel] == 1)
	{
		format(szNoobs, sizeof szNoobs, "* %s (%d) | Horas conectado: %d", NombreOriginal(i), i, InfoPlayer[i][pHorasOn]);
		SendClientMessage(playerid, 0xEBEBEBFF, szNoobs);
	}
	return 1;
}

CMD:dar(playerid, params[])
{
	new string[256], playerid2, choice[32], amount;
	if(sscanf(params, "ds[32]d", playerid2, choice, amount))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /dar (playerid) (nombre) (monto)");
		SendClientMessage(playerid, COLOR_GREY,  "* Materiales, Chaleco, Ganzuas");
		return 1;
	}

	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, -1, "Jugador desconectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "El jugador no está cerca tuyo.");
	if (playerid2 == playerid) return SendClientMessage(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo, acaso sos marica.");
	if (strcmp(choice, "materiales", true) == 0)
	{
		if (amount < 1 || amount > 10000) return SendClientMessage(playerid, COLOR_GRAD2, "El máximo de materiales a dar es de 10,000.");
		if (InfoPlayer[playerid][pMateriales] >= amount)
		{
			format(string, sizeof string, "Recibiste %d materiales de %s.", amount, NombreJugador(playerid));
			SendClientMessage(playerid2, COLOR_GRAD2, string);
			InfoPlayer[playerid2][pMateriales] += amount;
			InfoPlayer[playerid][pMateriales] -= amount;
			guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
			guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pMateriales]);
			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(playerid2, ipex, sizeof(ipex));
			format(string, sizeof string, "%s(IP:%s) has given %s(IP:%s) %d materials.", NombreDeCuenta(playerid), ip, NombreDeCuenta(playerid2), ipex, amount);
			Log("LOGS/pay.log", string);
			format(string, sizeof string, "Le diste a %s, %d materiales.", NombreJugador(playerid2), amount);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof string, "* %s le da a %s algo de materiales.", NombreJugador(playerid), NombreJugador(playerid2));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "No tienes tantos materiales.");
	}
	else if (strcmp(choice, "ganzuas", true) == 0)
	{
		if (InfoPlayer[playerid][pGanzuas] >= amount)
		{
			if (InfoPlayer[playerid2][pGanzuas] > 10) return SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Esta persona no tiene más espacio para guardar ganzúas.");
			format(string, sizeof string, "Recibiste %d ganzúas de %s.", amount, NombreJugador(playerid));
			SendClientMessage(playerid2, COLOR_GRAD2, string);
			InfoPlayer[playerid2][pGanzuas] += amount;
			InfoPlayer[playerid][pGanzuas] -= amount;
			guardar_int_mysql("cuentas", "Ganzuas", InfoPlayer[playerid][pID], InfoPlayer[playerid][pGanzuas]);
			guardar_int_mysql("cuentas", "Ganzuas", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pGanzuas]);
			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(playerid2, ipex, sizeof(ipex));
			format(string, sizeof string, "%s(IP:%s) has given %s(IP:%s) %d ganzuas.", NombreDeCuenta(playerid), ip, NombreDeCuenta(playerid2), ipex, amount);
			Log("LOGS/ganzuas.log", string);
			format(string, sizeof string, "Le diste a %s, %d ganzúas.", NombreJugador(playerid2), amount);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof string, "* %s le da a %s unas ganzúas recién compradas.", NombreJugador(playerid), NombreJugador(playerid2));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "No tienes tantas ganzúas.");
	}
	return 1;
}

CMD:ram(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
	Loop(id, totalcasas, 1) if (IsPlayerInRangeOfPoint(playerid, 3, InfoCasa[id][cExteriorX], InfoCasa[id][cExteriorY], InfoCasa[id][cExteriorZ]) && InfoCasa[id][cExteriorInt] == InfoPlayer[playerid][pInterior] && InfoCasa[id][cExteriorVW] == InfoPlayer[playerid][pVirtualWorld])
	{
		cmd_me(playerid, "rompe la puerta y entra por ella");
		LoadObjects(playerid);
		SetPlayerInterior(playerid, InfoCasa[id][cInteriorInt]);
		SetPlayerVirtualWorld(playerid, InfoCasa[id][cInteriorVW]);
		SetPlayerPos(playerid, InfoCasa[id][cInteriorX], InfoCasa[id][cInteriorY], InfoCasa[id][cInteriorZ]);
		GameTextForPlayer(playerid, "~r~Rompiste la puerta", 5000, 1);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "No estás en la entrada de ninguna casa.");
	return 1;
}

CMD:esposar(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (GetPVarInt(playerid, "EstaCrack") == 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	new string[170], Float:Pos[3], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Utiliza: /esposar (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador especificado inválido.");
	if (!CercaDelMarica(8.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	if (playerid2 == playerid) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto contigo mismo.");
	if (GetPVarInt(playerid2, "PlayerCuffed") == 1) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador ya está esposado.");
	format(string, sizeof string, "[CENTRAL] %s dice: hemos esposado a %s, se decidirá su arresto.", NombreJugador(playerid), NombreJugador(playerid2));
	SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, string);
	format(string, sizeof string, "Fuiste esposado por %s.", NombreJugador(playerid));
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_CUFFED); //animacion
	SetPlayerAttachedObject(playerid2, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	format(string, sizeof string, "Esposaste a %s.", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "le pone las esposas a %s", NombreJugador(playerid2));
	cmd_me(playerid, string);
	GameTextForPlayer(playerid2, "Esposado", 2500, 3);
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	ClearAnimations(playerid2);
	TogglePlayerControllable(playerid2, 0);
	SetPVarInt(playerid2, "PlayerCuffed", 1);
	SetPVarInt(playerid2, "IsFrozen", 1);
	PlayerPlaySoundEx(1145, Pos[0], Pos[1], Pos[2]);
	return 1;
}

CMD:desesposar(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	new string[170], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /desesposar (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador especificado inválido.");
	if (!CercaDelMarica(8.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	if (playerid2 == playerid) return SendClientMessage(playerid, COLOR_GREY, "No puedes quitarte las esposas tu mismo.");
	if (GetPVarInt(playerid2, "PlayerCuffed") != 1) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no está esposado.");
	DeletePVar(playerid2, "IsFrozen");
	format(string, sizeof string, "* %s te quito las esposas.", NombreJugador(playerid));
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Le quitaste las esposas %s.", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "le quita las esposas a %s", NombreJugador(playerid2));
	cmd_me(playerid, string);
	GameTextForPlayer(playerid2, "~g~Te quitaron ~n~las esposas", 2500, 3);
	TogglePlayerControllable(playerid2, 1);
	ClearAnimations(playerid2);
	RemovePlayerAttachedObject(playerid2, 0);
	SetPlayerSpecialAction(playerid2,SPECIAL_ACTION_NONE);
	DeletePVar(playerid2, "PlayerCuffed");
	return 1;
}

puede_detener(playerid)
{
	if (GetPVarInt(playerid, "PlayerCuffed") == 1) return 1;
	if (Tied[playerid] != 0) return 1;
	return 0;
}

CMD:detener(playerid, params[])
{
	if (gLastCar[playerid] == 0) return SendClientMessage(playerid, -1, "No te has subido a ningún vehículo.");
	new string[170], playerid2, seat;
	if (sscanf(params, "dd", playerid2, seat)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /detener (PlayerID) (Asiento 1-3)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Jugador desconectado.");
	if (playerid2 == playerid) return SendClientMessage(playerid, COLOR_GREY, "* No puedes hacer esto contigo pendejo jsadjasjds.");
	if (!CercaDelMarica(8.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* No estás cerca del jugador seleccionado.");
	if (puede_detener(playerid2) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador no está esposado o amarrado con /atar.");
	if (IsPlayerInAnyVehicle(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "* Esa persona está en un vehiculo.");
	if (seat < 1 || seat > 3) return SendClientMessage(playerid, COLOR_GREY, "Asientos: 1 al 3.");
	new carid = gLastCar[playerid];
	if (IsSeatAvailable(carid, seat))
	{
		new Float:pos[6];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerPos(playerid2, pos[3], pos[4], pos[5]);
		GetVehiclePos(carid, pos[0], pos[1], pos[2]);
		if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
		floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
		floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
		if (member_faccion(playerid, 1, 2, 3, 4))
		{
			format(string, sizeof string, "[CENTRAL] %s dice: hemos capturado a %s, lo trasladamos a la comisaría.", NombreJugador(playerid), NombreJugador(playerid2));
			SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, string);
		}
		RemovePlayerAttachedObject(playerid2, playerid);
		SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
		format(string, sizeof string, "sube a %s al vehiculo", NombreJugador(playerid), NombreJugador(playerid2));
		cmd_me(playerid, string);
		GameTextForPlayer(playerid2, "~r~Detenido", 2500, 3);
		ClearAnimations(playerid2);
		TogglePlayerControllable(playerid2, false);
		PutPlayerInVehicle(playerid2, carid, seat);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GREY, "Ese asiento no está disponible.");
	return 1;
}

CMD:darrol(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new playerid2, string[128];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /darrol (playerid)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Usuario desconectado.");
	if (InfoPlayer[playerid2][pAdmin] > InfoPlayer[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer eso con administradores de mayor rango.");
	if (ShowRules[playerid2] == 1) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador ya está leyendo las reglas de rol.");
	new Float:roldX, Float:roldY, Float:roldZ;
	GetPlayerPos(playerid2, roldX, roldY, roldZ);
	SetPVarFloat(playerid2, "rOldX", roldX);
	SetPVarFloat(playerid2, "rOldY", roldY);
	SetPVarFloat(playerid2, "rOldZ", roldZ);
	SetPVarInt(playerid2, "rOldInt", GetPlayerInterior(playerid2));
	SetPVarInt(playerid2, "rOldVW", GetPlayerVirtualWorld(playerid2));
	ShowRules[playerid2] = 1;
	RulesTime[playerid2] = 1;
	ShowRol(playerid2);
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) envió a %s(%d) a leer las reglas del roleplay.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:sfondos(playerid, params[])
{
	if (!leader_faccion(playerid, 5)) return SendClientMessage(playerid, COLOR_GREY, "No eres líder del Gobierno.");
	new string[180], amount, reason[64];
	if (sscanf(params, "ds[64]", amount, reason))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /sfondos (monto) (razón)");
		format(string, sizeof string, "* BALANCE: $%s.", diner_coma(Tax));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}
	if (amount < 0) return SendClientMessage(playerid, COLOR_WHITE, "El monto es inválido.");
	if (Tax < amount) return SendClientMessage(playerid, COLOR_WHITE, "No hay fondos suficientes.");
	Tax -= amount;
	SaveStuff();
	GivePlayerCash(playerid, amount, "sfondos");
	format(string, sizeof string, "Retiraste $%s de los fondos del gobierno.", diner_coma(amount));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof string, "{FFBF00}[AdmWarning]{FFFFFF} Presidente %s(%d) retiro $%s de los fondos del gobierno, razón: %s.", NombreJugador(playerid), playerid, diner_coma(amount), reason);
	SendAdminMessage(0xFFFFFFFF, string);
	Log("LOGS/especial.log", string);
	return 1;
}
CMD:sacarfondos(playerid, params[]) return cmd_sfondos(playerid, params);

CMD:dfondos(playerid, params[])
{
	if (!leader_faccion(playerid, 5)) return SendClientMessage(playerid, COLOR_GREY, "No eres líder del Gobierno.");
	new string[180], amount;
	if (sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /dejarfondos (monto)");
		format(string, sizeof string, "* BALANCE: $%s.", diner_coma(Tax));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}
	if (amount < 0) return SendClientMessage(playerid, COLOR_WHITE, "El monto es inválido.");
	if (GetPlayerCash(playerid) < amount) return SendClientMessage(playerid, COLOR_WHITE, "No dispones de ese dinero.");
	Tax += amount;
	SaveStuff();
	GivePlayerCash(playerid, -amount, "dfondos");
	format(string, sizeof string, "Depositaste $%s en los fondos del Gobierno.", diner_coma(amount));
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:dejarfondos(playerid, params[]) return cmd_dfondos(playerid, params);

CMD:arrestar(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (!IsAtArrestPoint(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás en el punto de entrega."); // LSPD x2, FBI, Dillmore.
	new string[180], playerid2, time;
	if (sscanf(params, "dd", playerid2, time)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /arrestar [ID] (Minutos)");
	if (time < 1 || time > 60) { SendClientMessage(playerid, COLOR_WHITE, "Tiempo: 1 a 60 minutos."); return 1; }
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_RED, "Ese jugador no está conectado.");
	if (playerid == playerid2) return SendClientMessage(playerid, COLOR_GREY, "No puedes arrestarte tu mismo, pendejo..");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_RED, "Ese jugador no está cerca tuyo.");
	if (InfoPlayer[playerid2][pEstrellas] < 1) return SendClientMessage(playerid, COLOR_WHITE, "El sospechoso debe tener un nivel de búsqueda de al menos una estrella.");
	format(string, sizeof string, "%s fue arrestado.", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	format(string, sizeof string, "[CENTRAL] %s fue arrestado por %s, %d minutos.", NombreJugador(playerid2), NombreJugador(playerid), time);
	SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, string);
	new query[410];
	Loop(x, 10, 0) if (InfoInventario[InfoPlayer[playerid2][pBolsillo][x]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pBolsillo][x] = 0;
		InfoPlayer[playerid2][pBolsilloCant][x] = 0;
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = 0, Cantidad_bolsillo_%d = 0 WHERE ID = '%d'", x+1, x+1, InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pManoIzquierda]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pManoIzquierda] = 0;
		InfoPlayer[playerid2][pManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid2, 8);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pManoDerecha]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pManoDerecha] = 0;
		InfoPlayer[playerid2][pManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
		ResetPlayerWeapons(playerid2);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (InfoInventario[InfoPlayer[playerid2][pEspalda]][IDArma] != 0)
	{
		InfoPlayer[playerid2][pEspalda] = 0;
		InfoPlayer[playerid2][pEspaldaCant] = 0;
		RemovePlayerAttachedObject(playerid2, 9);
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Espalda = 0, Cantidad_espalda = 0 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	GameTextForPlayer(playerid2, "Fuiste arrestado", 5000, 5);
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 1559.32,-1693.75,5.9) || IsPlayerInRangeOfPoint(playerid, 5.0, 1559.65,-1649.43,4990.6)) // LSPD.
	{
		SetPlayerFacingAngle(playerid2, 0);
		LoadObjects(playerid2);
		if (InfoPlayer[playerid2][pVIP] >= 2) InfoPlayer[playerid2][pTiempoSancion] = ((time*60)*75)/100;
		else InfoPlayer[playerid2][pTiempoSancion] = time * 60;
		DeletePVar(playerid2, "IsFrozen");
		new rand = random(sizeof(LSPDPrisonSpawns));
		SetPosEx(playerid2, LSPDPrisonSpawns[rand][0], LSPDPrisonSpawns[rand][1], LSPDPrisonSpawns[rand][2], 0.0000, 1, 1, 1);
		LoadObjects(playerid2);
		InfoPlayer[playerid2][pSancionado] = 2;
		InfoPlayer[playerid2][pTogTelefono] = 0;
		InfoPlayer[playerid2][pArrestos] += 1;
		InfoPlayer[playerid2][pEstrellas] = 0;
		SetPlayerWantedLevel(playerid2, 0);
		ClearAnimations(playerid2);
		DeletePVar(playerid2, "PlayerCuffed");
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Estrellas = 0, Sancionado = 2, TiempoSancion = '%d', Arrestos = '%d' WHERE ID = '%d'",InfoPlayer[playerid2][pTiempoSancion], InfoPlayer[playerid2][pArrestos], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 299.9566,-1529.9164,24.9219)) // FBI.
	{
		SetPlayerFacingAngle(playerid2, 0);
		LoadObjects(playerid2);
		if (InfoPlayer[playerid2][pVIP] >= 2) InfoPlayer[playerid2][pTiempoSancion] = ((time*60)*75)/100;
		else InfoPlayer[playerid2][pTiempoSancion] = time * 60;
		DeletePVar(playerid2, "IsFrozen");
		new rand = random(sizeof(FBIPrisonSpawns));
		SetPosEx(playerid2, FBIPrisonSpawns[rand][0], FBIPrisonSpawns[rand][1], FBIPrisonSpawns[rand][2], 0.0000, 0, 0, 1);
		InfoPlayer[playerid2][pSancionado] = 3;
		InfoPlayer[playerid2][pTogTelefono] = 0;
		InfoPlayer[playerid2][pArrestos] += 1;
		InfoPlayer[playerid2][pEstrellas] = 0;
		SetPlayerWantedLevel(playerid2, 0);
		ClearAnimations(playerid2);
		DeletePVar(playerid2, "PlayerCuffed");
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Estrellas = 0, Sancionado = 3, TiempoSancion = '%d', Arrestos = '%d' WHERE ID = '%d'",InfoPlayer[playerid2][pTiempoSancion], InfoPlayer[playerid2][pArrestos], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	if (IsPlayerInRangeOfPoint(playerid, 4.0, 613.3228,-589.1623,17.2266)) // Dillimore (LSPD y FBI)
	{
		SetPlayerFacingAngle(playerid2, 0);
		if (InfoPlayer[playerid2][pVIP] >= 2) InfoPlayer[playerid2][pTiempoSancion] = ((time*60)*75)/100;
		else InfoPlayer[playerid2][pTiempoSancion] = time * 60;
		DeletePVar(playerid2, "IsFrozen");
		new rand = random(sizeof(PrisonDillmore));
		SetPosEx(playerid2, PrisonDillmore[rand][0], PrisonDillmore[rand][1], PrisonDillmore[rand][2], 0.0000, 5, 5, 1);
		InfoPlayer[playerid2][pSancionado] = 6;
		InfoPlayer[playerid2][pTogTelefono] = 0;
		InfoPlayer[playerid2][pArrestos] += 1;
		InfoPlayer[playerid2][pEstrellas] = 0;
		SetPlayerWantedLevel(playerid2, 0);
		ClearAnimations(playerid2);
		DeletePVar(playerid2, "PlayerCuffed");
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Estrellas = 0, Sancionado = 6, TiempoSancion = '%d', Arrestos = '%d' WHERE ID = '%d'",InfoPlayer[playerid2][pTiempoSancion], InfoPlayer[playerid2][pArrestos], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	else
	{
		TogglePlayerControllable(playerid2, 0);
		LoadObjects(playerid2);
		if (InfoPlayer[playerid2][pVIP] >= 2) InfoPlayer[playerid2][pTiempoSancion] = ((time*60)*75)/100;
		else InfoPlayer[playerid2][pTiempoSancion] = time * 60;
		InfoPlayer[playerid2][pSancionado] = 3;
		InfoPlayer[playerid2][pTogTelefono] = 0;
		DeletePVar(playerid2, "IsFrozen");
		new rand = random(sizeof(FBIPrisonSpawns));
		SetPosEx(playerid2, FBIPrisonSpawns[rand][0], FBIPrisonSpawns[rand][1], FBIPrisonSpawns[rand][2], 0.0000, 0, 0, 1);
		InfoPlayer[playerid2][pArrestos] += 1;
		InfoPlayer[playerid2][pEstrellas] = 0;
		SetPlayerWantedLevel(playerid2, 0);
		ClearAnimations(playerid2);
		DeletePVar(playerid2, "PlayerCuffed");
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Estrellas = 0, Sancionado = 3, TiempoSancion = '%d', Arrestos = '%d' WHERE ID = '%d'",InfoPlayer[playerid2][pTiempoSancion], InfoPlayer[playerid2][pArrestos], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, query);
	}
	JailPrice[playerid2] = 0;
	format(string, sizeof string, "Fuiste encarcelado %d segundos.   Fianza: No Disponible.", InfoPlayer[playerid2][pTiempoSancion]);
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:vendermateriales(playerid, params[])
{
	new string[128], playerid2, amount, price;
	if (sscanf(params, "ddd", playerid2, amount, price)) return SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /vendermateriales (playerid) (Monto) (Precio)");
	if (amount < 1 || amount > 99999999) { SendClientMessage(playerid, COLOR_WHITE, " Los valores no pueden ser mayores a 99999999 gramos ni menores a 1."); return 1; }
	if (price < 1) { SendClientMessage(playerid, COLOR_WHITE, " El precio no puede ser menor que 1,"); return 1; }
	if (playerid2 == playerid) return SendClientMessage(playerid, COLOR_WHITE, "No puedes venderte a ti mismo.");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "ID Inválido.");
	if (!CercaDelMarica(8.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	format(string, sizeof string, "* Has ofrecido a %s, %d materiales por $%d.", NombreJugador(playerid2), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* %s quiere venderte %d materiales por $%d, (Utiliza: /aceptar materiales para comprar).", NombreJugador(playerid), amount, price);
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	MatsOffer[playerid2] = playerid;
	MatsPrice[playerid2] = price;
	MatsAmount[playerid2] = amount;
	return 1;
}

CMD:stuff(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
    new string[128];
	format(string, sizeof string, "[TASAS - FONDOS]: Gobierno (Fondos: %d$ - Impuesto %d$) | Precio /ad: %d$ - Fondos: %d$.",Tax,TaxValue,TaxAnuncios,FondosAnuncios);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof string, "[OTROS DATOS] Jackpoint: %d | Sangre %d | GasolinaL %d | TXT Costs: %d",Jackpot,Blood,Fuel,txtcost);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:serverstats(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	new string[128], formatmin[4];
	if (MPMinute < 10) format(formatmin,sizeof(formatmin),"0%d",MPMinute);
	else format(formatmin,sizeof(formatmin),"%d",MPMinute);
	format(string,sizeof string,"Estadisticas del Servidor - Versión %s (desde Fecha Indefinida.).", version_actual);
	SendClientMessage(playerid, COLOR_GREEN, string);
	format(string, sizeof string, "* Objetos: %d | Pickups: %d | Map Icons: %d | 3D Text Labels: %d | TextDraws: %d | Casas: %d",CountDynamicObjects(),CountDynamicPickups(),CountDynamicMapIcons(),CountDynamic3DTextLabels(),textdrawscount, totalcasas);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof string, "* Logins: %d | Conexiones: %d | Registrados: %d | Autobaneados: %d | Uptime: %d horas",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof string, "* Usuarios conectados: %d | Récord: %d (%d/%d/%d - %d:%s)",Iter_Count(Player),MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,formatmin);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:mostrar(playerid, params[])
{
	new string[128], playerid2, choice[32];
	if(sscanf(params, "ds[32]", playerid2, choice))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /mostrar (playerid) (Nombre)");
		SendClientMessage(playerid, COLOR_GREY, "Nombres: Materiales");
		return 1;
	}
	if(playerid2 == playerid)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "No puedes enseñarte a ti mismo.");
		return 1;
	}
	if(IsPlayerConnected(playerid2))
	{
		if(playerid2 != INVALID_PLAYER_ID)
		{
			if (!CercaDelMarica(5.0, playerid, playerid2))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
				return 1;
			}
			if (strcmp(choice, "materiales", true) == 0)
			{
			    new amount = InfoPlayer[playerid][pMateriales];
			    if(amount < 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "No tienes materiales!");
					return 1;
			    }
				format(string, sizeof string, "%s te ha mostrado sus %d Materiales.",  NombreJugador(playerid), amount);
				SendClientMessage(playerid2, COLOR_WHITE, string);

				format(string, sizeof string, "Enseñaste a %s tus %d Materiales.", NombreJugador(playerid2), amount);
				SendClientMessage(playerid, COLOR_WHITE, string);

				format(string, sizeof string, "* %s enseña algo a %s.", NombreJugador(playerid), NombreJugador(playerid2));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
	}
	return 1;
}

CMD:saludar(playerid, params[])
{
	new string[128], playerid2, style;
	if(sscanf(params, "dd", playerid2, style)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /saludar (playerid) (estilo (1-8))");

	if(IsPlayerConnected(playerid2))
	{
		if(playerid2 == playerid)
		{
			SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer eso tu mismo.");
			return 1;
		}
		if(style >= 1 && style < 9)
		{
			new Float: ppFloats[3];
			GetPlayerPos(playerid2, ppFloats[0], ppFloats[1], ppFloats[2]);
			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Estás demasiado lejos de la persona.");
				return 1;
			}
			SetPVarInt(playerid, "shrequest", playerid2);
			SetPVarInt(playerid, "shstyle", style);

			format(string, sizeof string, "Saludaste a %s, espera que el responda.", NombreJugador(playerid2));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof string, "%s te ha saludado, porfavor usa '/aceptar saludo' para darle la mano.", NombreJugador(playerid));
			SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /saludar (playerid) (estilo (1-8))");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Jugador desconectado.");
	return 1;
}

CMD:vendercoche(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 5, 358.3934,186.1840,1008.3828)) return SendClientMessage(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} Tienes que estar en el mostrador de la DGT, Dirección General de Tráfico para hacer esto.");
	new dialog[2048], gformat[256], iCount = 0;
	Loop(veh, totalvehiculos, 1) if (InfoVehiculo[veh][vTipo] == 0 && strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[veh][vPropietario], true) == 0)
	{
		if (InfoVehiculo[veh][vEmbargo] != 0) format(gformat, sizeof gformat, "%s (Embargado)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400]);
		else format(gformat, sizeof gformat, "%s (ID: %d)\n", VehicleName[InfoVehiculo[veh][vModelo] - 400], InfoVehiculo[veh][vIG_id]);
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "sellvehkey%d", iCount);
		SetPVarInt(playerid, gformat2, veh);
		iCount++;
	}
	if (iCount == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ningún vehículo a tu nombre.");
	Dialog_Show(playerid, SellVehicle, DIALOG_STYLE_LIST, "{FFBF00}Vender - Vehículo", dialog, "Continuar", "Salir");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Si vendes el vehículo te pagarán la cuarta parte del precio de lo que te habia costado o menos.");
	return 1;
}

Dialog:SellVehicle(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "sellvehkey%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vModelo] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Seleccionaste un slot vacío.");
	if (InfoVehiculo[veh][vEmbargo]) return SendClientMessage(playerid, COLOR_WHITE, "No se puede vender un vehículo confiscado.");
	if (InfoVehiculo[veh][vPrecio] < 1) return SendClientMessage(playerid, COLOR_GREY, "No puedes vender vehículos VIP o cedidos por la administración.");
	new string[245], valor = InfoVehiculo[veh][vPrecio]/2;

	borrar_vehiculo(veh);
	format(string, sizeof string, "Gracias por la venta, el gobierno te ha pagado la mitad del vehículo por el vehículo. ($%s)", diner_coma(valor));
	SendClientMessage(playerid, COLOR_YELLOW, string);
	GivePlayerCash(playerid, valor, "sellvehicle");
	return 1;
}

CMD:limpiar(playerid, params[])
{
	new string[128], playerid2;
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /limpiar (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	format(string, sizeof string, "* Limpiaste el nivel de búsqueda %s.", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "* Agente %s a limpiado tu nivel de búsqueda.", NombreJugador(playerid));
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "[CENTRAL] %s a limpiado el nivel de búsqueda de %s.", NombreJugador(playerid), NombreJugador(playerid2));
	SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, string);
	InfoPlayer[playerid2][pEstrellas] = 0;
	guardar_int_mysql("cuentas", "LimiteRobos", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pEstrellas]);
	SetPlayerWantedLevel(playerid2, 0);
	return 1;
}

CMD:gunlocker(playerid)
{
	if (GetPlayerCash(playerid) < 15500) { SendClientMessage(playerid, COLOR_WHITE, "No tienes 15,500$ para mejorar el máximo de slots de tu maletero."); return 1; }
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "Debes ser el conductor de un vehículo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		if (InfoVehiculo[v][vEmbargo] != 0) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo se encuentra embargado.");
		if (llaves_vehiculo(playerid, vehicleid) == -1) return SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de este vehículo.");
		if (InfoVehiculo[v][vMaxMaletero] == 10) return SendClientMessage(playerid, COLOR_GREY, "Llegaste al máximo de 10 slots en el maletero de este vehículo.");
		new string[256];
		GameTextForPlayer(playerid,"~g~Gunlocker mejorado!",5000,6);
		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		InfoVehiculo[v][vMaxMaletero]++;
		GivePlayerCash(playerid, -15500, "gunlocker");
		format(string, sizeof string, "Ahora tu %s dispone de {FFFF00}%d slots{FFFFFF} en el maletero. (Mejoras: {FFFF00}/smaletero /gmaletero{FFFFFF})", InfoVehiculo[v][vMaxMaletero]);
		SendClientMessage(playerid, 0xFFFFFFFF, string);
		guardar_int_mysql("vehiculos", "MaxMaletero", InfoVehiculo[v][vID_sql], InfoVehiculo[v][vMaxMaletero]);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Debes estar dentro de un vehículo propio.");
	return 1;
}

CMD:gmaletero(playerid)
{
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás herido o muerto.");
 	if (InfoPlayer[playerid][pManoDerecha] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes un objeto en tu mano derecha.");
	new gformat[270], Float: x, Float: y, Float: z;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] != 0)
	{
		new vehicleid = InfoVehiculo[id][vIG_id], objeto = InfoPlayer[playerid][pManoDerecha], objetocant = InfoPlayer[playerid][pManoDerechaCant];
		GetVehiclePos(vehicleid, x, y, z);
		if (IsPlayerInRangeOfPoint(playerid, 4.0, x, y, z))
		{
			if (!Vehiculo_LSPD(vehicleid) && !Vehiculo_SASD(vehicleid) && !Vehiculo_FBI(vehicleid) && !Vehiculo_SAEM(vehicleid))
			{
				if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto mientras estar en el interior del vehículo!");
			}
			if (InfoVehiculo[id][vMaleteroOn] == 0) return SendClientMessage(playerid, COLOR_GREY, "El maletero de este vehículo está cerrado, utilzia (/v maletero) para abrirlo.");
			if (InfoVehiculo[id][vMaxMaletero] >= 10)
			{
				InfoVehiculo[id][vMaxMaletero] = 10;
				guardar_int_mysql("vehiculos", "MaxMaletero", InfoVehiculo[id][vID_sql], InfoVehiculo[id][vMaxMaletero]);
			}
			if (EstaEnBicis(vehicleid)) return SendClientMessage(playerid, COLOR_GREY,"Este vehículo no tiene maletero.");
			new rSlot = -1;
			Loop(xs, InfoVehiculo[id][vMaxMaletero], 0) if (InfoVehiculo[id][vMaletero][xs] == 0)
			{
			    rSlot = xs;
			    break;
			}
			if (rSlot == -1)
			{
				if (InfoVehiculo[id][vMaxMaletero] == 10) format(gformat, sizeof gformat, "No puedes guardar más cosas en tu maletero, máximo %d slots.", InfoVehiculo[id][vMaxMaletero]);
				else format(gformat, sizeof gformat, "No puedes guardar más cosas en tu maletero, máximo %d slots. (Usa /gunlocker)", InfoVehiculo[id][vMaxMaletero]);
				SendClientMessage(playerid, COLOR_RED, gformat);
				return 1;
			}
			InfoVehiculo[id][vMaletero][rSlot] = objeto;
			InfoVehiculo[id][vMaleteroCant][rSlot] = objetocant;
			mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE vehiculos SET Maletero%d = '%d', MaleteroCant%d = '%d' WHERE ID = '%d'", rSlot+1, objeto, rSlot+1, objetocant, InfoVehiculo[id][vID_sql]);
			mysql_tquery(DBcreative, gformat);
			ResetPlayerWeapons(playerid);
			RemovePlayerAttachedObject(playerid, 7);
			InfoPlayer[playerid][pManoDerecha] = 0;
			InfoPlayer[playerid][pManoDerechaCant] = 0;
			mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Mano_derecha = 0, Cantidad_mano_derecha = 0 WHERE ID = '%d'", InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, gformat);
			if (objetocant == 0 || objetocant == 1) format(gformat, sizeof gformat, "Guardaste en el maletero tu %s.", InfoInventario[objeto][NombreObjeto]);
			else
			{
				if (InfoInventario[objeto][IDArma] != 0) format(gformat, sizeof gformat, "Guardaste en el maletero tu %s con %d balas.", InfoInventario[objeto][NombreObjeto], objetocant);
				else format(gformat, sizeof gformat, "Guardaste en el maletero tu %s con %d de cantidad.", InfoInventario[objeto][NombreObjeto], objetocant);
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
			format(gformat, sizeof gformat, "guarda en el maletero su %s", InfoInventario[objeto][NombreObjeto]);
			cmd_me(playerid, gformat);
			return 1;
		}
	}
    SendClientMessage(playerid, COLOR_GREY, "Debes estar cerca del maletero de un vehículo dinámico.");
	return 1;
}
CMD:guardarmaletero(playerid) return cmd_gmaletero(playerid);

CMD:smaletero(playerid, params[])
{
	if (GetPVarInt(playerid, "EstaCrack") != 0) return SendClientMessage(playerid, COLOR_GREY, "No puedes usar este comando mientras estás herido o muerto.");
	if (InfoPlayer[playerid][pManoDerecha] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes un objeto en tu mano derecha.");
	if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_GREY, "Tienes restricción de armas.");
	new gformat[270], Float: x, Float: y, Float: z;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] != 0)
	{
		new vehicleid = InfoVehiculo[id][vIG_id];
		GetVehiclePos(vehicleid, x, y, z);
		if (IsPlayerInRangeOfPoint(playerid, 4.0, x, y, z))
		{
			if (!Vehiculo_LSPD(vehicleid) && !Vehiculo_SASD(vehicleid) && !Vehiculo_FBI(vehicleid) && !Vehiculo_SAEM(vehicleid))
			{
				if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto mientras estar en el interior del vehículo!");
			}
			if (InfoVehiculo[id][vMaleteroOn] == 0) return SendClientMessage(playerid, COLOR_GREY, "El maletero de este vehículo está cerrado, utilzia (/v maletero) para abrirlo.");
			if (InfoVehiculo[id][vMaxMaletero] >= 10)
			{
				InfoVehiculo[id][vMaxMaletero] = 10;
				guardar_int_mysql("vehiculos", "MaxMaletero", InfoVehiculo[id][vID_sql], InfoVehiculo[id][vMaxMaletero]);
			}
			if (EstaEnBicis(vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "Este vehículo no tiene maletero.");
			new rSlot, maxmaletero = InfoVehiculo[id][vMaxMaletero];
			if (sscanf(params, "i", rSlot))
			{
			    new count = 0;
				Loop(xs, maxmaletero, 0) if (InfoVehiculo[id][vMaletero][xs] != 0) count++;
				if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes nada en tu maletero.");
				SendClientMessage(playerid, COLOR_GREY, "Utiliza: /smaletero (Slot)");
				Loop(xs, maxmaletero, 0) if (InfoVehiculo[id][vMaletero][xs] != 0)
				{
					format(gformat, sizeof gformat, "Tienes en {FFBF00}slot %d{EBEBEB}: %s", xs+1, slot_objeto(InfoVehiculo[id][vMaletero][xs], InfoVehiculo[id][vMaleteroCant][xs]));
					SendClientMessage(playerid, 0xEBEBEBFF, gformat);
				}
				return 1;
			}
			if (rSlot < 1 || rSlot > maxmaletero)
			{
				format(gformat, sizeof gformat, "El número de slot debe estar entre 1 y %d.", maxmaletero);
				SendClientMessage(playerid, COLOR_GREY, gformat);
				return 1;
			}
			rSlot--;
			if (InfoVehiculo[id][vMaletero][rSlot] == 0) return SendClientMessage(playerid, COLOR_RED, "No tienes nada en ese slot.");
			new objeto = InfoVehiculo[id][vMaletero][rSlot], objetocant = InfoVehiculo[id][vMaleteroCant][rSlot];
			InfoVehiculo[id][vMaletero][rSlot] = 0;
			InfoVehiculo[id][vMaleteroCant][rSlot] = 0;
			mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE vehiculos SET Maletero%d = 0, MaleteroCant%d = 0 WHERE ID = '%d'", rSlot+1, rSlot+1, InfoVehiculo[id][vID_sql]);
			mysql_tquery(DBcreative, gformat);
			InfoPlayer[playerid][pManoDerecha] = objeto;
			InfoPlayer[playerid][pManoDerechaCant] = objetocant;
			mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE cuentas SET Mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", objeto, objetocant, InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, gformat);
			if (objetocant == 1 || objetocant == 0) format(gformat, sizeof gformat, "Sacaste tu %s del maletero.", InfoInventario[objeto][NombreObjeto]);
			else
			{
				if (InfoInventario[objeto][IDArma] != 0) format(gformat, sizeof gformat, "Sacaste tu %s con %d balas del maletero.", InfoInventario[objeto][NombreObjeto], objetocant);
				else format(gformat, sizeof gformat, "Sacaste tu %s con %d de cantidad del maletero.", InfoInventario[objeto][NombreObjeto], objetocant);
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gformat);
			format(gformat, sizeof gformat, "saca su %s del maletero", InfoInventario[objeto][NombreObjeto]);
			cmd_me(playerid, gformat);
			ResetPlayerWeapons(playerid);
			if (InfoInventario[objeto][IDArma] > 0)
			{
				GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], objetocant);
			}
			PonerObjeto(playerid, 1, objeto);
			return 1;
		}
	}
    SendClientMessage(playerid, COLOR_GREY, "Debes estar cerca del maletero de un vehículo dinámico.");
	return 1;
}
CMD:sacarmaletero(playerid, params[]) return cmd_smaletero(playerid, params);

CMD:darvest(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[128], playerid2, slot, invoice[64];
	if (sscanf(params, "dds[64]", playerid2, slot, invoice)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /darvest (playerid) (slot(0-6)) (invoice #)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (slot < 0 || slot > 6) return SendClientMessage(playerid, 0xFF6347AA, "Slot 0 al 6.");

	InfoPlayer[playerid2][ptModelo][slot] = 19142;
	InfoPlayer[playerid2][ptHueso][slot] = 1;
	InfoPlayer[playerid2][ptPosX][slot] = 0.07998;
	InfoPlayer[playerid2][ptPosY][slot] = 0.03999;
	InfoPlayer[playerid2][ptPosZ][slot] = 0.0;
	InfoPlayer[playerid2][ptRotX][slot] = 0.0;
	InfoPlayer[playerid2][ptRotY][slot] = 0.0;
	InfoPlayer[playerid2][ptRotZ][slot] = 0.0;
	ActualizarToy(playerid2, slot);
	format(string, sizeof string, "Police Vest en el slot %d, usa /toys para editar la posición.", slot);
	SendClientMessage(playerid2, COLOR_LIGHTGREEN, string);
	format(string, sizeof string, "Diste a %s un police vest en el slot %d", NombreJugador(playerid2), slot);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof string, "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", NombreDeCuenta(playerid), NombreDeCuenta(playerid2), invoice);
	Log("LOGS/shoplog.log", string);
	return 1;
}

CMD:darvest2(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[128], playerid2, slot, invoice[64];
	if (sscanf(params, "dds[64]", playerid2, slot, invoice)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /darvest (playerid) (slot(0-6)) (invoice #)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (slot < 0 || slot > 6) return SendClientMessage(playerid, 0xFF6347AA, "Slot 0 al 6.");

	InfoPlayer[playerid2][ptModelo][slot] = 19515;
	InfoPlayer[playerid2][ptHueso][slot] = 1;
	InfoPlayer[playerid2][ptPosX][slot] = 0.07998;
	InfoPlayer[playerid2][ptPosY][slot] = 0.03999;
	InfoPlayer[playerid2][ptPosZ][slot] = 0.0;
	InfoPlayer[playerid2][ptRotX][slot] = 0.0;
	InfoPlayer[playerid2][ptRotY][slot] = 0.0;
	InfoPlayer[playerid2][ptRotZ][slot] = 0.0;
	ActualizarToy(playerid2, slot);
	format(string, sizeof string, "Police Vest en el slot %d, usa /toys para editar la posición.", slot);
	SendClientMessage(playerid2, COLOR_LIGHTGREEN, string);
	format(string, sizeof string, "Diste a %s un police vest en el slot %d", NombreJugador(playerid2), slot);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof string, "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", NombreDeCuenta(playerid), NombreDeCuenta(playerid2), invoice);
	Log("LOGS/shoplog.log", string);
	return 1;
}

CMD:vertoys(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new iTargetID;
	if (sscanf(params, "d", iTargetID)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /vertoys (playerid)");
	if (!IsPlayerConnectedEx(iTargetID)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador Invalido.");
	new szMessages[170], count = 0;
	Loop(iToyIter, 7, 0)
	{
		Loop(LoopRapist, sizeof InfoToy, 0) if (InfoToy[LoopRapist][accModelo] == InfoPlayer[iTargetID][ptModelo][iToyIter])
		{
			format(szMessages, sizeof szMessages, "%s (slot %i, parte: %s)", InfoToy[LoopRapist][accNombre], iToyIter, GetParteToy(iTargetID, iToyIter));
			SendClientMessage(playerid, COLOR_WHITE, szMessages);
			count++;
		}
	}
	if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador no tiene toys.");
	return 1;
}

CMD:servicio(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4, 5)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	if (OnDuty[playerid] == 0)
	{
		OnDuty[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Ahora estas en servicio.");
	}
	else
	{
		OnDuty[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Ahora ya no estas en servicio.");
	}
	return 1;
}
CMD:duty(playerid) return cmd_servicio(playerid);
CMD:enservicio(playerid) return cmd_servicio(playerid);

CMD:invitar(playerid, params[])
{
	new acceso = 0, id = InfoPlayer[playerid][pMiembro], playerid2, dialog[550];
	if (id == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de facción.");
	if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) { acceso = 1; }
	else { if (InfoPlayer[playerid][pLider] == id) acceso = 1; }
	if (acceso == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres lider de facción o rango máximo.");
	if (GetMiembrosFaccion(id) >= 70) return SendClientMessage(playerid, COLOR_GREY, "No puedes tener más de 70 miembros.");
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /invitar (PlayerID)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "El jugador seleccionado no se encuentra conectado.");
	if (TomandoTrabajo[playerid2] != -1) return SendClientMessage(playerid, COLOR_GREY, "Este jugador está en otra tarea, espera.");
	if (InfoPlayer[playerid2][pLider]) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador es lider de una facción.");
	if (InfoPlayer[playerid2][pMiembro]) return SendClientMessage(playerid, COLOR_GREY, "Ese jugador ya es miembro de una facción.");

	TomandoTrabajo[playerid2] = playerid;
	format(dialog, sizeof dialog, "{FFFFFF}%s te ha ofrecido unirte a {FFBF00}%s\n\
	{FFFFFF}Si quieres ser parte presiona 'si', de lo contrario presiona 'no'.\n", NombreJugador(playerid), InfoFaccion[id][fNombre]);
	Dialog_Show(playerid2, InviteFaccion, DIALOG_STYLE_MSGBOX, "Unirse facción", dialog, "Si", "No");
	format(dialog, sizeof(dialog), "Has ofrecido a %s, formar parte de tu facción.", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_GREEN, dialog);
	return 1;
}
CMD:contratar(playerid, params[]) return cmd_invitar(playerid, params);

Dialog:InviteFaccion(playerid, response, listitem, inputtext[])
{
	new string[256], playerid2 = TomandoTrabajo[playerid], query[512];
	new id = InfoPlayer[playerid2][pLider];
	if (!IsPlayerConnectedEx(playerid2))
	{
		TomandoTrabajo[playerid] = -1;
		SendClientMessage(playerid, COLOR_GREY, "El lider se ha desconectado, perdiste la oferta.");
		return 1;
	}
	if (!response) //rechazo
	{
		format(string, sizeof string, "Rechaste la invitación a %s.", InfoFaccion[id][fNombre]);
		SendClientMessage(playerid, 0xEFEFEFFF, string);
		format(string, sizeof string, "%s rechazó la invitación", NombreJugador(playerid));
		SendClientMessage(playerid2, 0xEFEFEFFF, string);
		TomandoTrabajo[playerid] = -1;
		return 1;
	}
	//acepto
	InfoPlayer[playerid][pMiembro] = id;
	InfoPlayer[playerid][pRango] = 1;
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET MiembroFaccion = '%d', Rango = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pMiembro], InfoPlayer[playerid][pRango], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);

	format(string, sizeof string, "Ahora formas parte de %s.", InfoFaccion[id][fNombre]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "%s aceptó la invitación.", NombreJugador(playerid));
	SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
	format(string, sizeof string, "Registros: %s ahora es %s por %s.", NombreDeCuenta(playerid), InfoFaccion[id][fNombre], NombreDeCuenta(playerid2));
	Log("LOGS/UnirseFaccion.log", string);

	TomandoTrabajo[playerid] = -1;
	return 1;
}

CMD:fnombre(playerid, params[])
{
	new acceso = 0, id = InfoPlayer[playerid][pMiembro];
	if (id == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de facción.");
	if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) { acceso = 1; }
	else { if (InfoPlayer[playerid][pLider] == id) acceso = 1; }
	if (acceso == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres lider de facción o rango máximo.");
	new fnombre[128], query[256];
	if (sscanf(params, "s[128]", fnombre)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /fnombre (Nombre)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "Tu facción no tiene un tipo asignado.");
	if (!strcmp(InfoPlayer[playerid][pNombre_Apellido], "Pablo_Prieto", true) || !strcmp(InfoPlayer[playerid][pNombre_Apellido], "Elias_Moss", true))
	{
		alm(InfoFaccion[id][fNombre], fnombre);
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Nombre = '%e' WHERE ID = '%d'", InfoFaccion[id][fNombre], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, query);
		format(query, sizeof query, "Nuevo nombre: %s", fnombre);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
	}
	else
	{
		if (NoFacEdit(id)) return SendClientMessage(playerid, COLOR_GREY, "No puedes editar facciones oficiales del servidor.");
		alm(InfoFaccion[id][fNombre], fnombre);
		mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Nombre = '%e' WHERE ID = '%d'", InfoFaccion[id][fNombre], InfoFaccion[id][fID_sql]);
		mysql_tquery(DBcreative, query);
		format(query, sizeof query, "Nuevo nombre: %s", fnombre);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
	}
	return 1;
}

CMD:frango(playerid, params[])
{
	new acceso = 0, id = InfoPlayer[playerid][pMiembro];
	if (id == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de facción.");
	if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) { acceso = 1; }
	else { if (InfoPlayer[playerid][pLider] == id) acceso = 1; }
	if (acceso == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres lider de facción o rango máximo.");
	new fnamerango[32], query[256], rango;
	if (sscanf(params, "ds[32]", rango, fnamerango)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /frango (Rango) (Nombre)");
	if (!InfoFaccion[id][fTipo]) return SendClientMessage(playerid, COLOR_GREY, "Tu facción no tiene un tipo asignado.");
	if (rango > InfoFaccion[id][fMaxRangos] || rango < 1)
	{
		format(query, sizeof query, "El máximo de rangos de %s es %d.", InfoFaccion[id][fLogo], InfoFaccion[id][fMaxRangos]);
		SendClientMessage(playerid, COLOR_GREY, query);
		return 1;
	}
	alm(fac_rango[id][rango-1], fnamerango);
	mysql_format(DBcreative, query, sizeof query, "UPDATE facciones SET Rango%d = '%e' WHERE ID = '%d'", rango, fnamerango, InfoFaccion[id][fID_sql]);
	mysql_tquery(DBcreative, query);
	format(query, sizeof query, "Rango %d: %s", rango, fnamerango);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, query);
	return 1;
}

LimpiarEmpleados(id)
{
	new query[160];
	mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE Contrato = '%d'", id);
	return mysql_tquery(DBcreative, query, "OnEmpleadosNeg", "d", id);
}

forward OnEmpleadosNeg(id);
public OnEmpleadosNeg(id)
{
	new query[170];
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		//fix 22/04/2020
		Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombreapellido, true))
		{
			newid = plasher;
			break;
		}
		//fix 22/04/2020
		if (IsPlayerConnectedEx(newid))
		{
			InfoPlayer[newid][pContrato] = -1;
			SendClientMessage(newid, -1, "Se hizo limpieza de empleados en el negocio/empresa donde trabajabas.");
		}
		mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Contrato = -1 WHERE Nombre_Apellido = '%e'", nombreapellido);
		mysql_tquery(DBcreative, query);
	}
	return 1;
}

CMD:fllaves(playerid)
{
	new faccion = InfoPlayer[playerid][pMiembro];
	if (faccion == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres miembros de facción.");
	new dialog[3684], gformat[370], vcount = 0;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vTipo] == faccion)
	{
		format(gformat, sizeof gformat, "[%d] %s (%d)\n", vcount+1, VehicleName[InfoVehiculo[id][vModelo] - 400], InfoVehiculo[id][vIG_id]);
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "RanuraVeh%d", vcount);
		SetPVarInt(playerid, gformat2, id);
		vcount++;
	}
	if (vcount == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes ningún vehículo en tu facción.");
	Dialog_Show(playerid, MenuFacVehiculos, DIALOG_STYLE_LIST, InfoFaccion[faccion][fNombre], dialog, "Continuar", "Salir");
	return 1;
}

Dialog:MenuFacVehiculos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new xd = listitem, gformat[40], gtitulo[170];
	format(gformat, sizeof gformat, "RanuraVeh%d", xd);
	new id = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[id][vModelo] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Seleccionaste un slot vacío.");
	id_veh_actual[playerid] = id;
	format(gtitulo, sizeof gtitulo, "Opciones para {FFBF00}%s", VehicleName[InfoVehiculo[id][vModelo] - 400]);
	Dialog_Show(playerid, Menu2FacVehiculos, DIALOG_STYLE_LIST, gtitulo, "{0073E6}-{FFFFFF} Localizar\n{0073E6}-{FFFFFF} Maletero", "Continuar", "Volver");
	return 1;
}

Dialog:Menu2FacVehiculos(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_fllaves(playerid);
	new id = id_veh_actual[playerid], string[235];
	if (InfoVehiculo[id][vModelo] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Seleccionaste un slot vacío.");
	switch (listitem)
	{
		case 0: //localizar
		{
			new Float: carPos[3], zone[MAX_ZONE_NAME];
			GetVehiclePos(InfoVehiculo[id][vIG_id], carPos[0], carPos[1], carPos[2]);
			GetCar3DZone(InfoVehiculo[id][vIG_id], zone, sizeof(zone));
			format(string, sizeof string, "El vehículo {FFBF00}%s{FFFFFF} fue localizado en {00D500}%s{FFFFFF}. (Vé al checkpoint)", GetVehicleName(InfoVehiculo[id][vIG_id]), zone);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
			PlayerPlaySound(playerid, 1138, 0, 0, 0);
			SetPVarInt(playerid, "TrackCar", 1);
		}
		case 1: //maletero
		{
			new count = 0;
			Loop(x, 10, 0) if (InfoVehiculo[id][vMaletero][x] != 0)
			{
				count++;
				format(string, sizeof string, "#%d %s", x+1, slot_objeto(InfoVehiculo[id][vMaletero][x], InfoVehiculo[id][vMaleteroCant][x]));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			if (count == 0) return SendClientMessage(playerid, COLOR_GREY, "No hay nada en el maletero.");
			SendClientMessage(playerid, -1, "Recuerda que los comandos de maletero son: {FFBF00}/gmaletero {FFFFFF}-{FFBF00} /smaletero");
		}
	}
	return 1;
}


CMD:miembros(playerid) return cmd_listamiembros(playerid);
CMD:listamiembros(playerid)
{
	new faccion = InfoPlayer[playerid][pMiembro];
	if (faccion == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres miembros de facción.");
	new query[256];
	mysql_format(DBcreative, query, sizeof query, "SELECT * FROM cuentas WHERE MiembroFaccion = '%d'", faccion);
	mysql_tquery(DBcreative, query, "OnMembersFaction", "dd", playerid, faccion);
	return 1;
}

forward OnMembersFaction(playerid, id);
public OnMembersFaction(playerid, id)
{
	new members = 0, gformat[256], dialog[4700] = "Nombre\tRango\tEstado\n";
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], rango, newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		reg_int(player, "Rango", rango);
		//fix 22/04/2020
		Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombreapellido, true))
		{
			newid = plasher;
			break;
		}
		//fix 22/04/2020
		if (IsPlayerConnectedEx(newid)) format(gformat, sizeof gformat, "%s\t%s (%d)\t{29B311}Conectado\n", nombreapellido, fac_rango[id][rango-1], rango);
		else format(gformat, sizeof gformat, "%s\t%s (%d)\t{E24D32}Desconectado\n", nombreapellido, fac_rango[id][rango-1], rango);
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "Miembro_List%d", members);
		SetPVarString(playerid, gformat, nombreapellido);
		members++;
	}
	if (members == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, InfoFaccion[id][fNombre], "{FFFFFF}No se encontraron miembros.", "Cerrar", "");
	new acceso = 0;
	if (InfoPlayer[playerid][pRango] == InfoFaccion[id][fMaxRangos]) { acceso = 1; }
	else { if (InfoPlayer[playerid][pLider] == id) acceso = 1; }
	if (acceso != 0) Dialog_Show(playerid, MenuMiembros, DIALOG_STYLE_TABLIST_HEADERS, InfoFaccion[id][fNombre], dialog, "Continuar", "Salir");
	else Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, InfoFaccion[id][fNombre], dialog, "Cerrar", "");
	return 1;
}

Dialog:MenuMiembros(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[128], nombre_miembro[32];
	format(gformat, sizeof gformat, "Miembro_List%d", ID);
	GetPVarString(playerid, gformat, nombre_miembro, sizeof nombre_miembro);
	SetPVarString(playerid, "Miembro_Actual", nombre_miembro);
	format(gformat, sizeof gformat, "Miembro: {FFBF00}%s", nombre_miembro);
	Dialog_Show(playerid, OpcionMiembros, DIALOG_STYLE_LIST, gformat, "Dar rango\nÚltima conexión\n{B00000}Expulsar de la facción", "Continuar", "Volver");
	return 1;
}

Dialog:OpcionMiembros(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_listamiembros(playerid);
	new nombre_miembro[32], newid = -1, string[256], ultimaconexion[256], faccion = InfoPlayer[playerid][pMiembro], query[512];
	GetPVarString(playerid, "Miembro_Actual", nombre_miembro, sizeof nombre_miembro);
	//fix 22/04/2020
	Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombre_miembro, true))
	{
		newid = plasher;
		break;
	}
	//fix 22/04/2020
	new eslider;
	if (verificar_cuenta(nombre_miembro))
	{
		reg_int(0, "LiderFaccion", eslider);
		reg_string(0, "UltimaConexion", ultimaconexion, 256);
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Esa cuenta no existe.");
	switch (listitem)
	{
		case 0: //darrango
		{
			new maxrangos = InfoFaccion[faccion][fMaxRangos];
			new dialog[1024], gformat[128];
			Loop(rango, maxrangos, 0)
			{
				format(gformat, sizeof gformat, "(%d) %s\n", rango+1, fac_rango[faccion][rango]);
				strcat(dialog, gformat);
			}
			format(gformat, sizeof gformat, "Miembro: {FFBF00}%s", nombre_miembro);
			Dialog_Show(playerid, DarRango, DIALOG_STYLE_LIST, gformat, dialog, "Continuar", "Salir");
		}
		case 1: //última conexión
		{
			if (IsPlayerConnectedEx(newid))
			{
				format(string, sizeof string, "%s está conectado ID: %d", nombre_miembro, newid);
				SendClientMessage(playerid, COLOR_GREEN, string);
				return 1;
			}
			format(string, sizeof string, "%s: %s", nombre_miembro, ultimaconexion);
			SendClientMessage(playerid, COLOR_PURPLE, string);
		}
		case 2: //expulsar de la facción
		{
			if (eslider != 0) return SendClientMessage(playerid, COLOR_GREY, "* No puedes expulsar lideres de la facción, habla con un admin.");
			if (IsPlayerConnectedEx(newid))
			{
			    if (playerid == newid) return SendClientMessage(playerid, COLOR_GREY, "No te puedes expulsar de la facción.");
				InfoPlayer[newid][pLider] = 0;
				InfoPlayer[newid][pMiembro] = 0;
				InfoPlayer[newid][pRango] = 0;
				if (faccion == 1 || faccion == 2 || faccion == 3) GivePlayerSkin(newid, 155);
				if (OnDuty[newid] != 0) OnDuty[newid] = 0;
			}
			format(string, sizeof string, "Líder %s expulsó de la facción a %s.", NombreOriginal(playerid), nombre_miembro);
			SendFaccionMessage(InfoPlayer[playerid][pMiembro], 0x33CCFFFF, string);
			mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET LiderFaccion = 0, MiembroFaccion = 0, Rango = 0 WHERE Nombre_Apellido = '%e'", nombre_miembro);
			mysql_tquery(DBcreative, query);
		}
	}
	return 1;
}

Dialog:DarRango(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new nombre_miembro[32], newid = -1, string[256], rango = listitem;
	new faccion = InfoPlayer[playerid][pMiembro], query[512];
	GetPVarString(playerid, "Miembro_Actual", nombre_miembro, sizeof nombre_miembro);
	//fix 22/04/2020
	Loop(plasher, MAX_PLAYERS, 0) if (!strcmp(InfoPlayer[plasher][pNombre_Apellido], nombre_miembro, true))
	{
		newid = plasher;
		break;
	}
	//fix 22/04/2020
	if (IsPlayerConnectedEx(newid)) InfoPlayer[newid][pRango] = rango+1;
	format(string, sizeof string, "Líder %s asignó rango %s(%d) al miembro %s.", NombreOriginal(playerid), fac_rango[faccion][rango], rango+1, nombre_miembro);
	SendFaccionMessage(faccion, 0x33CCFFFF, string);
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Rango = '%d' WHERE Nombre_Apellido = '%e'", rango+1, nombre_miembro);
	mysql_tquery(DBcreative, query);
	return 1;
}

CMD:placa(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4, 5)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley.");
	new id = InfoPlayer[playerid][pMiembro];
	new string[180], playerid2, rango = InfoPlayer[playerid][pRango]-1;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /placa (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador no conectado.");
	if (!CercaDelMarica(5.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Muy lejos de el jugador.");
	SendClientMessage(playerid2, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
	format(string, sizeof string, "%s miembro de {FFBF00}%s", NombreJugador(playerid), InfoFaccion[id][fLogo]);
	SendClientMessage(playerid2, COLOR_WHITE, string);
	format(string, sizeof string, "Asignación actual: {FFBF00}%s", fac_rango[id][rango]);
	SendClientMessage(playerid2, COLOR_WHITE, string);
	if (member_faccion(playerid, 1, 2, 3, 4)) SendClientMessage(playerid2, COLOR_RED, "Tiene autoridad para arrestar.");
	SendClientMessage(playerid2, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
	format(string, sizeof string, "muesta su placa a %s", NombreJugador(playerid2));
	cmd_me(playerid, string);
	return 1;
}

CMD:revisar(playerid, params[])
{
	if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_GREY, "* Debes jugar al menos dos horas el servidor para revisar a otros.");
	new string[190], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /revisar (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador especificado no válido.");
	if (!CercaDelMarica(8.0, playerid, playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	if (!member_faccion(playerid, 1, 2, 3, 4))
	{
		if (EstaParaArrastrar(playerid2) == 0) return SendClientMessage(playerid, COLOR_GREY, "* Ese jugador debe estar en estado de herido/muerto/rendido/esposado.");
	}
	if (playerid2 == playerid) return SendClientMessage(playerid, COLOR_GREY, "* No puedes revisar a ti mismo.");
	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	format(string, sizeof string, "*** Objetos de %s ...  ***", NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_WHITE, string);
	if (InfoPlayer[playerid2][pMateriales] != 0)
	{
		format(string, sizeof string, "%d materiales.", InfoPlayer[playerid2][pMateriales]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	if (InfoPlayer[playerid2][pGanzuas] != 0)
	{
		format(string, sizeof string, "%d ganzúas.", InfoPlayer[playerid2][pGanzuas]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	if (InfoPlayer[playerid2][pPescados] != 0)
	{
		format(string, sizeof string, "%d peces.", InfoPlayer[playerid2][pPescados]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	format(string, sizeof string, "*** Dinero: %s  ***", diner_coma(GetPlayerCash(playerid2)));
	SendClientMessage(playerid, COLOR_GRAD1, string);
	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	format(string, sizeof string, "revisa a %s", NombreJugador(playerid2));
	cmd_me(playerid, string);
	return 1;
}

CMD:calcular(playerid, params[])
{
	new string[128], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendClientMessage(playerid, COLOR_GREEN, "USA: /calcular (valor) (operación) (valor).");
		SendClientMessage(playerid, COLOR_GRAD1, "Operaciones: sumar [+], restar [-], Multiplicar[*], Dividir.[/]");
		return 1;
	}
	if(strcmp(method,"multiplicar",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(string,sizeof string,"* %d multiplicado por %d: %i.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"dividir",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
		{
			SendClientMessage(playerid,COLOR_WHITE,"LOL! El mundo caerá en 10 segundos... No se puede dividir por cero idiota!");
			return 1;
		}
		new sum = value1/value2;
		format(string,sizeof string,"* %d dividido por %d: %i.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"sumar",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(string,sizeof string,"* %d + %d = %i.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"restar",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(string,sizeof string,"* %d - %d = %i.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	return 1;
}

CMD:desmutearad(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[160], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /desmutearad (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (InfoPlayer[playerid2][pBlockAD] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED,"{FFFF00}[ERROR]:{FFFFFF} Ese jugador ya está muteado de los anuncios!");
	if (InfoPlayer[playerid2][pSancionado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FFFF00}[ERROR]:{FFFFFF} No puedes desmutear del comando /ad si la persona está en jail!");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) fue desmuteado del cmd /ad por %s(%d).", NombreOriginal(playerid2), playerid2, NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "%s fue desmuteado del cmd /ad por %s.", NombreDeCuenta(playerid2), NombreDeCuenta(playerid));
	Log("LOGS/admin.log", string);
	InfoPlayer[playerid2][pBlockAD] = 0;
	InfoPlayer[playerid2][pAdvAD]--;
	mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET BlockAD = 0, AdvAD = '%d' WHERE ID = '%d'", InfoPlayer[playerid2][pAdvAD], InfoPlayer[playerid2][pID]);
	mysql_tquery(DBcreative, string);
	return 1;
}

CMD:mutearad(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[160], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "USA: /mutearad (playerid)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_GREY, "Jugador desconectado.");
	if (InfoPlayer[playerid2][pAdmin] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "No puedes usar este comando con administradores.");
	if (InfoPlayer[playerid2][pBlockAD] == 0)
	{
		InfoPlayer[playerid2][pBlockAD] = 1;
		InfoPlayer[playerid2][pAdvAD] += 1;
		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET BlockAD = 1, AdvAD = '%d' WHERE ID = '%d'", InfoPlayer[playerid2][pAdvAD], InfoPlayer[playerid2][pID]);
		mysql_tquery(DBcreative, string);
		format(string, sizeof string, "%s fue muteado del cmd /ad por %s.", NombreDeCuenta(playerid2), NombreDeCuenta(playerid));
		Log("LOGS/admin.log", string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) fue muteado del cmd /ad por %s(%d).", NombreOriginal(playerid2), playerid2, NombreOriginal(playerid), playerid);
		SendAdminMessage(0xFFFFFFFF, string);
		if (InfoPlayer[playerid2][pAdvAD] > 6)
		{
			new year, month,day;
			getdate(year, month, day);
			new playerip[32];
			GetPlayerIp(playerid2, playerip, sizeof(playerip));
			format(string, sizeof string, "%s fue baneado por %s. Razón: Excesivas advertencias (mutes)", NombreDeCuenta(playerid2), NombreDeCuenta(playerid));
			Log("LOGS/ban.log", string);
			format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) fue baneado. Razón: Excesivas advertencias (/ad).", NombreOriginal(playerid2), playerid2);
			SendAllMessage(0xFFFFFFFF, string);
			InfoPlayer[playerid2][pBaneo] = 2;
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET OtakuN_N = 2 WHERE ID = '%d'", InfoPlayer[playerid2][pID]);
			mysql_tquery(DBcreative, string);
			new ip[32];
			GetPlayerIp(playerid2,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid2);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Ese jugador ya está muteado del comando /ad.");
	}
	return 1;
}

CMD:pescar(playerid, params[])
{
	if(Carnada[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "No has comprado carnadas para pescar.");
	if(Lineas[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes lineas para la caña de pesca.");
	if(InfoPlayer[playerid][pPescados] > 15)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Has pescado bastante por ahora, toma un descanso.");
		return 1;
	}
	if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "* No puedes llevar más de cinco peces en un momento - vender o ponerlos en libertad en primer lugar.");
		return 1;
	}

	new string[256];
	new Veh = GetPlayerVehicleID(playerid);
	if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	{
		new Caught;
		new rand;
		new fstring[MAX_PLAYER_NAME];
		new Level = InfoPlayer[playerid][pHabilidad][4];
		if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
		else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
		else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
		else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
		else if(Level >= 401) { Caught = random(180)-70; }
		rand = random(FishNamesNumber);
		if(Caught <= 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "La línea se rompió.");
			Lineas[playerid]--;
			return 1;
		}
		else if(rand == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Atrapaste una camisa rota y la botaste a la basura.");
			Carnada[playerid]--;
			return 1;
		}
		else if(rand == 4)
		{
			SendClientMessage(playerid, COLOR_GREY, "Atrapaste un pantalon y lo tiraste lejos.");
			return 1;
		}
		else if(rand == 7)
		{
			SendClientMessage(playerid, COLOR_GREY, "Atrapaste un lata de comida vacía y la tiraste a la basura.");
			Carnada[playerid]--;
			return 1;
		}
		else if(rand == 10)
		{
			SendClientMessage(playerid, COLOR_GREY, "Atrapaste... Zapatos viejos y los botaste.");
			return 1;
		}
		else if(rand == 13)
		{
			SendClientMessage(playerid, COLOR_GREY, "Atrapaste una bolsa con basura y lo botaste.");
			return 1;
		}
		else if(rand == 20)
		{
			new mrand = random(2500);
			format(string, sizeof string, "* Atrapaste una billetera con dinero. ($%d).", mrand);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, mrand, "atrapar billetera (pesca)");
			Carnada[playerid]--;
			return 1;
		}
		if(Fishes[playerid][pWeight1] == 0)
		{
			InfoPlayer[playerid][pPescados] += 1;
	        if(InfoPlayer[playerid][pDobleExp] == 0) { InfoPlayer[playerid][pHabilidad][4]++; }
			else {
				InfoPlayer[playerid][pHabilidad][4] += 2;
				SendClientMessage(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight1] = Caught;
			format(string, sizeof string, "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish1], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 1;
			Fishes[playerid][pFid1] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 2;
			if(Caught > InfoPlayer[playerid][pRecordPesoPes])
			{
				format(string, sizeof string, "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", InfoPlayer[playerid][pRecordPesoPes], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				InfoPlayer[playerid][pRecordPesoPes] = Caught;
			}
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Pescados = '%d', Habilidad5 = '%d', RecordPesoPes = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pPescados], InfoPlayer[playerid][pHabilidad][4], InfoPlayer[playerid][pRecordPesoPes], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, string);
		}
		else if(Fishes[playerid][pWeight2] == 0)
		{
			InfoPlayer[playerid][pPescados] += 1;
	        if(InfoPlayer[playerid][pDobleExp] == 0) { InfoPlayer[playerid][pHabilidad][4]++; }
			else {
				InfoPlayer[playerid][pHabilidad][4] += 2;
				SendClientMessage(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight2] = Caught;
			format(string, sizeof string, "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish2], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 2;
			Fishes[playerid][pFid2] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 2;
			if(Caught > InfoPlayer[playerid][pRecordPesoPes])
			{
				format(string, sizeof string, "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", InfoPlayer[playerid][pRecordPesoPes], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				InfoPlayer[playerid][pRecordPesoPes] = Caught;
			}
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Pescados = '%d', Habilidad5 = '%d', RecordPesoPes = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pPescados], InfoPlayer[playerid][pHabilidad][4], InfoPlayer[playerid][pRecordPesoPes], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, string);
		}
		else if(Fishes[playerid][pWeight3] == 0)
		{
			InfoPlayer[playerid][pPescados] += 1;
	        if(InfoPlayer[playerid][pDobleExp] == 0) { InfoPlayer[playerid][pHabilidad][4]++; }
			else {
				InfoPlayer[playerid][pHabilidad][4] += 2;
				SendClientMessage(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight3] = Caught;
			format(string, sizeof string, "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish3], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 3;
			Fishes[playerid][pFid3] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 2;
			if(Caught > InfoPlayer[playerid][pRecordPesoPes])
			{
				format(string, sizeof string, "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", InfoPlayer[playerid][pRecordPesoPes], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				InfoPlayer[playerid][pRecordPesoPes] = Caught;
			}
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Pescados = '%d', Habilidad5 = '%d', RecordPesoPes = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pPescados], InfoPlayer[playerid][pHabilidad][4], InfoPlayer[playerid][pRecordPesoPes], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, string);
		}
		else if(Fishes[playerid][pWeight4] == 0)
		{
			InfoPlayer[playerid][pPescados] += 1;
	        if(InfoPlayer[playerid][pDobleExp] == 0) { InfoPlayer[playerid][pHabilidad][4]++; }
			else {
				InfoPlayer[playerid][pHabilidad][4] += 2;
				SendClientMessage(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight4] = Caught;
			format(string, sizeof string, "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish4], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 4;
			Fishes[playerid][pFid4] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 4;
			if(Caught > InfoPlayer[playerid][pRecordPesoPes])
			{
				format(string, sizeof string, "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", InfoPlayer[playerid][pRecordPesoPes], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				InfoPlayer[playerid][pRecordPesoPes] = Caught;
			}
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Pescados = '%d', Habilidad5 = '%d', RecordPesoPes = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pPescados], InfoPlayer[playerid][pHabilidad][4], InfoPlayer[playerid][pRecordPesoPes], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, string);
		}
		else if(Fishes[playerid][pWeight5] == 0)
		{
			InfoPlayer[playerid][pPescados] += 1;
	        if(InfoPlayer[playerid][pDobleExp] == 0) { InfoPlayer[playerid][pHabilidad][4]++; }
			else {
				InfoPlayer[playerid][pHabilidad][4] += 2;
				SendClientMessage(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight5] = Caught;
			format(string, sizeof string, "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish5], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 5;
			Fishes[playerid][pFid5] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 5;
			if(Caught > InfoPlayer[playerid][pRecordPesoPes])
			{
				format(string, sizeof string, "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", InfoPlayer[playerid][pRecordPesoPes], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				InfoPlayer[playerid][pRecordPesoPes] = Caught;
			}
			mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET Pescados = '%d', Habilidad5 = '%d', RecordPesoPes = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pPescados], InfoPlayer[playerid][pHabilidad][4], InfoPlayer[playerid][pRecordPesoPes], InfoPlayer[playerid][pID]);
			mysql_tquery(DBcreative, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "No tienes espacio para los peces.");
			return 1;
		}
		if(InfoPlayer[playerid][pHabilidad][4] == 50)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 2, ya puedes atrapar peces más grandes."); }
		else if(InfoPlayer[playerid][pHabilidad][4] == 100)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 3, ya puedes atrapar peces más grandes."); }
		else if(InfoPlayer[playerid][pHabilidad][4] == 200)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 4, ya puedes atrapar peces más grandes."); }
		else if(InfoPlayer[playerid][pHabilidad][4] == 400)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 5, ya puedes atrapar peces más grandes."); }
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "No estás en el muelle de Santa María, o en un barco de pesca.");
		return 1;
	}
	return 1;
}

CMD:venderpez(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 991.2456,-1942.9379,2835.0078))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   No estás en la tienda del puerto!");
		return 1;
	}
	new string[128], fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessage(playerid, COLOR_WHITE, "USA: /venderpez [fish]");

	new price;
	if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   ID: 1 al 5!"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }

	switch (fishid)
	{
	case 1:
		{
			if(Fishes[playerid][pWeight1] < 5)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid1]);
			price = price * Fishes[playerid][pWeight1];
			new skill = price / 100;
			new payout = (skill)*(5);
			price += payout;
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof string, "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price, "vender peces (1)");
			ClearFishID(playerid, 1);
		}
	case 2:
		{
			if(Fishes[playerid][pWeight2] < 5)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid2]);
			price = price * Fishes[playerid][pWeight2];
			if(InfoPlayer[playerid][pNivel] > 3)
			{
				new skill = price / 100;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof string, "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price, "vender peces (2)");
			ClearFishID(playerid, 2);
		}
	case 3:
		{
			if(Fishes[playerid][pWeight3] < 5)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid3]);
			price = price * Fishes[playerid][pWeight3];
			if(InfoPlayer[playerid][pNivel] > 5)
			{
				new skill = price / 100;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof string, "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price, "vender peces (3)");
			ClearFishID(playerid, 3);
		}
	case 4:
		{
			if(Fishes[playerid][pWeight4] < 5)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid4]);
			price = price * Fishes[playerid][pWeight4];
			if(InfoPlayer[playerid][pNivel] > 10)
			{
				new skill = price / 100;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof string, "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price, "vender peces (4)");
			ClearFishID(playerid, 4);
		}
	case 5:
		{
			if(Fishes[playerid][pWeight5] < 5)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid5]);
			price = price * Fishes[playerid][pWeight5];
			if(InfoPlayer[playerid][pNivel] > 20)
			{
				new skill = price / 100;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof string, "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price, "vender peces (5)");
			ClearFishID(playerid, 5);
		}
	}
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return 1;
}

CMD:peces(playerid, params[])
{
	new string[128];
	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Peces __________________|");
	format(string, sizeof string, "** (1) Pez: %s.   Peso: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof string, "** (2) Pez: %s.   Peso: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof string, "** (3) Pez: %s.   Peso: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof string, "** (4) Pez: %s.   Peso: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof string, "** (5) Pez: %s.   Peso: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
	SendClientMessage(playerid, COLOR_GREY, string);
	return SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
}

CMD:liberarpez(playerid, params[])
{
	new fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessage(playerid, COLOR_WHITE, "USA: /liberarpez [pez 1-5]");

	if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_WHITE, "USA: /liberarpez [fish 1-5]"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	ClearFishID(playerid, fishid);
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return SendClientMessage(playerid, COLOR_GREY, "Liberaste un pez.");
}

CMD:qfa(playerid, params[])
{
	new playerid2, string[73];
	if (!sscanf(params, "u", playerid2))
	{
		if (CheckAdminCMD(playerid, 1)) return 1;
		if (CheckAdminDuty(playerid)) return 1;
		if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid,COLOR_YELLOW,"El jugador no esta conectado.");
		format(string,sizeof string, "%s fue asesinado por %s.", NombreOriginal(playerid2), QFA[playerid2]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else
	{
		if (player_asesino[playerid] == -1) return SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha asesinado, posible error.");
		format(string,sizeof string, "Fuiste asesinado por %s.", QFA[playerid]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		if (GetPlayerAdmin(playerid, 1) != 0) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /qfa (PlayerID)");
	}
	return 1;
}

//sistema de puertas dinámicas.
CMD:shopdoor(playerid)
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new string[256], query[1028];
	Loop(id, MAX_PUERTAS, 1) if (InfoPuerta[id][pdExteriorX] == 0.0)
	{
		alm(InfoPuerta[id][pdNombre], "Usa /editarpuertanombre (PuertaID) (Nombre)");
		GetPlayerPos(playerid, InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ]);
		GetPlayerFacingAngle(playerid, InfoPuerta[id][pdExteriorR]);
		InfoPuerta[id][pdExteriorVW] = GetPlayerVirtualWorld(playerid);
		InfoPuerta[id][pdExteriorInt] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ]);
		InfoPuerta[id][pdInteriorY] += 2.0;
		GetPlayerFacingAngle(playerid, InfoPuerta[id][pdInteriorR]);
		InfoPuerta[id][pdInteriorVW] = GetPlayerVirtualWorld(playerid);
		InfoPuerta[id][pdInteriorInt] = GetPlayerInterior(playerid);
		CreateDynamicDoor(id, 1);

		format(string, sizeof string, "%s ha creado la puerta id %d.", NombreDeCuenta(playerid), id);
		Log("LOGS/ddedit.log", string);
		format(string, sizeof string, "Creaste la puerta ID %d, configura la misma con /editarpuerta y /editarpuertanombre.", id);
		SendClientMessage(playerid, COLOR_GENERAL, string);

		//opción idsql ya creada.
		if (InfoPuerta[id][pdID_sql] != 0)
		{
			mysql_format(DBcreative, query, sizeof query, "UPDATE puertas SET Nombre = '%e', ExteriorX = '%f', ExteriorY = '%f', ExteriorZ = '%f', ExteriorR = '%f', ExteriorInt = '%d', ExteriorVW = '%d', InteriorX = '%f', InteriorY = '%f', InteriorZ = '%f', InteriorR = '%f', InteriorInt = '%d', InteriorVW = '%d' WHERE ID = '%d'",
			InfoPuerta[id][pdNombre],
			InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ], InfoPuerta[id][pdExteriorR], InfoPuerta[id][pdExteriorInt], InfoPuerta[id][pdExteriorVW],
			InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ], InfoPuerta[id][pdInteriorR], InfoPuerta[id][pdInteriorInt], InfoPuerta[id][pdInteriorVW],
			InfoPuerta[id][pdID_sql]);
			mysql_tquery(DBcreative, query);
			id = MAX_PUERTAS;
			return 1;
		}
		mysql_format(DBcreative, query, sizeof query, "INSERT INTO puertas (Nombre, ExteriorX, ExteriorY, ExteriorZ, ExteriorR, ExteriorInt, ExteriorVW, InteriorX, InteriorY, InteriorZ, InteriorR, InteriorInt, InteriorVW) VALUES ('%e', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d')",
		InfoPuerta[id][pdNombre],
		InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ], InfoPuerta[id][pdExteriorR], InfoPuerta[id][pdExteriorInt], InfoPuerta[id][pdExteriorVW],
		InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ], InfoPuerta[id][pdInteriorR], InfoPuerta[id][pdInteriorInt], InfoPuerta[id][pdInteriorVW]);
		mysql_tquery(DBcreative, query, "OnPuertaCreate", "d", id);
		id = MAX_PUERTAS;
		return 1;
	}
	SendClientMessage(playerid, COLOR_RED, "Se alcanzó el máximo de puertas dinámicas (100)");
	return 1;
}
CMD:crearpuerta(playerid) return cmd_shopdoor(playerid);

forward OnPuertaCreate(id);
public OnPuertaCreate(id)
{
	InfoPuerta[id][pdID_sql] = cache_insert_id();
	cache_unset_active();
	totalpuertas++;
    return 1;
}

GetNameVIP(nivel)
{
	new name_vip[19];
	switch (nivel)
	{
		case 0: alm(name_vip, "Ninguno");
		case 1: alm(name_vip, "Bronce");
		case 2: alm(name_vip, "Plata");
		case 3: alm(name_vip, "Oro");
		case 4: alm(name_vip, "Platino");
		default: alm(name_vip, "desconocido");
	}
	return name_vip;
}

CMD:ddedit(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new id, valor, query[315];
	if (sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta (Opción) (PuertaID)");
		SendClientMessage(playerid, COLOR_GREY, "Opciones: exterior, interior, vip, faccion, admin, vehicle, estrellas, pickup, mapicon, borrar");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]d", params, id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta exterior (PuertaID)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		GetPlayerPos(playerid, InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ]);
		GetPlayerFacingAngle(playerid, InfoPuerta[id][pdExteriorR]);
		InfoPuerta[id][pdExteriorInt] = GetPlayerInterior(playerid);
		InfoPuerta[id][pdExteriorVW] = GetPlayerVirtualWorld(playerid);
		mysql_format(DBcreative, query, sizeof query, "UPDATE puertas SET ExteriorX = '%f', ExteriorY = '%f', ExteriorZ = '%f', ExteriorR = '%f', ExteriorInt = '%d', ExteriorVW = '%d' WHERE ID = '%d'", InfoPuerta[id][pdExteriorX], InfoPuerta[id][pdExteriorY], InfoPuerta[id][pdExteriorZ], InfoPuerta[id][pdExteriorR], InfoPuerta[id][pdExteriorInt], InfoPuerta[id][pdExteriorVW], InfoPuerta[id][pdID_sql]);
		mysql_tquery(DBcreative, query);
		CreateDynamicDoor(id, 1);
		format(query, sizeof query, "Cambiaste el exterior de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado el exterior de la puerta id %d.", NombreDeCuenta(playerid), id);
		Log("LOGS/ddedit.log", query);
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]d", params, id)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta interior (PuertaID)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		GetPlayerPos(playerid, InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ]);
		GetPlayerFacingAngle(playerid, InfoPuerta[id][pdInteriorR]);
		InfoPuerta[id][pdInteriorInt] = GetPlayerInterior(playerid);
		InfoPuerta[id][pdInteriorVW] = GetPlayerVirtualWorld(playerid);
		mysql_format(DBcreative, query, sizeof query, "UPDATE puertas SET InteriorX = '%f', InteriorY = '%f', InteriorZ = '%f', InteriorR = '%f', InteriorInt = '%d', InteriorVW = '%d' WHERE ID = '%d'", InfoPuerta[id][pdInteriorX], InfoPuerta[id][pdInteriorY], InfoPuerta[id][pdInteriorZ], InfoPuerta[id][pdInteriorR], InfoPuerta[id][pdInteriorInt], InfoPuerta[id][pdInteriorVW], InfoPuerta[id][pdID_sql]);
		mysql_tquery(DBcreative, query);
		CreateDynamicDoor(id, 0);
		format(query, sizeof query, "Cambiaste el interior de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado el interior de la puerta id %d.", NombreDeCuenta(playerid), id);
		Log("LOGS/ddedit.log", query);
	}
	else if (!strcmp(params, "vip", true, 3))
	{
		if (sscanf(params, "s[32]dd", params, id, valor)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta vip (PuertaID) (Nivel)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoPuerta[id][pdVIP] = valor;
		guardar_int_mysql("puertas", "VIP", InfoPuerta[id][pdID_sql], InfoPuerta[id][pdVIP]);
		format(query, sizeof query, "Cambiaste el VIP (%s) de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", GetNameVIP(valor), InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado el vip (%s) de la puerta id %d.", NombreDeCuenta(playerid), GetNameVIP(valor), id);
		Log("LOGS/ddedit.log", query);
	}
	else if (!strcmp(params, "faccion", true, 7))
	{
		if (sscanf(params, "s[32]dd", params, id, valor)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta faccion (PuertaID) (FacciónID)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoPuerta[id][pdFaccion] = valor;
		guardar_int_mysql("puertas", "Faccion", InfoPuerta[id][pdID_sql], InfoPuerta[id][pdFaccion]);
		format(query, sizeof query, "Cambiaste la facción (%d) de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", valor, InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado la facción (%d) de la puerta id %d.", NombreDeCuenta(playerid), valor, id);
		Log("LOGS/ddedit.log", query);
	}
	else if (!strcmp(params, "admin", true, 5))
	{
		if (sscanf(params, "s[32]dd", params, id, valor)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta admin (PuertaID) (Rango)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		if (valor < 0 || valor > 6) return SendClientMessage(playerid, COLOR_GRAD2, "Sólo existen 6 rangos administrativos.");
		InfoPuerta[id][pdAdmin] = valor;
		guardar_int_mysql("puertas", "Admin", InfoPuerta[id][pdID_sql], InfoPuerta[id][pdAdmin]);
		format(query, sizeof query, "Cambiaste el admin (%d) de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", valor, InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado el admin (%d) de la puerta id %d.", NombreDeCuenta(playerid), valor, id);
		Log("LOGS/ddedit.log", query);
	}
	else if (!strcmp(params, "estrellas", true, 9))
	{
		if (sscanf(params, "s[32]dd", params, id, valor)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta estrellas (PuertaID) (Nivel de busqueda)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoPuerta[id][pdEstrellas] = valor;
		guardar_int_mysql("puertas", "Estrellas", InfoPuerta[id][pdID_sql], InfoPuerta[id][pdEstrellas]);
		format(query, sizeof query, "Cambiaste el nivel de busqueda (%d) de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", valor, InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado el nivel de busqueda (%d) de la puerta id %d.", NombreDeCuenta(playerid), valor, id);
		Log("LOGS/ddedit.log", query);
	}
	else if (!strcmp(params, "vehicle", true, 7))
	{
		if (sscanf(params, "s[32]dd", params, id, valor)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta vehicle (PuertaID) (1 activado - 0 desactivado)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoPuerta[id][pdStatusVehiculo] = valor;
		guardar_int_mysql("puertas", "StatusVehiculo", InfoPuerta[id][pdID_sql], InfoPuerta[id][pdStatusVehiculo]);
		format(query, sizeof query, "Cambiaste el status vehículo (%d) de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", valor, InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado el status vehículo (%d) de la puerta id %d.", NombreDeCuenta(playerid), valor, id);
		Log("LOGS/ddedit.log", query);
	}
	else if (!strcmp(params, "pickup", true, 6))
	{
		if (sscanf(params, "s[32]dd", params, id, valor)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta pickup (PuertaID) (Monto)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoPuerta[id][pdModelo] = valor;
		guardar_int_mysql("puertas", "Modelo", InfoPuerta[id][pdID_sql], InfoPuerta[id][pdModelo]);
		format(query, sizeof query, "Cambiaste el modelo pickup (%d) de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", valor, InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado el modelo pickup (%d) de la puerta id %d.", NombreDeCuenta(playerid), valor, id);
		Log("LOGS/ddedit.log", query);
		CreateDynamicDoor(id, 0);
	}
	else if (!strcmp(params, "mapicon", true, 7))
	{
		if (sscanf(params, "s[32]dd", params, id, valor)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /editarpuerta mapicon (PuertaID) (ModelID)");
		if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
		if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
		InfoPuerta[id][pdMapIcon] = valor;
		guardar_int_mysql("puertas", "MapIcon", InfoPuerta[id][pdID_sql], InfoPuerta[id][pdMapIcon]);
		format(query, sizeof query, "Cambiaste el mapicon (%d) de la puerta {FFBF00}%s{FFFFFF} (ID: {FFBF00}%d{FFFFFF}).", valor, InfoPuerta[id][pdNombre], id);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
		format(query, sizeof query, "%s ha editado el mapicon (%d) de la puerta id %d.", NombreDeCuenta(playerid), valor, id);
		Log("LOGS/ddedit.log", query);
		CreateDynamicDoor(id, 1);
	}
	else if (!strcmp(params, "borrar", true, 6))
	{
		SendClientMessage(playerid, -1, "Utiliza: /borrarpuerta (PuertaID)");
	}
	return 1;
}
CMD:editarpuerta(playerid, params[]) return cmd_ddedit(playerid, params);

CMD:ddborrar(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new id, string[128], query[2056];
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, -1, "/borrarpuerta [puerta id]");
	if (id < 1 || id >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
	if (InfoPuerta[id][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
	alm(InfoPuerta[id][pdNombre], "none");
	InfoPuerta[id][pdExteriorX] = 0.0;
	InfoPuerta[id][pdExteriorY] = 0.0;
	InfoPuerta[id][pdExteriorZ] = 0.0;
	InfoPuerta[id][pdExteriorR] = 0.0;
	InfoPuerta[id][pdExteriorInt] = 0;
	InfoPuerta[id][pdExteriorVW] = 0;
	InfoPuerta[id][pdInteriorX] = 0.0;
	InfoPuerta[id][pdInteriorY] = 0.0;
	InfoPuerta[id][pdInteriorZ] = 0.0;
	InfoPuerta[id][pdInteriorR] = 0.0;
	InfoPuerta[id][pdInteriorInt] = 0;
	InfoPuerta[id][pdInteriorVW] = 0;
	InfoPuerta[id][pdModelo] = 0;
	InfoPuerta[id][pdMapIcon] = 0;
	InfoPuerta[id][pdFaccion] = 0;
	InfoPuerta[id][pdAdmin] = 0;
	InfoPuerta[id][pdVIP] = 0;
	InfoPuerta[id][pdEstrellas] = 0;
	InfoPuerta[id][pdStatusVehiculo] = 0;
	mysql_format(DBcreative, query, sizeof query, "UPDATE puertas SET Nombre = '%e', ExteriorX = 0.0, ExteriorY = 0.0, ExteriorZ = 0.0, ExteriorR = 0.0, ExteriorInt = 0, ExteriorVW = 0, InteriorX = 0.0,\
	InteriorY = 0.0, InteriorZ = 0.0, InteriorR = 0.0, InteriorInt = 0, InteriorVW = 0, Modelo = 0, MapIcon = 0, Faccion = 0, Admin = 0, VIP = 0, Estrellas = 0, StatusVehiculo = 0 WHERE ID = '%d'", InfoPuerta[id][pdNombre], InfoPuerta[id][pdID_sql]);
	mysql_tquery(DBcreative, query);
	format(string, sizeof string, "Borraste la puerta ID %d, SQL vacía: %d", id, InfoPuerta[id][pdID_sql]);
	SendClientMessage(playerid, -1, string);
	noexitDoor(id);
	return 1;
}
CMD:borrarpuerta(playerid, params[]) return cmd_ddborrar(playerid, params);

CMD:goindoor(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new doornum;
	if (sscanf(params, "d", doornum)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /irpuertainterior (PuertaID)");
	if (doornum < 1 || doornum >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
	if (InfoPuerta[doornum][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
	if (InfoPuerta[doornum][pdInteriorInt] != 0 || InfoPuerta[doornum][pdInteriorVW] != 0) LoadObjects(playerid);
	SetPosEx(playerid, InfoPuerta[doornum][pdInteriorX], InfoPuerta[doornum][pdInteriorY], InfoPuerta[doornum][pdInteriorZ], InfoPuerta[doornum][pdInteriorR], InfoPuerta[doornum][pdInteriorInt], InfoPuerta[doornum][pdInteriorVW], 1);
	return 1;
}
CMD:irpuertainterior(playerid, params[]) return cmd_goindoor(playerid, params);

CMD:gotodoor(playerid, params[])
{
	if (CheckAdminCMD(playerid, 2)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new doornum;
	if (sscanf(params, "d", doornum)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /irpuerta (PuertaID)");
	if (doornum < 1 || doornum >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
	if (InfoPuerta[doornum][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
	if (InfoPuerta[doornum][pdExteriorInt] != 0 || InfoPuerta[doornum][pdExteriorVW] != 0) LoadObjects(playerid);
	SetPosEx(playerid, InfoPuerta[doornum][pdExteriorX], InfoPuerta[doornum][pdExteriorY], InfoPuerta[doornum][pdExteriorZ], InfoPuerta[doornum][pdExteriorR], InfoPuerta[doornum][pdExteriorInt], InfoPuerta[doornum][pdExteriorVW], 1);
	return 1;
}
CMD:irpuerta(playerid, params[]) return cmd_gotodoor(playerid, params);

CMD:ddname(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new query[256], doorid, doorname[128];
	if (sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /editarpuertanombre (PuertaID) (Nombre)");
	if (doorid < 1 || doorid >= totalpuertas) return SendClientMessage(playerid, -1, "ID de puerta inválida.");
	if (InfoPuerta[doorid][pdExteriorX] == 0.0) return SendClientMessage(playerid, -1, "Esa ID está vacía.");
	alm(InfoPuerta[doorid][pdNombre], doorname);
	format(query, sizeof query, "Cambiaste el nombre (%s) de la puerta {FFBF00}%d{FFFFFF}.", doorname, doorid);
	SendClientMessage(playerid, 0xFFFFFFFF, query);
	CreateDynamicDoor(doorid, 0);
	guardar_string_mysql("puertas", "Nombre", InfoPuerta[doorid][pdID_sql], InfoPuerta[doorid][pdNombre]);
	format(query, sizeof query, "%s ha editado el nombre (%s) de la puerta id %d.", NombreDeCuenta(playerid), doorname, doorid);
	Log("LOGS/ddedit.log", query);
	return 1;
}
CMD:editarpnombre(playerid, params[]) return cmd_ddname(playerid, params);
CMD:editarpuertanombre(playerid, params[]) return cmd_ddname(playerid, params);
CMD:editarnombrepuerta(playerid, params[]) return cmd_ddname(playerid, params);

CMD:cambiarclaveusuario(playerid)
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	Dialog_Show(playerid, CambiarClave, DIALOG_STYLE_INPUT, "Cambiar contraseña", "{FFFFFF}Ingresa el Nombre_Apellido de la cuenta que deseas cambiarle la contraseña:", "Continuar", "Salir");
	return 1;
}

new IsChangeName[MAX_PLAYERS][32];
Dialog:CambiarClave(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (verificar_cuenta(inputtext) == 0) return SendClientMessage(playerid, -1, "Esa cuenta no existe.");
	alm(IsChangeName[playerid], inputtext);
	new gformat[256];
	format(gformat, sizeof gformat, "{FFFFFF}Ahora introduce la contraseña que tendrá %s.", inputtext);
	Dialog_Show(playerid, Cambiar2Clave, DIALOG_STYLE_INPUT, "Cambiar contraseña", gformat, "Continuar", "Salir");
	return 1;
}

Dialog:Cambiar2Clave(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new gformat[256];
	if (strlen(inputtext) < 4)
	{
		SendClientMessage(playerid, -1, "Contraseña muy corta, debe contener más de 4 caracteres y menos de 25");
		format(gformat, sizeof gformat, "Ahora introduce la contraseña que tendrá la cuenta %s.", IsChangeName[playerid]);
		Dialog_Show(playerid, Cambiar2Clave, DIALOG_STYLE_INPUT, "Cambiar contraseña", gformat, "Continuar", "Cancelar");
		return 1;
	}
	if (strlen(inputtext) > 25)
	{
		SendClientMessage(playerid, -1, "Contraseña muy larga, debe contener más de 4 caracteres y menos de 25");
		format(gformat, sizeof gformat, "Ahora introduce la contraseña que tendrá la cuenta %s.", IsChangeName[playerid]);
		Dialog_Show(playerid, Cambiar2Clave, DIALOG_STYLE_INPUT, "Cambiar contraseña", gformat, "Continuar", "Cancelar");
		return 1;
	}
	new exSalt[11];
	new exClave[65];
	for (new i = 0; i < 10; i++)
	{
		exSalt[i] = random(79) + 47;
	}
	exSalt[10] = 0;
	SHA256_PassHash(inputtext, exSalt, exClave, 65);
	new query[512];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Clave = '%e', Salt = '%e' WHERE Nombre_Apellido = '%e'", exClave, exSalt, IsChangeName[playerid]);
	mysql_tquery(DBcreative, query);
	format(query, sizeof query, "Le has cambiado la contraseña a %s, (clave: %s)", IsChangeName[playerid], inputtext);
	SendClientMessage(playerid, 0x008800FF, query);
	format(query, sizeof query, "AdmCmd: %s cambió la contraseña de %s.", NombreDeCuenta(playerid), IsChangeName[playerid]);
	Log("LOGS/password.log", query);
	alm(IsChangeName[playerid], "none");
	return 1;
}

CMD:soporte(playerid)
{
	new dialog[3000];
	strcat(dialog, "{58A4EF}COMANDOS FRECUENTES{EBEBEB}: /gps - /cuenta - /coches - /telefono - /panel - /pagar - /inventario - /ceder\n\n");
	strcat(dialog, "{58A4EF}TRABAJOS{EBEBEB}, existen diversos empleos en el servidor, tanto legales como ilegales,\n");
	strcat(dialog, "puedes conseguir uno en la aplicación de empleos de tu teléfono o con el dueño de dicha empresa.\n\n");
	strcat(dialog, "{58A4EF}FACCIONES{EBEBEB}, contamos con un sistema dinámico para la creación de familias o bandas,\n");
	strcat(dialog, "hay posibilidades que hayan facciones oficiales disponibles verifica {FFBF00}/facciones{EBEBEB} y contacta al encargado.\n\n");
	strcat(dialog, "{58A4EF}ADMINISTRACIÓN{EBEBEB}, en estos momentos no estamos en busca de integrantes para la administración,\n");
	strcat(dialog, "cuando necesitemos lo haremos saber en nuestro foro o anuncio programado por el encargado.\n\n");
	strcat(dialog, "{58A4EF}DUDAS & ANTIROL{EBEBEB}, Si notas antirol en el servidor, reporta al individuo desde el comando {FFBF00}/reportar{EBEBEB}.\n");
	strcat(dialog, "Si tienes preguntas sobre el servidor, puedes usar {FFBF00}/duda{EBEBEB} para solicitar ayuda administrativa.\n");
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Dudas frecuentes", dialog, "Cerrar", "");
	return 1;
}

CMD:duda(playerid, params[])
{
	new Texto[128];
	if (JustDuda[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Espera 60 segundos para mandar otra duda.");
	if (AdminOnlineCheck() == 0) return SendClientMessage(playerid, COLOR_WHITE, "No hay {FF0000}administradores online{FFFFFF} en este momento, intenta más tarde.");
	if (sscanf(params, "s[128]", Texto)) return SendClientMessage(playerid, -1, "Utiliza: {FFBF00}/duda{FFFFFF} (texto)");
	new string[322];
	format(string, sizeof string, "{2F99B5}%s(%d){FFFFFF} pregunta: {FF0000}%s", NombreOriginal(playerid), playerid, Texto);
    SendAdminMessage(0xFF0000FF, string);
	format(string, sizeof string, "Tu duda se ha mandado satifactoriamente a %d administrador(es)", AdminOnlineCheck());
	SendClientMessage(playerid,COLOR_WHITE,string);
	JustDuda[playerid] = 60;
	PlayerDuda[playerid] = 1;
	alm(PlayerTextoDuda[playerid], Texto);
	return 1;
}

CMD:dudas(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	new string[320];
	SendClientMessage(playerid, COLOR_GREEN, "DUDAS:");
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(playerid2))
	{
		if (PlayerDuda[playerid2] != 0)
		{
			format(string, sizeof string, "{00A2FF}%s (ID: %d):{FFFFFF} %s", NombreOriginal(playerid2), playerid2, PlayerTextoDuda[playerid2]);
			if (strlen(string) > 0) SendSplitMessage(playerid, 0xFFFFFFFF, string);
		}
	}
	return 1;
}

CMD:aduda(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	new string[320], playerid2, respuesta[200];
	if (sscanf(params, "ds[200]", playerid2, respuesta)) return SendClientMessage(playerid, -1, "Utiliza: /aduda (PlayerID) (Respuesta)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, 0xFF0000FF, "Jugador no conectado.");
	if (PlayerDuda[playerid2] == 0) return SendClientMessage(playerid, 0xFF0000FF, "Este jugador no tiene una duda.");
	format(string, sizeof string, "{2F99B5}%s{EBEBEB} te responde: %s.", NombreOriginal(playerid), respuesta);
	SendSplitMessage(playerid2, 0xEBEBEBFF, string);

	format(string, sizeof string, "Respondes a %s (%d): %s", NombreOriginal(playerid2), playerid2, respuesta);
	SendSplitMessage(playerid,  0xE9BC0AFF, string);

	PlayerDuda[playerid2] = 0;
	alm(PlayerTextoDuda[playerid2], "nada");

	format(string, sizeof string, "{9EC73D}%s{FFFFFF} ha aceptado la duda de %s(%d).", NombreOriginal(playerid), NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:rduda(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	new id, string[185];
	if (sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "Utiliza: /rduda (PlayerID)");
	if (!IsPlayerConnectedEx(id)) return SendClientMessage(playerid, 0xFF0000FF, "Jugador no conectado.");
	if (PlayerDuda[id] == 0) return SendClientMessage(playerid, 0xFF0000FF, "Este jugador no tiene una duda.");

	format(string, sizeof string, "{2F99B5}%s{FFFFFF} ha {FF0000}rechazado{FFFFFF} su duda.",NombreOriginal(playerid));
	SendClientMessage(id, -1, string);
	format(string, sizeof string, "Le recomendamos que use el comando /soporte, posiblemente la respuesta de su pregunta esté ahí.");
	SendClientMessage(id, -1, string);

	format(string, sizeof string, "{2F99B5}%s{FFFFFF} ha rechazado la duda de %s(%d).", NombreOriginal(playerid), NombreOriginal(id), id);
	SendAdminMessage(0xFFFFFFFF, string);
	PlayerDuda[id] = 0;
	alm(PlayerTextoDuda[id], "nada");
	return 1;
}

CMD:smstodos(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[240];
	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /smstodos (texto)");
	format(string, sizeof string, "SMS: %s, Destinatario: desconocido.", params);
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2)) { SendSplitMessage(playerid2, COLOR_YELLOW, string); }
 	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) usó el comando /smstodos.", NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	return 1;
}

CMD:showsound(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new sound;
    if (sscanf(params, "d", sound)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /showsound (ID)");
    PlayerPlaySound(playerid, sound, 0,0,0);
    return 1;
}

CMD:expdoble(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[250], playerid2, hours, invoice[64];
	if (sscanf(params, "uds[64]", playerid2, hours, invoice)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /expdoble (playerid) (Horas) (Detalles)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	format(string, sizeof string, " %s te dio %d horas de doble experiencia, cada payday recibirás doble EXP y en trabajos también.", NombreOriginal(playerid), hours);
	SendClientMessage(playerid2,COLOR_YELLOW,string);
	format(string, sizeof string, " Estableciste su experiencia doble a %d horas a %s.", hours,NombreOriginal(playerid2));
	SendClientMessage(playerid,COLOR_YELLOW,string);
	InfoPlayer[playerid2][pDobleExp] += hours;
	guardar_int_mysql("cuentas", "DobleExp", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pDobleExp]);
	format(string, sizeof string, "[SHOP ExpDoble] %s dió %d horas a %s - Pagó fue de %s", NombreDeCuenta(playerid), hours,NombreDeCuenta(playerid2), invoice);
	Log("LOGS/shoplog.log", string);
	return 1;
}

CMD:vendercoinsvip(playerid, params[]){
	new string[128], playerid2, amount, price;
	if(sscanf(params, "ddd", playerid2, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /vendercoinsvip (playerid) (Monto) (Precio)");
	if(amount < 1 || amount > 99999999) { SendClientMessage(playerid, COLOR_WHITE, "* Los valores no pueden ser mayores a 99999999 gramos ni menores a 1."); return 1; }
	if(price < 1) { SendClientMessage(playerid, COLOR_WHITE, "El precio no puede ser menor que 1."); return 1; }
	if(IsPlayerConnected(playerid)){
		if(IsPlayerConnected(playerid2)){
			if(CercaDelMarica(8.0, playerid, playerid2)){
				if(playerid2 == playerid) return SendClientMessage(playerid, COLOR_GREY, "No puedes venderte a ti mismo.");
				format(string, sizeof string, "* Has ofrecido a %s, %d coins VIP por $%d.", NombreOriginal(playerid2), amount, price);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof string, "* %s quiere venderte %d coins VIP por $%d, (Usa: /aceptar coinsvip para comprar).", NombreOriginal(playerid), amount, price);
				SendClientMessage(playerid2, COLOR_LIGHTBLUE, string);
				FOffer[playerid2] = playerid;
				FPrice[playerid2] = price;
				return FAmount[playerid2] = amount;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "ID Inválida.");
	return 1;
}

CMD:viplocker(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 798.4911,-1416.1251,1016.4688)) return SendClientMessage(playerid, COLOR_GRAD2, "No estás cerca del {FFFF00}X{FFFFFF} locker!");
	switch(InfoPlayer[playerid][pVIP])
	{
		case 1: Dialog_Show(playerid, ShowLockerVIP, DIALOG_STYLE_LIST, "{FFBF00}VIP Locker", "Botiquín HP\nArmadura ($9,000)", "Continuar", "Salir");
		case 2: Dialog_Show(playerid, ShowLockerVIP, DIALOG_STYLE_LIST, "{FFBF00}VIP Locker", "Botiquín HP\nArmadura ($9,000)\nSkins exclusivos", "Continuar", "Salir");
		case 3,4: Dialog_Show(playerid, ShowLockerVIP, DIALOG_STYLE_LIST, "{FFBF00}VIP Locker", "Botiquín HP\nArmadura\nSkins exclusivos\nArmas", "Continuar", "Salir");
		default: SendClientMessage(playerid, COLOR_WHITE, "Lo sentimos, no hay nada dentro del Locker. Alguien se lo habrá llevado todo.");
	}
	return 1;
}

Dialog:ShowLockerVIP(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoPlayer[playerid][pVida] >= 99.0) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes la vida al tope.");
			dar_vida(playerid, 100);
			SendClientMessage(playerid, COLOR_YELLOW, "[VIP]:{FFFFFF} Usaste el Botiquín HP, ahora tienes 100 de vida.");
		}
		case 1:
		{
			if (InfoPlayer[playerid][pChaleco] >= 90.0) return SendClientMessage(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Ya tienes la armadura al tope.");
			if (InfoPlayer[playerid][pVIP] == 1 || InfoPlayer[playerid][pVIP] == 1)
			{
				if (GetPlayerCash(playerid) < 9000) return SendClientMessage(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $9,000!");
				GivePlayerCash(playerid, -9000, "chaleco (vip)");
				dar_chaleco(playerid, 100);
				SendClientMessage(playerid, COLOR_YELLOW, "[VIP]:{FFFFFF} Pagaste $9,000 por 100 de chaleco.");
				return 1;
			}
			dar_chaleco(playerid, 100);
		}
		case 2:
		{
			new SkinMuestra[150], count = 0;
			Loop(x, sizeof InfoSkin, 0) if (InfoSkin[x][sTipo] == 6)
			{
				SkinMuestra[count] = x;
				count++;
			}
			ShowModelSelectionMenuEx(playerid, SkinMuestra, count, "Skins exclusivos", VIP_Skin, -11.0, 0.0, -55.0, 1.0);
		}
		case 3:
		{
			if (InfoPlayer[playerid][pHorasOn] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Actualmente tienes restricción de armas!");
			Dialog_Show(playerid, VIPweapons, DIALOG_STYLE_LIST, "{FFBF00}Armas VIP", "9 milimetros\nMicro Uzi", "Continuar", "Salir");
		}
	}
	return 1;
}

Dialog:VIPweapons(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: { if (PlayerWeapon(playerid, 22) == 0) return 1; }
		case 1: { if (PlayerWeapon(playerid, 28) == 0) return 1; }
	}
	return 1;
}

CMD:cinturon(playerid, params[]){
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estás en un vehiculo.");
	new string[50 + MAX_PLAYER_NAME];
    if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 0){
        Seatbelt[playerid] = 1;
        if(IsABike(GetPlayerVehicleID(playerid))){format(string, sizeof string, "* %s agarra su casco, y se lo pone.", NombreJugador(playerid));}
        else { format(string, sizeof string, "* %s pone las manos en su cinturón y se lo pone.", NombreJugador(playerid)); }
    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 1){
        Seatbelt[playerid] = 0;
        if(IsABike(GetPlayerVehicleID(playerid))){format(string, sizeof string, "* %s pone las manos en su casco, y se lo quita.", NombreJugador(playerid));}
        else { format(string, sizeof string, "* %s pone las manos en su cinturón y se lo quita.", NombreJugador(playerid)); }
    }
    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    return 1;
}

CMD:vercinturon(playerid, params[]){
	new playerid2;
	if(sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /vercinturon (Jugador)");
    if(GetPlayerState(playerid2) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid,COLOR_GREY,"Ese jugador no está en un vehiculo!");
    if (CercaDelMarica(9.0, playerid, playerid2)){
		new string[128];
        new stext[4];
        if(Seatbelt[playerid2] == 0) { stext = "sin"; }
        else { stext = "con"; }
        if(IsABike(GetPlayerVehicleID(playerid))){
            format(string, sizeof string, "%s está %s casco." , NombreJugador(playerid2) , stext);
            SendClientMessage(playerid,COLOR_WHITE,string);

            format(string, sizeof string, "* %s mira a %s, mirando si tiene puesto su casco.", NombreJugador(playerid),NombreJugador(playerid2));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else{
            format(string, sizeof string, "%s está %s cinturón." , NombreJugador(playerid2) , stext);
            SendClientMessage(playerid,COLOR_WHITE,string);

            format(string, sizeof string, "* %s observa a travez de la ventana de %s, mirando si usa el cinturón.", NombreJugador(playerid),NombreJugador(playerid2));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
    }
    else { SendClientMessage(playerid, COLOR_WHITE, "No estás cerca de ese jugador!"); }
    return 1;
}

CMD:darpremium(playerid, params[])
{
	if (CheckAdminCMD(playerid, 10)) return 1;
	new string[280], playerid2, level;
	if (sscanf(params, "dd", playerid2, level))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darvip (PlayerID) (Nivel)");
		SendClientMessage(playerid, COLOR_GRAD3, "0= Ninguno, 1= Bronce, 2= Plata, 3= Oro.");
		return 1;
	}
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, -1, "Jugador no conectado.");
	if (level < 0 || level > 3) return SendClientMessage(playerid, COLOR_GENERAL, "[!]{ffffff}Del 1 al 3.");
	new year, month, day;
	getdate(year, month, day);
	InfoPlayer[playerid2][pVIP] = level;
	if (month == 12) InfoPlayer[playerid2][pMesVIP] = 1;
	else
	{
		new total;
		total = month + 1;
		InfoPlayer[playerid2][pMesVIP] = total;
	}
	InfoPlayer[playerid2][pDiaVIP] = day;
	if (level == 0)
	{
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) removido los beneficios VIP a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s(%d) ha removido tus beneficios VIP.", NombreOriginal(playerid), playerid);
		SendClientMessage(playerid2, 0xEBEBEBFF, string);
		InfoPlayer[playerid2][pDiaVIP] = -1;
		InfoPlayer[playerid2][pMesVIP] = -1;
		format(string, sizeof string, "%s removió los beneficios VIP a %s.", NombreDeCuenta(playerid), NombreDeCuenta(playerid2));
		Log("LOGS/setvip.log", string);
	}
	else
	{
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha otorgado benecicios VIP %s a %s(%d).", NombreOriginal(playerid), playerid, GetNameVIP(level), NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "%s(%d) te ha otorgado beneficios VIP %s.", NombreOriginal(playerid), playerid, GetNameVIP(level));
		SendClientMessage(playerid2, COLOR_WHITE, string);
		format(string, sizeof string, "%s otorgó beneficios VIP %s a %s.", NombreDeCuenta(playerid), GetNameVIP(level), NombreDeCuenta(playerid2));
		Log("LOGS/setvip.log", string);
	}
	new query[512];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET VIP = '%d', MesVIP = '%d', DiaVIP = '%d' WHERE ID = '%d'", InfoPlayer[playerid2][pVIP], InfoPlayer[playerid2][pMesVIP], InfoPlayer[playerid2][pDiaVIP], InfoPlayer[playerid2][pID]);
	mysql_tquery(DBcreative, query);
	return 1;
}
CMD:setvip(playerid, params[]) return cmd_darpremium(playerid, params);
CMD:darvip(playerid, params[]) return cmd_darpremium(playerid, params);

CMD:vip(playerid, params[])
{
	if(InfoPlayer[playerid][pVIP] > 0 || GetPlayerAdmin(playerid, 1) != 0)
	{
		if (InfoPlayer[playerid][pTogVIP] == 0) return SendClientMessage(playerid, COLOR_GREY, "Tienes el canal deshabilitado, /togvip para re-habilitarlo.");
		new string[320];
		if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /vip (Texto)");
		if (VIPTimer[playerid] > 0)
		{
			format(string, sizeof string, "Debes esperar %d segundos para hablar de nuevo por este canal.", VIPTimer[playerid]);
			SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
		}
		if (GetPlayerAdmin(playerid, 1) != 0) format(string, sizeof string, "** [%s] %s: %s", GetAdminName(playerid), NombreOriginal(playerid), params);
		switch(InfoPlayer[playerid][pVIP])
		{
		    case 1:
			{
				format(string, sizeof string, "** Bronce VIP %s: %s", NombreOriginal(playerid), params);
				VIPTimer[playerid] = 12;
			}
			case 2:
			{
				format(string, sizeof string, "** Silver VIP %s: %s", NombreOriginal(playerid), params);
				VIPTimer[playerid] = 7;
			}
			case 3:
			{
				format(string, sizeof string, "** Gold VIP %s: %s", NombreOriginal(playerid), params);
				VIPTimer[playerid] = 4;
			}
		}
		SendVIPMessage(COLOR_VIP, string);
		Log("LOGS/vipchat.log", string);
	}
	return 1;
}

CMD:regaloatodos(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (GiftAllowed)
	{
		new string[210];
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) usó /regaloatodos.", NombreOriginal(playerid), playerid);
		SendAdminMessage(0xFFFFFFFF, string);
		format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) ha enviado regalos a todos los usuarios!", NombreOriginal(playerid), playerid);
		SendAllMessage(0xFFFFFFFF, string);
		GiftAllowed = 0;
		foreach(Player, i) if (IsPlayerConnectedEx(i))
		{
			GiftPlayer(i);
			InfoPlayer[i][pTiempoRegalo] = 3600;
			guardar_int_mysql("cuentas", "TiempoRegalo", InfoPlayer[i][pID], 3600);
		}
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Este comando ya fue usado, puedes usarlo en el próximo payday.");
	return 1;
}

CMD:horaregalo(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	new string[170], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /horaregalo (playerid)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no está conectado.");
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) reseteó el tiempo de regalo a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	InfoPlayer[playerid2][pTiempoRegalo] = 0;
	guardar_int_mysql("cuentas", "TiempoRegalo", InfoPlayer[playerid2][pID], 0);
	return 1;
}

CMD:spawncasa(playerid)
{
	if (InfoPlayer[playerid][pVIP] < 2) return SendClientMessage( playerid, COLOR_WHITE, "No eres VIP oro o platino." );
	new casa = 0;
	if (InfoPlayer[playerid][pCasa1] != -1) casa = 1;
	if (InfoPlayer[playerid][pCasa2] != -1) casa = 1;
	if (casa == 0) return SendClientMessage( playerid, COLOR_WHITE, "No eres dueño de una casa." );
	if (InfoPlayer[playerid][pTipoSpawn] == 0)
	{
		InfoPlayer[playerid][pTipoSpawn] = 1;
		SendClientMessage( playerid, COLOR_YELLOW, "Ahora aparecerás en tu casa cuando mueras." );
	}
	else
	{
		InfoPlayer[playerid][pTipoSpawn] = 0;
		SendClientMessage( playerid, COLOR_YELLOW, "Ahora aparecerás en el hospital cuando mueras." );
	}
	guardar_int_mysql("cuentas", "TipoSpawn", InfoPlayer[playerid][pID], InfoPlayer[playerid][pTipoSpawn]);
    return 1;
}

CMD:automensaje(playerid, params[])
{
	if(InfoPlayer[playerid][pVIP] == 0) return SendClientMessage(playerid, COLOR_GREY, "No eres {FFFF00}VIP{FFFFFF}.");
	if(isnull(params)) return SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /automensaje [texto]");
	new string[256];
	if(strlen(params) >= 1 && strlen(params) < 127)
	{
		alm(InfoPlayer[playerid][pAutoRespuestaSMS], params);
		format(string, sizeof string, "Cambiaste el auto mensaje de respuesta: %s", params);
		SendClientMessage(playerid, COLOR_WHITE, string);
		guardar_string_mysql("cuentas", "AutoRespuestaSMS", InfoPlayer[playerid][pID], InfoPlayer[playerid][pAutoRespuestaSMS]);
	}
	else SendClientMessage(playerid, COLOR_GREY, "Tu automensaje no puede tener más de 128 letras ni menos de 1.");
	return 1;
}

CMD:repararpremium(playerid)
{
	if (InfoPlayer[playerid][pVIP] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Necesitas ser premium");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "Debes de ser el conductor de un vehículo.");
	new engine, string[185], vehicleid = GetPlayerVehicleID(playerid);
	if(engine == VEHICLE_PARAMS_ON) return SendClientMessage(playerid, COLOR_WHITE, "Debes de tener el motor apagado. ({5ABAFF}pulsa [N]{FFFFFF}).");
	RepairVehicle(vehicleid);
	if (GetVehicleModel(vehicleid) == 528 || GetVehicleModel(vehicleid) == 427) SetVehicleHealth(vehicleid, 5000.0);
	else SetVehicleHealth(vehicleid, 1000.0);
	format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) usuario VIP %s usó /repararpremium.", NombreOriginal(playerid), playerid, GetNameVIP(InfoPlayer[playerid][pVIP]));
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[VIP] %s(%d) reparó el vehículo que maneja.", NombreOriginal(playerid), playerid);
	ProxDetector(20.0, playerid, string, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF,0xB6DB22FF, 0xB6DB22FF);
	return 1;
}

CMD:skinpremium(playerid, params[])
{
	if (InfoPlayer[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GENERAL, "[ERROR]:{FFFFFF} Necesitas al menos VIP Silver.");
	new skin, string[185];
	if (sscanf(params, "d", skin)) return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /skinpremium <ID>");
	if (IsValidSkin(skin) == 0) return SendClientMessage(playerid, COLOR_GREY, "Debes de escoger una id de skin entre 1 y 311.");
	GivePlayerSkin(playerid, skin);
	format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) usuario VIP %s usó /skinpremium %d.", NombreOriginal(playerid), playerid, GetNameVIP(InfoPlayer[playerid][pVIP]), skin);
	SendAdminMessage(0xFFFFFFFF, string);
	format(string, sizeof string, "[VIP] %s(%d) se cambió de skin %d.", NombreOriginal(playerid), playerid, skin);
	ProxDetector(20.0, playerid, string, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF,0xB6DB22FF, 0xB6DB22FF);
	return 1;
}

CMD:banear(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	if (!CheckTimer(60, TimerCban[playerid]))
	{
		new string[250], playerid2, reason[64];
		if (sscanf(params, "ds[64]", playerid2, reason)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /banear (PlayerID) (Razón)");
		if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
		if (GetPlayerAdmin(playerid2, 10) != 0)
		{
			format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó banear a %s(%d), por ello fue baneado.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
			SendAdminMessage(0xFFFFFFFF, string);
			guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid][pID], 2);
			Kick(playerid);
			return 1;
		}
		if (GetPlayerAdmin(playerid, 10) == 0)
		{
			if (InfoPlayer[playerid2][pAdmin] > InfoPlayer[playerid][pAdmin])
			{
				format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó banear a %s(%d) superior a él, por ello fue baneado.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
				SendAdminMessage(0xFFFFFFFF, string);
				guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid][pID], 2);
				Kick(playerid);
				return 1;
			}
		}
		format(string, sizeof string, "AdmCmd: %s fue baneado por %s, razón: %s", NombreOriginal(playerid2), NombreOriginal(playerid), reason);
		Log("LOGS/ban.log", string);
		format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) baneó a %s(%d). Razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
		SendAllMessage(0xFFFFFFFF, string);
		SetTimerEx("TimerKICK",500, false, "d", playerid2);
		guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid2][pID], 2);
		//seguridad 24/02/2020
		CountBan[playerid]++;
		if (CountBan[playerid] == 5)
		{
			TimerCban[playerid] = gettime();
			CountBan[playerid] = 0;
		}
	}
	else
	{
		new string[240];
		format(string, sizeof string, "Debes esperar %d segundos para usar este comando.", CheckTimer(60, TimerCban[playerid]));
		SendClientMessage(playerid, 0xEBEBEBFF, string);
	}
	return 1;
}

CMD:banip(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	if (!CheckTimer(60, TimerCban[playerid]))
	{
		new string[180], playerid2, reason[64];
		if (sscanf(params, "ds[64]", playerid2, reason)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /banip (PlayerID) (Razón)");
		if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
		if (GetPlayerAdmin(playerid2, 10) != 0)
		{
			format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó banear a %s(%d), por ello fue baneado.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
			SendAdminMessage(0xFFFFFFFF, string);
			guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid][pID], 2);
			Kick(playerid);
			return 1;
		}
		if (GetPlayerAdmin(playerid, 10) == 0)
		{
			if (InfoPlayer[playerid2][pAdmin] > InfoPlayer[playerid][pAdmin])
			{
				format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó banear a %s(%d) superior a él, por ello fue baneado.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
				SendAdminMessage(0xFFFFFFFF, string);
				guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid][pID], 2);
				Kick(playerid);
				return 1;
			}
		}
		format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) baneó con IP a %s(%d). Razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
		SendAllMessage(0xFFFFFFFF, string);
		SetTimerEx("TimerBANIP",1000,false,"d",playerid2);
		guardar_int_mysql("cuentas", "OtakuN_N", InfoPlayer[playerid2][pID], 2);
		//seguridad 24/02/2020
		CountBan[playerid]++;
		if (CountBan[playerid] == 5)
		{
			TimerCban[playerid] = gettime();
			CountBan[playerid] = 0;
		}
	}
	else
	{
		new string[240];
		format(string, sizeof string, "Debes esperar %d segundos para usar este comando.", CheckTimer(60, TimerCban[playerid]));
		SendClientMessage(playerid, 0xEBEBEBFF, string);
	}
	return 1;
}

CMD:kick(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (!CheckTimer(60, TimerCkick[playerid]))
	{
		new string[190], playerid2, reason[64];
		if (sscanf(params, "ds[64]", playerid2, reason)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /kick (PlayerID) (Razón)");
		if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
		if (GetPlayerAdmin(playerid2, 10) != 0)
		{
			format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó kickear a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
			SendAdminMessage(0xFFFFFFFF, string);
			return 1;
		}
		if (GetPlayerAdmin(playerid, 10) == 0)
		{
			if (InfoPlayer[playerid2][pAdmin] > InfoPlayer[playerid][pAdmin])
			{
				format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó kickear a %s(%d) superior a él.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
				SendAdminMessage(0xFFFFFFFF, string);
				return 1;
			}
		}
		format(string, sizeof string, "%s fue expulsado por %s. Razón: %s", NombreDeCuenta(playerid2), NombreDeCuenta(playerid), reason);
		Log("LOGS/kick.log", string);
		format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) expulsó del servidor a %s(%d). Razón: %s", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2, reason);
		SendAllMessage(0xFFFFFFFF, string);
		SetTimerEx("TimerKICK",500,false,"d",playerid2);
		//seguridad 24/02/2020
		CountKick[playerid]++;
		if (CountKick[playerid] == 5)
		{
			TimerCkick[playerid] = gettime();
			CountKick[playerid] = 0;
		}
	}
	else
	{
		new string[240];
		format(string, sizeof string, "Debes esperar %d segundos para usar este comando.", CheckTimer(60, TimerCkick[playerid]));
		SendClientMessage(playerid, 0xEBEBEBFF, string);
	}
	return 1;
}

CMD:kickname(playerid, params[])
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	if (!CheckTimer(60, TimerCkick[playerid]))
	{
		new string[180], playerid2;
		if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /kickname (PlayerID)");
		if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
		if (GetPlayerAdmin(playerid2, 10) != 0)
		{
			format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó kickear a %s(%d).", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
			SendAdminMessage(0xFFFFFFFF, string);
			return 1;
		}
		if (GetPlayerAdmin(playerid, 10) == 0)
		{
			if (InfoPlayer[playerid2][pAdmin] > InfoPlayer[playerid][pAdmin])
			{
				format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) intentó kickear a %s(%d) superior a él.", NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
				SendAdminMessage(0xFFFFFFFF, string);
				return 1;
			}
		}
		format(string, sizeof string, "%s fue expulsado por %s. Razón: Nombre inapropiado", NombreDeCuenta(playerid2), NombreDeCuenta(playerid));
		Log("LOGS/kick.log", string);
		SendClientMessage(playerid2, COLOR_GREEN,"Has sido expulsado por el servidor ya que tu cuenta no cumple las normas de la comunidad.");
		SendClientMessage(playerid2, COLOR_WHITE,"No se permite nombre de famosos, nicks trolls, inadecuados, que no son Role Play o que falten el respeto.");
		SendClientMessage(playerid2, COLOR_WHITE,"Recuerda poner las iniciales en mayúscula usado un nombre real, formato Nombre_Apellido.");
		format(string, sizeof string, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) fue expulsado del servidor por %s(%d). Razón: Nombre inapropiado", NombreOriginal(playerid2), playerid2, NombreOriginal(playerid), playerid);
		SendAdminMessage(0xFFFFFFFF, string);
		SetTimerEx("TimerKICK",500,false,"d",playerid2);
		//seguridad 24/02/2020
		CountKick[playerid]++;
		if (CountKick[playerid] == 5)
		{
			TimerCkick[playerid] = gettime();
			CountKick[playerid] = 0;
		}
	}
	else
	{
		new string[240];
		format(string, sizeof string, "Debes esperar %d segundos para usar este comando.", CheckTimer(60, TimerCkick[playerid]));
		SendClientMessage(playerid, 0xEBEBEBFF, string);
	}
	return 1;
}

CMD:verregalo(playerid, params[])
{
	if (CheckAdminCMD(playerid, 3)) return 1;
	new string[180], playerid2;
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /verregalo (PlayerID)");
	new rtxt[43];
	if (InfoPlayer[playerid2][pRegalo] >= 0)
	{
		switch (InfoPlayer[playerid2][pRegalo])
		{
			case 0:rtxt="5 USD Shop";
			case 1:rtxt="Laser Toy";
			case 2:rtxt="10 USD Shop";
			case 3:rtxt="Police Vest";
			case 4:rtxt="Custom Product";
			case 5:rtxt="SVIP 1 Mes";
			case 6:rtxt="Auto Custom";
			case 7:rtxt="BVIP 1 Mes";
			case 8:rtxt="Casa";
		}
		format(string, sizeof string, "* %s(%d) Premio: %s.",NombreOriginal(playerid2),playerid2,rtxt);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "No tiene ningún premio.");
	return 1;
}

CMD:limpiarregalo(playerid, params[])
{
	if (CheckAdminCMD(playerid, 4)) return 1;
	new playerid2, string[180];
	if (sscanf(params, "d", playerid2)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /limpiarregalo (PlayerID)");
	if (!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Esa ID es inválida.");
	if (InfoPlayer[playerid2][pRegalo] >= 0)
	{
		InfoPlayer[playerid2][pRegalo] = -1;
		guardar_int_mysql("cuentas", "Regalo", InfoPlayer[playerid2][pID], -1);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) ha limpiado los regalos de %s(%d).",NombreOriginal(playerid), playerid, NombreOriginal(playerid2), playerid2);
		SendAdminMessage(0xFFFFFFFF, string);
	}
	else
	{
		format(string, sizeof string, "%s no ha recibído premios últimamente activos.", NombreOriginal(playerid2));
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:forzarpayday(playerid, params[])
{
	if (CheckAdminCMD(playerid, 5)) return 1;
	new string[180];
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) adelantó el PayDay.", NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	PayDay();
	return 1;
}

CMD:forzarpayday2(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new string[180];
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) adelantó el PayDay de negocios.", NombreOriginal(playerid), playerid);
	SendAdminMessage(0xFFFFFFFF, string);
	PayDay2();
	return 1;
}

CMD:peaje(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid,15.0,66.34, -1537.61, 4.94))
	{
		if (GetPlayerCash(playerid) > 50)
		{
			MoveDynamicObject(peaje2,67.8501, -1545.8888, 0.7158, 2.0);
			SetTimer("GateClosepeaje2", 7000, 0);
			GivePlayerCash(playerid,-50, "peaje");
			GameTextForPlayer(playerid,"~w~Creative Roleplay ~g~Te da la bienvenida a los Santos",3000,5);
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			return 1;
		}
		SendClientMessage(playerid,COLOR_WHITE,"No tienes suficiente dinero.");
	}
	else if (IsPlayerInRangeOfPoint(playerid,15.0,37.75, -1525.50, 4.94))
	{
		if (GetPlayerCash(playerid) > 50)
		{
			MoveDynamicObject(peaje1,35.2573, -1516.9640, 0.9605, 2.0);
			SetTimer("GateClosepeaje1", 7000, 0);
			GivePlayerCash(playerid,-50, "peaje");
			GameTextForPlayer(playerid,"~w~Creative Roleplay ~g~Te da la bienvenida a San Fierro",3000,5);
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			return 1;
		}
		SendClientMessage(playerid,COLOR_WHITE,"No tienes suficiente dinero");
	}
	return 1;
}

CMD:darcoinsvip(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new playerid2, coinsvip, string[256];
	if (sscanf(params, "dd", playerid2, coinsvip)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /darcoins (PlayerID) (Cantidad)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador no conectado.");
	InfoPlayer[playerid2][pCoinsVIP] += coinsvip;
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) dió %d coinsVIP a %s(%d).", NombreOriginal(playerid), playerid, coinsvip, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	guardar_int_mysql("cuentas", "CoinsVIP", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pCoinsVIP]);
	return 1;
}

CMD:quitarcoinsvip(playerid, params[])
{
	if (CheckAdminCMD(playerid, 6)) return 1;
	new playerid2, coinsvip, string[256];
	if (sscanf(params, "dd", playerid2, coinsvip)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /quitarcoinsvip (PlayerID) (Cantidad)");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, COLOR_WHITE, "Jugador no conectado.");
	InfoPlayer[playerid2][pCoinsVIP] -= coinsvip;
	format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) quitó %d coinsVIP a %s(%d).", NombreOriginal(playerid), playerid, coinsvip, NombreOriginal(playerid2), playerid2);
	SendAdminMessage(0xFFFFFFFF, string);
	guardar_int_mysql("cuentas", "CoinsVIP", InfoPlayer[playerid2][pID], InfoPlayer[playerid2][pCoinsVIP]);
	return 1;
}

CMD:qfaccoff(playerid, params[])
{
	if (InfoPlayer[playerid][pEncFac] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No autorizado");
	new string[256];
	if (isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "Utiliza: /qfaccoff (Nombre_Apellido)");
	if (verificar_cuenta(params))
	{
		mysql_format(DBcreative, string, sizeof string, "UPDATE cuentas SET LiderFaccion = 0, MiembroFaccion = 0, Rango = 0 WHERE Nombre_Apellido = '%e'", params);
		mysql_tquery(DBcreative, string);
		format(string, sizeof string, "{FFBF00}[AdmCmd]{FFFFFF} %s(%d) sacó variables de facción %s. (OFFLINE)", NombreOriginal(playerid), playerid, params);
		SendAdminMessage(0xFFFFFFFF, string);
		Log("LOGS/admin.log", string);
		return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD1, "Esa cuenta no existe");
	return 1;
}
CMD:quitarfaccionoff(playerid, params[]) return cmd_qfaccoff(playerid, params);

CMD:creditos(playerid)
{
	SendClientMessage(playerid, 0xFFBF00FF, "Créditos originales");
	SendClientMessage(playerid, -1, "Propietario: {FF2F2F}Pablo Prieto{FFFFFF} | Programador: {FF2F2F}Elias Moss");
	SendClientMessage(playerid, -1, "Bases del gamemode: {FF2F2F}The GodFather Roleplay{FFFFFF},{FF2F2F} ZenonCity Roleplay{FFFFFF},{FF2F2F} NS:RP & AC:RP");
	return 1;
}

CMD:macros(playerid) //macros
{
	SendClientMessage(playerid, COLOR_WHITE, "{A2DC35}[Macros]:{FFFFFF} /choque, /rolarma, /ak, /m4" );
	return 1;
}

CMD:animaciones(playerid)
{
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	SendClientMessage(playerid,COLOR_WHITE,"Animaciones:");
	SendClientMessage(playerid,COLOR_WHITE,"/poli /rendirse /sentarse /sinaliento /asiento /bailar /rap /cruzar /ped /jiggy /rap /paja /depie");
	SendClientMessage(playerid,COLOR_WHITE,"/gesto /fumando /sexo /orinar /chora /relax /crabs /saludo[2] /stop /lavarse /llorar /apoyarse /dedo");
	SendClientMessage(playerid,COLOR_WHITE,"/sigueme /saludo /quieto /enganche /palmaputa /cpr /darregalo /palmada /borracho /correr");
	SendClientMessage(playerid,COLOR_WHITE,"/arobar /reir /lookout /amenazar /esconder /vomitar /comer /crack /jodete /taichi /beso /mecanico");
	SendClientMessage(playerid,COLOR_WHITE,"/agredido /herido /dormir /rodar /fokear /agonizar /hablando /animar /gritar /apuntar");
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	return 1;
}
CMD:acciones(playerid) return cmd_animaciones(playerid);

CMD:revisarcasa(playerid)
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (InfoPlayer[playerid][pRango] < 2) return SendClientMessage(playerid, COLOR_GREY, "[AVISO] Sólo agentes con rango 2 o mayor podrán usar este comando.");
	new h = -1;
	Loop(casa, totalcasas, 1) if (IsPlayerInRangeOfPoint(playerid, 30.0, InfoCasa[casa][cInteriorX], InfoCasa[casa][cInteriorY], InfoCasa[casa][cInteriorZ]) && InfoPlayer[playerid][pInterior] == InfoCasa[casa][cInteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoCasa[casa][cInteriorVW])
	{
		h = casa;
		break;
	}
	if (h == -1) return SendClientMessage(playerid, COLOR_GREY, "No estás en el interior de ninguna casa.");
	cmd_me(playerid, "comienza a revisar cada espacio de la casa y obtiene información");
	new string[265], count = 0;
	format(string, sizeof string, "[Información conocida] Casa comprada por %s, valorada en %s dólares.", InfoCasa[h][cPropietario], diner_coma(InfoCasa[h][cPrecio]));
	SendClientMessage(playerid, COLOR_GREEN, string);
	SendClientMessage(playerid, COLOR_RED, "Usted ha revisado la casa, esto es lo que ha encontrado:");
	if (InfoCasa[h][cMateriales] >= 1) // Materiales.
	{
		format(string, sizeof string, "[MATERIALES]{FAAC58} Se han encontrado materiales en la casa, la cantidad total es de %d.", InfoCasa[h][cMateriales]);
		SendClientMessage(playerid, COLOR_ORANGE, string);
		count++;
	}
	Loop(s, 10, 0) if (InfoCasa[h][cArmario][s] != 0)
	{
		format(string, sizeof string, "Slot %d: %s", s+1, slot_objeto(InfoCasa[h][cArmario][s], InfoCasa[h][cArmarioCant][s]));
		SendClientMessage(playerid, COLOR_WHITE, string);
		count++;
	}
	if (count == 0) SendClientMessage(playerid, COLOR_WHITE, "No hay nada en la casa.");
	return 1;
}

CMD:incautar(playerid, params[])
{
	if (!member_faccion(playerid, 1, 2, 3, 4)) return SendClientMessage(playerid, COLOR_GREY, "Sólo miembros de la ley policial.");
	if (InfoPlayer[playerid][pRango] < 4) return SendClientMessage(playerid, COLOR_GREY, "[AVISO] Sólo agentes con rango 4 o mayor podrán usar este comando.");
	new item[12], string[230];
	if (sscanf(params, "s[12]", item)) return SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /incautar [Opción: materiales, armario]. (Realizar cerca de la salida)");
	new h = -1;
	Loop(casa, totalcasas, 1) if (IsPlayerInRangeOfPoint(playerid, 30.0, InfoCasa[casa][cInteriorX], InfoCasa[casa][cInteriorY], InfoCasa[casa][cInteriorZ]) && InfoPlayer[playerid][pInterior] == InfoCasa[casa][cInteriorInt] && InfoPlayer[playerid][pVirtualWorld] == InfoCasa[casa][cInteriorVW])
	{
		h = casa;
		break;
	}
	if (h == -1) return SendClientMessage(playerid, COLOR_GREY, "No estás en el interior de ninguna casa.");
	if (strcmp(item, "materiales", true) == 0)
	{
		if (InfoCasa[h][cMateriales] == 0) return SendClientMessage(playerid, COLOR_GREY, "[ERROR] No hay materiales que incautar dentro de la casa.");
		format(string, sizeof string, "[CENTRAL] %s ha incautado un total de %d materiales.",NombreJugador(playerid), InfoCasa[h][cMateriales]);
		SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, string);
		InfoCasa[h][cMateriales] = 0;
		guardar_int_mysql("casas", "Materiales", InfoCasa[h][cID_sql], InfoCasa[h][cMateriales]);
	}
	else if (strcmp(item, "armario", true) == 0)
	{
		format(string, sizeof string, "[CENTRAL] %s ha incautado el armario de %s.",NombreJugador(playerid), InfoCasa[h][cPropietario]);
		SendRadioMessage(InfoPlayer[playerid][pMiembro], COLOR_RADIO, string);
		Loop(s, 10, 0)
		{
			InfoCasa[h][cArmario][s] = 0;
			InfoCasa[h][cArmarioCant][s] = 0;
			format(string, sizeof string, "Armario%d", s+1); guardar_int_mysql("casas", string, InfoCasa[h][cID_sql], 0);
			format(string, sizeof string, "ArmarioCant%d", s+1); guardar_int_mysql("casas", string, InfoCasa[h][cID_sql], 0);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY,"[ERROR] Opciones disponibles en uso: materiales, y armario.");
	}
	return 1;
}

CMD:afk(playerid)
{
	if (Afk[playerid] != 0) return SendClientMessage(playerid,COLOR_WHITE, "{A2DC35}Creative Roleplay:{FFFFFF} Ya estas en modo afk, para dejar este estado usa {FF0000}/salirafk{FFFFFF}.");
	Afk[playerid] = 1;
	Timer[playerid] = SetTimer("SendMessage", 100, 0);
	TogglePlayerControllable(playerid, false);
	SetPlayerVirtualWorld(playerid, 5);
	SetPlayerCameraPos(playerid,-2663.0913,1595.6005,225.7578 ); // Le da las cordenadas de la camara para el afk.
	SetPlayerCameraLookAt(playerid,-2663.0913,1595.6005,225.7578); // Lo mismo que el de arriba.
	SendClientMessage(playerid,COLOR_WHITE, "{A2DC35}Creative Roleplay:{FFFFFF} Has entrado en modo /afk, para salir de este estado usa {FF0000}/salirafk{FFFFFF}.");
	return 1;
}

CMD:salirafk(playerid)
{
	if (Afk[playerid] == 0) return SendClientMessage(playerid,COLOR_WHITE, "{A2DC35}Creative Roleplay:{FFFFFF} No estas en modo afk.");
	Afk[playerid] = 0;
	Timer[playerid] = SetTimer("SendMessage",100,0);
	TogglePlayerControllable(playerid, true);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid); // Le quita la camara
	SendClientMessage(playerid,COLOR_WHITE, "{A2DC35}Creative Roleplay:{FFFFFF} Has salido del modo /afk, sigue disfrutando tu estadia.");
	return 1;
}

CMD:listaafk(playerid)
{
	if (CheckAdminCMD(playerid, 1)) return 1;
	if (CheckAdminDuty(playerid)) return 1;
	SendClientMessage(playerid,COLOR_GREEN,"Lista de todos los usuarios /afk.");
	new estaafk[140];
	foreach(Player, i) if (Afk[i]==1)
	{
		format(estaafk, sizeof(estaafk), "* %s (ID %i)", NombreOriginal(i), i);
		SendClientMessage(playerid, COLOR_GREY, estaafk);
	}
	return 1;
}
CMD:afks(playerid) return cmd_listaafk(playerid);

//fin comandos

//Velocimetro system
new uwu_color_veh[MAX_VEHICLES];

hide_velocimetro(playerid)
{
	show_velocimetro[playerid] = 0;
	Loop(x, 3, 0) { TextDrawHideForPlayer(playerid, velocimetro_nice[x]); }
	Loop(x, 4, 0) { PlayerTextDrawHide(playerid, velocimetro_pice[playerid][x]); }
	HidePlayerProgressBar(playerid, velocimetro_bar[playerid]);
	return 1;
}

new VehicleColoursTableRGBA[256] =
{
	// The existing colours from San Andreas
	0xc0c0c0FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	// SA-MP extended colours (0.3x)
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
	0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
	0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
	0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
	0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
	0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
	0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
	0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
	0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
	0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
	0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
	0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
	0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

mostrar_velocimetro(playerid, vehicleid)
{
	if (InfoPlayer[playerid][pTogVelocimetro] == 0) return 1;
	if (vehicleid == 0) return 1;
	//actived
	show_velocimetro[playerid] = 1;
	//new's
	new colorsito = 1, id = verificar_id_vehiculo(vehicleid);
	if (id != -1) colorsito = InfoVehiculo[id][vColor_1];
	new vehcolor = VehicleColoursTableRGBA[colorsito];
	uwu_color_veh[vehicleid] = colorsito;
	new gvel[256];
	new Float: vehvida;
	//box principal
	if (!EstaEnBicis(vehicleid)) TextDrawShowForPlayer(playerid, velocimetro_nice[0]);
	else TextDrawShowForPlayer(playerid, velocimetro_nice[1]);
	//km/h
	TextDrawShowForPlayer(playerid, velocimetro_nice[2]);
	format(gvel, sizeof gvel, "~w~~h~~h~%03d", floatround(GetVehicleSpeed(vehicleid)));
	PlayerTextDrawSetStringEx(playerid, velocimetro_pice[playerid][0], gvel);
	PlayerTextDrawShow(playerid, velocimetro_pice[playerid][0]);
	//modelo
	PlayerTextDrawColor(playerid, velocimetro_pice[playerid][1], vehcolor);
	PlayerTextDrawSetStringEx(playerid, velocimetro_pice[playerid][1], Veh_Textdraw(GetVehicleName(vehicleid)));
	PlayerTextDrawShow(playerid, velocimetro_pice[playerid][1]);
	if (!EstaEnBicis(vehicleid))
	{
		//gasolina
		PlayerTextDrawColor(playerid, velocimetro_pice[playerid][2], vehcolor);
		format(gvel, sizeof gvel, "Gas:_~w~~h~~h~%d", veh_gasolina[vehicleid]);
		PlayerTextDrawSetStringEx(playerid, velocimetro_pice[playerid][2], gvel);
		PlayerTextDrawShow(playerid, velocimetro_pice[playerid][2]);
		//vida-hp
		GetVehicleHealth(vehicleid, vehvida);
		//bar
		SetPlayerProgressBarColor(playerid, velocimetro_bar[playerid], vehcolor);
		SetPlayerProgressBarValue(playerid, velocimetro_bar[playerid], vehvida);
		ShowPlayerProgressBar(playerid, velocimetro_bar[playerid]);
		//text
		format(gvel, sizeof gvel, "~w~~h~~h~HP:_%d", floatround(vehvida));
		PlayerTextDrawSetStringEx(playerid, velocimetro_pice[playerid][3], gvel);
		PlayerTextDrawShow(playerid, velocimetro_pice[playerid][3]);
	}
	return 1;
}

update_velocimetro(playerid, vehicleid)
{
	if (vehicleid != 0)
	{
		//new's
		new colorsito = 1, id = verificar_id_vehiculo(vehicleid);
		if (id != -1) colorsito = InfoVehiculo[id][vColor_1];
		new vehcolor = VehicleColoursTableRGBA[colorsito];
		new gvel[256];
		new Float: vehvida;
		//km/h
		format(gvel, sizeof gvel, "~w~~h~~h~%03d", floatround(GetVehicleSpeed(vehicleid)));
		PlayerTextDrawSetStringEx(playerid, velocimetro_pice[playerid][0], gvel);
		//modelo
		if (uwu_color_veh[vehicleid] != colorsito)
		{
			PlayerTextDrawColor(playerid, velocimetro_pice[playerid][1], vehcolor);
			PlayerTextDrawHide(playerid, velocimetro_pice[playerid][1]);
			PlayerTextDrawShow(playerid, velocimetro_pice[playerid][1]);
		}
		if (!EstaEnBicis(vehicleid))
		{
			//gasolina
			if (uwu_color_veh[vehicleid] != colorsito)
			{
				PlayerTextDrawHide(playerid, velocimetro_pice[playerid][2]);
				PlayerTextDrawColor(playerid, velocimetro_pice[playerid][2], vehcolor);
				format(gvel, sizeof gvel, "Gas:_~w~~h~~h~%d", veh_gasolina[vehicleid]);
				PlayerTextDrawSetStringEx(playerid, velocimetro_pice[playerid][2], gvel);
				PlayerTextDrawShow(playerid, velocimetro_pice[playerid][2]);
			}
			else
			{
				format(gvel, sizeof gvel, "Gas:_~w~~h~~h~%d", veh_gasolina[vehicleid]);
				PlayerTextDrawSetStringEx(playerid, velocimetro_pice[playerid][2], gvel);
			}
			//vida-hp
			GetVehicleHealth(vehicleid, vehvida);
			//bar
			SetPlayerProgressBarColor(playerid, velocimetro_bar[playerid], vehcolor);
			SetPlayerProgressBarValue(playerid, velocimetro_bar[playerid], vehvida);
			UpdatePlayerProgressBar(playerid, velocimetro_bar[playerid]);
			//text
			format(gvel, sizeof gvel, "~w~~h~~h~HP:_%d", floatround(vehvida));
			PlayerTextDrawSetStringEx(playerid, velocimetro_pice[playerid][3], gvel);
		}
	}
}

Veh_Textdraw(gformat[])
{
	new N[128];
	strmid(N, gformat, 0, strlen(gformat), 128);
	Loop(x, 128, 0) { if (N[x] == ' ') N[x] = '_'; }
	return N;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (Text:INVALID_TEXT_DRAW==clickedid)
	{
		if (CompraVehiculo[playerid] != -1)
		{
			hide_comprarvehiculo(playerid);
			CancelSelectTextDraw(playerid);
			CompraVehiculo[playerid] = -1;
			return 1;
		}
	}
	if (clickedid == CocheVS[1]) //regresar
	{
		hide_comprarvehiculo(playerid);
		CancelSelectTextDraw(playerid);
		CompraVehiculo[playerid] = -1;
		cmd_comprar(playerid);
	}
	if (clickedid == CocheVS[2]) //comprar
	{
		hide_comprarvehiculo(playerid);
		if (CompraVehiculo[playerid] == -1)
		{
			CancelSelectTextDraw(playerid);
			CompraVehiculo[playerid] = -1;
			return SendClientMessage(playerid, -1, "No has ingresado ningún modelo.");
		}
		new id = CompraVehiculo[playerid];
		new modelo = infovehicle[id][elModelo];
		new precio = infovehicle[id][elPrecio];
		if (GetPlayerCash(playerid) < precio)
		{
			CancelSelectTextDraw(playerid);
			CompraVehiculo[playerid] = -1;
			return SendClientMessage(playerid, -1, "¡No tienes suficiente dinero!");
		}
		GivePlayerCash(playerid, -precio, "comprar vehiculo");
		CobroNegocio(id_negocio[playerid], precio/3);
		new Float:PX, Float:PY, Float:PZ, Float:Angulo;
		if (vehiculo_avion(modelo))
		{
			PX = 1948.0747;
			PY = -2492.8047;
			PZ = 24.6460;
			Angulo = 90.0000;
		}
		else if (vehiculo_bote(modelo))
		{
			PX = 2933.2100; PY = -1070.8807; PZ = 10.0364; Angulo = 180.0000;
		}
		else
		{
			PX = InfoNegocio[id_negocio[playerid]][nVehicleX];
			PY = InfoNegocio[id_negocio[playerid]][nVehicleY];
			PZ = InfoNegocio[id_negocio[playerid]][nVehicleZ];
			Angulo = InfoNegocio[id_negocio[playerid]][nVehicleR];
		}
		new color1 = random(250), color2 = random(250);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		crear_vehiculo(playerid, modelo, PX, PY, PZ, Angulo, 0, 0, color1, color2, precio, infovehicle[id][elMaxMaletero], 0, -1);
		CancelSelectTextDraw(playerid);
		CompraVehiculo[playerid] = -1;
		new gformat[256];
		format(gformat, sizeof gformat, "Compraste un nuevo vehículo por $%s.", diner_coma(precio));
		SendClientMessage(playerid, 0x00a2ffff, gformat);
	}
	return 1;
}

funcion FishCost(playerid, fish){
	if(IsPlayerConnected(playerid)){
		new cost = 0;
		switch (fish){
			case 1: cost = 3;
			case 2: cost = 4;
			case 3: cost = 6;
			case 5: cost = 7;
			case 6: cost = 4;
			case 8: cost = 10;
			case 9: cost = 14;
			case 11: cost = 12;
			case 12: cost = 9;
			case 14: cost = 14;
			case 15: cost = 10;
			case 16: cost = 9;
			case 17: cost = 8;
			case 18: cost = 11;
			case 19: cost = 5;
			case 21: cost = 4;
		}
		return cost;
	}
	return 0;
}

funcion ClearFishID(playerid, fish){
	if(IsPlayerConnected(playerid)){
		new string[MAX_PLAYER_NAME];
		format(string, sizeof string, "Nada");
		switch (fish){
			case 1:{
				strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight1] = 0;
				Fishes[playerid][pFid1] = 0;
			}
			case 2:{
				strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight2] = 0;
				Fishes[playerid][pFid2] = 0;
			}
			case 3:{
				strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight3] = 0;
				Fishes[playerid][pFid3] = 0;
			}
			case 4:{
				strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight4] = 0;
				Fishes[playerid][pFid4] = 0;
			}
			case 5:{
				strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight5] = 0;
				Fishes[playerid][pFid5] = 0;
			}
		}
	}
	return 1;
}

stock ConvertTime(cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1){

    #define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))
    #define CTM_cty 31536000 // 1 Year ._.
    #define CTM_ctmo 2628000 // 1 Mes, 2628000 segundos.
    #define CTM_ctw 604800 // 1 Semana, 604800 segundos.
    #define CTM_ctd 86400  // 1 DIA, 86400 segundos.
    #define CTM_cth 3600 // 1H, 3600 segundos.
    #define CTM_ctm 60 // 1 MIN, 60 segundos.
    #define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0


    new strii[128];

    if(cty != -1){
        CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(cty,"year","years"),PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctmo != -1){
        CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctw != -1){
        CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctd != -1){
        CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, and %d %s",PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(cth != -1){
        CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, and %d %s",PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctm != -1){
        CT(ctm);
        format(strii, sizeof(strii), "%d %s, and %d %s",PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    format(strii, sizeof(strii), "%d %s", PLUR(cts,"second","seconds"));
    return strii;
}

stock GiftPlayer(playerid)
{
		new string[256];
		new gift = Random(1, 14);
		switch(gift)
		{
		    case 1:
		    {
    	 		if (InfoPlayer[playerid][pHorasOn] < 2) return GiftPlayer(playerid);
				if (PlayerWeapon(playerid, 22) == 0) return GiftPlayer(playerid);

	        	SendClientMessage(playerid, -1, " Felicidades, ahora tienes una 9mm!");
	        	format(string, sizeof string, "* A %s le regalaron una 9mm cargada, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 2:
		    {
    			GivePlayerCash(playerid, 10000, "regalo");
	        	SendClientMessage(playerid, -1, "  Felicidades, has ganado $10,000!");
	        	format(string, sizeof string, "* A %s le regalaron $10,000 que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 3:
		    {
	        	InfoPlayer[playerid][pMateriales] += 500;
				guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
	        	SendClientMessage(playerid, -1, " Felicidades, ahora tienes 500 materiales!");
	        	format(string, sizeof string, "* A %s le regalaron 500 materiales, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 4:
		    {
				return GiftPlayer(playerid);
		    }
      		case 5:
		    {
				format(string, sizeof string, "* A %s le regalaron una bolsita del doctor chapatín :c.", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 6:
		    {
	        	GivePlayerCash(playerid, 20000, "regalo");
				SendClientMessage(playerid, -1, " Felicidades, ganaste $20,000!");
				format(string, sizeof string, "* A %s le regalaron $20,000 en efectivo, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 7:
		    {
	        	GivePlayerCash(playerid, 25000, "regalo");
				SendClientMessage(playerid, -1, "  Felicidades, has ganado $25,000!");
				format(string, sizeof string, "* A %s le regalaron $25,000 en efectivo, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 8:
		    {
	        	GivePlayerCash(playerid, 40000, "regalo");
				SendClientMessage(playerid, -1, "  Felicidades, has ganado $40,000!");
				format(string, sizeof string, "* A %s le regalaron $40,000 en efectivo, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 9:
		    {
		    	GivePlayerCash(playerid, 50000, "regalo");
				SendClientMessage(playerid, -1, " Felicidades - has ganado $50,000!");
				format(string, sizeof string, "* A %s le regalaron $50,000 en efectivo, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 10:
		    {
		    	InfoPlayer[playerid][pMateriales] += 1500;
				guardar_int_mysql("cuentas", "Materiales", InfoPlayer[playerid][pID], InfoPlayer[playerid][pMateriales]);
				SendClientMessage(playerid, -1, " Felicidades - Has ganado 1500 materiales!");
				format(string, sizeof string, "* A %s le regalaron 1500 materiales, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 11:
		    {
			    InfoPlayer[playerid][pExperiencia] += 3;
				guardar_int_mysql("cuentas", "Experiencia", InfoPlayer[playerid][pID], InfoPlayer[playerid][pExperiencia]);
				SendClientMessage(playerid, -1, " Felicidades - has ganado 3 puntos de experiencia!");
				format(string, sizeof string, "* A %s le regalaron 3 puntos de experiencia, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 12:
		    {
			    InfoPlayer[playerid][pExperiencia] += 2;
				guardar_int_mysql("cuentas", "Experiencia", InfoPlayer[playerid][pID], InfoPlayer[playerid][pExperiencia]);
				SendClientMessage(playerid, -1, " Felicidades - has ganado 2 puntos de experiencia!");
				format(string, sizeof string, "* A %s le regalaron 2 puntos de experiencia, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 13:
		    {
				InfoPlayer[playerid][pExperiencia] += 5;
				guardar_int_mysql("cuentas", "Experiencia", InfoPlayer[playerid][pID], InfoPlayer[playerid][pExperiencia]);
				SendClientMessage(playerid, -1, " Felicidades - has ganado 5 puntos de experiencia!");
				format(string, sizeof string, "* A %s le regalaron 5 puntos de experiencia, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 14:
		    {
	        	GivePlayerCash(playerid, 35000, "regalo");
				SendClientMessage(playerid, -1, "  Felicidades, has ganado $35,000!");
				format(string, sizeof string, "* A %s le regalaron $35,000 en efectivo, que lo disfrute!", NombreOriginal(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    default: return GiftPlayer(playerid);
		}
	    return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
    if (usuario_registro[playerid] != 2)
	{
	    if (mmaguebo_abusadol[playerid] == 3)
	    {
			SendClientMessage(playerid, COLOR_GENERAL, "Fuiste expulsado por alto mmaguebo, intentando introducir comandos sin logear.");
			SetTimerEx("TimerKICK", 2000, false, "d", playerid);
			return 0;
	    }
		mmaguebo_abusadol[playerid]++;
		SendClientMessage(playerid, COLOR_GRAD2, "* No puedes utilizar comandos si no estás logeado en el servidor.");
		return 0;
	}
	if (strfind(cmdtext, "|", true) != -1)
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "No puedes usar el carácter '|' en un comando.");
		return 0;
	}
	if (GetPVarInt(playerid, "LoadingObjects") == 1)
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "No puedes usar comandos en este momento.");
	    return 0;
	}
    if (GetPlayerAdmin(playerid, 0) == 0)
	{
		if (strfind(cmdtext, ":", true) != -1)
		{
			new i_numcount, i_period, i_pos;
			while (cmdtext[i_pos])
			{
				if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
				else if(cmdtext[i_pos] == '.') i_period++;
				i_pos++;
			}
			if (i_numcount >= 8 && i_period >= 3)
			{
				new string[260];
				format(string,sizeof string, "[ATENCIÓN] %s(%d) puede estar haciendo SPAM: '%s'", NombreOriginal(playerid), playerid, cmdtext);
				SendAdminMessage(COLOR_YELLOW, string);
				return 0;
			}
		}
	}
    printf("[CMD] [%s]: %s", NombreOriginal(playerid), cmdtext);
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if (!success) SendClientMessage(playerid, 0xEBEBEBFF, "El comando introducido no existe, le recomendamos que use {FFBF00}/ayuda{EBEBEB}.");
	return 1;
}

//------------------------------------------------------------------------------------------------------
stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

funcion PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

new sdisda_actual[MAX_PLAYERS][256];

public OnPlayerText(playerid, text[])
{
	if (usuario_registro[playerid] != 2) return 0;
	new string[320];
	//sistema de centralita
	if (EnLlamada[playerid] == 911) //inicio
	{
		if (strcmp("pd", text, true) == 0)
		{
			format(string, sizeof string, "%s por teléfono: %s", NombreJugador(playerid), text);
			ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: De acuerdo, le redireccionaremos hacia la centralita policial.");
			SendClientMessage(playerid, 0xA7CE00FF, "Una voz de operadora te saluda. Enseguida te pondrá con alguien.");
			SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: Policía, ¿dónde es su emergencia?");
			EnLlamada[playerid] = 920;
			return 0;
		}
		else if (strcmp("sd", text, true) == 0)
		{
			format(string, sizeof string, "%s por teléfono: %s", NombreJugador(playerid), text);
			ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: De acuerdo, le redireccionaremos hacia la centralita sheriff.");
			SendClientMessage(playerid, 0xA7CE00FF, "Una voz de operadora te saluda. Enseguida te pondrá con alguien.");
			SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: Sheriff, ¿dónde es su emergencia?");
			EnLlamada[playerid] = 930;
			return 0;
		}
		SendClientMessage(playerid, COLOR_GREY, "* Opción incorrecta, intenta con 'SD' ó 'PD'.");
		return 0;
	}
	else if(EnLlamada[playerid] == 920) //elige pd
	{
		format(string, sizeof string, "%s por teléfono: %s", NombreJugador(playerid), text);
		ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		if (GetPVarInt(playerid, "en_emergencias") == 0)
		{
			SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: De acuerdo, ¿cuál es su emergencia? Sea lo más explícito posible, por favor.");
			alm(sdisda_actual[playerid], text);
			SetPVarInt(playerid, "en_emergencias", 1);
			return 0;
		}
		else if (GetPVarInt(playerid, "en_emergencias") == 1)
		{
			SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: Su llamada de emergencia está siendo procesada.");
			DeletePVar(playerid, "en_emergencias");
			Altavoz[playerid] = 0;
			EnLlamada[playerid] = 0; //Sistema teléfono
			ToqueLlamada[playerid] = 0;
			PersonaEnLlamada[playerid] = -1;
			new zona[128], info[355];
			GetPlayer3DZone(playerid, zona, MAX_ZONE_NAME);
			//mensaje a policia
			SendRadioMessage(1, COLOR_RADIO, "|___________Llamada de emergencia___________|");
			format(info, sizeof(info), "{00a2ff}* Nombre del ciudadano:{DDCC72} %s", NombreJugador(playerid)); SendRadioMessage(1, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Teléfono:{DDCC72} %d", InfoPlayer[playerid][pTelefono]); SendRadioMessage(1, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Localización:{DDCC72} %s", sdisda_actual[playerid]); SendRadioMessage(1, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Situación:{DDCC72} %s", text); SendRadioMessage(1, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Rastreo de llamada:{DDCC72} %s.", zona); SendRadioMessage(1, 0xDDCC72FF, info);
			return 0;
		}
	}
	else if(EnLlamada[playerid] == 930) //elige sd
	{
		format(string, sizeof string, "%s por teléfono: %s", NombreJugador(playerid), text);
		ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		if (GetPVarInt(playerid, "en_emergencias") == 0)
		{
			SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: De acuerdo, ¿cuál es su emergencia? Sea lo más explícito posible, por favor.");
			alm(sdisda_actual[playerid], text);
			SetPVarInt(playerid, "en_emergencias", 1);
			return 0;
		}
		else if (GetPVarInt(playerid, "en_emergencias") == 1)
		{
			SendClientMessage(playerid, 0xFFF000FF, "[Teléfono: 911]: Su llamada de emergencia está siendo procesada.");
			DeletePVar(playerid, "en_emergencias");
			Altavoz[playerid] = 0;
			EnLlamada[playerid] = 0; //Sistema teléfono
			ToqueLlamada[playerid] = 0;
			PersonaEnLlamada[playerid] = -1;
			new zona[128], info[355];
			GetPlayer3DZone(playerid, zona, MAX_ZONE_NAME);
			//mensaje a md
			SendRadioMessage(4, COLOR_RADIO, "|___________Llamada de emergencia___________|");
			format(info, sizeof(info), "{00a2ff}* Nombre del ciudadano:{DDCC72} %s", NombreJugador(playerid)); SendRadioMessage(4, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Teléfono:{DDCC72} %d", InfoPlayer[playerid][pTelefono]); SendRadioMessage(4, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Localización:{DDCC72} %s", sdisda_actual[playerid]); SendRadioMessage(4, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Situación:{DDCC72} %s", text); SendRadioMessage(4, 0xDDCC72FF, info);
			format(info, sizeof(info), "{00a2ff}* Rastreo de llamada:{DDCC72} %s.", zona); SendRadioMessage(4, 0xDDCC72FF, info);
			return 0;
		}
	}
	//teléfono
	if(PersonaEnLlamada[playerid] != -1)
	{
		if(EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3 || EnLlamada[playerid] == 912)
		{
			if(Altavoz[PersonaEnLlamada[playerid]] == 0)
			{
				if(EnLlamada[PersonaEnLlamada[playerid]] == 912) format(string, sizeof string, "(Teléfono 911): %s", text);
				else format(string, sizeof string, "(Teléfono %d): %s", InfoPlayer[playerid][pTelefono], text);
				SendClientMessage(PersonaEnLlamada[playerid], COLOR_YELLOW, string);
			}
			else
			{
				if(EnLlamada[PersonaEnLlamada[playerid]] == 912) format(string, sizeof string, "(T. Altavoz 911): %s", text);
				else format(string, sizeof string, "(T. Altavoz %d): %s", InfoPlayer[playerid][pTelefono], text);
				ProxDetector(4.5, PersonaEnLlamada[playerid], string, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF);
			}
			format(string, sizeof string, "%s por teléfono: %s", NombreJugador(playerid), text);
			ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 0;
		}
		//chat normal
		if (InfoPlayer[playerid][pAcento] == 0 || InfoPlayer[playerid][pAcento] == 1) format(string, sizeof string, "%s dice: %s", NombreJugador(playerid), text);
		else format(string, sizeof string, "[Acento %s] %s dice: %s", GetNameAcento(InfoPlayer[playerid][pAcento]), NombreJugador(playerid), text);
		ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		if (!IsPlayerInAnyVehicle(playerid))
		{
			LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
			SetTimerEx("PararDeHablar", (230*strlen(text)), 0, "d", playerid);
		}
		return 0;
	}
	//chat normal
	if (InfoPlayer[playerid][pAcento] == 0 || InfoPlayer[playerid][pAcento] == 1) format(string, sizeof string, "%s dice: %s", NombreJugador(playerid), text);
	else format(string, sizeof string, "[Acento %s] %s dice: %s", GetNameAcento(InfoPlayer[playerid][pAcento]), NombreJugador(playerid), text);
	ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	if (!IsPlayerInAnyVehicle(playerid) && InfoPlayer[playerid][pTogManos] == 1)
	{
		ApplyAnimation(playerid, "MISC", "IDLE_CHAT_02", 4.1, 1, 0, 0, 1, 1, 1);
		SetTimerEx("FinHablar", strlen(text) * 200, false, "d", playerid);
	}
	return 0;
}

funcion FinHablar(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

funcion FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

stock IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}

funcion TeleportPlayer(playerid)
{
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(playerid, cx, cy, cz);
	Loop(x, totalpuertas, 1)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, InfoPuerta[x][pdExteriorX], InfoPuerta[x][pdExteriorY], InfoPuerta[x][pdExteriorZ]))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Usa el comando /entrar o presiona la tecla [H] para entrar a un interior, para salir usa /salir, o pulsa [H]");
			return 1;
		}
	}
	//FBI
	if (PlayerToPointStripped(1, playerid,325.4713,-1514.8862,36.0325, cx,cy,cz))
	{
		LoadObjects(playerid);
		SetPosEx(playerid,278.0079,-1505.8489,-45.1302, 270, 0, 600, 1);
		SetCameraBehindPlayer(playerid);
	}
	if (PlayerToPointStripped(1, playerid,278.0079,-1505.8489,-45.1302, cx,cy,cz))
	{
		SetPosEx(playerid,325.4713,-1514.8862,36.0325, 90.0000, 0, 0, 1);
		SetCameraBehindPlayer(playerid);
	}
	// Ascensores LSPD. [ASCENSOR IDA]
	else if (PlayerToPointStripped(2, playerid,1554.822021,-1648.085815,4990.7, cx,cy,cz))
	{
		if (member_faccion(playerid, 1))
		{
			Dialog_Show(playerid,ShowElevador1LSPD,DIALOG_STYLE_LIST,
			"LSPD - Sector Sur","(A) Planta Superior\t - \t(Oficinas) \n(B) Planta Inferior\t - \t(Prisión)","Ir","Salir");
		}
		else if (Autorizado[playerid] == 1)
		{
			SetPosEx(playerid, 1555.0,-1648.085815,4985.34, -90.0, 1, 1, 1);
			SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en la prisión de LSPD, su autorización es límitada.");
			Autorizado[playerid] = 0;
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY,"Acceso Denegado.");
	}
	else if (PlayerToPointStripped(2, playerid,1554.630126,-1709.477050,4990.7, cx,cy,cz))
	{
		if (member_faccion(playerid, 1))
		{
			Dialog_Show(playerid,ShowElevador2LSPD,DIALOG_STYLE_LIST,
			"LSPD - Sector Norte","(A) Planta Superior\t - \t(Oficinas) \n(B) Planta Inferior\t - \t(Garage)","Ir","Salir");
		}
		else SendClientMessage(playerid,COLOR_GREY,"Acceso Denegado.");
	}
	// - Del Garage a la HQ sólo policías y esposados pueden pasar. / De la prisión a HQ sin jail y policias. [ASCENSOR RETORNO]

	// LSPD - TP de la Prisión al Interior de LSPD (Ascensor) - Sector Sur.
	else if (PlayerToPointStripped(2, playerid,1555.0,-1648.085815,4985.34, cx,cy,cz))
	{
		if (member_faccion(playerid, 1, 2, 3, 4) || InfoPlayer[playerid][pSancionado] == 0) // Jugador sale de la HQ sin jail.
		{
			SetPosEx(playerid,1554.822021,-1648.085815,4990.7, -90.0, 1, 1, 1);
			GameTextForPlayer(playerid, "~w~Departamento De ~n~Policia de Los Santos", 2500, 1);
		}
		else GameTextForPlayer(playerid, "~r~!No puedes salir del lugar sin la condena a cumplir!", 2500, 3);
	}
	// LSPD - TP del Parking al Interior de LSPD (Ascensor) - Sector Norte.
	else if (PlayerToPointStripped(2, playerid,1525.365966,-1677.872680,5.890625, cx,cy,cz))
	{
		if (member_faccion(playerid, 1, 2, 3, 4)) // Jugador entra a la HQ esposado.
		{
			LoadObjects(playerid); // Se precisa cargado completo de la HQ al entrar por primera vez.
			SetPosEx(playerid,1554.630126,-1709.477050,4990.7, -90.0, 1, 1, 1);
			GameTextForPlayer(playerid, "~w~Departamento De ~n~Policia de Los Santos", 2500, 1);
		}
		else GameTextForPlayer(playerid, "~r~!Acceso restringido!", 2500, 3);
	}
	// LSPD - De la planta de arriba a la de abajo. (Ascensor)
	// Sector Sur
	else if (PlayerToPointStripped(2, playerid,1554.822021,-1648.085815,4995.55, cx,cy,cz))
	{
		if (member_faccion(playerid, 1, 4))
		{
			SetPosEx(playerid,1554.822021,-1648.085815,4990.7, -90.0, 1, 1, 1);
		}
		else GameTextForPlayer(playerid, "~r~!Solo Policias pueden usar el ascensor!", 5000, 3);
	}
	// Sector Norte
	else if (PlayerToPointStripped(2, playerid,1554.630126,-1709.477050,4995.55, cx,cy,cz))
	{
		if (member_faccion(playerid, 1, 4))
		{
			SetPosEx(playerid,1554.630126,-1709.477050,4990.7, -90.0, 1, 1, 1);
		}
		else GameTextForPlayer(playerid, "~r~!Solo Policias pueden usar el ascensor!", 5000, 3);
	}
	return 1;
}

stock ClearChat(playerid, lines = 20)
{
	Loop(x, lines, 0)
		SendClientMessage(playerid, 0xccccccff, "");
	return 1;
}

stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

forward MapsRemoveForPlayer(playerid);
public MapsRemoveForPlayer(playerid)
{
	//basurero
	RemoveBuildingForPlayer(playerid, 3688, 2182.5547, -2042.5859, 17.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3723, 2197.7500, -1993.3594, 14.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 3723, 2100.7031, -1989.3984, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3723, 2093.2813, -1975.5859, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3723, 2178.7344, -1971.2656, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3723, 2189.9922, -1949.3281, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2072.5469, -1967.6016, 15.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 5327, 2232.7031, -2129.0625, 9.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3755, 2228.1719, -2063.7969, 17.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3756, 2228.1719, -2063.7969, 17.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 5357, 2177.9922, -2006.7578, 23.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 5360, 2132.9141, -1963.7344, 15.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 3621, 2182.5547, -2042.5859, 17.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 5291, 2177.9922, -2006.7578, 23.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3722, 2100.7031, -1989.3984, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3722, 2093.2813, -1975.5859, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3722, 2178.7344, -1971.2656, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3722, 2197.7500, -1993.3594, 14.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2209.5859, -1977.5234, 16.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 5372, 2282.8203, -2033.5000, 20.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2072.5469, -1967.6016, 15.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 5170, 2132.9141, -1963.7344, 15.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 3722, 2189.9922, -1949.3281, 16.8672, 0.25);

	//playa beach
	RemoveBuildingForPlayer(playerid, 3778, 553.3516, -1875.0000, 4.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3778, 498.4844, -1875.0000, 4.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3615, 498.4844, -1875.0000, 4.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3615, 553.3516, -1875.0000, 4.7891, 0.25);
	
	//graffitis - 9
	RemoveBuildingForPlayer(playerid, 1490, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1524, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1525, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1526, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1527, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1528, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1529, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1530, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1531, 0.0, 0.0, 0.0, 6000.0);
	
	//skate park
	RemoveBuildingForPlayer(playerid, 5400, 1913.1328, -1370.5000, 17.7734, 0.25);

	//parque verona beach
	RemoveBuildingForPlayer(playerid, 6208, 954.2734, -1720.7969, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 6205, 954.2734, -1720.7969, 20.7734, 0.25);

	//portones pay'n'spray y garajes bomba - 18objs
	RemoveBuildingForPlayer(playerid, 5043, 1843.3672, -1856.3203, 13.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5340, 2644.8594, -2039.2344, 14.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5856, 1024.9844, -1029.3516, 33.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 6400, 488.2813, -1734.6953, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 10575, -2716.3516, 217.4766, 5.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 11313, -1935.8594, 239.5313, 35.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 11319, -1904.5313, 277.8984, 42.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 9625, -2425.7266, 1027.9922, 52.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 9093, 2386.6563, 1043.6016, 11.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 8957, 2393.7656, 1483.6875, 12.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 7707, 2006.0000, 2317.6016, 11.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 7709, 2006.0000, 2303.7266, 11.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 7891, 1968.7422, 2162.4922, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3294, -1420.5469, 2591.1563, 57.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3294, -100.0000, 1111.4141, 21.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 13028, 720.0156, -462.5234, 16.8594, 0.25);

	// fabrica exterior
	RemoveBuildingForPlayer(playerid, 3244, 2535.0938, -2131.8750, 12.9922, 0.3);
	RemoveBuildingForPlayer(playerid, 3244, 2532.0313, -2074.6250, 12.9922, 0.3);
	RemoveBuildingForPlayer(playerid, 3290, 2503.1250, -2073.3750, 12.4297, 0.3);
	RemoveBuildingForPlayer(playerid, 3290, 2515.4219, -2073.3750, 12.4063, 0.3);
	RemoveBuildingForPlayer(playerid, 3288, 2432.7266, -2133.0234, 12.4531, 0.3);
	RemoveBuildingForPlayer(playerid, 3686, 2448.1328, -2075.6328, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 3745, 2475.1016, -2073.4766, 17.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3745, 2482.0234, -2073.4766, 17.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3745, 2489.1016, -2073.4766, 17.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3745, 2496.0938, -2073.4766, 17.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3290, 2452.9609, -2129.0156, 25.2734, 0.3);
	RemoveBuildingForPlayer(playerid, 3756, 2484.2344, -2118.5547, 17.7031, 0.3);
	RemoveBuildingForPlayer(playerid, 3755, 2484.2344, -2118.5547, 17.7031, 0.3);
	RemoveBuildingForPlayer(playerid, 5295, 2413.0547, -2106.4219, 23.0547, 0.3);
	RemoveBuildingForPlayer(playerid, 5292, 2390.1719, -2033.8203, 23.8281, 0.3);
	RemoveBuildingForPlayer(playerid, 3257, 2432.7266, -2133.0234, 12.4531, 0.3);
	RemoveBuildingForPlayer(playerid, 3256, 2452.9609, -2129.0156, 25.2734, 0.3);
	RemoveBuildingForPlayer(playerid, 3567, 2438.3594, -2075.8438, 13.2578, 0.3);
	RemoveBuildingForPlayer(playerid, 3627, 2448.1328, -2075.6328, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2428.3906, -2066.6328, 12.6797, 0.3);
	RemoveBuildingForPlayer(playerid, 3643, 2489.1016, -2073.4766, 17.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3643, 2482.0234, -2073.4766, 17.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3643, 2475.1016, -2073.4766, 17.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3643, 2496.0938, -2073.4766, 17.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3256, 2515.4219, -2073.3750, 12.4063, 0.3);
	RemoveBuildingForPlayer(playerid, 3256, 2503.1250, -2073.3750, 12.4297, 0.3);

	// ayuntamiento exterior
	RemoveBuildingForPlayer(playerid, 4047, 1531.6328, -1852.6406, 24.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 4171, 1503.3984, -1848.3359, 21.4609, 0.3);
	RemoveBuildingForPlayer(playerid, 1265, 1515.3828, -1850.0547, 12.9844, 0.3);
	RemoveBuildingForPlayer(playerid, 1265, 1514.4219, -1850.0391, 12.9922, 0.3);
	RemoveBuildingForPlayer(playerid, 1372, 1516.6875, -1850.0547, 12.6641, 0.3);
	RemoveBuildingForPlayer(playerid, 4048, 1531.6328, -1852.6406, 24.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 1372, 1538.9453, -1849.2734, 12.6641, 0.3);
	RemoveBuildingForPlayer(playerid, 1230, 1538.8359, -1847.6250, 13.6719, 0.3);
	RemoveBuildingForPlayer(playerid, 1220, 1538.3906, -1847.9297, 12.9297, 0.3);
	RemoveBuildingForPlayer(playerid, 1220, 1539.1016, -1847.2969, 12.9297, 0.3);

	// SAEM exterior
	RemoveBuildingForPlayer(playerid, 5156, 2838.0391, -2423.8828, 10.9609, 0.3);
	RemoveBuildingForPlayer(playerid, 5159, 2838.0313, -2371.9531, 7.2969, 0.3);
	RemoveBuildingForPlayer(playerid, 5160, 2829.9531, -2479.5703, 5.2656, 0.3);
	RemoveBuildingForPlayer(playerid, 5161, 2838.0234, -2358.4766, 21.3125, 0.3);
	RemoveBuildingForPlayer(playerid, 5162, 2838.0391, -2423.8828, 10.9609, 0.3);
	RemoveBuildingForPlayer(playerid, 5163, 2838.0391, -2532.7734, 17.0234, 0.3);
	RemoveBuildingForPlayer(playerid, 5164, 2838.1406, -2447.8438, 15.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 5165, 2838.0313, -2520.1875, 18.4141, 0.3);
	RemoveBuildingForPlayer(playerid, 5166, 2829.9531, -2479.5703, 5.2656, 0.3);
	RemoveBuildingForPlayer(playerid, 5167, 2838.0313, -2371.9531, 7.2969, 0.3);
	RemoveBuildingForPlayer(playerid, 3689, 2685.3828, -2366.0547, 19.9531, 0.3);
	RemoveBuildingForPlayer(playerid, 3689, 2430.5859, -2583.9453, 20.5234, 0.3);
	RemoveBuildingForPlayer(playerid, 3707, 2716.2344, -2452.5938, 20.2031, 0.3);
	RemoveBuildingForPlayer(playerid, 3707, 2720.3203, -2530.9141, 19.9766, 0.3);
	RemoveBuildingForPlayer(playerid, 3707, 2480.8594, -2460.0547, 20.4922, 0.3);
	RemoveBuildingForPlayer(playerid, 3707, 2539.1797, -2424.3594, 20.4922, 0.3);
	RemoveBuildingForPlayer(playerid, 3690, 2685.3828, -2366.0547, 19.9531, 0.3);
	RemoveBuildingForPlayer(playerid, 3690, 2430.5859, -2583.9453, 20.5234, 0.3);
	RemoveBuildingForPlayer(playerid, 3688, 2387.8047, -2580.8672, 17.7891, 0.3);
	RemoveBuildingForPlayer(playerid, 3688, 2450.8750, -2680.4531, 17.7891, 0.3);
	RemoveBuildingForPlayer(playerid, 3687, 2503.5391, -2366.5078, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 3687, 2475.2578, -2394.7891, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 3687, 2450.5078, -2419.5391, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 3686, 2464.3047, -2617.0156, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2417.7891, 16.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2455.8828, 16.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2493.9844, 16.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2608.0156, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2571.2422, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2535.4531, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3709, 2660.4766, -2429.2969, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3709, 2639.5469, -2429.2969, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3709, 2618.8594, -2429.2969, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3708, 2720.3203, -2530.9141, 19.9766, 0.3);
	RemoveBuildingForPlayer(playerid, 3708, 2716.2344, -2452.5938, 20.2031, 0.3);
	RemoveBuildingForPlayer(playerid, 3708, 2480.8594, -2460.0547, 20.4922, 0.3);
	RemoveBuildingForPlayer(playerid, 3708, 2539.1797, -2424.3594, 20.4922, 0.3);
	RemoveBuildingForPlayer(playerid, 3710, 2415.4609, -2468.5781, 16.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2372.4453, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2789.2109, -2377.6250, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2386.8516, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2520.5469, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2534.9531, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2437.2109, -2490.0938, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2399.4219, -2490.6797, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2391.8750, -2503.5078, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2551.5313, -2472.6953, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3709, 2544.2500, -2524.0938, 16.4453, 0.3);
	RemoveBuildingForPlayer(playerid, 3709, 2544.2500, -2548.8125, 16.7031, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2356.5703, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2521.4922, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2568.4453, -2483.3906, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2563.1563, -2563.5781, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2531.7031, -2629.2266, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2519.8047, -2701.8750, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2381.1016, -2701.8750, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 5325, 2488.9922, -2509.2578, 18.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2422.7031, -2411.9219, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3746, 2472.4453, -2362.9375, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 5335, 2829.9531, -2479.5703, 5.2656, 0.3);
	RemoveBuildingForPlayer(playerid, 5336, 2829.9531, -2479.5703, 5.2656, 0.3);
	RemoveBuildingForPlayer(playerid, 3770, 2795.8281, -2394.2422, 14.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3770, 2746.4063, -2453.4844, 14.0781, 0.3);
	RemoveBuildingForPlayer(playerid, 3770, 2507.3672, -2640.0703, 14.0781, 0.3);
	RemoveBuildingForPlayer(playerid, 3769, 2464.1250, -2571.6328, 15.1641, 0.3);
	RemoveBuildingForPlayer(playerid, 3769, 2400.9063, -2577.3359, 15.1641, 0.3);
	RemoveBuildingForPlayer(playerid, 5352, 2838.1953, -2488.6641, 29.3125, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2381.1016, -2701.8750, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 1413, 2392.1172, -2653.5625, 13.9375, 0.3);
	RemoveBuildingForPlayer(playerid, 1413, 2386.8438, -2653.5078, 13.9375, 0.3);
	RemoveBuildingForPlayer(playerid, 1413, 2397.3984, -2653.6250, 13.9375, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2402.6719, -2653.6406, 13.9375, 0.3);
	RemoveBuildingForPlayer(playerid, 1413, 2407.9453, -2653.6484, 13.9375, 0.3);
	RemoveBuildingForPlayer(playerid, 3621, 2387.8047, -2580.8672, 17.7891, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2391.8750, -2503.5078, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3625, 2400.9063, -2577.3359, 15.1641, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2410.9766, -2535.2422, 16.4688, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2399.4219, -2490.6797, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3624, 2415.4609, -2468.5781, 16.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2519.8047, -2701.8750, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3621, 2450.8750, -2680.4531, 17.7891, 0.3);
	RemoveBuildingForPlayer(playerid, 1635, 2430.5781, -2653.9453, 23.7188, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2450.0156, -2632.7734, 16.3594, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2645.3203, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2470.1406, -2628.2656, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3626, 2507.3672, -2640.0703, 14.0781, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2531.7031, -2629.2266, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3627, 2464.3047, -2617.0156, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2450.0156, -2604.9297, 16.3594, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2579.9844, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 3625, 2464.1250, -2571.6328, 15.1641, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2612.6563, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 1413, 2496.5547, -2585.1797, 13.9063, 0.3);
	RemoveBuildingForPlayer(playerid, 1413, 2501.8359, -2585.2422, 13.9063, 0.3);
	RemoveBuildingForPlayer(playerid, 1635, 2511.8359, -2622.6172, 17.3906, 0.3);
	RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2608.0156, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2571.2422, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2450.0156, -2563.2188, 16.3594, 0.3);
	RemoveBuildingForPlayer(playerid, 1413, 2496.5547, -2557.3359, 13.9063, 0.3);
	RemoveBuildingForPlayer(playerid, 1413, 2501.8359, -2557.3984, 13.9063, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2547.3203, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 1278, 2470.2734, -2539.0234, 26.6719, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2450.0156, -2535.5703, 16.3594, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2470.1406, -2530.5547, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2514.6484, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2435.8203, -2512.4844, 16.4688, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2437.2109, -2490.0938, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2481.9766, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 1635, 2471.5859, -2494.0703, 15.0781, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2444.3281, -2435.0625, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2526.4297, -2561.3047, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3623, 2544.2500, -2548.8125, 16.7031, 0.3);
	RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2535.4531, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3623, 2544.2500, -2524.0938, 16.4453, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2533.3906, -2514.1094, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 1278, 2533.6172, -2461.6875, 26.6719, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2551.5313, -2472.6953, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2563.1563, -2563.5781, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2568.4453, -2483.3906, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 1635, 2459.3359, -2427.8281, 16.7422, 0.3);
	RemoveBuildingForPlayer(playerid, 3622, 2450.5078, -2419.5391, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2468.8594, -2413.5234, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2422.7031, -2411.9219, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 1635, 2483.7188, -2403.3438, 16.7422, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2455.0703, -2399.0156, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 3622, 2475.2578, -2394.7891, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2491.7031, -2383.3281, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2495.8438, -2386.9375, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2472.4453, -2362.9375, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 3622, 2503.5391, -2366.5078, 16.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2546.0469, -2396.5938, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 1635, 2512.0078, -2375.0859, 16.7422, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2513.0000, -2339.3281, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2571.1641, -2421.1328, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3623, 2618.8594, -2429.2969, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2518.6641, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 1315, 2672.5938, -2506.8594, 15.8125, 0.3);
	RemoveBuildingForPlayer(playerid, 1315, 2680.8594, -2493.0781, 15.8125, 0.3);
	RemoveBuildingForPlayer(playerid, 1635, 2704.3672, -2487.8672, 20.5625, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2742.2656, -2481.5156, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2696.0234, -2474.8594, 16.4141, 0.3);
	RemoveBuildingForPlayer(playerid, 5326, 2661.5156, -2465.1406, 20.1094, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2447.2891, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2696.0234, -2446.6250, 16.4141, 0.3);
	RemoveBuildingForPlayer(playerid, 3623, 2639.5469, -2429.2969, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 3623, 2660.4766, -2429.2969, 17.0703, 0.3);
	RemoveBuildingForPlayer(playerid, 1307, 2629.2109, -2419.6875, 12.2891, 0.3);
	RemoveBuildingForPlayer(playerid, 1307, 2649.8984, -2419.6875, 12.2891, 0.3);
	RemoveBuildingForPlayer(playerid, 1315, 2686.7578, -2416.6250, 15.8125, 0.3);
	RemoveBuildingForPlayer(playerid, 1315, 2672.5938, -2408.2500, 15.8125, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2742.2656, -2416.5234, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2639.1953, -2392.8203, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2663.8359, -2392.8203, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2637.1719, -2385.8672, 16.4141, 0.3);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2394.5078, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2534.9531, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2520.5469, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2501.8359, 14.6953, 0.3);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2493.9844, 16.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2486.9609, 14.6563, 0.3);
	RemoveBuildingForPlayer(playerid, 3578, 2747.0078, -2480.2422, 13.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2463.8203, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2455.8828, 16.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3626, 2746.4063, -2453.4844, 14.0781, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2448.4766, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2443.1719, 26.7031, 0.3);
	RemoveBuildingForPlayer(playerid, 3577, 2744.5703, -2436.1875, 13.3438, 0.3);
	RemoveBuildingForPlayer(playerid, 3577, 2744.5703, -2427.3203, 13.3516, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2425.3516, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2386.8516, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2372.4453, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2410.2109, 14.6719, 0.3);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2417.7891, 16.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2789.2109, -2377.6250, 15.2188, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2501.8359, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2486.8281, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2486.9609, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2463.8203, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2448.3438, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2448.4766, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2425.3516, 14.6719, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2410.2109, 14.6563, 0.3);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2410.0781, 14.6328, 0.3);
	RemoveBuildingForPlayer(playerid, 3626, 2795.8281, -2394.2422, 14.1719, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2521.4922, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 5157, 2838.0391, -2532.7734, 17.0234, 0.3);
	RemoveBuildingForPlayer(playerid, 5154, 2838.1406, -2447.8438, 15.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2488.6641, 29.3125, 0.3);
	RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2356.5703, 25.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 5155, 2838.0234, -2358.4766, 21.3125, 0.3);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2407.1406, 29.3125, 0.3);
	RemoveBuildingForPlayer(playerid, 5158, 2837.7734, -2334.4766, 11.9922, 0.3);

	// SAEM san fierro barco
	RemoveBuildingForPlayer(playerid, 3791, -1289.9766, 494.7734, 10.6719, 0.3);
	RemoveBuildingForPlayer(playerid, 3795, -1294.1172, 499.3359, 10.5469, 0.3);
	RemoveBuildingForPlayer(playerid, 3791, -1290.5000, 496.4375, 10.6719, 0.3);
	RemoveBuildingForPlayer(playerid, 3787, -1290.2656, 499.9609, 10.7734, 0.3);
	RemoveBuildingForPlayer(playerid, 3787, -1290.3125, 497.9609, 10.7734, 0.3);
	RemoveBuildingForPlayer(playerid, 3792, -1294.5938, 497.3750, 10.3359, 0.3);
	RemoveBuildingForPlayer(playerid, 3787, -1300.6406, 504.0391, 10.7734, 0.3);
	RemoveBuildingForPlayer(playerid, 3789, -1301.5859, 511.1094, 10.5469, 0.3);
	RemoveBuildingForPlayer(playerid, 3792, -1301.5859, 511.9688, 10.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 3800, -1298.2109, 503.1641, 10.2031, 0.3);
	RemoveBuildingForPlayer(playerid, 3798, -1297.7422, 501.6172, 10.2031, 0.3);
	RemoveBuildingForPlayer(playerid, 3788, -1294.0156, 509.2188, 10.7188, 0.3);
	RemoveBuildingForPlayer(playerid, 3793, -1294.0156, 510.1563, 10.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 3794, -1294.6172, 501.3281, 10.7188, 0.3);
	RemoveBuildingForPlayer(playerid, 3798, -1293.2344, 512.4531, 10.2031, 0.3);
	RemoveBuildingForPlayer(playerid, 3795, -1290.3984, 503.4688, 10.5469, 0.3);
	RemoveBuildingForPlayer(playerid, 3792, -1289.7031, 503.9922, 10.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 3793, -1294.3750, 503.1094, 10.4297, 0.3);

	// Semáforos innecesarios. (Control de Velocidad Unity - Alhambra).
	RemoveBuildingForPlayer(playerid, 1283, 1822.5703, -1763.2578, 15.5859, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 1832.0703, -1756.5156, 16.3594, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 1900.8047, -1756.5156, 16.3594, 0.3);
	RemoveBuildingForPlayer(playerid, 1283, 1832.8359, -1751.5078, 15.5859, 0.3);
	RemoveBuildingForPlayer(playerid, 1283, 1820.8359, -1741.1484, 15.5781, 0.3);

	// LSPD texturizado
	RemoveBuildingForPlayer(playerid, 4064, 1571.6016, -1675.7500, 35.6797, 0.3);
	RemoveBuildingForPlayer(playerid, 3976, 1571.6016, -1675.7500, 35.6797, 0.3);

	// Aeropuerto de Los Santos. IBERIA.
	RemoveBuildingForPlayer(playerid, 4869, 1893.3906, -2269.6016, 14.6094, 0.3);
	RemoveBuildingForPlayer(playerid, 4954, 1893.3906, -2269.6016, 14.6094, 0.3);
	RemoveBuildingForPlayer(playerid, 5011, 1874.2109, -2286.5313, 17.9297, 0.3);
	RemoveBuildingForPlayer(playerid, 3672, 1921.6406, -2206.3906, 18.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2249.0234, 18.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2315.4297, 18.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2382.1406, 18.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 3769, 1961.4453, -2216.1719, 14.9844, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2061.5313, -2209.8125, 14.9766, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2082.4063, -2269.6563, 14.9609, 0.3);
	RemoveBuildingForPlayer(playerid, 3744, 2082.4375, -2298.2266, 14.9609, 0.3);
	RemoveBuildingForPlayer(playerid, 3769, 2060.6875, -2305.9609, 14.9844, 0.3);
	RemoveBuildingForPlayer(playerid, 5077, 1961.5469, -2183.7969, 14.2422, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2422.1719, 18.4766, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2350.7344, 18.4766, 0.3);
	RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2382.1406, 18.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2057.7344, -2402.9922, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2359.7578, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 5006, 1874.2109, -2286.5313, 17.9297, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 1899.4219, -2328.1406, 18.4766, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 1899.4219, -2244.5078, 18.4766, 0.3);
	RemoveBuildingForPlayer(playerid, 1215, 1983.8594, -2281.7109, 13.0625, 0.3);
	RemoveBuildingForPlayer(playerid, 3664, 1960.6953, -2236.4297, 19.2813, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2281.3984, 18.3828, 0.3);
	RemoveBuildingForPlayer(playerid, 5031, 2037.0469, -2313.5469, 18.7109, 0.3);
	RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2315.4297, 18.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2249.0234, 18.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2057.0547, -2315.4688, 12.7422, 0.3);
	RemoveBuildingForPlayer(playerid, 3625, 2060.6875, -2305.9609, 14.9844, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2057.5391, -2270.0703, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2082.4063, -2269.6563, 14.9609, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2082.4375, -2298.2266, 14.9609, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2289.8906, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2332.5547, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2089.7813, -2244.4922, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 3629, 1921.6406, -2206.3906, 18.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1949.3438, -2227.5156, 13.6563, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1944.0625, -2227.5156, 13.6563, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 1951.0313, -2207.7031, 18.4219, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1954.6172, -2227.4844, 13.6875, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1965.1719, -2227.4141, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1959.8984, -2227.4453, 13.7266, 0.3);
	RemoveBuildingForPlayer(playerid, 3625, 1961.4453, -2216.1719, 14.9844, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1975.7266, -2227.4141, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1970.4453, -2227.4141, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 1979.6797, -2207.8438, 18.4219, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1981.0000, -2227.4141, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1996.8281, -2227.3828, 13.7891, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1991.5547, -2227.4141, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1986.2813, -2227.4141, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 1983.8047, -2224.1641, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2002.1094, -2227.3438, 13.8281, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2018.0313, -2224.1641, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 2010.3984, -2207.6172, 18.4219, 0.3);
	RemoveBuildingForPlayer(playerid, 1290, 2042.4766, -2207.7031, 18.4219, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2224.3828, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2219.1094, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1308, 2056.8281, -2224.1641, 12.7500, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9844, -2213.7891, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2208.4609, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2203.1875, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 3574, 2061.5313, -2209.8125, 14.9766, 0.3);
	RemoveBuildingForPlayer(playerid, 1283, 1810.3125, -2170.2891, 15.5547, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 1957.3906, -2176.7109, 16.3438, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2181.3594, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2186.6328, 13.7578, 0.3);
	RemoveBuildingForPlayer(playerid, 1283, 1835.6563, -2162.6719, 15.5547, 0.3);

	// banco
	RemoveBuildingForPlayer(playerid, 5941, 982.3359, -1169.6016, 32.8203, 0.3);
	RemoveBuildingForPlayer(playerid, 5720, 982.3359, -1169.6016, 32.8203, 0.3);

	// gasolinera ganton
	RemoveBuildingForPlayer(playerid, 5224, 2385.1875, -1906.5156, 18.4453, 0.3);
	RemoveBuildingForPlayer(playerid, 1527, 2392.3594, -1914.5703, 14.7422, 0.3);
	RemoveBuildingForPlayer(playerid, 5233, 2374.7734, -1937.1797, 20.1953, 0.3);
	RemoveBuildingForPlayer(playerid, 5168, 2385.1875, -1906.5156, 18.4453, 0.3);
	RemoveBuildingForPlayer(playerid, 1522, 2396.3047, -1899.6172, 12.5391, 0.3);
	RemoveBuildingForPlayer(playerid, 1522, 2399.3281, -1899.6172, 12.5391, 0.3);
	RemoveBuildingForPlayer(playerid, 1687, 2398.3906, -1910.9609, 21.2266, 0.3);
	RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1901.5625, 13.0234, 0.3);
	RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1905.1094, 13.0234, 0.3);
	RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1908.4531, 13.0234, 0.3);

	// alhambra exterior
	RemoveBuildingForPlayer(playerid, 1537, 1837.4375, -1683.9688, 12.3047, 0.3);
	RemoveBuildingForPlayer(playerid, 1533, 1837.4375, -1680.9375, 12.2969, 0.3);

	// VIP exterior
	RemoveBuildingForPlayer(playerid, 1283, 807.9531, -1406.5391, 15.5703, 0.3);
	RemoveBuildingForPlayer(playerid, 1283, 786.9453, -1394.5703, 15.7031, 0.3);
	RemoveBuildingForPlayer(playerid, 1297, 828.7656, -1390.1172, 15.6406, 0.3);
	RemoveBuildingForPlayer(playerid, 1462, 826.8516, -1385.6719, 12.5078, 0.3);
	RemoveBuildingForPlayer(playerid, 1283, 798.3828, -1384.3516, 15.6094, 0.3);
	RemoveBuildingForPlayer(playerid, 1297, 802.7109, -1375.6875, 15.3672, 0.3);
	RemoveBuildingForPlayer(playerid, 5817, 848.8594, -1370.4297, 17.7969, 0.3);
	RemoveBuildingForPlayer(playerid, 1440, 857.3750, -1381.1641, 13.0469, 0.3);
	RemoveBuildingForPlayer(playerid, 1365, 861.9844, -1380.4609, 13.6250, 0.3);
	RemoveBuildingForPlayer(playerid, 1462, 853.1953, -1359.7266, 12.5547, 0.3);
	RemoveBuildingForPlayer(playerid, 1635, 860.9141, -1359.8047, 16.0859, 0.3);
	RemoveBuildingForPlayer(playerid, 5816, 877.3516, -1363.7109, 21.1563, 0.3);
	RemoveBuildingForPlayer(playerid, 1462, 886.3438, -1357.3047, 12.5547, 0.3);
	RemoveBuildingForPlayer(playerid, 1411, 870.1484, -1343.6563, 14.0859, 0.3);
	RemoveBuildingForPlayer(playerid, 1438, 872.2656, -1346.4141, 12.5313, 0.3);
	RemoveBuildingForPlayer(playerid, 1411, 875.4141, -1343.6563, 14.0859, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 778.8594, -1391.1563, 16.3125, 0.3);

 	// LSPD exterior
	RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.3);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.3);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.3);
	RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.3);

	// LCN Exterior - La Cosa Nostra.
	RemoveBuildingForPlayer(playerid, 4917, 1145.9531, -2037.0000, 65.5156, 0.3);
	RemoveBuildingForPlayer(playerid, 673, 1127.2422, -2080.7813, 66.3750, 0.3);
	RemoveBuildingForPlayer(playerid, 691, 1144.0781, -2076.3750, 68.1016, 0.3);
	RemoveBuildingForPlayer(playerid, 661, 1159.9766, -2075.1563, 67.1484, 0.3);
	RemoveBuildingForPlayer(playerid, 618, 1155.3672, -2072.5547, 67.8594, 0.3);
	RemoveBuildingForPlayer(playerid, 691, 1175.6094, -2079.4688, 67.7969, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 1174.7500, -2070.0313, 71.7813, 0.3);
	RemoveBuildingForPlayer(playerid, 4826, 1102.9141, -2036.9844, 77.3359, 0.3); // HQ Italianos.
	RemoveBuildingForPlayer(playerid, 4825, 1145.9531, -2037.0000, 65.5156, 0.3); // HQ.
	RemoveBuildingForPlayer(playerid, 762, 1189.7734, -2078.3672, 70.7422, 0.3);
	RemoveBuildingForPlayer(playerid, 661, 1197.8516, -2074.6172, 67.5313, 0.3);
	RemoveBuildingForPlayer(playerid, 691, 1207.6094, -2079.0781, 66.7813, 0.3);
	RemoveBuildingForPlayer(playerid, 618, 1139.1797, -1997.7656, 67.5547, 0.3);
	RemoveBuildingForPlayer(playerid, 618, 1146.1328, -1998.4688, 67.5547, 0.3);
	RemoveBuildingForPlayer(playerid, 661, 1148.7031, -1992.9844, 67.1484, 0.3);
	RemoveBuildingForPlayer(playerid, 618, 1165.1328, -1994.1172, 66.8047, 0.3);
	RemoveBuildingForPlayer(playerid, 691, 1208.6484, -2000.0703, 67.3906, 0.3);
	RemoveBuildingForPlayer(playerid, 618, 1190.1953, -1995.4531, 66.8047, 0.3);
	RemoveBuildingForPlayer(playerid, 618, 1279.4141, -1998.4766, 56.8125, 0.3);
	RemoveBuildingForPlayer(playerid, 691, 1291.0469, -2007.0703, 54.8828, 0.3);
	RemoveBuildingForPlayer(playerid, 618, 1286.0000, -2000.3984, 55.9766, 0.3);
}

//sistema de fábricas
Dialog:FabricaAdministracion(playerid, response, listitem, inputtext[])
{
	if (!response) { FabricaID[playerid] = -1; return 1; }
	new id = FabricaID[playerid], dialog[360];
	if (id == -1) return 1;
	switch (listitem)
	{
		case 0: //contratar empleados
		{
			if (CountEmpleadosF(id) == 5) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes cinco moledores de cristal.");
			strcat(dialog, "Sexo\tValor\n");
			strcat(dialog, "{EBEBEB}Mujer\t{00CC00}$180,000\n");
			strcat(dialog, "{EBEBEB}Hombre\t{00CC00}$145,000");
			Dialog_Show(playerid, FabricaEmpleados, DIALOG_STYLE_TABLIST_HEADERS, "Moledor de cristal", dialog, "Continuar", "Volver");
		}
		case 1: //regresar vehículo 1
		{
			SetVehicleToRespawn(InfoNegocio[id][nVehiculo][0]);
			InfoNegocio[id][nVeh1SinUso] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "Regresaste el vehículo 1 a la fábrica, puede que un empleado estaba procesando un pedido.");
		}
		case 2: //regresar vehículo 2
		{
			SetVehicleToRespawn(InfoNegocio[id][nVehiculo][1]);
			InfoNegocio[id][nVeh2SinUso] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "Regresaste el vehículo 2 a la fábrica, puede que un empleado estaba procesando un pedido.");
		}
	}
	return 1;
}

Dialog:FabricaEmpleados(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		Dialog_Show(playerid, FabricaAdministracion, DIALOG_STYLE_LIST, "Administración de fábrica", "Contratar empleados\nRegresar vehículo 1\nRegresar vehículo 2", "Continuar", "Salir");
		return 1;
	}
	new id = FabricaID[playerid], gformat[240];
	if (id == -1) return 1;
	if (CountEmpleadosF(id) == 5) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes cinco moledores de cristal.");
	if (listitem == 0) //mujer
	{
		if (InfoNegocio[id][nDinero] < 180000)
		{
			format(gformat, sizeof gformat, "El costo de empleados de sexo femenino es de $180,000. Te faltan $%s.", diner_coma(180000-InfoNegocio[id][nDinero]));
			SendClientMessage(playerid, COLOR_GREY, gformat);
			return 1;
		}
		new SkinMuestra[150], count = 0;
		Loop(x, sizeof InfoSkin, 0) if (InfoSkin[x][sSexo] == 2 && InfoSkin[x][sTipo] == 4)
		{
			SkinMuestra[count] = x;
			count++;
		}
		SkinMuestra[count] = 145;
		count++;
		ShowModelSelectionMenuEx(playerid, SkinMuestra, count, "Femenino", Fabrica_Skin, -11.0, 0.0, -55.0, 1.0);
        FabricaSexo[playerid] = 2;
	}
	else //hombre
	{
		if (InfoNegocio[id][nDinero] < 145000)
		{
			format(gformat, sizeof gformat, "El costo de empleados de sexo masculino es de $145,000. Te faltan $%s.", diner_coma(145000-InfoNegocio[id][nDinero]));
			SendClientMessage(playerid, COLOR_GREY, gformat);
			return 1;
		}
		new SkinMuestra[150], count = 0;
		Loop(x, sizeof InfoSkin, 0) if (InfoSkin[x][sSexo] == 1 && InfoSkin[x][sTipo] == 4)
		{
			SkinMuestra[count] = x;
			count++;
		}
		SkinMuestra[count] = 146;
		count++;
		ShowModelSelectionMenuEx(playerid, SkinMuestra, count, "Masculino", Fabrica_Skin, -11.0, 0.0, -55.0, 1.0);
        FabricaSexo[playerid] = 1;
	}
	return 1;
}

CountEmpleadosF(id)
{
	new count = 0;
	Loop(x, 5, 0) if (InfoNegocio[id][nEmpleado][x] != 0)
	{
		count++;
	}
	return count;
}

//sistema de fábricas
Dialog:FabricaActividades(playerid, response, listitem, inputtext[])
{
	if (!response) { FabricaID[playerid] = -1; return 1; }
	new id = FabricaID[playerid], gformat[235];
	if (id == -1) return 1;
	switch (listitem)
	{
		case 0: //adquirir químicos
		{
			if (EnViajeQuimicos[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya estás haciendo el viaje de químicos.");
			if (EnViajeDrogas[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya estás haciendo el viaje de entregar drogas.");
			if (InfoNegocio[id][nTimeNecesitaQuimicos] != 0)
			{
				format(gformat, sizeof gformat, "Debes esperar %d minutos para volver a buscar químicos.", InfoNegocio[id][nTimeNecesitaQuimicos]);
				SendClientMessage(playerid, COLOR_GREY, gformat);
				return 1;
			}
			new vehicleid = -1;
			Loop(x, MAX_VEHICLES, 0) if (GetVehicleModel(x))
			{
				if (VehicleToPoint(50.0, x, -2162.0496, -248.4825, 544.7022) && GetVehicleVirtualWorld(x) == InfoNegocio[id][nInteriorVW])
				{
					if (x == InfoNegocio[id][nVehiculo][0] && InfoNegocio[id][nVeh1SinUso] == 0)
					{
						vehicleid = x;
						InfoNegocio[id][nVeh1SinUso] = 1;
						break;
					}
					if (x == InfoNegocio[id][nVehiculo][1] && InfoNegocio[id][nVeh2SinUso] == 0)
					{
						vehicleid = x;
						InfoNegocio[id][nVeh2SinUso] = 1;
						break;
					}
				}
			}
			if (vehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "* No hay vehículos disponibles de la fábrica para hacer entregas.");
			switch (random(4))
			{
				case 0: SetPlayerCheckpoint(playerid, -33.2935, 2340.0342, 24.2849, 10.0);
				case 1: SetPlayerCheckpoint(playerid, -1850.3842, 124.1603, 15.1508, 10.0);
				case 2: SetPlayerCheckpoint(playerid, -1037.8477, 1549.7322, 33.0265, 10.0);
				case 3: SetPlayerCheckpoint(playerid, 1091.5005, 2364.4463, 10.8606, 10.0);
			}
			EnViajeQuimicos[playerid] = 1;
			SendClientMessage(playerid, 0xFFFFFFFF, "Ve con el {FFBF00}vehículo de la fábrica{FFFFFF} hasta el {3399FF}punto marcado{FFFFFF} en el radar.");
			FabricaID[playerid] = -1;
		}
		case 1: //vender metanfetamina
		{
			if (EnViajeQuimicos[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya estás haciendo el viaje de químicos.");
			if (EnViajeDrogas[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Ya estás haciendo el viaje de entregar drogas.");
			if (InfoNegocio[id][nEntregasListas] < 1) return SendClientMessage(playerid, COLOR_GREY, "* No hay entregas listas, fijate si hay al menos una caja en los estantes.");
			new vehicleid = -1;
			Loop(x, MAX_VEHICLES, 0) if (GetVehicleModel(x))
			{
				if (VehicleToPoint(50.0, x, -2162.0496, -248.4825, 544.7022) && GetVehicleVirtualWorld(x) == InfoNegocio[id][nInteriorVW])
				{
					if (x == InfoNegocio[id][nVehiculo][0] && InfoNegocio[id][nVeh1SinUso] == 0)
					{
						vehicleid = x;
						InfoNegocio[id][nVeh1SinUso] = 1;
						break;
					}
					if (x == InfoNegocio[id][nVehiculo][1] && InfoNegocio[id][nVeh2SinUso] == 0)
					{
						vehicleid = x;
						InfoNegocio[id][nVeh2SinUso] = 1;
						break;
					}
				}
			}
			if (vehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "* No hay vehículos disponibles de la fábrica para hacer entregas.");
			actualizar_barril(id, vehicleid);
			switch (random(4))
			{
				case 0: SetPlayerCheckpoint(playerid, 1092.6354, -1215.1941, 17.2890, 10.0);
				case 1: SetPlayerCheckpoint(playerid, 2102.6060, -2086.7402, 13.2103, 10.0);
				case 2: SetPlayerCheckpoint(playerid, 2683.9063, -1109.2195, 68.9253, 10.0);
				case 3: SetPlayerCheckpoint(playerid, 2202.7043, -2299.6982, 14.2621, 10.0);
			}
			EnViajeDrogas[playerid] = 1;
			UsandoVehFabrica[playerid] = vehicleid;
			SendClientMessage(playerid, 0xFFFFFFFF, "Ve con el vehículo con {FFBF00}cajas de drogas{FFFFFF} hasta el {3399FF}punto marcado{FFFFFF} en el radar.");
			FabricaID[playerid] = -1;
			InfoNegocio[id][nEntregasListas]--;
			QuitarProduccion(id, InfoNegocio[id][nEntregasListas]);
			mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE negocios SET EntregasListas = '%d' WHERE ID = '%d'", InfoNegocio[id][nEntregasListas], InfoNegocio[id][nID_sql]);
			mysql_tquery(DBcreative, gformat);
		}
	}
	return 1;
}

actualizar_barril(id, vehicleid)
{
	if (vehicleid == InfoNegocio[id][nVehiculo][0])
	{
		Loop(e, 5, 0) if (IsValidDynamicObject(InfoNegocio[id][nBarrilVeh1][e])) { DestroyDynamicObject(InfoNegocio[id][nBarrilVeh1][e]); }
		InfoNegocio[id][nBarrilVeh1][0] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		InfoNegocio[id][nBarrilVeh1][1] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		InfoNegocio[id][nBarrilVeh1][2] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		InfoNegocio[id][nBarrilVeh1][3] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		InfoNegocio[id][nBarrilVeh1][4] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][0], vehicleid, -0.011962,-1.074538,0.107927,-0.199999,0.000000,0.000000);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][1], vehicleid, 0.000000,-1.999999,0.100000,0.349999,-1.149999,0.000000);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][2], vehicleid, -0.007348,-1.509131,0.746309,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][3], vehicleid, 0.658764,-2.240282,0.650753,0.000000,34.049999,0.000000);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh1][4], vehicleid, -0.714648,-2.216089,0.620124,0.000000,-29.000000,0.000000);
	}
	if (vehicleid == InfoNegocio[id][nVehiculo][1])
	{
		Loop(e, 5, 0) if (IsValidDynamicObject(InfoNegocio[id][nBarrilVeh2][e])) { DestroyDynamicObject(InfoNegocio[id][nBarrilVeh2][e]); }
		InfoNegocio[id][nBarrilVeh2][0] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		InfoNegocio[id][nBarrilVeh2][1] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		InfoNegocio[id][nBarrilVeh2][2] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		InfoNegocio[id][nBarrilVeh2][3] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		InfoNegocio[id][nBarrilVeh2][4] = CreateDynamicObject(1271, 0 , 0, -1000, 0, 0 , 0);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][0], vehicleid, -0.011962,-1.074538,0.107927,-0.199999,0.000000,0.000000);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][1], vehicleid, 0.000000,-1.999999,0.100000,0.349999,-1.149999,0.000000);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][2], vehicleid, -0.007348,-1.509131,0.746309,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][3], vehicleid, 0.658764,-2.240282,0.650753,0.000000,34.049999,0.000000);
		AttachDynamicObjectToVehicle(InfoNegocio[id][nBarrilVeh2][4], vehicleid, -0.714648,-2.216089,0.620124,0.000000,-29.000000,0.000000);
	}
}

PermisosContrato(playerid, id)
{
	if (InfoPlayer[playerid][pNegocio1] == id) return 1;
	if (InfoPlayer[playerid][pNegocio2] == id) return 1;
	if (InfoPlayer[playerid][pContrato] == id) return 1;
	return 0;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	if (IsPlayerNPC(playerid)) return 1;
	// H
	if (newkeys == KEY_CTRL_BACK)
	{
		if (!IsPlayerInAnyVehicle(playerid))
		{
			//administrar fábrica
			if (IsPlayerInRangeOfPoint(playerid, 2.0, -2182.9316, -208.9902, 544.7307) && InfoPlayer[playerid][pInterior] == 9)
			{
				new id = EnNegocio(playerid);
				if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna fábrica.");
				if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes las llaves de esta fábrica.");
				Dialog_Show(playerid, FabricaAdministracion, DIALOG_STYLE_LIST, "Administración de fábrica", "Contratar empleados\nRegresar vehículo 1\nRegresar vehículo 2", "Continuar", "Salir");
				FabricaID[playerid] = id;
				return 1;
			}
			//lista de actividades
			if (IsPlayerInRangeOfPoint(playerid, 2.0, -2181.2676, -211.3310, 544.4515) && InfoPlayer[playerid][pInterior] == 9)
			{
				new id = EnNegocio(playerid);
				if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna fábrica.");
				if (PermisosContrato(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "Sólo empleados o dueño de la fábrica.");
				Dialog_Show(playerid, FabricaActividades, DIALOG_STYLE_LIST, "Actividades", "Adquirir químicos\nVender metanfetamina", "Realizar", "Cancelar");
				FabricaID[playerid] = id;
				return 1;
			}
			//tanques
			if (EnTanquesProduccion(playerid))
			{
				new id = EnNegocio(playerid);
				if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna fábrica.");
				if (PermisosContrato(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "Sólo empleados o dueño de la fábrica.");
				if (InfoNegocio[id][nQuimicos] < 20)
				{
					SendClientMessage(playerid, COLOR_GREY, "La fábrica necesita 20 químicos acumulados para hacer cristal.");
					return 1;
				}
				new emp = -1;
				Loop(x, 5, 0) if (InfoNegocio[id][nEmpleado][x] != 0 && InfoNegocio[id][nCocinando][x] == 0)
				{
					emp = x;
					break;
				}
				if (emp == -1) return SendClientMessage(playerid, COLOR_GREY, "* No hay mesas disponibles para producir o no hay empleados.");
				InfoNegocio[id][nQuimicos] -= 20;
				InfoNegocio[id][nCocinando][emp] = 1;
				InfoNegocio[id][nTimeCocinando][emp] = 150;
				new query[320], pago = Random(550, 1000);
				mysql_format(DBcreative, query, sizeof query, "UPDATE negocios SET Quimicos = '%d', Cocinando%d = '%d', TimeCocinando%d = '%d' WHERE ID = '%d'",
				InfoNegocio[id][nQuimicos], emp+1, InfoNegocio[id][nCocinando][emp], emp+1, InfoNegocio[id][nTimeCocinando][emp], InfoNegocio[id][nID_sql]);
				mysql_tquery(DBcreative, query);
				UpdateMesasProduccion(id);
				UpdateQuimicos(id);
				format(query, sizeof query, "Colocaste en producción la mesa %d, recibiste $%s por ello.", emp+1, diner_coma(pago));
				SendClientMessage(playerid, COLOR_LIGHTGREEN, query);
				GivePlayerCash(playerid, pago, "producir mesa (fabrica drogas)");
			}
			//mesas
			if (EnMesasProduccion(playerid) != -1)
			{
				new id = EnNegocio(playerid);
				if (id == -1) return SendClientMessage(playerid, COLOR_GREY, "* No estás en ninguna fábrica.");
				if (PermisosContrato(playerid, id) == 0) return SendClientMessage(playerid, COLOR_GREY, "Sólo empleados o dueño de la fábrica.");
				if (InfoNegocio[id][nEntregasListas] >= 20) return SendClientMessage(playerid, COLOR_GREY, "Ya hay más de 20 entregas de drogas por llevar.");
				new query[320], idM = EnMesasProduccion(playerid), pago = Random(600, 1100);
				if (InfoNegocio[id][nEmpleado][idM] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esta mesa no tiene empleado.");
				if (InfoNegocio[id][nCocinando][idM] == 0) return SendClientMessage(playerid, COLOR_GREY, "Esta mesa no está en producción.");
				if (InfoNegocio[id][nTimeCocinando][idM] != 0) return SendClientMessage(playerid, COLOR_GREY, "Esta mesa aún está en producción.");
				InfoNegocio[id][nCocinando][idM] = 0;
				InfoNegocio[id][nTimeCocinando][idM] = 0;
				InfoNegocio[id][nEntregasListas]++;
				UpdateMesasProduccion(id);
				if (InfoNegocio[id][nEntregasListas] <= 20) { ColocarProduccion(id, InfoNegocio[id][nEntregasListas]); }
				mysql_format(DBcreative, query, sizeof query, "UPDATE negocios SET Cocinando%d = '%d', TimeCocinando%d = '%d', EntregasListas = '%d' WHERE ID = '%d'", idM+1, InfoNegocio[id][nCocinando][idM], idM+1, InfoNegocio[id][nTimeCocinando][idM], InfoNegocio[id][nEntregasListas], InfoNegocio[id][nID_sql]);
				mysql_tquery(DBcreative, query);
				format(query, sizeof query, "Recogiste la droga de la mesa %d, recibiste $%s por ello.", idM+1, diner_coma(pago));
				SendClientMessage(playerid, COLOR_LIGHTGREEN, query);
				GivePlayerCash(playerid, pago, "recoger droga (fabrica drogas)");
				Streamer_Update(playerid);
			}
		}
		//cmds
		cmd_entrar(playerid);
		cmd_salir(playerid);
	}
	// N
	if (newkeys == KEY_NO)
	{
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			cmd_motor(playerid);
		}
	}
	// Y
	if (newkeys == KEY_YES)
	{
		if (InfoPlayer[playerid][pManoDerecha] == 40 && InfoPlayer[playerid][pManoDerechaCant] == 0)
		{
			if(TaserRecarga[playerid] != 0){SendClientMessage(playerid, COLOR_GREY, "Espera 5 segundos antes de recargar."); return 1;}
			cmd_me(playerid, "recarga su pistola táser con 400V");
			GivePlayerWeapon(playerid, 23, 2);
			InfoPlayer[playerid][pManoDerechaCant] = 2;
			ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,0,0,1);
			ActualizarManos(playerid);
		}
		else cmd_bol(playerid);
	}
	// graffitear
	if (PRESSED(KEY_FIRE) && GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN && GetPVarInt(playerid, "ModoSpray") == 0)
	{
		if (member_faccion(playerid, 7))
		{
			new bool: nearGraffiti;
			Loop(id, MAX_GRAFFITIS, 0) if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoGraffiti[id][gr_PosX], InfoGraffiti[id][gr_PosY], InfoGraffiti[id][gr_PosZ]))
			{
				nearGraffiti = true;
				SetPVarInt(playerid, "ModoSpray", 1);
				SetPVarInt(playerid, "GraffitiID", id);
			}
			if (nearGraffiti)
				playerGraffitiTimer[playerid] = SetTimerEx("UsandoSpray", 1000, true, "i", playerid);
		}
	}
	if (RELEASED(KEY_FIRE) && GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN && GetPVarInt(playerid, "ModoSpray") == 1)
	{
		KillTimer(playerGraffitiTimer[playerid]);
		DeletePVar(playerid, "ModoSpray");
		DeletePVar(playerid, "GraffitiID");
		GameTextForPlayer(playerid, "~n~~w~Pintura ~r~cancelada", 3000, 5);
	}
	//
	if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys) && gPlayerUsingLoopingAnim[playerid] == 1)
	{
	    StopLoopingAnim(playerid);
        TextDrawHideForPlayer(playerid,txtAnimHelper);
		if (GetPVarInt(playerid, "PlayerCuffed") == 2) SetPVarInt(playerid, "PlayerCuffed", 0);
    }
	if(newkeys & KEY_SPRINT)
    {
    	if(IsPlayerConnected(playerid))
		{
		    if(ShowRules[playerid] == 0)
			{
				return 1;
			}
  			if(PlayerDrunk[playerid] > 9) { ApplyAnimation(playerid,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[playerid]*1000); }
  			if(PuedeD[playerid] == 1)
	    	{
				return GameTextForPlayer(playerid, "Espera. . .", 5000, 1);
			}
			else if(ShowRules[playerid] == 1)
			{
				switch(RulesTime[playerid])
				{
		    		case 1: RulesTime[playerid] = 2;
		    		case 2: RulesTime[playerid] = 3;
		    		case 3: RulesTime[playerid] = 4;
		    		case 4: RulesTime[playerid] = 5;
		    		case 5: RulesTime[playerid] = 6;
		    		case 6: RulesTime[playerid] = 7;
		    		case 7: RulesTime[playerid] = 8;
		    		case 8: RulesTime[playerid] = 9;
		    		case 9: RulesTime[playerid] = 10;
		    	}
		    	ShowRol(playerid);
		    }
		}
	}
	return 1;
}

forward UsandoSpray(playerid);
public UsandoSpray(playerid)
{
	//check
	new sprayCounter = GetPVarInt(playerid, "LetraGraffiti"), id = GetPVarInt(playerid, "GraffitiID"), counter[60], graffitiText[128];
	GetPVarString(playerid, "TextoGraffiti", graffitiText, sizeof graffitiText);
	if (isnull(graffitiText)) return SendClientMessage(playerid, 0xEBEBEBFF, "No tienes nada asignado a rociar, usa /graffiti.");
	//spray
	if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoGraffiti[id][gr_PosX], InfoGraffiti[id][gr_PosY], InfoGraffiti[id][gr_PosZ]))
	{
		sprayCounter--;
		SetPVarInt(playerid, "LetraGraffiti", sprayCounter);
		format(counter, sizeof counter, "~p~Pintando~n~~w~&~g~%d]", sprayCounter);
		GameTextForPlayer(playerid, counter, 3000, 3);
		if (sprayCounter <= 0)
		{
			alm(InfoGraffiti[id][gr_Mensaje], graffitiText);
			strreplace(graffitiText, "(n)", "\n");
			strreplace(graffitiText, "(a)", "{0000FF}"); //azul
			strreplace(graffitiText, "(b)", "{FFFFFF}"); //blanco
			strreplace(graffitiText, "(am)", "{FFFF00}"); //amarillo
			strreplace(graffitiText, "(v)", "{00C200}"); //verde
			strreplace(graffitiText, "(ne)", "{000000}"); //negro
			strreplace(graffitiText, "(na)", "{FFBF00}"); //naranja
			strreplace(graffitiText, "(r)", "{FF0000}"); //rojo
			strreplace(graffitiText, "(ce)", "{00FFFF}"); //celeste
			SetDynamicObjectMaterialText(InfoGraffiti[id][gr_Objeto], 0, graffitiText, OBJECT_MATERIAL_SIZE_256x256, "Arial", 32, 1, 0xFFFFFFFF, 0, 1);
			GameTextForPlayer(playerid, "~g~Terminado", 3500, 3);
			alm(InfoGraffiti[id][gr_Creador], NombreDeCuenta(playerid));
			InfoGraffiti[id][gr_Fecha] = gettime();
			SetPVarInt(playerid, "LetraGraffiti", GetPVarInt(playerid, "SetraGraffiti"));
			DeletePVar(playerid, "GraffitiID");
			DeletePVar(playerid, "ModoSpray");
			KillTimer(playerGraffitiTimer[playerid]);
			new query[512];
			mysql_format(DBcreative, query, sizeof query, "UPDATE graffitis SET Mensaje = '%e', Creador = '%e', Fecha = '%d' WHERE ID = '%d'", InfoGraffiti[id][gr_Mensaje], InfoGraffiti[id][gr_Creador], InfoGraffiti[id][gr_Fecha], InfoGraffiti[id][grID_sql]);
			mysql_tquery(DBcreative, query);
		}
	}
	else
	{
		SetPVarInt(playerid, "LetraGraffiti", GetPVarInt(playerid, "SetraGraffiti"));
		DeletePVar(playerid, "GraffitiID");
		DeletePVar(playerid, "ModoSpray");
		KillTimer(playerGraffitiTimer[playerid]);
		GameTextForPlayer(playerid, "~n~~w~Pintura ~r~cancelada", 3000, 5);
	}
	return 1;
}

stock strreplace(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = sizeof(string))
{
    // No need to do anything if the limit is 0.
    if (limit == 0)
        return 0;

    new
             sublen = strlen(search),
             replen = strlen(replacement),
        bool:packed = ispacked(string),
             maxlen = maxlength,
             len = strlen(string),
             count = 0
    ;


    // "maxlen" holds the max string length (not to be confused with "maxlength", which holds the max. array size).
    // Since packed strings hold 4 characters per array slot, we multiply "maxlen" by 4.
    if (packed)
        maxlen *= 4;

    // If the length of the substring is 0, we have nothing to look for..
    if (!sublen)
        return 0;

    // In this line we both assign the return value from "strfind" to "pos" then check if it's -1.
    while (-1 != (pos = strfind(string, search, ignorecase, pos))) {
        // Delete the string we found
        strdel(string, pos, pos + sublen);

        len -= sublen;

        // If there's anything to put as replacement, insert it. Make sure there's enough room first.
        if (replen && len + replen < maxlen) {
            strins(string, replacement, pos, maxlength);

            pos += replen;
            len += replen;
        }

        // Is there a limit of number of replacements, if so, did we break it?
        if (limit != -1 && ++count >= limit)
            break;
    }

    return count;
}

funcion FreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, 0);
}

funcion UnfreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, 1);
}

funcion ReleasePlayer(playerid)
{
	SetPVarInt(playerid, "IsFrozen", 0);
	TogglePlayerControllable(playerid,1);
}

funcion NewbieUnMuted(playerid)
{
    InfoPlayer[playerid][pDudaBloqueado] = 0;
    SendClientMessage(playerid, COLOR_WHITE, "Ahora ya no estas silenciado del canal de ayuda recuerda usarlo sólo para preguntas.");
    SendClientMessage(playerid, COLOR_WHITE, "Si sigues recuerda que puedes resultar baneado automáticamente del servidor.");
    if (InfoPlayer[playerid][pAdvertencia] == 3)
	{
 		new ip[32], string[128];
		GetPlayerIp(playerid,ip,sizeof(ip));
  		InfoPlayer[playerid][pBaneo] = 2;
		InfoPlayer[playerid][pAdvertencia]= 0;
		format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s(%d) fue baneado automáticamente, razón: Execesivas advertencias.", NombreJugador(playerid), playerid);
		SendAllMessage(0xFFFFFFFF, string);
		AddBan(ip);
		Kick(playerid);
	}
	new query[256];
	mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET OtakuN_N = '%d', Advertencia = '%d', DudaBloqueado = '%d' WHERE ID = '%d'", InfoPlayer[playerid][pBaneo], InfoPlayer[playerid][pAdvertencia], InfoPlayer[playerid][pDudaBloqueado], InfoPlayer[playerid][pID]);
	mysql_tquery(DBcreative, query);
	return 1;
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
 	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

//·| << Timers de Objetos >> ========================================================================================|·
funcion Puerta2Abierta()
{
    MoveObject(PuertaH2,250.67543029785, 130.39466552734, 1037.9182128906, 0.97);
    SetTimer("Puerta2Cerrada", 5000, 0);
}
funcion Puerta1Abierta()
{
    MoveObject(PuertaH1,250.56510925293, 130.34936218262, 1032.2158203125, 0.97);
    SetTimer("Puerta1Cerrada", 8000, 0);
}
funcion Puerta2Cerrada()
{
    MoveObject(PuertaH2,250.67543029785, 131.59466552734, 1037.9182128906, 0.97);
    if(HaciaAbajo == 1) {
    SetTimer("Eabajo", 2000, 0); }
    else { }
}
funcion Puerta1Cerrada()
{
    MoveObject(PuertaH1,250.56510925293, 131.54936218262, 1032.2158203125, 0.97);
    if(HaciaArriba == 1) {
    SetTimer("Earriba", 2000, 0); }
    else {
    }
}

//Buttons
funcion ClosedSDderecha()
{
	MoveDynamicObject(ObjSD_derecha, 253.22101, 108.32223, 1002.21582, 4);
	return 1;
}

funcion ClosedSDizquierda()
{
	MoveDynamicObject(ObjSD_izquierda, 239.62317, 116.85412, 1002.21582, 4);
	return 1;
}

funcion CloseFBILobbyRight()
{
	MoveDynamicObject(FBILobbyRight,302.39355469,-1521.62988281,-46.13965225,4);
	return 1;
}

stock PlayerFacePlayer(playerid, targetplayerid) { // Yeah, this'll fix the handshake headaches we had last time around (shaking air).
	new
		Float: Angle;

	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return 1;
}

funcion ReFill(playerid)
{
	if(!IsAtGasStation(playerid) || !IsPlayerInAnyVehicle(playerid) || veh_gasolina[GetPlayerVehicleID(playerid)] >= 200 || GetPlayerCash(playerid) < 1)
	{
		StopRefueling(playerid);
	}
	else
	{
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) return StopRefueling(playerid);
		veh_gasolina[GetPlayerVehicleID(playerid)] += 125;
		PrecioGasolinaVeh[playerid] += 20;
		if(veh_gasolina[GetPlayerVehicleID(playerid)] >= 200) veh_gasolina[GetPlayerVehicleID(playerid)] = 200;
	}
	return true;
}

stock StopRefueling(playerid)
{
	new string[128];
	GivePlayerCash(playerid, -PrecioGasolinaVeh[playerid], "llenar gasolina");
	format(string, sizeof string, "Tu vehiculo a sido llenado por $%s.", diner_coma(PrecioGasolinaVeh[playerid]));
	SendClientMessage(playerid, COLOR_GRAD2, string);
    //TillEx(4, 200); // Gasolineras.
	RefuelingVehicle[playerid] = 0; PrecioGasolinaVeh[playerid] = 0; KillTimer(RefuelingVehicleTimer[playerid]);
	return true;
}

public OnVehicleSpawn(vehicleid)
{
	//uwu
	arr_Engine{vehicleid} = 0;
	veh_gasolina[vehicleid] = 200;
	if (EsVehFabrica(vehicleid))
	{
		new id = EsVehFabrica(vehicleid);
		SetVehicleVirtualWorld(vehicleid, InfoNegocio[id][nInteriorVW]);
		LinkVehicleToInterior(vehicleid, InfoNegocio[id][nInteriorInt]);
		SetVehicleHealth(vehicleid, 5000.0);
		if (vehicleid == InfoNegocio[id][nVehiculo][0])
		{
			Loop(e, 5, 0) if (IsValidDynamicObject(InfoNegocio[id][nBarrilVeh1][e])) { DestroyDynamicObject(InfoNegocio[id][nBarrilVeh1][e]); }
			InfoNegocio[id][nCountQVeh1] = 0;
			InfoNegocio[id][nVeh1SinUso] = 0;
		}
		if (vehicleid == InfoNegocio[id][nVehiculo][1])
		{
			Loop(e, 5, 0) if (IsValidDynamicObject(InfoNegocio[id][nBarrilVeh2][e])) { DestroyDynamicObject(InfoNegocio[id][nBarrilVeh2][e]); }
			InfoNegocio[id][nCountQVeh2] = 0;
			InfoNegocio[id][nVeh2SinUso] = 0;
		}
		return  1;
	}
	// vehiculos de usuarios uwu
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		InfoVehiculo[v][vMaleteroOn] = 0;
		DestroyVehicle(vehicleid);
		InfoVehiculo[v][vIG_id] = CreateVehicle(InfoVehiculo[v][vModelo], InfoVehiculo[v][vPosicionX], InfoVehiculo[v][vPosicionY], InfoVehiculo[v][vPosicionZ], InfoVehiculo[v][vPosicionR], InfoVehiculo[v][vColor_1], InfoVehiculo[v][vColor_2], -1, InfoVehiculo[v][vSirena]);
		new v_vehicleid = InfoVehiculo[v][vIG_id];
		if (InfoVehiculo[v][vSeguro] != 0) LockPlayerVehicle(v_vehicleid);
		if (InfoVehiculo[v][vPaintJob] != -1) ChangeVehiclePaintjob(v_vehicleid, InfoVehiculo[v][vPaintJob]);
		LinkVehicleToInterior(v_vehicleid, InfoVehiculo[v][vInterior]);
		SetVehicleExVirtualWorld(v_vehicleid, InfoVehiculo[v][vVirtualWorld]);
		if (InfoVehiculo[v][vModelo] == 528 || InfoVehiculo[v][vModelo] == 427) SetVehicleHealth(v_vehicleid, 5000.0);
		else SetVehicleHealth(v_vehicleid, InfoVehiculo[v][vVida]);
		UpdateVehicleDamageStatus(v_vehicleid, InfoVehiculo[v][vDanioSuperficie], InfoVehiculo[v][vDanioPuertas], InfoVehiculo[v][vDanioLuces], InfoVehiculo[v][vDanioRuedas]);
		Loop(m, MAX_MODIFICACIONES, 0) { AddVehicleComponent(v_vehicleid, InfoVehiculo[v][vModificacion][m]); }
		if (!isnull(InfoVehiculo[v][vCallSign]))
		{
			DestroyDynamic3DTextLabel(InfoVehiculo[v][vOnCallSign]);
			InfoVehiculo[v][vOnCallSign] = CreateDynamic3DTextLabel(InfoVehiculo[v][vCallSign], 0xEBEBEBFF, -1.0, -2.8, 0.0, 30.0, INVALID_PLAYER_ID, v_vehicleid);
		}
		foreach(new playerid: Player) if (IsPlayerConnectedEx(playerid))
		{
			if (llaves_vehiculo(playerid, v_vehicleid) != -1)
			{
				new string[195];
				format(string, sizeof string, "Tu {FFBF00}%s{EBEBEB} ha sido enviado a la última posición donde lo aparcaste.", GetVehicleName(v_vehicleid));
				SendClientMessage(playerid, 0xEBEBEBFF, string);
			}
		}
		return 1;
	}
	return 1;
}

stock CleanScreen()
{
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        ClearChat(i);
    }
    return 1;
}

funcion DisableVehicleAlarm(vehicleid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
}

stock IsLocolowVehicle(veh)
{
	new model = GetVehicleModel(veh);
    switch(model)
    {
        case 412,534,535,536,566,567,576: return 1;
    }
    return 0;
}

stock SendReportToQue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = -1;

        for(new i=0;i<MAX_REPORTS;i++)
        {
                if(!breakingloop)
                {
                        if(Reports[i][HasBeenUsed] == 0)
                        {
                                breakingloop = true;
                                newid = i;
                        }
                }
    }
    if(newid != -1)
    {
        alm(Reports[newid][Report], report);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 5;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 30000, 0, "d", newid);
        new string[250];
        format(string, sizeof string, "Reporte de %s(%d) {RID: %d]: %s", NombreOriginal(reportfrom), reportfrom, newid, (report));
        SendAdminMessage(0xFFFF91FF, string);
    }
    else
    {
        ClearReports();
		SendReportToQue(reportfrom, report);
	}
	return 1;
}

funcion ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
		alm(Reports[i][Report], "None");
		Reports[i][CheckingReport] = 999;
        Reports[i][ReportFrom] = 999;
        Reports[i][TimeToExpire] = 5;
        Reports[i][HasBeenUsed] = 0;
        Reports[i][BeingUsed] = 0;
	}
	return 1;
}

funcion ReportTimer(reportid)
{
	if(Reports[reportid][BeingUsed] == 1)
	{
	    if(Reports[reportid][TimeToExpire] > 0)
	    {
	        Reports[reportid][TimeToExpire]--;
	        if(Reports[reportid][TimeToExpire] == 0)
	        {
	            SendClientMessage(Reports[reportid][ReportFrom], COLOR_GRAD2, "Tu reporte ha expirado. Tu puedes intentar mandando otro reporte.");
	            SendClientMessage(Reports[reportid][ReportFrom], COLOR_GRAD2, "También es recomendable que busques ayuda en nuestro foro www.cr-rp.com");
	            Reports[reportid][BeingUsed] = 0;
	            Reports[reportid][ReportFrom] = 999;
	            return 1;
	        }
  			Reports[reportid][ReportExpireTimer] = SetTimerEx("ReportTimer", 30000, 0, "d", reportid);
		}
	}
	return 1;
}

funcion ReplyTimer(reportid)
{
    Reports[reportid][BeingUsed] = 0;
	Reports[reportid][ReportFrom] = 999;
    Reports[reportid][CheckingReport] = 999;
}

// CHECK VIP EXPIRE
stock IsWAAVehicle(veh)
{
    new model = GetVehicleModel(veh);
    switch(model)
    {
        case 558,559,560,561,562,565: return 1;
    }
    return 0;
}

funcion RadioBroadCast(playerid, color, string[])
{
	new MiscString[128], Float: aaaPositions[3];
	foreach(Player, i)
	{
		if(InfoPlayer[i][pFrecuencia_radio] == InfoPlayer[playerid][pFrecuencia_radio] && InfoPlayer[i][pTogPortatil] != 0 || See_FRC[i] == 1) // Frecuencia de todos, igual al del player, tener todos radio y tenerla todos encendida.
		{                                                                                   // Segunda opción: Tener /verwalkie activado y poder ver todos el canal.
		    if(See_FRC[playerid] == 0) // Espiar canal /wt - /wa - /pr.
		    {
				GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
				format(MiscString, sizeof(MiscString), "** Radio (%d khz) ** %s: %s", InfoPlayer[playerid][pFrecuencia_radio], NombreJugador(playerid), string);
				SendClientMessage(i, 0x6DFB6DFF, MiscString);
			}
			else
			{
				format(MiscString, sizeof(MiscString), "[ADM] WALKIE OOC: (( Administrador dice %s: %s))", NombreJugador(playerid), string);
				SendClientMessage(i, 0x6DFB6DFF, MiscString);
			}
		}
	}
}
funcion RadioBroadCastOOC(playerid, color, string[])
{
	new MiscString[128], Float: aaaPositions[3];
	foreach(Player, i)
	{
		if(InfoPlayer[i][pFrecuencia_radio] == InfoPlayer[playerid][pFrecuencia_radio] && InfoPlayer[i][pTogPortatil] != 0 || See_FRC[i] == 1) // Frecuencia de todos, igual al del player, tener todos radio y tenerla todos encendida.
		{                                                                                   // Segunda opción: Tener /verwalkie activado y poder ver todos el canal.
		    if(See_FRC[playerid] == 0) // Espiar canal /wt - /wa - /pr.
		    {
				GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
				format(MiscString, sizeof(MiscString), "*[OOC] WALKIE (%d khz) ** (( %s: %s ))", InfoPlayer[playerid][pFrecuencia_radio], NombreJugador(playerid), string);
				SendClientMessage(i, 0x6DFB6DFF, MiscString);
			}
			else
			{
				format(MiscString, sizeof(MiscString), "[ADM] WALKIE OOC: (( Administrador dice %s: %s))", NombreJugador(playerid), string);
				SendClientMessage(i, 0x6DFB6DFF, MiscString);
			}
		}
	}
}

funcion ShowRol(playerid)
{
	if(ShowRules[playerid] == 1)
	{
	    switch(RulesTime[playerid])
	    {
	        case 1:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	SetPlayerVirtualWorld(playerid, playerid+1);
	        	TogglePlayerControllable(playerid, 0);
				Streamer_UpdateEx(playerid,370.0804,-2087.8767,7.8359);
				SetPlayerPos(playerid,370.0804,-2087.8767,-10.0);
				SetPlayerCameraPos(playerid,423.3802,-2067.7915,29.8605);
				SetPlayerCameraLookAt(playerid,370.0804,-2087.8767,7.8359);
	        	SendClientMessage(playerid, COLOR_WHITE, "Hola! Bienvenido al tutorial, esperamos que aprendas y te diviertas junto a todos.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Un administrador te envió al tutorial con el fin de ayudarte a aprender y a disfrutar el roleplay.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Pulsa la tecla ESPACIO para seguir.");

			}
	        case 2:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessage(playerid, COLOR_GENERAL, "DeathMatch [DM]");
	        	SendClientMessage(playerid, COLOR_WHITE, "¿Qué es DeathMatch [DM]? Bueno esto se llama a matar o golpear a una persona sin tener una razon para hacerlo.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Un ejemplo, si vas por la calle y empiezas a pegarle o a dispararle a alguien sin tener ninún motivo");
	        	SendClientMessage(playerid, COLOR_WHITE, "hasta matarlo, la persona te reportará y tu puedes ser encarcelado por 10 a 30 minutos.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Haciendo esto estarias haciendo DeathMatch y va en contra las reglas del servidor.");
	        }
	        case 3:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessage(playerid, COLOR_GENERAL, "Metagaming [MG]");
	        	SendClientMessage(playerid, COLOR_WHITE, "¿Qué es Metagaming [MG]? Es usar información OOC dentro de IC o viceversa ¿No te quedo muy claro no?");
	        	SendClientMessage(playerid, COLOR_WHITE, "bueno, como verás cada usuario tiene un nombre en su cabeza, es obvio que en la vida real no pasa lo mismo");
	        	SendClientMessage(playerid, COLOR_WHITE, "para saber su nombre tienes que preguntarle; Hola ¿Cual es tu nombre? y el te responderá, desde ese momento ya");
	        	SendClientMessage(playerid, COLOR_WHITE, "puedes llamarlo por su nombre. También es usar signos de caracteres en el chat IC (xD, :), xP, etc).");
	        }
	        case 4:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 13000, 0, "d", playerid);
	        	SendClientMessage(playerid, COLOR_GENERAL, "In Character - Out of Character (IC - OOC)");
	        	SendClientMessage(playerid, COLOR_WHITE, "IC : Es la información que tu personaje obtiene en su vida (In Game), y sólo tu personaje la sabe.");
	        	SendClientMessage(playerid, COLOR_WHITE, "OOC: Es la información que tu sabes como persona, la que está manejando el personaje desde tu computador.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Por eso es que no puedes mezclar información IC con OOC o viceversa. Por que estarías haciendo Metagaming.");
	        }
	        case 5:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessage(playerid, COLOR_GENERAL, "Powergaming [PG]");
	        	SendClientMessage(playerid, COLOR_WHITE, "¿Qué es Powergaming [PG]? Esto se llama a realizar actos (roles) ficticios y fuera de lo posible en la vida real.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Por ejemplo, Usas el comando /me se tira del edificio y sige caminando. Es lógico que tu no vas a tirarte");
	        	SendClientMessage(playerid, COLOR_WHITE, "de un quinto piso y salir vivo no?. También es obligar/forzar a una persona hacer un ROL.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Por ejemplo, usando el comando /me le roba su dinero y se va corriendo. Imposible, para rolear tienes que tener criterio.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Recuerda eres un personaje REAL y tienes que portate como tal.");
	        }
	        case 6:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	SendClientMessage(playerid, COLOR_GENERAL, "Revenge Kill (RK)");
	        	SendClientMessage(playerid, COLOR_WHITE, "¿Qué es Revenge Kill [RK]? Cuando `mueres´ en un ROL (Asalto a un banco, guerra de pandillas, etc)");
	        	SendClientMessage(playerid, COLOR_WHITE, "tu no puedes regresar al mismo lugar y vengarte a por quien te mató, ya que tu exactamente no mueres, resultas herido");
	        	SendClientMessage(playerid, COLOR_WHITE, "y cuando te recuperas no recuerdas nada, entonces no puedes volver al mismo lugar, ya que no recuerdas nada.");
	        }
	        case 7:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessage(playerid, COLOR_GENERAL, "Bad Driving (BD) - Badly Parked Car (BPC)");
	        	SendClientMessage(playerid, COLOR_WHITE, "¿Qué es Bad Driving (BD) y Badly Parked Car (BPC)?");
	        	SendClientMessage(playerid, COLOR_WHITE, "Esto es muy sencillo y creo que su mismo nombre lo dice, se llama a manejar incorrectamente (por las veredas, atropellando gente, etc),");
	        	SendClientMessage(playerid, COLOR_WHITE, "y es en contra las reglas del servidor, recuerda que estás simulando la vida real.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Badly Parked Car se define en estacionar tu vehiculo de una manera imposible, o No-RP, por ejemplo en medio del asfalto.");
	        }
	        case 8:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessage(playerid, COLOR_GENERAL, "Car Kill - Car Jack");
	        	SendClientMessage(playerid, COLOR_WHITE, "¿Car Kill (CK) y Car Jack (CJ)?");
	        	SendClientMessage(playerid, COLOR_WHITE, " * Car Kill es matar a una persona atropellandolo en varias ocaciones hasta matarlo.");
	        	SendClientMessage(playerid, COLOR_WHITE, " * Car Jack es sacar a una persona de su auto sin ningún rol alguno.");
	        	SendClientMessage(playerid, COLOR_WHITE, " * Esos 2 Terminos son en contra del servidor y puedes ser castigado.");
	        }
	        case 9:
	        {
	            ClearChat(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	SendClientMessage(playerid, COLOR_GENERAL, "Fin - Reglas de Rol");
	        	SendClientMessage(playerid, COLOR_WHITE, "Bien, espero que hayas aprendido en este resumen de las reglas de nuestro servidor, puedes entrar a nuestro");
	        	SendClientMessage(playerid, COLOR_WHITE, "foro (www.cr-rp.com) y buscar más información, ahora volverás a tu posición anterior, no perderás nada.");
	        	SendClientMessage(playerid, COLOR_WHITE, "Recuerda siempre que más importante es el rol de un presonaje. Bienvenido y disfruta del servidor!");
	        }
	        case 10:
	        {
	            ClearChat(playerid);
				RulesTime[playerid] = 0; RulesTime[playerid] = 0;
				SetPlayerPos(playerid, GetPVarFloat(playerid, "rOldX"), GetPVarFloat(playerid, "rOldY"), GetPVarFloat(playerid, "rOldZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "rOldVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid, "rOldInt"));
				InfoPlayer[playerid][pVirtualWorld] = GetPVarInt(playerid, "rOldVW");
				InfoPlayer[playerid][pInterior] = GetPVarInt(playerid, "rOldInt");
				ShowRules[playerid] = 0;
		    	RulesTime[playerid] = 0;
		        TogglePlayerControllable(playerid, 1);
		        ClearAnimations(playerid);
		        SetCameraBehindPlayer(playerid);
		        SendClientMessage(playerid, COLOR_GENERAL, "Puedes seguir roleando, recuerda que su duda puede estar en /soporte, gracias.");
	        }
		}
	}
	return 1;
}

funcion TutRolTimer(playerid)
{
	PuedeD[playerid] = 0;
	GameTextForPlayer(playerid, "Pulsa ESPACIO", 2000, 3);
}

stock fcreate(filename[])
{
	if (fexist(filename)) return false;
	new File:fhnd;
	fhnd = fopen(filename,io_write);
	if (fhnd)
	{
		fclose(fhnd);
		return true;
	}
	return false;
}

funcion splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

ClearPropiedad(id) //renovado by EdinsonWalker (16-01-2020)
{
	new query[370];
	InfoCasa[id][cSeguro] = 1;
	alm(InfoCasa[id][cPropietario], "gobielno");
	InfoCasa[id][cVenta] = 0; // Casa en venta.
	InfoCasa[id][cDinero] = 0;
	InfoCasa[id][cMateriales] = 0;
	Loop(x, 10, 0)
	{
		InfoCasa[id][cArmario][x] = 0;
		InfoCasa[id][cArmarioCant][x] = 0;
		mysql_format(DBcreative, query, sizeof query, "UPDATE casas SET Armario%d = 0 , ArmarioCant%d = 0 WHERE ID = '%d'", x+1, x+1, InfoCasa[id][cID_sql]);
		mysql_tquery(DBcreative, query);
	}
	mysql_format(DBcreative, query, sizeof query, "UPDATE casas SET Propietario = '%e', Seguro = 1, Venta = 0, BolosUwU = 0, Materiales = 0 WHERE ID = '%d'", InfoCasa[id][cPropietario], InfoCasa[id][cID_sql]);
	mysql_tquery(DBcreative, query);
    LabelPickup_casa(id);
}

forward Float: GetVehicleSpeed(vehicleid);
public Float: GetVehicleSpeed(vehicleid)
{
	new Float:x,Float:y,Float:z;
	GetVehicleVelocity(vehicleid,x,y,z);
	return floatmul(VectorSize(x,y,z),170.0);
}

IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

CheckBan(ip[])
{
	new string[20];
    new File: file = fopen("Archivos_CFG/ban.cfg", io_read);
	while(fread(file, string))
	{
	    if (strcmp(ip, string, true, strlen(ip)) == 0)
	    {
	        fclose(file);
	        return 1;
	    }
	}
	fclose(file);
	return 0;
}

AddBan(ip[])
{
	if (CheckBan(ip) == 0)
	{
		new File: file = fopen("Archivos_CFG/ban.cfg", io_append);
		new string[20];
		format(string, sizeof string, "\n%s", ip);
	 	fwrite(file, string);
	 	fclose(file);
	 	foreach(Player, playerid)
		{
		    new playerIP[16];
			GetPlayerIp(playerid, playerIP, sizeof(playerIP));
			if (strcmp(playerIP, ip) == 0)
			{
	            SendClientMessage(playerid, COLOR_GENERAL, "Creative Roleplay: {FFFFFF} Fuiste baneado del servidor.");
				Kick(playerid);
			}
		}
		return 1;
	}
	return 0;
}

RemoveBan(ip[])
{
    if (CheckBan(ip) == 1)
	{
	    new string[20];
		new File: file = fopen("Archivos_CFG/ban.cfg", io_read);
		fcreate("Archivos_CFG/tempBan.cfg");
		new File: file2 = fopen("Archivos_CFG/tempBan.cfg", io_append);
		while(fread(file, string))
		{
			if (strcmp(ip, string, true, strlen(ip)) != 0 && strcmp("\n", string) != 0)
		    {
				fwrite(file2, string);
			}
		}
		fclose(file);
		fclose(file2);
		file = fopen("Archivos_CFG/ban.cfg", io_write);
		file2 = fopen("Archivos_CFG/tempBan.cfg", io_read);
		while(fread(file2, string))
		{
			fwrite(file, string);
		}
		fclose(file);
		fclose(file2);
		fremove("Archivos_CFG/tempBan.cfg");
		return 1;
    }
	return 0;
}

PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++)
	{
		ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 0.0, 0, 0, 0, 0, 0);
	}
	return 1;
} // Credits to Emmet, South Central Roleplay

public OnPlayerUpdate(playerid)
{
	if (usuario_registro[playerid] != 0)
	{
		//actualiza vida & chaleco como pequeño anticheat
		SetPlayerArmour(playerid, InfoPlayer[playerid][pChaleco]);
		if (GetPVarInt(playerid, "EstaCrack") == 0) SetPlayerHealth(playerid, InfoPlayer[playerid][pVida]);
		else SetPlayerHealth(playerid, 15.0);
		//sistema de inventario
		if(InfoPlayer[playerid][pManoDerecha] > 0)
		{
			if(GetPlayerWeapon(playerid) != InfoInventario[InfoPlayer[playerid][pManoDerecha]][IDArma] && InfoPlayer[playerid][pManoDerechaCant] > 0)
			{
			    if(InfoPlayer[playerid][pManoDerechaCant] > 0 && GetPlayerWeaponAmmo(playerid, InfoInventario[InfoPlayer[playerid][pManoDerecha]][IDArma]) == 0)
				{
			        ResetPlayerWeapons(playerid);
			        GivePlayerWeapon(playerid, InfoInventario[InfoPlayer[playerid][pManoDerecha]][IDArma], InfoPlayer[playerid][pManoDerechaCant]);
			    }
				SetPlayerArmedWeapon(playerid, InfoInventario[InfoPlayer[playerid][pManoDerecha]][IDArma]);
			}
			else if(InfoPlayer[playerid][pManoDerechaCant] == 0)
			{ //Si no le queda munición
				if(GetPlayerWeapon(playerid) != 0) SetPlayerArmedWeapon(playerid, 0);
			}
		}
		//otros
		if (GetPVarInt(playerid, "IsFrozen") == 1) TogglePlayerControllable(playerid, 0);
	} // } end
	return 1;
}

funcion SyncPlayerTime(playerid)
{
	new hour, minute, second;
	gettime(hour, minute, second);
	SetPlayerTime(playerid, hour, minute);
	return 1;
}

Random(min, max)
{
    new a = random(max - min) + min;
    return a;
}

LoadObjects(playerid)
{
	TogglePlayerControllable(playerid, false);
	TextDrawShowForPlayer(playerid, TD_Load[0]);
	TextDrawShowForPlayer(playerid, TD_Load[1]);
	SetPVarInt(playerid, "LoadingObjects", 1);
	return SetTimerEx("SafeLoadObjects", 4000, false, "d", playerid);
}

forward SafeLoadObjects(playerid);
public SafeLoadObjects(playerid)
{
	TextDrawHideForPlayer(playerid, TD_Load[0]);
	TextDrawHideForPlayer(playerid, TD_Load[1]);
	DeletePVar(playerid, "LoadingObjects");
	TogglePlayerControllable(playerid, true);
}

ReturnUser(text[])
{
	new strPos, returnID = 0, bool: isnum = true;
	while (text[strPos])
	{
		if (isnum)
		{
			if ('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if (isnum)
	{
		if (IsPlayerConnected(returnID)) return returnID;
	}
	else
	{
		new sz_playerName[MAX_PLAYER_NAME];
		foreach(Player, i)
		{
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if (!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

//sistema de vehículos dinámicos renovado by EdinsonWalker (09/01/2020) - base: AlexDonuts
crear_vehiculo(playerid, modelid, Float: x, Float: y, Float: z, Float: angle, vehint, vehvw, color1, color2, price, maxeMaletero, type, negocio)
{
	Loop(vid, MAX_VEHICULOS, 1) if (!InfoVehiculo[vid][vModelo])
	{
	    if (negocio != -1)
	    {
			new golfm[129];
			format(golfm, sizeof golfm, "Negocio_%d", negocio);
			alm(InfoVehiculo[vid][vPropietario], golfm);
			InfoVehiculo[vid][vNegocio] = negocio;
	    }
	    else
	    {
			InfoVehiculo[vid][vNegocio] = 0;
			if (playerid != -1)
			{
				alm(InfoVehiculo[vid][vPropietario], InfoPlayer[playerid][pNombre_Apellido]);
			}
			else
			{
				switch (type)
				{
					case 1..50:
					{
						if (InfoFaccion[type][fTipo] != 0)
						{
							alm(InfoVehiculo[vid][vPropietario], InfoFaccion[type][fLogo]);
						}
					}
					case 200: alm(InfoVehiculo[vid][vPropietario], "VIP");
					case 300: alm(InfoVehiculo[vid][vPropietario], "STAFF");
					case 600: alm(InfoVehiculo[vid][vPropietario], "RENTA");
					default: alm(InfoVehiculo[vid][vPropietario], "SERVER");
				}
			}
		}
		alm(InfoVehiculo[vid][vNombre], GetNameVehicle(modelid));
		InfoVehiculo[vid][vTipo] = type;
		InfoVehiculo[vid][vModelo] = modelid;
		InfoVehiculo[vid][vPosicionX] = x;
		InfoVehiculo[vid][vPosicionY] = y;
		InfoVehiculo[vid][vPosicionZ] = z;
		InfoVehiculo[vid][vPosicionR] = angle;
		InfoVehiculo[vid][vInterior] = vehint;
		InfoVehiculo[vid][vVirtualWorld] = vehvw;
		InfoVehiculo[vid][vVida] = 1000.0;
		InfoVehiculo[vid][vDanioSuperficie] = 0;
		InfoVehiculo[vid][vDanioPuertas] = 0;
		InfoVehiculo[vid][vDanioLuces] = 0;
		InfoVehiculo[vid][vDanioRuedas] = 0;
		InfoVehiculo[vid][vGasolina] = 200;
		InfoVehiculo[vid][vSpawned] = 1;
		InfoVehiculo[vid][vColor_1] = color1;
		InfoVehiculo[vid][vColor_2] = color2;
		InfoVehiculo[vid][vPaintJob] = -1;
		InfoVehiculo[vid][vSeguro] = 0;
		InfoVehiculo[vid][vPrecio] = price;
		InfoVehiculo[vid][vEmbargo] = 0;
		InfoVehiculo[vid][vMulta] = 0;
		InfoVehiculo[vid][vMaxMaletero] = maxeMaletero;
		Loop(m, MAX_MODIFICACIONES, 0) { InfoVehiculo[vid][vModificacion][m] = 0; }
		Loop(m, 10, 0) { InfoVehiculo[vid][vMaletero][m] = 0; InfoVehiculo[vid][vMaleteroCant][m] = 0; }
		// create vehicle
		new vehicleid = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);
		InfoVehiculo[vid][vIG_id] = vehicleid;
		veh_gasolina[vehicleid] = InfoVehiculo[vid][vGasolina];
		SetVehicleVirtualWorld(vehicleid, InfoVehiculo[vid][vVirtualWorld]);
		LinkVehicleToInterior(vehicleid, InfoVehiculo[vid][vInterior]);
		if (playerid != -1)
		{
			SetPlayerPos(playerid, x, y, z);
			PutPlayerInVehicle(playerid, vehicleid, 0);
		}
		new query[2050];
		//opción idsql ya creada.
		if (InfoVehiculo[vid][vID_sql] != 0)
		{
			mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET Nombre = '%e', Propietario = '%e', Tipo = '%d', Negocio = '%d', Modelo = '%d', Posicion_X = '%f', Posicion_Y = '%f', Posicion_Z = '%f', Posicion_R = '%f', Interior = '%d', VirtualWorld = '%d', Vida = '%f', \
			Gasolina = '%d', Color_1 = '%d', Color_2 = '%d', Precio = '%d', MaxMaletero = '%d' WHERE ID = '%d'",
			InfoVehiculo[vid][vNombre],
			InfoVehiculo[vid][vPropietario],
			InfoVehiculo[vid][vTipo],
			InfoVehiculo[vid][vNegocio],
			InfoVehiculo[vid][vModelo],
			InfoVehiculo[vid][vPosicionX],
			InfoVehiculo[vid][vPosicionY],
			InfoVehiculo[vid][vPosicionZ],
			InfoVehiculo[vid][vPosicionR],
			InfoVehiculo[vid][vInterior],
			InfoVehiculo[vid][vVirtualWorld],
			InfoVehiculo[vid][vVida],
			InfoVehiculo[vid][vGasolina],
			InfoVehiculo[vid][vColor_1],
			InfoVehiculo[vid][vColor_2],
			InfoVehiculo[vid][vPrecio],
			InfoVehiculo[vid][vMaxMaletero],
			InfoVehiculo[vid][vID_sql]);
			mysql_tquery(DBcreative, query);
			vid = MAX_VEHICULOS;
			return 1;
		}
		mysql_format(DBcreative, query, sizeof query, "INSERT INTO vehiculos (Nombre, Propietario, Tipo, Negocio, Modelo, Posicion_X, Posicion_Y, Posicion_Z, Posicion_R, Interior, VirtualWorld, Vida, Gasolina, Color_1, \
		Color_2, Precio, MaxMaletero) VALUES ('%e', '%e', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%d', '%d', '%d', '%d', '%d')",
		InfoVehiculo[vid][vNombre],
		InfoVehiculo[vid][vPropietario],
		InfoVehiculo[vid][vTipo],
		InfoVehiculo[vid][vNegocio],
		InfoVehiculo[vid][vModelo],
		InfoVehiculo[vid][vPosicionX],
		InfoVehiculo[vid][vPosicionY],
		InfoVehiculo[vid][vPosicionZ],
		InfoVehiculo[vid][vPosicionR],
		InfoVehiculo[vid][vInterior],
		InfoVehiculo[vid][vVirtualWorld],
		InfoVehiculo[vid][vVida],
		InfoVehiculo[vid][vGasolina],
		InfoVehiculo[vid][vColor_1],
		InfoVehiculo[vid][vColor_2],
		InfoVehiculo[vid][vPrecio],
		InfoVehiculo[vid][vMaxMaletero]);
		mysql_tquery(DBcreative, query, "CreateVehicleUser", "i", vid);
		vid = MAX_VEHICULOS;
	}
	return 1;
}

forward CreateVehicleUser(id);
public CreateVehicleUser(id)
{
	totalvehiculos++;
	InfoVehiculo[id][vID_sql] = cache_insert_id();
	cache_unset_active();
    return 1;
}

Load_Vehicles(playerid)
{
	Loop(vid, totalvehiculos, 1) if (InfoVehiculo[vid][vTipo] == 0 && strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[vid][vPropietario], true) == 0)
	{
		if (InfoVehiculo[vid][vModelo] != 0 && InfoVehiculo[vid][vEmbargo] == 0 && InfoVehiculo[vid][vIG_id] == 0)
		{
			new Coche;
			Coche = CreateVehicle(InfoVehiculo[vid][vModelo], InfoVehiculo[vid][vPosicionX], InfoVehiculo[vid][vPosicionY], InfoVehiculo[vid][vPosicionZ], InfoVehiculo[vid][vPosicionR], InfoVehiculo[vid][vColor_1], InfoVehiculo[vid][vColor_2], -1, InfoVehiculo[vid][vSirena]);
			InfoVehiculo[vid][vIG_id] = Coche;
			InfoVehiculo[vid][vSpawned] = 1;
			veh_gasolina[Coche] = InfoVehiculo[vid][vGasolina];
			if (InfoVehiculo[vid][vModelo] == 528 || InfoVehiculo[vid][vModelo] == 427) SetVehicleHealth(Coche, 5000.0);
			else SetVehicleHealth(Coche, InfoVehiculo[vid][vVida]);
			LinkVehicleToInterior(Coche, InfoVehiculo[vid][vInterior]);
			SetVehicleExVirtualWorld(Coche, InfoVehiculo[vid][vVirtualWorld]);
			UpdateVehicleDamageStatus(Coche, InfoVehiculo[vid][vDanioSuperficie], InfoVehiculo[vid][vDanioPuertas], InfoVehiculo[vid][vDanioLuces], InfoVehiculo[vid][vDanioRuedas]);
			if (InfoVehiculo[vid][vSeguro] != 0) LockPlayerVehicle(Coche);
			Load_Mods(vid);
			if (!isnull(InfoVehiculo[vid][vCallSign]))
			{
				DestroyDynamic3DTextLabel(InfoVehiculo[vid][vOnCallSign]);
				InfoVehiculo[vid][vOnCallSign] = CreateDynamic3DTextLabel(InfoVehiculo[vid][vCallSign], 0xEBEBEBFF, -1.0, -2.8, 0.0, 30.0, INVALID_PLAYER_ID, Coche);
			}
		}
	}
}

Load_Mods(veh)
{
	new vehicleid = InfoVehiculo[veh][vIG_id];
	if (InfoVehiculo[veh][vPaintJob] != -1) ChangeVehiclePaintjob(vehicleid, InfoVehiculo[veh][vPaintJob]);
	ChangeVehicleColor(vehicleid, InfoVehiculo[veh][vColor_1], InfoVehiculo[veh][vColor_2]);
	Loop(m, MAX_MODIFICACIONES, 0) { AddVehicleComponent(vehicleid, InfoVehiculo[veh][vModificacion][m]); }
}

Quit_Vehicles(playerid)
{
	Loop(vid, totalvehiculos, 1) if (InfoVehiculo[vid][vTipo] == 0 && strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[vid][vPropietario], true) == 0)
	{
		if (InfoVehiculo[vid][vModelo] != 0 && InfoVehiculo[vid][vEmbargo] == 0 && InfoVehiculo[vid][vIG_id] != 0)
		{
			new vehicleid = InfoVehiculo[vid][vIG_id], oldfuel, query[412];
			if (LockStatus[vehicleid] != 0) LockStatus[vehicleid] = 0;
			oldfuel = veh_gasolina[vehicleid];
			InfoVehiculo[vid][vGasolina] = oldfuel;
 			GetVehicleHealth(vehicleid, InfoVehiculo[vid][vVida]);
			GetVehicleDamageStatus(vehicleid, InfoVehiculo[vid][vDanioSuperficie], InfoVehiculo[vid][vDanioPuertas], InfoVehiculo[vid][vDanioLuces], InfoVehiculo[vid][vDanioRuedas]);
 			if (InfoVehiculo[vid][vLlavePrestada] != -1)
			{
				InfoPlayer[InfoVehiculo[vid][vLlavePrestada]][pLlaveVehicle] = 0;
				InfoVehiculo[vid][vLlavePrestada] = -1;
			}
			ActualizarMods(vid);
			mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET Vida = '%f', DanioSuperficie = '%d', DanioPuertas = '%d', DanioLuces = '%d', DanioRuedas = '%d', Gasolina = '%d' WHERE ID = '%d'",
			InfoVehiculo[vid][vVida],
			InfoVehiculo[vid][vDanioSuperficie],
			InfoVehiculo[vid][vDanioPuertas],
			InfoVehiculo[vid][vDanioLuces],
			InfoVehiculo[vid][vDanioRuedas],
			InfoVehiculo[vid][vGasolina],
			InfoVehiculo[vid][vID_sql]);
			mysql_tquery(DBcreative, query);
			DestroyVehicle(vehicleid);
			if (InfoVehiculo[vid][vModeloNeon] != 0 && InfoVehiculo[vid][vOnNeon] != 0)
			{
				DestroyDynamicObject(InfoVehiculo[vid][vObjetoNeonL]);
				DestroyDynamicObject(InfoVehiculo[vid][vObjetoNeonR]);
			}
			Loop(x, 5, 0) if (InfoVehiculo[vid][vObjModelo][x] != 0) { DestroyDynamicObject(InfoVehiculo[vid][vTuneo][x]); }
			if (!isnull(InfoVehiculo[vid][vCallSign])) DestroyDynamic3DTextLabel(InfoVehiculo[vid][vOnCallSign]);
			InfoVehiculo[vid][vIG_id] = 0;
			InfoVehiculo[vid][vSpawned] = 0;
			InfoVehiculo[vid][vMaleteroOn] = 0;
        }
    }
}

ActualizarMods(veh)
{
	if (InfoVehiculo[veh][vEmbargo] == 0)
	{
		new carid = InfoVehiculo[veh][vIG_id], dex_query[64];
		new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1, sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(carid, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(carid, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(carid, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(carid, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(carid, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(carid, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(carid, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(carid, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(carid, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_LEFT);
		if (spoilers >= 1000)    InfoVehiculo[veh][vModificacion][0] = spoilers;
		if (hood >= 1000)        InfoVehiculo[veh][vModificacion][1] = hood;
		if (roof >= 1000)        InfoVehiculo[veh][vModificacion][2] = roof;
		if (sideskirt1 >= 1000)  InfoVehiculo[veh][vModificacion][3] = sideskirt1;
		if (lamps >= 1000)       InfoVehiculo[veh][vModificacion][4] = lamps;
		if (nitro >= 1000)       InfoVehiculo[veh][vModificacion][5] = nitro;
		if (exhaust >= 1000)     InfoVehiculo[veh][vModificacion][6] = exhaust;
		if (wheels >= 1000)      InfoVehiculo[veh][vModificacion][7] = wheels;
		if (stereo >= 1000)      InfoVehiculo[veh][vModificacion][8] = stereo;
		if (hydraulics >= 1000)  InfoVehiculo[veh][vModificacion][9] = hydraulics;
		if (frontbumper >= 1000) InfoVehiculo[veh][vModificacion][10] = frontbumper;
		if (rearbumper >= 1000)  InfoVehiculo[veh][vModificacion][11] = rearbumper;
		if (ventright >= 1000)   InfoVehiculo[veh][vModificacion][12] = ventright;
		if (ventleft >= 1000)    InfoVehiculo[veh][vModificacion][13] = ventleft;
		if (sideskirt2 >= 1000)  InfoVehiculo[veh][vModificacion][14] = sideskirt2;
		Loop(x, MAX_MODIFICACIONES, 0)
		{
			format(dex_query, sizeof dex_query, "Modificacion%d", x+1);
			guardar_int_mysql("vehiculos", dex_query, InfoVehiculo[veh][vID_sql], InfoVehiculo[veh][vModificacion][x]);
		}
	}
}

VehicleCount(playerid)
{
	new cars = 0;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vTipo] == 0 && strcmp(InfoPlayer[playerid][pNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0)
	{ cars++; }
	return cars;
}

stock EsteVehEs(playerid, vehicleid)
{
	if (!IsPlayerConnected(playerid)) return -1;
	if (!GetVehicleModel(vehicleid)) return -1;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vIG_id] == vehicleid)
	{
		return v;
	}
	return -1;
}

stock GetDistancePlayerVeh(playerid, veh)
{
	new Float:Floats[7];
	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));
	return floatround(Floats[6]);
}

IsValidSkin(skinid)
{
	switch (skinid)
	{
		case 1..73: return 1;
		case 74: return 0;
		case 75..311: return 1;
	}
	return 0;
}

stock GetClosestCar(playerid, exception = INVALID_VEHICLE_ID) {
    new
		Float:Distance,
		target = -1;
    for(new v; v < MAX_VEHICLES; v++) if(GetVehicleModel(v)) {
        if(v != exception && (target < 0 || Distance > GetDistancePlayerVeh(playerid, v))) {
            target = v;
            Distance = GetDistancePlayerVeh(playerid, v);
        }
    }
    return target;
}

LockPlayerVehicle(vehicle)
{
	LockStatus[vehicle] = 1;
	new vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
 }

UnLockPlayerVehicle(vehicle)
{
	LockStatus[vehicle] = 0;
	new vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

funcion SetVehicleEngine(vehicleid, playerid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective, string1[128];
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if (engine == VEHICLE_PARAMS_ON)
	{
		format(string1, sizeof(string1), "* %s apaga el motor de su vehiculo.", NombreJugador(playerid));
		ProxDetector(30.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Motor a sido apagado con éxito.");
		arr_Engine{vehicleid} = 0;
	}
    else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
	{
		new Float: f_vHealth;
		GetVehicleHealth(vehicleid, f_vHealth);
		if(f_vHealth < 350.0) return SendClientMessage(playerid, COLOR_RED, "El vehíuclo no prenderá, porque el motor se ha roto.");
	    if(veh_gasolina[vehicleid] <= 0) return SendClientMessage(playerid, COLOR_RED, "El vehíuclo no prenderá, no hay gasolina en el tanque.");
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		arr_Engine{vehicleid} = 1;
		format(string1, sizeof(string1), "* %s arranca el motor de su vehiculo.", NombreJugador(playerid));
		ProxDetector(30.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

SetVehicleLights(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Luces del vehiculo fueron apagadas.");
	}
    else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Luces del vehículo encendidas con éxito. Puedes usar los intermitentes.");
	}
	return 1;
}

SetVehicleHood(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Capó del vehiculo fue cerrado.");
	}
    else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Capó del vehiculo fue abierto.");
	}
	return 1;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {
	new
		Float:Floats[3];
	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

forward timer_segundo();
public timer_segundo()
{
	// textdraw hora.
    new gformat[256], year, month, day, hour, minute, second;
    getdate(year, month, day);
    gettime(hour, minute, second);
	if (hour >= 12) format(gformat, sizeof gformat, "%02d:%02d_PM_-_%02d_de_%s_del_%04d", (hour == 12) ? (12) : (hour - 12), minute, day, GetMonth(month), year);
	else if (hour < 12) format(gformat, sizeof gformat, "%02d:%02d_AM_-_%02d_de_%s_del_%04d", (hour == 0) ? (12) : (hour), minute, day, GetMonth(month), year);
	TextDrawSetStringEx(TD_fechahora, gformat);
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i) && usuario_registro[i] == 2)
	    {
			SetPlayerTime(i, hour, minute);
	        //auto save cada 5seg by edinsonwalker
			countGameTime[i]++;
			if (countGameTime[i] == 5)
			{
				if (Spectate[i] == 999 && ShowRules[i] == 0)
				{
					GetPlayerPos(i, InfoPlayer[i][pPosicionX], InfoPlayer[i][pPosicionY], InfoPlayer[i][pPosicionZ]);
					GetPlayerFacingAngle(i, InfoPlayer[i][pPosicionR]);
					InfoPlayer[i][pInterior] = GetPlayerInterior(i);
					InfoPlayer[i][pVirtualWorld] = GetPlayerVirtualWorld(i);
				}
				new query[1500];
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
				InfoPlayer[i][pPosicionX], InfoPlayer[i][pPosicionY], InfoPlayer[i][pPosicionZ], InfoPlayer[i][pPosicionR], InfoPlayer[i][pInterior], InfoPlayer[i][pVirtualWorld], InfoPlayer[i][pID]);
				mysql_tquery(DBcreative, query);
				countGameTime[i] = 0;
			}
			if (EnLlamadoMecanico[i] != 0) EnLlamadoMecanico[i]--;
			if(Tied[i] > 0) TogglePlayerControllable(i, 0);
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && GetPlayerAdmin(i, 0) == 0)
			{
				format(gformat, sizeof gformat, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) ha sido auto-expulsado del servidor. Razón: cheat jetpack", NombreOriginal(i), i);
				SendAdminMessage(0xFFFFFFFF, gformat);
				SendClientMessage(i, COLOR_GENERAL, "Fuiste expulsado por usar cheat jetpack.");
				SetTimerEx("TimerKICK", 1000, false, "d", i);
			}
			if(IsPlayerInRangeOfPoint(i, 2.5, 1544.2, -1353.4, 329.4))
			{
			    if (InfoPlayer[i][pManoDerecha] == 0)
					PlayerWeapon(i, 46);
			}
		}
	}
}

forward timer_2segundo();
public timer_2segundo()
{
	foreach(Player, i)
	{
	    if (IsPlayerConnected(i) && usuario_registro[i] == 2)
		{
		    new query[320];
			if (GetPlayerPing(i) > MAX_PING)
			{
				format(query, sizeof query, "{FFBF00}[AdmWarnig]{FFFFFF} %s(%d) ha sido auto-expulsado del servidor. Razón: ping (%d)", NombreOriginal(i), i, GetPlayerPing(i));
				SendAdminMessage(0xFFFFFFFF, query);
				SendClientMessage(i, COLOR_GENERAL, "Fuiste expulsado por exceso de ping.");
				SetTimerEx("TimerKICK", 1000, false, "d", i);
		    }
 			if(CommandSpamUnmute[i] != 0)
	 		{
				CommandSpamUnmute[i]--;
   				if (CommandSpamUnmute[i] == 0) CommandSpamTimes[i] = 0;
			}
			if(InfoPlayer[i][pServiceTime] != 0) { InfoPlayer[i][pServiceTime]--; }
			if(NewbieTimer[i] > 0) { NewbieTimer[i]--; }
			if(VIPTimer[i] > 0){ VIPTimer[i]--; }
			if(GetPlayerCash(i) != GetPlayerMoney(i))
			{
				ResetPlayerMoney(i);
				GivePlayerMoney(i, InfoPlayer[i][pDinero]);
			}
			if (timer_herido[i] != 0)
			{
				timer_herido[i]--;
				if (timer_herido[i] == 0) SendClientMessage(i, 0x59C52CFF, "Ya puedes usar /reaparecer.");
			}
			if (InfoPlayer[i][pTriageTime] != 0)
			{
				InfoPlayer[i][pTriageTime]--;
    		}
		    if (UsedFind[i] >= 1) 		{ 	UsedFind[i] -= 1; 	}
			if(InfoPlayer[i][pNivelMuteoReport] > 1)
			{
			   	if(InfoPlayer[i][pTiempoMuteoReport] > 0)
   				{
			   	    InfoPlayer[i][pTiempoMuteoReport]--;
			   	}
			   	else
				{
			   	    InfoPlayer[i][pNivelMuteoReport] = 0;
			   	}
				mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET TiempoMuteoReport = '%d', NivelMuteoReport = '%d' WHERE ID = '%d'", InfoPlayer[i][pTiempoMuteoReport], InfoPlayer[i][pNivelMuteoReport], InfoPlayer[i][pID]);
				mysql_tquery(DBcreative, query);
			}
		    if(InfoPlayer[i][pSancionado] > 0)
			{
				if(InfoPlayer[i][pTiempoSancion] > 0)
				{
					InfoPlayer[i][pTiempoSancion]--;
					new text[128];
		        	switch(InfoPlayer[i][pSancionado])
					{
		            	case 1, 4: format(text, sizeof(text), "~n~~n~~n~~n~~n~~n~~n~ ~r~Jail OOC!~n~~w~%d segundos (%i minutos) restantes", InfoPlayer[i][pTiempoSancion], InfoPlayer[i][pTiempoSancion]/60);
					}
					GameTextForPlayer(i, text, 2000, 3);
					guardar_int_mysql("cuentas", "TiempoSancion", InfoPlayer[i][pID], InfoPlayer[i][pTiempoSancion]);
				}
    			if(InfoPlayer[i][pTiempoSancion] <= 0)
				{
				    InfoPlayer[i][pTiempoSancion] = 0;
				    switch(InfoPlayer[i][pSancionado])
				    {
				        case 2:
						{
							SetPosEx(i,1605.5861,-1646.6277,13.5469, 0.0000, 0, 0, 1);
							InfoPlayer[i][pEstrellas] = 0;
							SetPlayerWantedLevel(i, InfoPlayer[i][pEstrellas]);
				        }
				        case 3:
						{
				 			SetPosEx(i,343.1081,-1521.4404,33.2985, 0.0000, 0, 0, 1);
				        }
				        case 1,4:
						{
					    	SetPosEx(i,1552.8286,-1674.9845,16.1953, 0.0000, 0, 0, 1);
				        }
				        case 5:
						{
				 			SetPosEx(i,130.0132,1945.5618,19.3507, 0.0000, 0, 0, 1);
						}
				        case 6:
						{
				 			SetPosEx(i,725.8815,-1438.3231,13.5391, 0.0000, 0, 0, 1);
						}
						case 1000:
						{
					    	SetPosEx(i,1552.8286,-1674.9845,16.1953, 0.0000, 0, 0, 1);
				    	}
					}
					InfoPlayer[i][pSancionado] = 0;
					InfoPlayer[i][pTogTelefono] = 1;
					SendClientMessage(i, COLOR_GREEN,"Has pagado tu condena.");
					GameTextForPlayer(i, "~g~Eres Libre~n~~w~Se mejor persona.", 5000, 1);
					GivePlayerSkin(i, InfoPlayer[i][pSkin]);
					alm(InfoPlayer[i][pBySancion], "none");
					alm(InfoPlayer[i][pRazonSancion], "none");
					mysql_format(DBcreative, query, sizeof query, "UPDATE cuentas SET Estrellas = 0, Sancionado = 0, TiempoSancion = 0, BySancion = '%e', RazonSancion = '%e' WHERE ID = '%d'", InfoPlayer[i][pBySancion], InfoPlayer[i][pRazonSancion], InfoPlayer[i][pID]);
					mysql_tquery(DBcreative, query);
					TogglePlayerControllable(i, true);
				}
			}
   			if (JustReported[i] > 0) 	{ 	JustReported[i]--; 	}
			if (JustDuda[i] > 0)		{ 	JustDuda[i]--; 		}
			if (JustAfk[i] > 0) 		{ 	JustAfk[i]--; 		}
		    if (InfoPlayer[i][pTiempoRegalo] != 0)
			{
				InfoPlayer[i][pTiempoRegalo]--;
				guardar_int_mysql("cuentas", "TiempoRegalo", InfoPlayer[i][pID], InfoPlayer[i][pTiempoRegalo]);
			}
			if(EMSCallTime[i] > 0)
			{
		    	if(EMSAccepted[i] < 999)
				{
		        	if(IsPlayerConnected(EMSAccepted[i]))
					{
		            	new Float:X,Float:Y,Float:Z;
		            	GetPlayerPos(EMSAccepted[i], X, Y, Z);
		            	SetPlayerCheckpoint(i, X, Y, Z, 5);
					}
				}
			}
			if(PlayerDrunk[i] > 9)
			{
		    	if(PlayerDrunkTime[i] > 20)
				{
		    		ApplyAnimation(i,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[i]*1000);
		    		SetPlayerDrunkLevel(i, PlayerDrunk[i]*1000);
		    		PlayerDrunk[i] -= 1;
		    		PlayerDrunkTime[i] = 0;
				}
				PlayerDrunkTime[i] += 1;
			}
			if(PlayerDrunk[i] < 10 && PlayerDrunk[i] > 0)
			{
		    	if(PlayerDrunkTime[i] > 30)
				{
		        	PlayerDrunk[i] -= 1;
                   	PlayerDrunkTime[i] = 0;
				}
				PlayerDrunkTime[i] += 1;
			}
		}
	}
}

forward timer_microbeat();
public timer_microbeat()
{
	foreach(Player, playerid)
	{
		new colorping[19], gformat[190];
		switch (GetPlayerPing(playerid))
		{
			case 0..150: alm(colorping, "~g~~h~~h~");
			case 151..200: alm(colorping, "~y~~h~");
			case 201..250: alm(colorping, "~r~~h~~h~");
			case 251..300: alm(colorping, "~r~~h~");
			default: alm(colorping, "~r~");
		}
		format(gformat, sizeof gformat, "~w~~h~~h~Ping: %s%d~w~~h~~h~ Fps: %d", colorping, GetPlayerPing(playerid), GetPlayerFPS(playerid));
		PlayerTextDrawSetStringEx(playerid, TDping_fps[playerid], gformat);
		if (IsPlayerConnectedEx(playerid))
		{
			new Float: HPveh, vehicleid = GetPlayerVehicleID(playerid), arrDamage[4], arrVehParams[7];
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if (vehicleid != 0)
				{
					Loop(s, 10, 0) if (SpikeStrips[s][sX] != 0)
					{
						if (VehicleToPoint(2.0, vehicleid, SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ]))
						{
							GetVehicleDamageStatus(vehicleid, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
							arrDamage[3] = encode_tires(1, 1, 1, 1);
							UpdateVehicleDamageStatus(vehicleid, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
						}
					}
					GetVehicleHealth(vehicleid, HPveh);
					if (HPveh < 300.0 && !IsABike(vehicleid))
					{
						SetVehicleHealth(vehicleid, 299.0);
						SetVehicleParamsEx(vehicleid, arrVehParams[0], arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
						if (arrVehParams[0] == VEHICLE_PARAMS_ON) SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
						GameTextForPlayer(playerid, "~w~Motor ~r~roto", 2500, 3);
						arr_Engine{vehicleid} = 0;
					}
					//info velocimetro
					if (show_velocimetro[playerid]) update_velocimetro(playerid, vehicleid);
				}
			}
		}
	}
}

forward timer_autoMensajes();
public timer_autoMensajes()
{
	foreach(Player, i)
	{
		if(GetPlayerCash(i) < 0){
			if(MoneyMessage[i]==0){
				new string[128];
				format(string, sizeof string, "Actualmente estás debiendo dinero; necesitas pagar $%d. Si no lo haces, serás arrestado...", GetPlayerCash(i));
				SendClientMessage(i, COLOR_LIGHTRED, string);
				MoneyMessage[i] = 1;
			}
		}
		else MoneyMessage[i] = 0;
	}
}

forward timer_spec();
public timer_spec()
{
	foreach(Player, i) if (GetPlayerAdmin(i, 1) != 0)
	{
		if (Spectating[i] >= 1)
		{
			if (Spectate[i] < 553)
			{
				new targetid = Spectate[i];
				if (!IsPlayerConnected(targetid))
				{
    				SendClientMessage( i, COLOR_WHITE, "El jugador que estabas specteando salio del servidor." );
			    	GettingSpectated[Spectate[i]] = 999;
			    	Spectating[i] = 0;
					Spectate[i] = 999;
					SetPVarInt(i, "SpecState", -1);
					SetPVarInt(i, "SpecOff", 1 );
					TogglePlayerSpectating( i, false );
					SetCameraBehindPlayer(i);
				}
			}
			if (Spectate[i] == 554)
			{
				TogglePlayerControllable(i, 1);
				SetPlayerInterior(i,Unspec[i][sPint]);
				InfoPlayer[i][pInterior] = Unspec[i][sPint];
				SetPlayerPos(i, Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2]);
				Spectate[i] = 999;
			}
			if (Spectate[i] == 556)
			{
				Spectate[i] = 999;
			}
			if (Spectate[i] == 557)
			{
				Spectate[i] = 554;
			}
		}
	}
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if (GetPlayerAdmin(playerid, 6) != 0)
	{
    	SetPlayerPosFindZ(playerid, fX, fY, fZ);
    }
    return 1;
}

forward TimerKICK(playerid);
public TimerKICK(playerid)
{
	Kick(playerid);
	return 1;
}

public TimerBANIP(playerid)
{
	new playerip[32];
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	Kick(playerid);
	AddBan(playerip);
	return 1;
}

stock RandomEx(min, max)
{
    new randval = random(max - min) + min;
    return randval;
}

stock IsWeaponWithAmmo(weaponid)
{
	switch(weaponid)
	{
		case 16..18, 22..39, 41..42: return 1;
		default: return 0;
	}
	return 0;

}

stock GetPlayerWeaponAmmo(playerid,weaponid)
{
	new wd[2][13];
	for(new i; i<13; i++) GetPlayerWeaponData(playerid,i,wd[0][i],wd[1][i]);
	for(new i; i<13; i++)
	{

		if(weaponid == wd[0][i]) return wd[1][i];
	}
	return 0;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new idobj = InfoPlayer[playerid][pManoDerecha];/* balas = GetPlayerAmmo(playerid);*/
	if(IsPlayerConnected(playerid))
	{
		if(IsWeaponWithAmmo(weaponid))
		{
			if (InfoInventario[idobj][IDArma] != weaponid && InfoPlayer[playerid][pHorasOn] <= 2) // "armas invisibles"
			{
				new string[190];
				format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s fue expulsado. Razón: Arma no sincronizada (whitebug/cheat)", NombreOriginal(playerid));
				SendAllMessage(0xFFFFFFFF, string);
				QuitarManos(playerid);
				Kick(playerid);
				return 1;
			} // el viejo sistema lo borré a la mierda, este de abajo es el efectivo.
			if(InfoPlayer[playerid][pManoDerechaCant])
			{
       			InfoPlayer[playerid][pManoDerechaCant]--;
				//fix para que no se le cedan balas extras al jugador
			    if(GetPlayerWeaponAmmo(playerid, InfoInventario[idobj][IDArma]) != 0 && GetPlayerWeaponAmmo(playerid, InfoInventario[idobj][IDArma]) < InfoPlayer[playerid][pManoDerechaCant])
			    {
			        InfoPlayer[playerid][pManoDerechaCant] = GetPlayerWeaponAmmo(playerid, InfoInventario[idobj][IDArma]);
			    }
				if(InfoPlayer[playerid][pManoDerechaCant] == 0) // remueve arma si no tienes balas, si continua disparando abajo está el check para dar kick <-
				{
				    ResetPlayerWeapons(playerid);
				}
			}
			else
			{
			    Anti[playerid][BalasW]++;
			    ResetPlayerWeapons(playerid);
			   	if(Anti[playerid][BalasW] == 3 && AntiG[Balas]) // 3 advertencias de tolerancia ^^
			    {
   					new string[256];
					format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s fue expulsado y limpiado. Razón: Cheat de munición", NombreOriginal(playerid));
					SendAllMessage(0xFFFFFFFF, string);
					QuitarManos(playerid);
					Kick(playerid);
					return 1;
				}
			}
		}
	}
	if(hittype==BULLET_HIT_TYPE_PLAYER)
	{
		if(!(-100.0<=fX<=100.0)||!(-1000.0<=fY<=100.0)||!(-100.0<=fZ<=100.0))
		{
           //kickorbanthecrasher
			return 0b0;
		}
	}
	if(InfoPlayer[playerid][pManoDerecha] == 40 && weaponid == 23){TaserRecarga[playerid] = 1; SetTimerEx("RecargarTaser", 5000, false, "i", playerid);} //Sistema de recarga de taser
    return 1;
}

funcion RecargarTaser(playerid)
	TaserRecarga[playerid] = 0;


forward _FGomas(playerid); public _FGomas(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
	ConBalasGoma[playerid] = 0;
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	switch (weaponid)
	{
		case 49,50,53,54: //caidas y varios
		{
			if (papilla[playerid] == 1) return 1;
			player_weapon[playerid] = weaponid;
			player_asesino[playerid] = issuerid;
			quitar_vida(playerid, -amount);
			return 1;
		}
	}
	if (playerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerConnected(playerid)) { return 1; }
		if (GetPlayerTeam(issuerid) == GetPlayerTeam(playerid))
		{
			if (papilla[playerid] == 1) return 1;
			if (GetPlayerState(playerid) == PLAYER_STATE_WASTED) return 1;
            if (GetPVarInt(playerid, "mueltito") == 1) return 1;
			if (InfoInventario[InfoPlayer[issuerid][pManoDerecha]][IDArma] != weaponid && weaponid != 0) return 1; // si es un arma invisible, evitar el daño
			if (IsPlayerInAnyVehicle(playerid))
			{
				new a = GetVehicleModel(GetPlayerVehicleID(playerid));
				if (a == 528 || a == 427)
				{
					//SendClientMessage(playerid, 0xFF0000FF, "El camión blindado redujo tu impacto de bala a la mitad");
					return 1;
				}
			}
			new drug_effect_damagedid = InfoPlayer[playerid][pDrogaTipo], drug_power_damagedid = InfoPlayer[playerid][pDrogaPower], Float: hacerdano;
		    //sistema de heridas.
		    new id, Float: pArm = InfoPlayer[playerid][pChaleco];
		    Loop(x, MAX_DAMAGES, 0) if(!InfoDamage[playerid][x][dmgDamage])
			{
				id = x;
				break;
			}
			player_weapon[playerid] = weaponid;
			player_asesino[playerid] = issuerid;
			InfoDamage[playerid][id][dmgWeapon] = weaponid;
			InfoDamage[playerid][id][dmgBodypart] = bodypart;
			if (pArm > 0) InfoDamage[playerid][id][dmgKevlarhit] = 1;
			else if(pArm < 1) InfoDamage[playerid][id][dmgKevlarhit] = 0;
			InfoDamage[playerid][id][dmgSeconds] = gettime();
			// daño de armas
			switch (weaponid)
			{
				case 22, 28, 29, 32: //armas automáticas
				{
					switch (bodypart)
					{
						case 9: hacerdano = 88;
	  					case 8, 7: hacerdano = 10;
	  					case 6, 5: hacerdano = 10;
	  					case 4: hacerdano = 15;
				  		case 3: hacerdano = 18;
					}
				}
				case 23: //silenciada
				{
					if (InfoPlayer[issuerid][pManoDerecha] == 40)//táser
					{
						if (!CercaDelWeon(10.0, issuerid, playerid)) return SendClientMessage(issuerid, COLOR_GREY, "No lograste tasear al jugador, está muy lejos.");
						if (IsPlayerInAnyVehicle(playerid) && EnMotos_Bicis(GetPlayerVehicleID(playerid))) { RemovePlayerFromVehicle(playerid); }
						new string[128];
						TogglePlayerControllable(playerid, 0);
						Taseado[playerid] = 1;
						PlayerAudio(playerid, 6003, 8.0);
						format(string, sizeof string, "%s te ha paralizado con cables de táser, 8 segundos para pasar efecto.", NombreJugador(issuerid));
						SendClientMessage(playerid, COLOR_GREEN, string);
						format(string, sizeof string, "Has paralizado con cables de táser a %s. (sólo 8 segundos)", NombreJugador(playerid));
						SendClientMessage(issuerid, COLOR_GREEN, string);
						SetTimerEx("_FGomas2", 8000, false, "i", playerid);
						return 1;
					}
	           		switch (bodypart)
					{
						case 9: hacerdano = 88;
					    case 8, 7: hacerdano = 8;
					    case 6, 5: hacerdano = 8;
					    case 4: hacerdano = 13;
					    case 3: hacerdano = 16;
					}
				}
				case 24: //dk
				{
		            switch(bodypart)
					{
						case 9:
						{
							quitar_vida(playerid, -90);
	 						InfoPlayer[playerid][pBalaCabeza] = 1;
	 						InfoDamage[playerid][id][dmgDamage] = 90;
	 						return 1;
						}
					    case 8, 7: hacerdano = 30;
					    case 6, 5: hacerdano = 30;
					    case 4: hacerdano = 40;
					    case 3: hacerdano = 50;
					}
				}
				case 31: //5.56
				{
					switch (bodypart)
					{
						case 9:
						{
							quitar_vida(playerid, -90);
     						InfoPlayer[playerid][pBalaCabeza] = 1;
     						InfoDamage[playerid][id][dmgDamage] = 90;
     						return 1;
						}
					    case 8, 7: hacerdano = 15;
					    case 6, 5: hacerdano = 15;
					    case 4: hacerdano = 22;
					    case 3: hacerdano = 30;
					}
				}
				case 30: //7.62
				{
					switch (bodypart)
					{
						case 9:
						{
							quitar_vida(playerid, -90);
     						InfoPlayer[playerid][pBalaCabeza] = 1;
     						InfoDamage[playerid][id][dmgDamage] = 90;
     						return 1;
						}
					    case 8, 7: hacerdano = 17;
					    case 6, 5: hacerdano = 17;
					    case 4: hacerdano = 24;
					    case 3: hacerdano = 34;
					}
				}
				case 34: //francotirador (Calibre .50)
				{
				    switch (bodypart)
					{
						case 9:
						{
							quitar_vida(playerid, -90);
     						InfoPlayer[playerid][pBalaCabeza] = 1;
     						InfoDamage[playerid][id][dmgDamage] = 90;
     						return 1;
						}
					    case 8, 7: hacerdano = 77;
					    case 6, 5: hacerdano = 68;
					    case 4: hacerdano = 70;
					    case 3: hacerdano = 70;
					}
				}
				case 25: //escopeta normal y escopetita
				{
					if (InfoPlayer[issuerid][pManoDerecha] == 54)
					{
						if (IsPlayerInAnyVehicle(playerid))
						{
							if (EnMotos_Bicis(GetPlayerVehicleID(playerid)))
							{
								if (ConBalasGoma[playerid] == 1) return 1;
								new string[128];
								TogglePlayerControllable(playerid, 0);
								RemovePlayerFromVehicle(playerid);
								ConBalasGoma[playerid] = 1;
								format(string, sizeof string, "%s te ha paralizado con balas de goma, 15 segundos para pasar efecto.", NombreJugador(issuerid));
								SendClientMessage(playerid, 0x00CF00FF, string);
								format(string, sizeof string, "Has paralizado con balas de goma a %s.", NombreJugador(playerid));
								SendClientMessage(issuerid, 0x00CF00FF, string);
								TogglePlayerControllable(playerid, 0);
								SetTimerEx("_FGomas", 15000, false, "i", playerid);
							}
							else { return 1; }
						}
						else
						{
							if (ConBalasGoma[playerid] == 1) return 1;
							new string[128];
							TogglePlayerControllable(playerid, 0);
							ConBalasGoma[playerid] = 1;
							format(string, sizeof string, "%s te ha paralizado con balas de goma, 15 segundos para pasar efecto.", NombreJugador(issuerid));
							SendClientMessage(playerid, 0x00CF00FF, string);
							format(string, sizeof string, "Has paralizado con balas de goma a %s.", NombreJugador(playerid));
							SendClientMessage(issuerid, 0x00CF00FF, string);
							TogglePlayerControllable(playerid, 0);
							SetTimerEx("_FGomas", 15000, false, "i", playerid);
						}
					}
					else
					{
			  			if (CercaDelMarica(5.0, issuerid, playerid))
				    	{
					    	switch (bodypart)
							{
								case 9: hacerdano = 80;
							    case 8, 7: hacerdano = 20;
							    case 6, 5: hacerdano = 20;
							    case 4: hacerdano = 40;
							    case 3: hacerdano = 60;
							}
						}
						else
						{
							switch (bodypart)
							{
								case 9: hacerdano = 65;
							    case 8, 7: hacerdano = 15;
							    case 6, 5: hacerdano = 15;
							    case 4: hacerdano = 30;
							    case 3: hacerdano = 50;
							}
						}
					}
				}
				case 26,27: //escopetas
				{
			  		if (CercaDelMarica(5.0, issuerid, playerid))
			    	{
				    	switch (bodypart)
						{
							case 9: hacerdano = 80;
						    case 8, 7: hacerdano = 20;
						    case 6, 5: hacerdano = 20;
						    case 4: hacerdano = 40;
						    case 3: hacerdano = 60;
						}
					}
					else
					{
						switch (bodypart)
						{
							case 9: hacerdano = 65;
						    case 8, 7: hacerdano = 15;
						    case 6, 5: hacerdano = 15;
						    case 4: hacerdano = 30;
						    case 3: hacerdano = 50;
						}
					}
				}
				case 38: dar_vida(playerid, 100);
				case 8: // sistema katana
				{
					if (InfoPlayer[issuerid][pTriageTime] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Debes esperar al menos 2 minutos para rebanarlo de nuevo, máquina!");
					if (InfoPlayer[playerid][pMuerto] == 1 || GetPVarInt(playerid, "EstaCrack") == 1)
					{
						new string[200], string1[200];
						format(string1, sizeof(string1), "* %s agarró su Katana con ambas manos, la alineó con el cuello de %s y lo seccionó.", NombreJugador(issuerid), NombreJugador(playerid));
						ProxDetector(30.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						format(string, sizeof string, "[News - Easter Egg] {ffffff}¡Último minuto! La policía encuentró el cuerpo de ""%s"" tirado. ¡Sin cabeza! ¡Qué locura!", NombreJugador(playerid));
						InfoPlayer[issuerid][pTriageTime] = 120;
						SendAllICMessage(COLOR_GENERAL,string);
						quitar_vida(playerid, -90);
						LoopingAnim(issuerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
						return 1;
					}
				}
				default:
				{
					hacerdano = amount;
				}
			}
			//bajo efectos de droga
			switch (drug_effect_damagedid) // #fede#
			{
			    case 1:
				{
				    switch (drug_power_damagedid) // #fede#
			    	{
						case 1: hacerdano = hacerdano-(hacerdano*0.07);
						case 2: hacerdano = hacerdano-(hacerdano*0.085);
						case 3: hacerdano = hacerdano-(hacerdano*0.095);
					}
				}
			    case 2:
			    {
					switch (drug_power_damagedid) // #fede#
					{
						case 1: hacerdano = hacerdano-(hacerdano*0.08);
						case 2: hacerdano = hacerdano-(hacerdano*0.09);
						case 3: hacerdano = hacerdano-(hacerdano*0.1);
					}
	   			}
				case 3:
				{
					switch (drug_power_damagedid) // #fede#
					{
						case 1: hacerdano = hacerdano-(hacerdano*0.04);
						case 2: hacerdano = hacerdano-(hacerdano*0.045);
						case 3: hacerdano = hacerdano-(hacerdano*0.06);
					}
				}
				case 4: hacerdano = hacerdano-(hacerdano*0.055);
			}
			//hacer damage
			BajarVida(playerid, hacerdano);
			InfoDamage[playerid][id][dmgDamage] = floatround(hacerdano);
		}
	}
	return 1;
}

BajarVida(playerid, Float: damage)
{
	new Float: armour = InfoPlayer[playerid][pChaleco];
	if (armour > damage)
	{
		InfoPlayer[playerid][pChaleco] = armour-damage;
	}
	else
	{
		InfoPlayer[playerid][pChaleco] = 0.0;
		armour = damage-armour;
		quitar_vida(playerid, -armour);
	}
	guardar_float_mysql("cuentas", "Chaleco", InfoPlayer[playerid][pID], InfoPlayer[playerid][pChaleco]);
	return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if (!response) return 1;
	if (extraid == Create_VehObject)
	{
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new obj = CreatePlayerObject(playerid, modelid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnModelo", modelid);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 1);
		EditPlayerObject(playerid, obj);
		SendClientMessage(playerid, 0xFFFFFFFF, "* Mantén presionado {FFBF00}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
	}
	//
	else if (extraid == Actor_Skin)
	{
		new id = actore_skin[playerid], string[240];
		InfoNegocio[id][nActorSkin] = modelid;
		guardar_int_mysql("negocios", "ActorSkin", InfoNegocio[id][nID_sql], InfoNegocio[id][nActorSkin]);
		if (InfoNegocio[id][nActorX] != 0.0)
		{
			LabelPickup_negocio(id, 0, 0, 1, 0);
		}
		format(string, sizeof string, "Cambiaste el skin del actor (%d) del negocio %d.", modelid, id);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	else if (extraid == VIP_Skin)
	{
		GivePlayerSkin(playerid, modelid);
		return 1;
	}
	else if (extraid == Equipo_Skin)
	{
		GivePlayerJobSkin(playerid, modelid);
		if (member_faccion(playerid, 1, 2, 3, 4, 5)) cmd_me(playerid, "se viste con ropa del casillero");
		else cmd_me(playerid, "se viste con ropa del armario");
		return 1;
	}
	else if (extraid == Fabrica_Skin)
	{
		new id = FabricaID[playerid], gformat[240], precio = 180000;
		if (id == -1) return 1;
		if (CountEmpleadosF(id) == 5) return SendClientMessage(playerid, COLOR_GREY, "Ya tienes cinco moledores de cristal.");
		if (FabricaSexo[playerid] == 1) precio = 145000;
		new idA = -1;
		Loop(x, 5, 0) if (InfoNegocio[id][nEmpleado][x] == 0)
		{
			idA = x;
			break;
		}
		if (idA == -1) return SendClientMessage(playerid, COLOR_GREY, "Fallo de creación de empleado, contacta con el programador.");
		if (InfoNegocio[id][nDinero] < precio)
		{
			format(gformat, sizeof gformat, "Te faltan $%s para pagar ese tipo de empleado.", diner_coma(precio-InfoNegocio[id][nDinero]));
			SendClientMessage(playerid, COLOR_GREY, gformat);
			return 1;
		}
		InfoNegocio[id][nDinero] -= precio;
		UpdateDineroGuardado(id);
		InfoNegocio[id][nEmpleado][idA] = modelid;
		DestroyDynamicActor(InfoNegocio[id][nActorEmpleado][idA]);
		switch (idA)
		{
			case 0:
			{
				InfoNegocio[id][nActorEmpleado][idA] = CreateDynamicActor(InfoNegocio[id][nEmpleado][idA], -2161.46045, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
			}
			case 1:
			{
				InfoNegocio[id][nActorEmpleado][idA] = CreateDynamicActor(InfoNegocio[id][nEmpleado][idA], -2166.19263, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
			}
			case 2:
			{
				InfoNegocio[id][nActorEmpleado][idA] = CreateDynamicActor(InfoNegocio[id][nEmpleado][idA], -2170.95386, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
			}
			case 3:
			{
				InfoNegocio[id][nActorEmpleado][idA] = CreateDynamicActor(InfoNegocio[id][nEmpleado][idA], -2175.86133, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
			}
			case 4:
			{
				InfoNegocio[id][nActorEmpleado][idA] = CreateDynamicActor(InfoNegocio[id][nEmpleado][idA], -2181.31445, -232.17979, 544.7299, 180.0000, true, 100.0, InfoNegocio[id][nInteriorVW], InfoNegocio[id][nInteriorInt]);
			}
		}
		mysql_format(DBcreative, gformat, sizeof gformat, "UPDATE negocios SET Empleado%d = '%d' WHERE ID = '%d'", idA+1, InfoNegocio[id][nEmpleado][idA], InfoNegocio[id][nID_sql]);
		mysql_tquery(DBcreative, gformat);
		format(gformat, sizeof gformat, "Se te restó $%s del dinero guardado de tu fábrica, ahora hay $%s.", diner_coma(precio), diner_coma(InfoNegocio[id][nDinero]));
		SendClientMessage(playerid, COLOR_LIGHTGREEN, gformat);
		UpdateMesasProduccion(id);
		FabricaID[playerid] = -1;
		return 1;
	}
	else if (extraid == IDObj_Admin)
	{
		new id = edicion_sql_actual[playerid];
		if (id == -1) return SendClientMessage(playerid, -1, "ERROR, avisale a Elias_Moss.");
		Creando_Objeto_Admin(playerid, id, modelid);
		return 1;
	}
	else if (extraid == Clinica_Skin)
	{
		GivePlayerJobSkin(playerid, modelid);
		cmd_me(playerid, "se viste con ropa del casillero");
		return 1;
	}
	else if (extraid == Compra_Skin)
	{
		if (CheckMoney(playerid, 350) == 0) return 1;
		GivePlayerSkin(playerid, modelid);
		if (GetPlayerVirtualWorld(playerid) != 0)
		{
			GivePlayerCash(playerid, -350, "compra de skin");
			CobroNegocio(id_negocio[playerid], 350);
		}
		SendClientMessage(playerid, 0xFFFFFFFF, "Compraste ropa nueva, costo: {00CC00}$350{FFFFFF}.");
		return 1;
	}
	else if (extraid == Compra_Toy)
	{
		new idtoy = -1;
		Loop(uwu, sizeof InfoToy, 0) if (InfoToy[uwu][accModelo] == modelid)
		{
			idtoy = uwu;
			break;
		}
		if (idtoy == -1) return 1;
		new precio = InfoToy[idtoy][accPrecio], gformat[340];
		if (GetPlayerCash(playerid) < precio)
		{
			format(gformat, sizeof gformat, "Te hacen falta $%s para comprar %s por $%s.", diner_coma(precio-GetPlayerCash(playerid)), InfoToy[idtoy][accNombre], diner_coma(precio));
			SendClientMessage(playerid, COLOR_GREY, gformat);
			return 1;
		}
		new x = slotselection[playerid];
		InfoPlayer[playerid][ptModelo][x] = modelid;
		if ((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		{
			InfoPlayer[playerid][ptHueso][x] = 2;
			InfoPlayer[playerid][ptPosX][x] = 0.9;
			InfoPlayer[playerid][ptPosY][x] = 0.0;
			InfoPlayer[playerid][ptPosZ][x] = 0.35;
			InfoPlayer[playerid][ptRotX][x] = 90.0;
			InfoPlayer[playerid][ptRotY][x] = 90.0;
			InfoPlayer[playerid][ptRotZ][x] = 0.0;
			InfoPlayer[playerid][ptScaleX][x] = 1;
			InfoPlayer[playerid][ptScaleY][x] = 1;
			InfoPlayer[playerid][ptScaleZ][x] = 1;
		}
		else if (modelid >= 18891 && modelid <= 18910)
		{
			InfoPlayer[playerid][ptHueso][x] = 2;
			InfoPlayer[playerid][ptPosX][x] = 0.15;
			InfoPlayer[playerid][ptPosY][x] = 0.0;
			InfoPlayer[playerid][ptPosZ][x] = 0.0;
			InfoPlayer[playerid][ptRotX][x] = 90.0;
			InfoPlayer[playerid][ptRotY][x] = 180.0;
			InfoPlayer[playerid][ptRotZ][x] = 90.0;
			InfoPlayer[playerid][ptScaleX][x] = 1;
			InfoPlayer[playerid][ptScaleY][x] = 1;
			InfoPlayer[playerid][ptScaleZ][x] = 1;
		}
		else if (modelid >= 18926 && modelid <= 18935)
		{
			InfoPlayer[playerid][ptHueso][x] = 2;
			InfoPlayer[playerid][ptPosX][x] = 0.1;
			InfoPlayer[playerid][ptPosY][x] = 0.0;
			InfoPlayer[playerid][ptPosZ][x] = 0.0;
			InfoPlayer[playerid][ptRotX][x] = 0.0;
			InfoPlayer[playerid][ptRotY][x] = 0.0;
			InfoPlayer[playerid][ptRotZ][x] = 0.0;
			InfoPlayer[playerid][ptScaleX][x] = 1;
			InfoPlayer[playerid][ptScaleY][x] = 1;
			InfoPlayer[playerid][ptScaleZ][x] = 1;
		}
		else if (modelid >= 18911 && modelid <= 18920)
		{
			InfoPlayer[playerid][ptHueso][x] = 2;
			InfoPlayer[playerid][ptPosX][x] = 0.1;
			InfoPlayer[playerid][ptPosY][x] = 0.035;
			InfoPlayer[playerid][ptPosZ][x] = 0.0;
			InfoPlayer[playerid][ptRotX][x] = 90.0;
			InfoPlayer[playerid][ptRotY][x] = 180.0;
			InfoPlayer[playerid][ptRotZ][x] = 90.0;
			InfoPlayer[playerid][ptScaleX][x] = 1;
			InfoPlayer[playerid][ptScaleY][x] = 1;
			InfoPlayer[playerid][ptScaleZ][x] = 1;
		}
		else if (modelid == 19078 || modelid == 19078)
		{
			InfoPlayer[playerid][ptHueso][x] = 16;
			InfoPlayer[playerid][ptPosX][x] = 0;
			InfoPlayer[playerid][ptPosY][x] = 0;
			InfoPlayer[playerid][ptPosZ][x] = 0;
			InfoPlayer[playerid][ptRotX][x] = 180.0;
			InfoPlayer[playerid][ptRotY][x] = 180.0;
			InfoPlayer[playerid][ptRotZ][x] = 0.0;
			InfoPlayer[playerid][ptScaleX][x] = 1;
			InfoPlayer[playerid][ptScaleY][x] = 1;
			InfoPlayer[playerid][ptScaleZ][x] = 1;
		}
		else if ((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
		{
			InfoPlayer[playerid][ptHueso][x] = 6;
			InfoPlayer[playerid][ptPosX][x] = 0.0;
			InfoPlayer[playerid][ptPosY][x] = 0.0;
			InfoPlayer[playerid][ptPosZ][x] = 0.0;
			InfoPlayer[playerid][ptRotX][x] = 0.0;
			InfoPlayer[playerid][ptRotY][x] = 0.0;
			InfoPlayer[playerid][ptRotZ][x] = 0.0;
			InfoPlayer[playerid][ptScaleX][x] = 1;
			InfoPlayer[playerid][ptScaleY][x] = 1;
			InfoPlayer[playerid][ptScaleZ][x] = 1;
		}
		else if (modelid == 19317)
		{
			InfoPlayer[playerid][ptHueso][x] = 1;
			InfoPlayer[playerid][ptPosX][x] = 0.079;
			InfoPlayer[playerid][ptPosY][x] = -0.10;
			InfoPlayer[playerid][ptPosZ][x] = 0.09;
			InfoPlayer[playerid][ptRotX][x] = 0.0;
			InfoPlayer[playerid][ptRotY][x] = 30.0;
			InfoPlayer[playerid][ptRotZ][x] = 0.0;
			InfoPlayer[playerid][ptScaleX][x] = 1;
			InfoPlayer[playerid][ptScaleY][x] = 1;
			InfoPlayer[playerid][ptScaleZ][x] = 1;
		}
		else
		{
			InfoPlayer[playerid][ptHueso][x] = 2;
			InfoPlayer[playerid][ptPosX][x] = 0.0;
			InfoPlayer[playerid][ptPosY][x] = 0.0;
			InfoPlayer[playerid][ptPosZ][x] = 0.0;
			InfoPlayer[playerid][ptRotX][x] = 0.0;
			InfoPlayer[playerid][ptRotY][x] = 0.0;
			InfoPlayer[playerid][ptRotZ][x] = 0.0;
			InfoPlayer[playerid][ptScaleX][x] = 1;
			InfoPlayer[playerid][ptScaleY][x] = 1;
			InfoPlayer[playerid][ptScaleZ][x] = 1;
		}
		ActualizarToy(playerid, x);
		GivePlayerCash(playerid, -precio, "compra de toy");
		format(gformat, sizeof gformat, "* Compraste el toy {FFBF00}%s{FFFFFF} por {00CC00}$%s{FFFFFF}. Para editarlo: {FFBF00}/toys{FFFFFF}.", InfoToy[idtoy][accNombre], diner_coma(precio));
		SendClientMessage(playerid, 0xFFFFFFFF, gformat);
		return 1;
	}
	return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
 	if (listid == bars)// Esta es la colocación de barreras. (/bar).
	{
		if(response) // CMD:bar.
		{
			new string[128], Float:Position[4];
			for(new i; i <MAX_BARRICADES; i++)
			{
				if(Barricade[i] == 0)
				{
					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
					GetPlayerFacingAngle(playerid, Position[3]);
					Barricade[i] = CreateDynamicObject(modelid, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0);
					SetPlayerPos(playerid, Position[0]-0.5, Position[1]+0.8, Position[2]+2.5);
					EditDynamicObject(playerid, Barricade[i]);
					SetPVarInt(playerid, "BAR_EDIT", 1);
					BarObject[playerid] = modelid; ObjectBar[playerid] = Barricade[i];
					/////////////////////////////////////////////////////////////////////////
					new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(playerid, zone, sizeof(zone));
					SendClientMessage(playerid, COLOR_YELLOW, "[Aviso] Usa la tecla [Espacio] para ajustar la barrera, una vez lo hagas, presiona [Guardar].");
					format(string, sizeof string, "Has creado una barricada en %s. Usa /qb para eliminarla.", zone);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		else SendClientMessage(playerid, COLOR_GREY,"[Información]: Has cancelado la colocación de la barrera.");
		return 1;
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (response == EDIT_RESPONSE_UPDATE) return 1;
	if (InfoPlayer[playerid][pEditingMode] == 13) // cmd_creargraffiti
	{
		new id = edicion_sql_actual[playerid], gformat[190], query[612];
		if (id == -1) return SendClientMessage(playerid, -1, "Error edición.");
		if (objectid == InfoGraffiti[id][gr_Objeto])
		{
			if (response == EDIT_RESPONSE_FINAL)
			{
				InfoGraffiti[id][gr_PosX] = x;
				InfoGraffiti[id][gr_PosY] = y;
				InfoGraffiti[id][gr_PosZ] = z;
				InfoGraffiti[id][gr_RotX] = rx;
				InfoGraffiti[id][gr_RotY] = ry;
				InfoGraffiti[id][gr_RotZ] = rz;
				SetDynamicObjectPos(InfoGraffiti[id][gr_Objeto], x, y, z);
				SetDynamicObjectRot(InfoGraffiti[id][gr_Objeto], rx, ry, rz);
				format(gformat, sizeof gformat, "Posición de graffiti actualizada correctamente.", id);
				SendClientMessage(playerid, -1, gformat);
				InfoPlayer[playerid][pEditingMode] = 0;
				edicion_sql_actual[playerid] = -1;
				//opción idsql ya creada.
				if (InfoGraffiti[id][grID_sql] != 0)
				{
					mysql_format(DBcreative, query, sizeof query, "UPDATE graffitis SET PotX = '%f', PotY = '%f', PotZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
					InfoGraffiti[id][gr_PosX],
					InfoGraffiti[id][gr_PosY],
					InfoGraffiti[id][gr_PosZ],
					InfoGraffiti[id][gr_RotX],
					InfoGraffiti[id][gr_RotY],
					InfoGraffiti[id][gr_RotZ],
					InfoGraffiti[id][gr_Interior],
					InfoGraffiti[id][gr_VirtualWorld],
					InfoGraffiti[id][grID_sql]);
					mysql_tquery(DBcreative, query);
					return 1;
				}
				mysql_format(DBcreative, query, sizeof query, "INSERT INTO graffitis (PotX, PotY, PotZ, RotX, RotY, RotZ, Interior, VirtualWorld) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')",
				InfoGraffiti[id][gr_PosX],
				InfoGraffiti[id][gr_PosY],
				InfoGraffiti[id][gr_PosZ],
				InfoGraffiti[id][gr_RotX],
				InfoGraffiti[id][gr_RotY],
				InfoGraffiti[id][gr_RotZ],
				InfoGraffiti[id][gr_Interior],
				InfoGraffiti[id][gr_VirtualWorld]);
				mysql_tquery(DBcreative, query, "OnGraffitiCreate", "i", id);
			}
			else if (response == EDIT_RESPONSE_CANCEL)
			{
				InfoGraffiti[id][gr_PosX] = 0.0;
				InfoGraffiti[id][gr_PosY] = 0.0;
				InfoGraffiti[id][gr_PosZ] = 0.0;
				InfoGraffiti[id][gr_RotX] = 0.0;
				InfoGraffiti[id][gr_RotY] = 0.0;
				InfoGraffiti[id][gr_RotZ] = 0.0;
				InfoGraffiti[id][gr_Interior] = 0;
				InfoGraffiti[id][gr_VirtualWorld] = 0;
				InfoGraffiti[id][gr_Fecha] = 0;
				DestroyDynamicObject(InfoGraffiti[id][gr_Objeto]);
				SendClientMessage(playerid, -1, "Cancelaste la edición de graffiti.");
				InfoPlayer[playerid][pEditingMode] = 0;
				edicion_sql_actual[playerid] = -1;
			}
		}
	}
	if (InfoPlayer[playerid][pEditingMode] == 74) // cmd_crearcajero
	{
		if (response == EDIT_RESPONSE_CANCEL)
		{
			if (InfoPlayer[playerid][pEditingMode] != 0)
			{
				InfoPlayer[playerid][pEditingMode] = 0;
				edicion_sql_actual[playerid] = -1;
				return 1;
			}
		}
		else if (response == EDIT_RESPONSE_FINAL)
		{
			new id = edicion_sql_actual[playerid], query[1028];
			if (InfoCajero[id][atmModelo] == 0) return 1;
			InfoPlayer[playerid][pEditingMode] = 0;
			InfoCajero[id][atmPotX] = x;
			InfoCajero[id][atmPotY] = y;
			InfoCajero[id][atmPotZ] = z;
			InfoCajero[id][atmRotX] = rx;
			InfoCajero[id][atmRotY] = ry;
			InfoCajero[id][atmRotZ] = rz;
			SetDynamicObjectPos(InfoCajero[id][atmObject], x, y, z);
			SetDynamicObjectRot(InfoCajero[id][atmObject], rx, ry, rz);
			SendClientMessage(playerid, COLOR_YELLOW, "Posición finalizada del cajero automático.");
			Label_cajero(id, 1);
			mysql_format(DBcreative, query, sizeof query, "UPDATE cajeros SET Modelo = '%d', PotX = '%f', PotY = '%f', PotZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
			InfoCajero[id][atmModelo],
			InfoCajero[id][atmPotX],
			InfoCajero[id][atmPotY],
			InfoCajero[id][atmPotZ],
			InfoCajero[id][atmRotX],
			InfoCajero[id][atmRotY],
			InfoCajero[id][atmRotZ],
			InfoCajero[id][atmInterior],
			InfoCajero[id][atmVirtualWorld],
			InfoCajero[id][atmID_sql]);
			mysql_tquery(DBcreative, query);
			edicion_sql_actual[playerid] = -1;
			return 1;
		}
	}
	if (InfoPlayer[playerid][pEditingMode] == 4) // cmd_Crearobjetoadmin
	{
		new id = edicion_sql_actual[playerid], query[1028];
		if (id == -1) return SendClientMessage(playerid, -1, "Error edición.");
		if (objectid == InfoObjeto[id][oObjeto])
		{
			if (response == EDIT_RESPONSE_FINAL)
			{
				InfoObjeto[id][oPotX] = x;
				InfoObjeto[id][oPotY] = y;
				InfoObjeto[id][oPotZ] = z;
				InfoObjeto[id][oRotX] = rx;
				InfoObjeto[id][oRotY] = ry;
				InfoObjeto[id][oRotZ] = rz;
				SetDynamicObjectPos(InfoObjeto[id][oObjeto], x, y, z);
				SetDynamicObjectRot(InfoObjeto[id][oObjeto], rx, ry, rz);
				InfoPlayer[playerid][pEditingMode] = 0;
				SendClientMessage(playerid, -1, "Edición terminada.");
				edicion_sql_actual[playerid] = -1;
				mysql_format(DBcreative, query, sizeof query, "UPDATE objetos_admin SET PotX = '%f', PotY = '%f', PotZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f' WHERE ID = '%d'",
				InfoObjeto[id][oPotX],
				InfoObjeto[id][oPotY],
				InfoObjeto[id][oPotZ],
				InfoObjeto[id][oRotX],
				InfoObjeto[id][oRotY],
				InfoObjeto[id][oRotZ],
				InfoObjeto[id][oID_sql]);
				mysql_tquery(DBcreative, query);
				return 1;
			}
			else if (response == EDIT_RESPONSE_CANCEL)
			{
				SetDynamicObjectPos(InfoObjeto[id][oObjeto], InfoObjeto[id][oPotX], InfoObjeto[id][oPotY], InfoObjeto[id][oPotZ]);
				SetDynamicObjectRot(InfoObjeto[id][oObjeto], InfoObjeto[id][oRotX], InfoObjeto[id][oRotY], InfoObjeto[id][oRotZ]);
				InfoPlayer[playerid][pEditingMode] = 0;
				edicion_sql_actual[playerid] = -1;
				SendClientMessage(playerid, -1, "Cancelaste la edición del objeto dinámico admin.");
				return 1;
			}
		}
	}
	if (GetPVarInt(playerid, "BAR_EDIT") == 1 && BarObject[playerid] != 0)
	{
		if (response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(ObjectBar[playerid], x, y, z);
			SetDynamicObjectRot(ObjectBar[playerid], rx, ry, rz);
			DeletePVar(playerid, "BAR_EDIT");
			BarObject[playerid] = 0;
		}
		if (response == EDIT_RESPONSE_CANCEL)
		{
			SendClientMessage(playerid, -1, "Edición del Objeto cancelado.");
			DeletePVar(playerid, "BAR_EDIT");
			BarObject[playerid] = 0;
		}
	}
	return 1;
}

forward OnGraffitiCreate(id);
public OnGraffitiCreate(id)
{
	InfoGraffiti[id][grID_sql] = cache_insert_id();
	cache_unset_active();
    return 1;
}

forward Float:GetDistanceFromPointToPoint(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
public Float:GetDistanceFromPointToPoint(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ) // Nueva POS.
{
	if (response != EDIT_RESPONSE_FINAL && response != EDIT_RESPONSE_CANCEL) return true;
	if (GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
	switch (GetPVarInt(playerid, "EditorMode"))
	{
		case 1: //Vehicle furn
		{
			if (GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
			if (!response)
			{
				DeletePVar(playerid, "FurnVehicleID");
				return 1;
			}
			new id = GetPVarInt(playerid, "FurnVehicleID");
			new vehicleid = InfoVehiculo[id][vIG_id];
			new modelo = GetPVarInt(playerid, "FurnModelo");
			DeletePVar(playerid, "FurnVehicleID");
			if (vehicleid == 0) { return 1; } //Just incase.
			new Float:pos[3];
			GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
			new Float:distance = GetDistanceFromPointToPoint(fX, fY, fZ, pos[0], pos[1], pos[2]);
			if (distance > 10.0)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "El objeto está demasiado lejos del vehículo y no se pudo poner!");
				return 1;
			}
			Loop(i, 5, 0) if (InfoVehiculo[id][vObjModelo][i] == 0)
			{
				InfoVehiculo[id][vTuneo][i] = CreateDynamicObject(modelo, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				new Float:offset[3];
				GetOffsetFromVehicle(fX, fY, fZ, vehicleid, offset[0], offset[1], offset[2]);
				new Float:rotz;
				GetVehicleZAngle(vehicleid, rotz);
				InfoVehiculo[id][vObjPosX][i] = offset[0];
				InfoVehiculo[id][vObjPosY][i] = offset[1];
				InfoVehiculo[id][vObjPosZ][i] = offset[2];
				InfoVehiculo[id][vObjRotZ][i] = fRotZ-rotz;
				AttachDynamicObjectToVehicle(InfoVehiculo[id][vTuneo][i], vehicleid, offset[0], offset[1], offset[2], fRotX, fRotY, fRotZ-rotz);
				Streamer_Update(playerid);
				InfoVehiculo[id][vObjModelo][i] = modelo;
				InfoVehiculo[id][vObjRotX][i] = fRotX;
				InfoVehiculo[id][vObjRotY][i] = fRotY;
				new query[1028];
				mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET ObjModelo_%d = '%d', ObjPosX_%d = '%f', ObjPosY_%d = '%f', ObjPosZ_%d = '%f', ObjRotX_%d = '%f', ObjRotY_%d = '%f', ObjRotZ_%d = '%f' WHERE ID = '%d'",
				i+1, InfoVehiculo[id][vObjModelo][i], i+1, InfoVehiculo[id][vObjPosX][i], i+1, InfoVehiculo[id][vObjPosY][i], i+1, InfoVehiculo[id][vObjPosZ][i], i+1, InfoVehiculo[id][vObjRotX][i], i+1, InfoVehiculo[id][vObjRotY][i], i+1, InfoVehiculo[id][vObjRotZ][i], InfoVehiculo[id][vID_sql]);
				mysql_tquery(DBcreative, query);
				break;
			}
			SendClientMessage(playerid, COLOR_GENERAL, "Agregaste un nuevo objeto a tu vehículo, posiciones guardadas.");
		}
		case 2: //Vehicle furn
		{
			if (GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
			new id = GetPVarInt(playerid, "FurnVehicleID");
			new vehicleid = InfoVehiculo[id][vIG_id];
			if (!response)
			{
				DeletePVar(playerid, "FurnVehicleID");
				Colocar_Objeto(id, vehicleid);
				Streamer_Update(playerid);
				return 1;
			}
			new modelo = GetPVarInt(playerid, "FurnModelo");
			new i = GetPVarInt(playerid, "FurnSlotObj");
			DeletePVar(playerid, "FurnVehicleID");
			new Float:pos[3];
			GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
			new Float:distance = GetDistanceFromPointToPoint(fX, fY, fZ, pos[0], pos[1], pos[2]);
			if (distance > 10.0)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "El objeto está demasiado lejos del vehículo y no se pudo editar");
				Colocar_Objeto(id, vehicleid);
				Streamer_Update(playerid);
				return 1;
			}
			InfoVehiculo[id][vTuneo][i] = CreateDynamicObject(modelo, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			new Float:offset[3], Float:rotz, query[1028];
			GetOffsetFromVehicle(fX, fY, fZ, vehicleid, offset[0], offset[1], offset[2]);
			GetVehicleZAngle(vehicleid, rotz);
			InfoVehiculo[id][vObjPosX][i] = offset[0];
			InfoVehiculo[id][vObjPosY][i] = offset[1];
			InfoVehiculo[id][vObjPosZ][i] = offset[2];
			InfoVehiculo[id][vObjRotZ][i] = fRotZ-rotz;
			AttachDynamicObjectToVehicle(InfoVehiculo[id][vTuneo][i], vehicleid, offset[0], offset[1], offset[2], fRotX, fRotY, fRotZ-rotz);
			Streamer_Update(playerid);
			InfoVehiculo[id][vObjModelo][i] = modelo;
			InfoVehiculo[id][vObjRotX][i] = fRotX;
			InfoVehiculo[id][vObjRotY][i] = fRotY;
			mysql_format(DBcreative, query, sizeof query, "UPDATE vehiculos SET ObjModelo_%d = '%d', ObjPosX_%d = '%f', ObjPosY_%d = '%f', ObjPosZ_%d = '%f', ObjRotX_%d = '%f', ObjRotY_%d = '%f', ObjRotZ_%d = '%f' WHERE ID = '%d'",
			i+1, InfoVehiculo[id][vObjModelo][i], i+1, InfoVehiculo[id][vObjPosX][i], i+1, InfoVehiculo[id][vObjPosY][i], i+1, InfoVehiculo[id][vObjPosZ][i], i+1, InfoVehiculo[id][vObjRotX][i], i+1, InfoVehiculo[id][vObjRotY][i], i+1, InfoVehiculo[id][vObjRotZ][i], InfoVehiculo[id][vID_sql]);
			mysql_tquery(DBcreative, query);
			SendClientMessage(playerid, COLOR_GENERAL, "Nuevas posiciones del objeto de tu vehículo guardadas.");
		}
	}
	DeletePVar(playerid,"EditorMode");
	return 1;
}

stock GetOffsetFromVehicle(Float:posX, Float:posY, Float:posZ, vehicleid, &Float:X, &Float:Y, &Float:Z) {
	new Float:pos[3];
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	new Float:rotZ;
	GetVehicleZAngle(vehicleid, rotZ);
	new Float:off[2];
	off[0] = posX - pos[0];
	off[1] = posY - pos[1];
	X = off[0]*floatcos(rotZ, degrees)+off[1]*floatsin(rotZ, degrees);
	Y = -off[0]*floatsin(rotZ, degrees)+off[1]*floatcos(rotZ, degrees);
	Z = posZ - pos[2];
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

//***sistema afk***
forward SendMessage();
public SendMessage()
{
   new Nameafk[24], string[256];
   for(new i = 0; i <= MAX_PLAYERS; i++)
   {
     if(IsPlayerConnected(i))
     {
       GetPlayerName(i, Nameafk, 24);
       if(Afk[i]==1)
       {
       TextDrawHideForAll(Text:Messageafk);
       format(string, sizeof string, "",Nameafk);
       TextDrawSetStringEx(Messageafk,string);
       TextDrawShowForAll(Text:Messageafk);
       SetTimer("StopMessage",6000,0);
       }
       if(Afk[i]==0)
       {
       TextDrawHideForAll(Text:Messageafk);
       format(string, sizeof string, "",Nameafk);
       TextDrawSetStringEx(Messageafk,string);
       TextDrawShowForAll(Text:Messageafk);
       SetTimer("StopMessage",6000,0);
       }
     }
   }
}

forward StopMessage();
public StopMessage()
{
  TextDrawHideForAll(Text:Messageafk);
}

// Garaje System.
stock TipoGarage(garageid)
{
	new string[24];
	if(!InfoGarages[garageid][gType]) format(string, sizeof string, "Ninguno");
    else if(InfoGarages[garageid][gType] == 1) format(string, sizeof string, "Pequeño");
    else if(InfoGarages[garageid][gType] == 2) format(string, sizeof string, "Mediano");
    else if(InfoGarages[garageid][gType] == 3) format(string, sizeof string, "Grande");
	return string;
}
getPlayerGaragesID(const playerid)
{
	new x;
	new Nombre[MAX_PLAYER_NAME];
    while(x < MAX_GARAGES)
	{
		if(strlen(InfoGarages[x][gOwner]) >= 1)
		{
		    GetPlayerName(playerid, Nombre, sizeof(Nombre));
	        if(!strcmp(InfoGarages[x][gOwner], Nombre, true)){return x;}
		}
		x++;
	}
    return 0;
}

CheckPlayerIP(playerid) // Multicuentas.
{
	new IP[2][16], ips = 0, string[256];
	GetPlayerIp(playerid, IP[0], 16);
	Loop(playerid2, MAX_PLAYERS, 0) if (IsPlayerConnected(playerid2))
	{
		GetPlayerIp(playerid2, IP[1], 16);
		if (!strcmp(IP[0], IP[1])) ips++;
	}
	if (ips >= 2)
	{
		format(string, sizeof string, "[ATENCIÓN] %s(%d) ingreso al servidor con la misma IP de otro usuario conectado (posible multicuenta).", NombreOriginal(playerid), playerid);
		SendAdminMessage(COLOR_YELLOW, string);
	}
	return 1;
}

//by edinsonwalker:
stock alm(string[], string2[])
{
	strmid(string, string2, 0, strlen(string2), strlen(string2) + 1);
	return 1;
}

stock Mins_time(minutos)
{
    new tiempito[150];
    new horitas,dias;
    if(minutos > 59)
    {
        horitas = minutos / 60;
        minutos = minutos - (horitas * 60);
    }
    if(horitas > 23)
    {
        dias = horitas / 24;
        horitas = horitas - (dias * 24);
    }
    if(dias > 0)
    {
        format(tiempito,sizeof(tiempito),"%d días, %d horas, %d minutos",dias,horitas,minutos);
    }
    else if(horitas > 0)
    {
        format(tiempito,sizeof(tiempito),"%d horas, %d minutos",horitas,minutos);
    }
    else
    {
        format(tiempito,sizeof(tiempito),"%d minutos",minutos);
    }
    return tiempito;
}

GetMonth(Month)
{
    new MonthStr[15];
    switch(Month)
    {
        case 1:  MonthStr = "Enero";
        case 2:  MonthStr = "Febrero";
        case 3:  MonthStr = "Marzo";
        case 4:  MonthStr = "Abril";
        case 5:  MonthStr = "Mayo";
        case 6:  MonthStr = "Junio";
        case 7:  MonthStr = "Julio";
        case 8:  MonthStr = "Agosto";
        case 9:  MonthStr = "Septiembre";
        case 10: MonthStr = "Octubre";
        case 11: MonthStr = "Noviembre";
        case 12: MonthStr = "Diciembre";
    }
    return MonthStr;
}

stock GetWeekDay(day=0, month=0, year=0)
{
    if (!day)
    getdate(year, month, day);
    new weekday_str[12],j,e;
    if (month <= 2)
    {
        month += 12;
        --year;
    }
    j = year % 100;
    e = year / 100;
    switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
    {
        case 0: weekday_str = "Sabado";
        case 1: weekday_str = "Domingo";
        case 2: weekday_str = "Lunes";
        case 3: weekday_str = "Martes";
        case 4: weekday_str = "Miercoles";
        case 5: weekday_str = "Jueves";
        case 6: weekday_str = "Viernes";
    }
    return weekday_str;
}

FechaHoy()
{
	new Ano, Mes, Dia, Hora, Minutos, Segundos, gformat[256];
	getdate(Ano, Mes, Dia);
	gettime(Hora, Minutos, Segundos);
	if (Hora >= 12) format(gformat, sizeof gformat, "%02d:%02d:%02d PM - %s %02d del %02d", (Hora == 12) ? (12) : (Hora - 12), Minutos, Segundos, GetMonth(Mes), Dia, Ano);
	else if (Hora < 12) format(gformat, sizeof gformat, "%02d:%02d:%02d AM - %s %02d del %02d", (Hora == 0) ? (12) : (Hora), Minutos, Segundos, GetMonth(Mes), Dia, Ano);
	return gformat;
}

GetNameAcento(level)
{
	new a_name[64];
	switch (level)
	{
		case 1: alm(a_name, "normal");
		case 2: alm(a_name, "britanico");
		case 3: alm(a_name, "japones");
		case 4: alm(a_name, "chino");
		case 5: alm(a_name, "koreano");
		case 6: alm(a_name, "venezolano");
		case 7: alm(a_name, "peruano");
		case 8: alm(a_name, "ruso");
		case 9: alm(a_name, "americano");
		case 10: alm(a_name, "español");
		case 11: alm(a_name, "colombiano");
		case 12: alm(a_name, "francés");
		case 13: alm(a_name, "italiano");
		case 14: alm(a_name, "gangster");
		case 15: alm(a_name, "uruguayo");
		case 16: alm(a_name, "brasilero");
		case 17: alm(a_name, "argentino");
		case 18: alm(a_name, "chileno");
		case 19: alm(a_name, "cubano");
		case 20: alm(a_name, "israeli");
		case 21: alm(a_name, "alemán");
		case 22: alm(a_name, "hippie");
		case 23: alm(a_name, "mexicano");
		case 24: alm(a_name, "arabe");
		case 25: alm(a_name, "noruego");
		case 26: alm(a_name, "australiano");
	}
	return a_name;
}

forward _FGomas2(playerid); public _FGomas2(playerid)
{
	Taseado[playerid] = 0;
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

IntentoChitearBalas(playerid)
{
	if(GetPlayerAmmo(playerid) > InfoPlayer[playerid][pManoDerechaCant] && AntiG[Balas])
	{
		new string[168];
		format(string, sizeof string, "{FF6347}Administración:{FFFFFF} %s fue expulsado y limpiado. Razón:[Cheat de munición]", NombreOriginal(playerid));
		SendAllMessage(0xFFFFFFFF, string);
		QuitarManos(playerid);
		Kick(playerid);
		return 1;
	}
	return 0;
}

funcion CheckTimer(time, ref)
{
	new seconds = (time - (gettime() - ref));
	if(ref == 0) return -1;
	else if(seconds <= 0) return 0;
	else return seconds;
}

funcion CercaDelWeon(Float:radi, playerid, playerid2) {
	new Float: fp_playerPos[3];
	GetPlayerPos(playerid2, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(playerid2)) { return 1; }
	return 0;
}

stock PlayerAudio(playerid, soundid, Float: radio = 10.0)// Realistic sound playback
{
    new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new i: Player)
	{
		if(IsPlayerInRangeOfPoint(i, radio, x, y, z)) PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}

funcion RemovePlayerWeapon(playerid, weaponid) //quitar un arma de un jugador
{
	if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50) return;
	new saveweapon[13], saveammo[13];
	for(new slot = 0; slot < 13; slot++)
	GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
	ResetPlayerWeapons(playerid);
	for(new slot; slot < 13; slot++)
	{
		if(saveweapon[slot] == weaponid || saveammo[slot] == 0) continue;
		GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
	}
	GivePlayerWeapon(playerid, 0, 1);
}

stock diner_coma(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ",", numbers);
	}

	if(negative) strins(f_string, "-", 0);
	return f_string;
}

EstaEnBicis(carid)
{
	if(GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 510) { return 1; }
	return 0;
}


eEnvcvehs(carid)
{
	new cvehs[] = { 560, 562, 565, 559, 561, 558 };
	for(new i = 0; i < sizeof cvehs; i++) { if (GetVehicleModel(carid) == cvehs[i]) return 1; }
	return 0;
}

EnMotos_Bicis(carid)
{
	new Bike[] = { 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471 };
	for(new i = 0; i < sizeof(Bike); i++) { if(GetVehicleModel(carid) == Bike[i]) return 1; }
	return 0;
}

EstaEnAvion(carid)
{
	new Avion[] = {592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469};
	for(new i = 0; i < sizeof(Avion); i++) { if(GetVehicleModel(carid) == Avion[i]) return 1; }
	return 0;
}

EstaEnBote(carid)
{
	new Boats[] = {472, 473, 493, 484, 430, 454, 453, 452, 446};
	for(new i = 0; i < sizeof(Boats); i++) { if(GetVehicleModel(carid) == Boats[i]) return 1; }
	return 0;
}

borrar_vehiculo(vid)
{
	new vehicleid = InfoVehiculo[vid][vIG_id];
	if (InfoVehiculo[vid][vModeloNeon] != 0 && InfoVehiculo[vid][vOnNeon] != 0)
	{
		DestroyDynamicObject(InfoVehiculo[vid][vObjetoNeonL]);
		DestroyDynamicObject(InfoVehiculo[vid][vObjetoNeonR]);
	}
	Loop(x, 5, 0) if (InfoVehiculo[vid][vObjModelo][x] != 0) { DestroyDynamicObject(InfoVehiculo[vid][vTuneo][x]); }
	if (!isnull(InfoVehiculo[vid][vCallSign])) DestroyDynamic3DTextLabel(InfoVehiculo[vid][vOnCallSign]);
	if (InfoVehiculo[vid][vLlavePrestada] != -1)
	{
		InfoPlayer[InfoVehiculo[vid][vLlavePrestada]][pLlaveVehicle] = 0;
		InfoVehiculo[vid][vLlavePrestada] = -1;
	}
	DestroyVehicle(vehicleid);
	InfoVehiculo[vid][vMaleteroOn] = 0;
	InfoVehiculo[vid][vIG_id] = 0;
	alm(InfoVehiculo[vid][vNombre], "none");
	alm(InfoVehiculo[vid][vPropietario], "none");
	InfoVehiculo[vid][vTipo] = 0;
	InfoVehiculo[vid][vNegocio] = 0;
	InfoVehiculo[vid][vModelo] = 0;
	InfoVehiculo[vid][vPosicionX] = 0.0;
	InfoVehiculo[vid][vPosicionY] = 0.0;
	InfoVehiculo[vid][vPosicionZ] = 0.0;
	InfoVehiculo[vid][vPosicionR] = 0.0;
	InfoVehiculo[vid][vVirtualWorld] = 0;
	InfoVehiculo[vid][vInterior] = 0;
	InfoVehiculo[vid][vVida] = 0.0;
	InfoVehiculo[vid][vDanioSuperficie] = 0;
	InfoVehiculo[vid][vDanioPuertas] = 0;
	InfoVehiculo[vid][vDanioLuces] = 0;
	InfoVehiculo[vid][vDanioRuedas] = 0;
	InfoVehiculo[vid][vGasolina] = 200;
	InfoVehiculo[vid][vColor_1] = 1;
	InfoVehiculo[vid][vColor_2] = 1;
	InfoVehiculo[vid][vPaintJob] = -1;
	InfoVehiculo[vid][vSeguro] = 0;
	InfoVehiculo[vid][vPrecio] = 0;
	InfoVehiculo[vid][vEmbargo] = 0;
	InfoVehiculo[vid][vMulta] = 0;
	Loop(xd, 5, 0)
	{
		InfoVehiculo[vid][vObjModelo][xd] = 0;
		InfoVehiculo[vid][vObjPosX][xd] = 0;
		InfoVehiculo[vid][vObjPosY][xd] = 0;
		InfoVehiculo[vid][vObjPosZ][xd] = 0;
		InfoVehiculo[vid][vObjRotX][xd] = 0;
		InfoVehiculo[vid][vObjRotY][xd] = 0;
		InfoVehiculo[vid][vObjRotZ][xd] = 0;
		new query43[1028];
		mysql_format(DBcreative, query43, sizeof query43, "UPDATE vehiculos SET ObjModelo_%d = '%d', ObjPosX_%d = '%f', ObjPosY_%d = '%f', ObjPosZ_%d = '%f', ObjRotX_%d = '%f', ObjRotY_%d = '%f', ObjRotZ_%d = '%f' WHERE ID = '%d'",
		xd+1, InfoVehiculo[vid][vObjModelo][xd], xd+1, InfoVehiculo[vid][vObjPosX][xd], xd+1, InfoVehiculo[vid][vObjPosY][xd], xd+1, InfoVehiculo[vid][vObjPosZ][xd], xd+1, InfoVehiculo[vid][vObjRotX][xd], xd+1, InfoVehiculo[vid][vObjRotY][xd], xd+1, InfoVehiculo[vid][vObjRotZ][xd], InfoVehiculo[vid][vID_sql]);
		mysql_tquery(DBcreative, query43);
	}
	new dex_query[170];
	Loop(x, 10, 0)
	{
		InfoVehiculo[vid][vMaletero][x] = 0;
		InfoVehiculo[vid][vMaleteroCant][x] = 0;
		mysql_format(DBcreative, dex_query, sizeof dex_query, "UPDATE vehiculos SET Maletero%d = 0, MaleteroCant%d = 0 WHERE ID = '%d'", x+1, x+1, InfoVehiculo[vid][vID_sql]);
		mysql_tquery(DBcreative, dex_query);
	}
	InfoVehiculo[vid][vMaxMaletero] = 5;
	Loop(x, MAX_MODIFICACIONES, 0)
	{
		InfoVehiculo[vid][vModificacion][x] = 0;
		mysql_format(DBcreative, dex_query, sizeof dex_query, "UPDATE vehiculos SET Modificacion%d = 0 WHERE ID = '%d'", x+1, InfoVehiculo[vid][vID_sql]);
		mysql_tquery(DBcreative, dex_query);
	}
	InfoVehiculo[vid][vModeloNeon] = 0;
	InfoVehiculo[vid][vOnNeon] = 0;
	InfoVehiculo[vid][vSpawned] = 0;
	InfoVehiculo[vid][vSirena] = 0;
	new que2ry[3000], query[4000];
	format(que2ry, sizeof que2ry, "UPDATE vehiculos SET Nombre = '%s', Propietario = '%s', Tipo = 0, Modelo = 0, Negocio = 0, Posicion_X = 0.0, Posicion_Y = 0.0, Posicion_Z = 0.0, Posicion_R = 0.0,", InfoVehiculo[vid][vNombre], InfoVehiculo[vid][vPropietario]);
	format(que2ry, sizeof que2ry, "%s Interior = 0, VirtualWorld = 0, Vida = 1000.0, DanioSuperficie = 0, DanioPuertas = 0, DanioLuces = 0, DanioRuedas = 0, Gasolina = 200, Color_1 = 1, Sirena = 0,", que2ry);
	mysql_format(DBcreative, query, sizeof query, "%s ModeloNeon = 0, OnNeon = 0, Color_2 = 1, PaintJob = -1, ConSeguro = 0, Precio = 0, Embargo = 0, Multa = 0, MaxMaletero = 5, CallSign = '' WHERE ID = '%d'", que2ry, InfoVehiculo[vid][vID_sql]);
	mysql_tquery(DBcreative, query);
	return 1;
}

check_vehicles(playerid, Float: metros)
{
	new Float: x, Float: y, Float: z;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vIG_id] != 0)
	{
		new vehicleid = InfoVehiculo[id][vIG_id];
		GetVehiclePos(vehicleid, x, y, z);
		if (IsPlayerInRangeOfPoint(playerid, metros, x, y, z))
		{
			if (GetVehicleVirtualWorld(vehicleid) == GetPlayerVirtualWorld(playerid))
			{
				return id;
			}
		}
	}
	return -1;
}

stock GetCar3DZone(vehicleid, zone[], len)
{
    new Float: x, Float: y, Float: z;
    GetVehiclePos(vehicleid, x, y, z);
    for(new i = 0; i != sizeof(gSAZones); i++)
	{
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5]) {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

EnNegocio(playerid) //new by EdinsonWalker, 24/01/2020
{
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nInteriorVW] != 0)
	{
		if (InfoNegocio[id][nInteriorInt] == InfoPlayer[playerid][pInterior] && InfoNegocio[id][nInteriorVW] == InfoPlayer[playerid][pVirtualWorld])
		{
			return id;
		}
	}
	return -1;
}

EnCasa(playerid) //new by EdinsonWalker, 16/01/2020
{
	Loop(id, totalcasas, 1) if (InfoCasa[id][cInteriorVW] != 0)
	{
		if (InfoCasa[id][cInteriorInt] == InfoPlayer[playerid][pInterior] && InfoCasa[id][cInteriorVW] == InfoPlayer[playerid][pVirtualWorld])
		{
			return id;
		}
	}
	return -1;
}

stock Get2DZone(zone[], len, Float: x, Float: y, Float: z)
{
	#pragma unused z
	for (new i = 0; i != sizeof(gSAZones); i++)
	{
		if (x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
			return format(zone, len, gSAZones[i][SAZONE_NAME]);
		}
	}
	return format(zone, len, "San Andreas");
}

funcion IsPlayerAdminCall(playerid)
{
	if (GetPlayerAdmin(playerid, 1) != 0) return 1;
	else return 0;
}

add_mapeos_edinson()
{
	//negocio: hospital
	CreateDynamicObject(19325, -2282.10498, 116.04528, -6.33510,   90.00000, 0.00000, 90.18001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(19325, -2275.52295, 116.04869, -6.33510,   90.00000, 0.00000, 90.18001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1569, -2330.58301, 112.93484, -6.40223,   0.00000, 0.00000, -90.11999, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1569, -2330.57104, 109.95349, -6.40223,   0.00000, 0.00000, -269.82010, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(948, -2330.26855, 109.30609, -6.40290,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(948, -2330.29541, 113.56786, -6.40290,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(955, -2323.70898, 99.48238, -6.01688,   0.00000, 0.00000, -178.56001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(18755, -2272.10547, 111.65658, -4.37645,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1671, -2320.76099, 113.19901, -5.88380,   0.00000, 0.00000, -89.76000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1726, -2329.07813, 122.57433, -6.40811,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1727, -2326.52881, 122.55769, -6.40772,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1726, -2329.83130, 119.36741, -6.40811,   0.00000, 0.00000, 90.18001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1726, -2329.71436, 100.69326, -6.40811,   0.00000, 0.00000, 90.18001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1726, -2326.67969, 99.79217, -6.40811,   0.00000, 0.00000, -179.94009, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1727, -2325.07983, 99.81741, -6.40772,   0.00000, 0.00000, -179.40001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(955, -2324.11963, 123.20577, -6.01688,   0.00000, 0.00000, 0.41997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1823, -2328.15112, 119.83789, -6.39688,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1823, -2328.02661, 101.31773, -6.39688,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1969, -2283.07227, 116.84062, -5.81654,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1984, -2280.94287, 123.64344, -6.33649,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1969, -2283.06006, 117.66077, -5.81654,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1969, -2283.04883, 118.50089, -5.81654,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1969, -2283.04321, 119.33660, -5.81654,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1969, -2283.03442, 120.17873, -5.81654,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1969, -2283.02588, 121.02080, -5.81654,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2372, -2290.68164, 92.00401, -6.30313,   0.00000, 0.00000, -89.76001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2372, -2287.70044, 91.98628, -6.30313,   0.00000, 0.00000, -89.76001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2378, -2289.51831, 91.95734, -5.74177,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2378, -2290.16138, 91.95860, -5.74177,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2374, -2286.86230, 91.94845, -5.71057,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2374, -2287.86182, 91.91426, -5.71057,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2568, -2306.46973, 121.37341, -6.40023,   0.00000, 0.00000, -90.05998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2568, -2306.48364, 104.09891, -6.40023,   0.00000, 0.00000, -90.05998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2811, -2306.53638, 116.38536, -6.40610,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2811, -2306.59521, 105.86118, -6.40610,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2819, -2287.69775, 90.53571, -6.30606,   0.00000, 0.00000, 26.52000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2819, -2289.57544, 91.32547, -6.30606,   0.00000, 0.00000, -53.04000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2816, -2327.69849, 120.37637, -5.90266,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2862, -2283.08618, 119.35001, -5.56019,   0.00000, 0.00000, -77.16000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2862, -2283.11670, 118.30354, -5.56019,   0.00000, 0.00000, -77.16000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2894, -2322.12305, 109.90666, -5.28146,   0.00000, 0.00000, 90.30000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(16101, -2322.29810, 114.57059, -5.50658,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(16101, -2322.22290, 107.85686, -5.50658,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(16101, -2321.90967, 115.04766, -5.50658,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(16101, -2321.87598, 107.35921, -5.50658,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1991, -2284.35107, 124.63752, -6.33295,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1996, -2283.36108, 124.61852, -6.33266,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2637, -2275.63281, 116.87468, -5.94136,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2636, -2274.90796, 117.59969, -5.72007,   0.00000, 0.00000, 89.82001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2636, -2275.99512, 118.20351, -5.72007,   0.00000, 0.00000, 89.82001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2636, -2277.49072, 116.67051, -5.72007,   0.00000, 0.00000, 206.04004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2637, -2275.54785, 121.03192, -5.94136,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2636, -2274.96777, 120.31150, -5.72007,   0.00000, 0.00000, 269.94006, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2636, -2275.96899, 120.30746, -5.72007,   0.00000, 0.00000, 269.94006, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2636, -2274.91235, 121.90043, -5.72007,   0.00000, 0.00000, 89.82001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2636, -2276.07739, 121.88678, -5.72007,   0.00000, 0.00000, 89.82001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2848, -2275.99170, 117.09966, -5.51721,   0.00000, 0.00000, 149.81998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2849, -2275.15088, 120.95564, -5.51900,   0.00000, 0.00000, 151.26004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2863, -2275.96948, 120.91871, -5.51589,   0.00000, 0.00000, 32.58000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2849, -2283.06201, 117.23722, -5.56056,   0.00000, 0.00000, 70.38000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2849, -2283.03442, 120.40697, -5.56056,   0.00000, 0.00000, 70.38000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11729, -2286.53052, 88.00983, -6.30408,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2372, -2285.85010, 90.70724, -6.30313,   0.00000, 0.00000, -180.59995, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11729, -2287.19165, 88.01793, -6.30408,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11729, -2287.85303, 88.02603, -6.30408,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11730, -2288.50903, 88.03293, -6.30304,   0.00000, 0.00000, -178.92003, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11729, -2289.15479, 88.04016, -6.30408,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11730, -2291.25073, 88.05096, -6.30304,   0.00000, 0.00000, -178.92003, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11729, -2291.91846, 88.07747, -6.30408,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11729, -2292.57983, 88.09290, -6.30408,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11730, -2293.21265, 88.05804, -6.30304,   0.00000, 0.00000, -178.92003, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11729, -2293.87988, 88.08451, -6.30408,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2009, -2304.83667, 123.41080, -6.34654,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2009, -2294.38647, 123.56502, -6.34654,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2009, -2295.87231, 98.58851, -6.34654,   0.00000, 0.00000, -179.75998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2009, -2286.04419, 98.61220, -6.34654,   0.00000, 0.00000, -179.75998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1789, -2298.48413, 103.75146, -5.93974,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2596, -2295.99683, 97.38039, -5.06379,   0.00000, 0.00000, 178.13989, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(14532, -2298.04492, 101.34541, -5.37237,   0.00000, 0.00000, 51.90000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3394, -2295.97656, 102.83901, -6.34567,   0.00000, 0.00000, 0.48000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3394, -2298.99219, 105.74705, -6.34567,   0.00000, 0.00000, 89.58001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2298.83960, 97.53035, -6.34797,   0.00000, 0.00000, -180.60004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2299.81982, 97.54817, -6.34797,   0.00000, 0.00000, -180.60004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2300.81934, 97.57800, -6.34797,   0.00000, 0.00000, -180.60004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2132, -2302.13257, 97.53699, -6.34514,   0.00000, 0.00000, 179.46004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2146, -2299.72510, 102.44625, -5.91432,   0.00000, 0.00000, 90.36001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3396, -2305.13208, 101.65192, -6.34561,   0.00000, 0.00000, -179.51997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2611, -2295.47607, 98.54935, -4.56569,   0.00000, 0.00000, -89.99997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2133, -2304.13257, 97.55643, -6.34665,   0.00000, 0.00000, -180.89990, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2133, -2305.15674, 97.57429, -6.34665,   0.00000, 0.00000, -180.89990, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2285.54541, 100.60732, -6.34765,   0.00000, 0.00000, -90.11999, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11738, -2298.33862, 103.75805, -5.51516,   0.00000, 0.00000, -89.04002, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11736, -2298.59668, 103.77932, -5.52650,   0.00000, 0.00000, -84.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11736, -2295.76221, 98.53619, -5.53405,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1671, -2297.67041, 98.62017, -5.88380,   0.00000, 0.00000, 88.32000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2285.56763, 102.60718, -6.34765,   0.00000, 0.00000, -90.11999, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3396, -2294.67578, 99.38212, -6.34561,   0.00000, 0.00000, -179.51997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3394, -2294.65869, 102.92637, -6.34567,   0.00000, 0.00000, 179.88004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3396, -2292.29321, 105.65569, -6.34561,   0.00000, 0.00000, -269.81989, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2287.98584, 97.56025, -6.34797,   0.00000, 0.00000, -180.60004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2288.97925, 97.59782, -6.34797,   0.00000, 0.00000, -180.60004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2132, -2289.98877, 97.50880, -6.34514,   0.00000, 0.00000, 180.24002, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2133, -2291.97119, 97.50755, -6.34665,   0.00000, 0.00000, -180.89990, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2289.89258, 105.81284, -7.95152,   0.00000, 0.00000, 0.54001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2146, -2291.14282, 101.17521, -5.91432,   0.00000, 0.00000, 180.30000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(14532, -2290.02930, 99.36216, -5.37237,   0.00000, 0.00000, 22.92000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1789, -2292.57251, 100.41419, -5.93974,   0.00000, 0.00000, -90.17999, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11738, -2292.59619, 100.16084, -5.51516,   0.00000, 0.00000, -89.04002, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11736, -2292.57104, 100.46773, -5.52650,   0.00000, 0.00000, -20.64000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3394, -2296.08179, 122.50771, -6.34567,   0.00000, 0.00000, 0.48000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3396, -2296.08521, 118.98179, -6.34561,   0.00000, 0.00000, -0.05999, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2302.66187, 124.70490, -6.34797,   0.00000, 0.00000, -360.12003, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2301.66089, 124.70044, -6.34797,   0.00000, 0.00000, -360.12003, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2300.68042, 124.67647, -6.34797,   0.00000, 0.00000, -360.12003, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2132, -2299.65015, 124.81016, -6.34514,   0.00000, 0.00000, 359.76004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2297.67065, 124.85100, -7.95152,   0.00000, 0.00000, 0.54001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2305.27393, 121.15666, -6.34765,   0.00000, 0.00000, -270.23978, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2305.27100, 119.15028, -7.98221,   0.00000, 0.00000, -270.23978, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3394, -2298.62988, 116.67968, -6.34567,   0.00000, 0.00000, -90.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2133, -2300.97974, 116.56272, -6.34665,   0.00000, 0.00000, -180.89990, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2146, -2299.55176, 120.74281, -5.91432,   0.00000, 0.00000, 90.36001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(14532, -2297.81616, 119.24883, -5.37237,   0.00000, 0.00000, 46.62000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1789, -2299.36279, 122.42319, -5.93974,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11738, -2299.35767, 122.42834, -5.51516,   0.00000, 0.00000, -149.09998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11736, -2300.97754, 116.45336, -5.29504,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2292.24756, 124.65993, -6.34765,   0.00000, 0.00000, -359.93982, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2290.22900, 124.73215, -7.95152,   0.00000, 0.00000, 0.54001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2132, -2288.19653, 124.61774, -6.34514,   0.00000, 0.00000, 359.76004, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2133, -2286.21387, 124.59200, -6.34665,   0.00000, 0.00000, -359.57977, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3396, -2285.58154, 121.69205, -6.34561,   0.00000, 0.00000, -0.05999, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3396, -2290.28003, 116.79617, -6.34561,   0.00000, 0.00000, -89.94001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2131, -2292.77954, 116.55872, -6.34765,   0.00000, 0.00000, -180.53999, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2294.89331, 122.53651, -6.34797,   0.00000, 0.00000, -269.81998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2007, -2294.86108, 121.52983, -6.34797,   0.00000, 0.00000, -269.81998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3396, -2294.87622, 119.07451, -6.34561,   0.00000, 0.00000, -180.42000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2146, -2291.23828, 119.95589, -5.91432,   0.00000, 0.00000, 90.36001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(14532, -2292.77710, 118.64944, -5.37237,   0.00000, 0.00000, -42.84003, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1789, -2291.67480, 121.35912, -5.93974,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11738, -2291.78979, 121.38389, -5.51516,   0.00000, 0.00000, -149.09998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11736, -2294.59937, 118.85513, -5.29504,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11736, -2289.83228, 117.26783, -5.29504,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(11738, -2291.91016, 124.62045, -3.85432,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2611, -2286.49951, 97.13218, -4.56569,   0.00000, 0.00000, -180.78000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2611, -2305.56885, 123.97935, -4.56569,   0.00000, 0.00000, -268.97998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2611, -2295.27271, 124.15649, -4.56569,   0.00000, 0.00000, -269.87994, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2274.99292, 105.14752, -6.33085,   0.00000, 0.00000, -90.24000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2271.84692, 103.33812, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2274.95752, 101.98156, -6.33085,   0.00000, 0.00000, -90.24000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2271.84473, 100.09781, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2275.04858, 98.75821, -6.33085,   0.00000, 0.00000, -90.24000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2271.89014, 97.31003, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2277.19336, 101.67596, -6.33085,   0.00000, 0.00000, 89.81998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2280.27319, 100.18656, -6.33417,   0.00000, 0.00000, -270.66019, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2277.19531, 98.54158, -6.33085,   0.00000, 0.00000, 89.81998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2280.13940, 97.25288, -6.33417,   0.00000, 0.00000, -270.66019, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2277.06030, 89.53638, -6.33085,   0.00000, 0.00000, 89.81998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2280.18994, 88.16255, -6.33417,   0.00000, 0.00000, -269.82022, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2277.02295, 94.75317, -6.33085,   0.00000, 0.00000, 89.81998, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2280.15332, 96.12663, -6.33417,   0.00000, 0.00000, -269.82022, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2274.92700, 95.97235, -6.33085,   0.00000, 0.00000, -90.24000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2271.86035, 94.27914, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2275.13672, 92.34847, -6.33085,   0.00000, 0.00000, -90.24000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2271.77930, 90.80006, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1796, -2275.20410, 89.26386, -6.33085,   0.00000, 0.00000, -90.24000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2435, -2271.76636, 87.71861, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3657, -2300.69409, 115.42684, -5.79941,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3657, -2289.81592, 115.43839, -5.79941,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3657, -2290.12061, 106.92603, -5.79941,   0.00000, 0.00000, -180.47997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3657, -2300.84619, 106.90402, -5.79941,   0.00000, 0.00000, -180.47997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3657, -2278.40137, 106.78431, -5.79941,   0.00000, 0.00000, -180.47997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3657, -2281.26270, 101.48454, -5.79941,   0.00000, 0.00000, -89.75991, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(3657, -2281.31104, 95.96449, -5.79941,   0.00000, 0.00000, -89.75991, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(19325, -2322.28345, 111.19276, -2.40092,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(19325, -2319.86108, 115.07748, -3.69217,   90.00000, 0.00000, -90.12000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(19325, -2319.79761, 107.32031, -3.69217,   90.00000, 0.00000, -90.12000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1671, -2320.96362, 109.95673, -5.88380,   0.00000, 0.00000, -89.76000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2163, -2317.89136, 114.02280, -6.33138,   0.00000, 0.00000, -90.06000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2163, -2317.81616, 109.13745, -6.33138,   0.00000, 0.00000, -90.06000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2165, -2321.31909, 112.57909, -6.36983,   0.00000, 0.00000, 90.12000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2165, -2320.39746, 108.21793, -6.36983,   0.00000, 0.00000, 179.16000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(14902, -2326.99756, 108.73672, -6.00288,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(14902, -2326.82153, 84.19997, -6.00288,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(14902, -2315.71826, 88.22794, -6.00288,   0.00000, 0.00000, 90.05999, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(14902, -2345.46802, 134.41643, -6.00288,   0.00000, 0.00000, 270.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1823, -2295.86401, 115.03737, -6.39688,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2297.04565, 115.57928, -6.33434,   0.00000, 0.00000, -179.87988, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2297.66772, 115.56859, -6.33434,   0.00000, 0.00000, -179.87988, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2293.68896, 115.62017, -6.33434,   0.00000, 0.00000, -179.87988, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2293.06396, 115.60983, -6.33434,   0.00000, 0.00000, -179.87988, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1823, -2296.11255, 106.43763, -6.39688,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2293.10889, 106.70907, -6.33434,   0.00000, 0.00000, -360.77997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2293.77808, 106.71681, -6.33434,   0.00000, 0.00000, -360.77997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2297.13794, 106.69180, -6.33434,   0.00000, 0.00000, -360.77997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2297.79858, 106.68490, -6.33434,   0.00000, 0.00000, -360.77997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2276.03955, 106.56683, -6.33434,   0.00000, 0.00000, -360.77997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(1721, -2275.31812, 106.55317, -6.33434,   0.00000, 0.00000, -360.77997, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2271.66455, 100.87299, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2271.70117, 97.86909, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2271.62988, 104.13335, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2280.27612, 97.88002, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2280.37524, 100.94157, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2280.25098, 95.52490, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2280.20142, 88.83647, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2271.78125, 88.35712, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2271.83569, 91.41689, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2069, -2271.86475, 94.98038, -6.32233,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2245, -2327.51074, 101.84623, -5.67118,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2241, -2281.15820, 106.57458, -5.85025,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2241, -2274.63794, 115.27674, -5.85025,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(948, -2317.39160, 106.61372, -6.40290,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(948, -2317.35083, 115.66202, -6.40290,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2241, -2284.43018, 91.69456, -5.85025,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	CreateDynamicObject(2267, -2282.97070, 91.07401, -4.70970,   0.00000, 0.00000, -179.57997, -1, 61, -1, 600.0, 600.0);
	new interijerbolnice[16];
	interijerbolnice[0] = CreateDynamicObject(19375, -2305.89844, 120.75169, -6.39870,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[1] = CreateDynamicObject(19375, -2305.90259, 101.68427, -6.39870,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[2] = CreateDynamicObject(19375, -2310.76880, 98.97707, -6.39870,   0.00000, 0.00000, 89.99998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[3] = CreateDynamicObject(19375, -2316.55078, 98.94240, -6.39870,   0.00000, 0.00000, 89.99998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[4] = CreateDynamicObject(19375, -2326.96411, 99.01592, -6.39870,   0.00000, 0.00000, 89.99998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[5] = CreateDynamicObject(19375, -2330.67236, 101.74663, -6.39870,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[6] = CreateDynamicObject(19375, -2330.65210, 98.52275, -6.39870,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[7] = CreateDynamicObject(19375, -2330.69604, 111.18682, -6.39870,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[8] = CreateDynamicObject(19375, -2330.69629, 120.62688, -6.39870,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[9] = CreateDynamicObject(19375, -2330.67749, 124.17667, -6.39870,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[10] = CreateDynamicObject(19375, -2327.21191, 123.63595, -6.39870,   0.00000, 0.00000, 89.99998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[11] = CreateDynamicObject(19375, -2316.40356, 123.68134, -6.39870,   0.00000, 0.00000, 89.99998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[12] = CreateDynamicObject(19375, -2310.68115, 123.68867, -6.39870,   0.00000, 0.00000, 89.99998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[13] = CreateDynamicObject(19375, -2325.87256, 98.95345, -6.39870,   0.00000, 0.00000, 89.99998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[14] = CreateDynamicObject(19375, -2325.84888, 123.69380, -6.39870,   0.00000, 0.00000, 89.99998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice[15] = CreateDynamicObject(19375, -2305.90991, 111.18351, 2.21916,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	Loop(i, sizeof interijerbolnice, 0) { SetDynamicObjectMaterial(interijerbolnice[i], 0, 14847, "mp_policesf", "mp_cop_marble"); }
	new interijerbolnice1;
	interijerbolnice1 = CreateDynamicObject(18981, -2318.37036, 111.31787, -6.89421,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	SetDynamicObjectMaterial(interijerbolnice1, 0, 14771, "int_brothelint3", "GB_nastybar12" );
	new interijerbolnice2[8];
	interijerbolnice2[0] = CreateDynamicObject(19377, -2317.47705, 111.17188, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice2[1] = CreateDynamicObject(19377, -2306.97412, 111.15853, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice2[2] = CreateDynamicObject(19377, -2296.47681, 111.15432, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice2[3] = CreateDynamicObject(19377, -2285.99756, 111.14565, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice2[4] = CreateDynamicObject(19377, -2275.51636, 111.13313, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice2[5] = CreateDynamicObject(19377, -2279.82153, 101.51434, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice2[6] = CreateDynamicObject(19377, -2279.81787, 91.88251, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice2[7] = CreateDynamicObject(19377, -2290.31421, 92.08973, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	Loop(i, sizeof interijerbolnice2, 0) { SetDynamicObjectMaterial(interijerbolnice2[i], 0, 14815, "whore_main", "Strip_Ceiling"); }
	new interijerbolnice3[8];
	interijerbolnice3[0] = CreateDynamicObject(19378, -2300.62109, 120.67104, -6.43269,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice3[1] = CreateDynamicObject(19378, -2290.12451, 120.68269, -6.43269,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice3[2] = CreateDynamicObject(19377, -2279.60645, 120.74976, -6.41957,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice3[3] = CreateDynamicObject(19378, -2300.60400, 101.66847, -6.43269,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice3[4] = CreateDynamicObject(19378, -2290.13550, 101.67496, -6.43269,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice3[5] = CreateDynamicObject(19378, -2275.50610, 101.49702, -6.41527,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice3[6] = CreateDynamicObject(19378, -2275.50537, 91.87841, -6.41527,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice3[7] = CreateDynamicObject(19378, -2290.28442, 88.27329, -6.39011,   0.00000, 90.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	Loop(i, sizeof interijerbolnice3, 0) { SetDynamicObjectMaterial(interijerbolnice3[i], 0, 14777, "int_casinoint3", "GB_midbar05" ); }
	new interijerbolnice4[50];
	interijerbolnice4[0] = CreateDynamicObject(19387, -2304.22949, 116.03176, -4.64799,   0.00000, 0.00000, -90.12000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[1] = CreateDynamicObject(19450, -2295.41870, 120.82530, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[2] = CreateDynamicObject(19450, -2297.87695, 116.03960, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[3] = CreateDynamicObject(19387, -2286.42505, 116.04211, -4.64799,   0.00000, 0.00000, -90.12000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[4] = CreateDynamicObject(19450, -2292.72632, 116.04372, -4.64436,   0.00000, 0.00000, -90.05999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[5] = CreateDynamicObject(19450, -2301.09204, 125.22569, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[6] = CreateDynamicObject(19450, -2291.58936, 125.22132, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[7] = CreateDynamicObject(19450, -2288.96191, 125.23438, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[8] = CreateDynamicObject(19450, -2284.92993, 120.82417, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[9] = CreateDynamicObject(19387, -2304.26318, 106.36894, -4.64799,   0.00000, 0.00000, -90.12000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[10] = CreateDynamicObject(19450, -2297.88721, 106.38058, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[11] = CreateDynamicObject(19387, -2286.54419, 106.38430, -4.64799,   0.00000, 0.00000, -90.12000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[12] = CreateDynamicObject(19450, -2292.78320, 106.37524, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[13] = CreateDynamicObject(19450, -2295.32544, 101.61089, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[14] = CreateDynamicObject(19450, -2285.04834, 101.64211, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[15] = CreateDynamicObject(19450, -2305.80151, 101.47264, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[16] = CreateDynamicObject(19450, -2305.73853, 120.81903, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[17] = CreateDynamicObject(19450, -2301.13989, 96.98751, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[18] = CreateDynamicObject(19450, -2291.75659, 96.99726, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[19] = CreateDynamicObject(19450, -2289.79370, 96.99277, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[20] = CreateDynamicObject(19358, -2283.33960, 116.06971, -4.65555,   0.00000, 0.00000, -90.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[21] = CreateDynamicObject(19358, -2274.27124, 116.06667, -4.65555,   0.00000, 0.00000, -90.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[22] = CreateDynamicObject(19450, -2274.39478, 120.86584, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[23] = CreateDynamicObject(19450, -2283.08521, 125.23432, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[24] = CreateDynamicObject(19450, -2276.00122, 106.22888, -4.64436,   0.00000, 0.00000, -90.05999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[25] = CreateDynamicObject(19450, -2280.73730, 98.91158, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[26] = CreateDynamicObject(19387, -2280.71606, 104.52986, -4.64799,   0.00000, 0.00000, -180.11998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[27] = CreateDynamicObject(19387, -2280.73364, 92.62080, -4.64799,   0.00000, 0.00000, -180.11998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[28] = CreateDynamicObject(19450, -2280.72778, 86.18951, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[29] = CreateDynamicObject(19450, -2271.28516, 101.45166, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[30] = CreateDynamicObject(19450, -2271.28662, 91.92558, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[31] = CreateDynamicObject(19450, -2275.88550, 96.71304, -4.64436,   0.00000, 0.00000, -90.05999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[32] = CreateDynamicObject(19450, -2275.89551, 87.11980, -4.64436,   0.00000, 0.00000, -90.05999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[33] = CreateDynamicObject(19387, -2292.94409, 93.02222, -4.64799,   0.00000, 0.00000, -270.12000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[34] = CreateDynamicObject(19450, -2285.05981, 88.32384, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[35] = CreateDynamicObject(19358, -2286.64087, 93.01552, -4.65555,   0.00000, 0.00000, -90.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[36] = CreateDynamicObject(19358, -2289.76245, 93.02644, -4.65555,   0.00000, 0.00000, -90.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[37] = CreateDynamicObject(19450, -2294.46484, 92.21919, -4.64436,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[38] = CreateDynamicObject(19450, -2289.83716, 87.50123, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[39] = CreateDynamicObject(19358, -2273.76392, 115.45229, -4.65555,   0.00000, 0.00000, -179.99994, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[40] = CreateDynamicObject(19358, -2273.78760, 107.85809, -4.65555,   0.00000, 0.00000, -179.99994, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[41] = CreateDynamicObject(19358, -2317.81274, 108.00053, -4.65555,   0.00000, 0.00000, -179.99994, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[42] = CreateDynamicObject(19387, -2317.80811, 111.13467, -4.64799,   0.00000, 0.00000, -180.11998, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[43] = CreateDynamicObject(19358, -2317.80200, 114.34901, -4.65555,   0.00000, 0.00000, -179.99994, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[44] = CreateDynamicObject(19450, -2284.94409, 87.12706, -4.64436,   0.00000, 0.00000, -90.05999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[45] = CreateDynamicObject(19358, -2282.29077, 90.95924, -4.65555,   0.00000, 0.00000, -90.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[46] = CreateDynamicObject(19358, -2283.44238, 90.95810, -4.65555,   0.00000, 0.00000, -90.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[47] = CreateDynamicObject(19358, -2330.67798, 111.44034, -5.46509,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[48] = CreateDynamicObject(19377, -2317.82080, 111.19199, 2.32694,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice4[49] = CreateDynamicObject(19450, -2273.49048, 125.26277, -4.64436,   0.00000, 0.00000, -89.93999, -1, 61, -1, 600.0, 600.0);
	Loop(i, sizeof interijerbolnice4, 0) { SetDynamicObjectMaterial(interijerbolnice4[i], 0, 14526, "sweetsmain", "GB_Pan01"); }
	new interijerbolnice5[8];
	interijerbolnice5[0] = CreateDynamicObject(1502, -2305.01709, 106.36456, -6.33490,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice5[1] = CreateDynamicObject(1502, -2304.99121, 115.97685, -6.33490,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice5[2] = CreateDynamicObject(1502, -2287.17383, 115.98093, -6.33490,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice5[3] = CreateDynamicObject(1502, -2287.29980, 106.38473, -6.33490,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice5[4] = CreateDynamicObject(1502, -2280.77783, 105.26968, -6.33490,   0.00000, 0.00000, -89.70000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice5[5] = CreateDynamicObject(1502, -2280.79199, 93.38443, -6.33490,   0.00000, 0.00000, -89.70000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice5[6] = CreateDynamicObject(1502, -2293.72559, 92.96938, -6.33490,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	interijerbolnice5[7] = CreateDynamicObject(1502, -2317.88208, 111.88581, -6.33490,   0.00000, 0.00000, -89.70000, -1, 61, -1, 600.0, 600.0);
	Loop(i, sizeof interijerbolnice5, 0) { SetDynamicObjectMaterial(interijerbolnice5[i], 1, 18029, "genintintsmallrest", "GB_restaursmll09" ); }
	new interijerbolnice6[17];
	interijerbolnice6[0] = CreateDynamicObject(2434, -2322.14966, 107.52789, -6.33429,   0.00000, 0.00000, -90.71999, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[1] = CreateDynamicObject(2435, -2321.09863, 115.06585, -6.33417,   0.00000, 0.00000, -179.93996, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[2] = CreateDynamicObject(2435, -2322.18335, 113.94312, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[3] = CreateDynamicObject(2435, -2322.17847, 113.02223, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[4] = CreateDynamicObject(2435, -2322.17578, 112.10028, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[5] = CreateDynamicObject(2435, -2322.17041, 111.20028, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[6] = CreateDynamicObject(2435, -2322.16284, 110.30032, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[7] = CreateDynamicObject(2435, -2322.15552, 109.38035, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[8] = CreateDynamicObject(2435, -2322.14453, 108.46036, -6.33417,   0.00000, 0.00000, -89.70001, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[9] = CreateDynamicObject(2434, -2322.02588, 115.05331, -6.33429,   0.00000, 0.00000, -179.22006, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[10] = CreateDynamicObject(2435, -2320.19458, 115.07468, -6.33417,   0.00000, 0.00000, -179.93996, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[11] = CreateDynamicObject(2435, -2319.28687, 115.08522, -6.33417,   0.00000, 0.00000, -179.93996, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[12] = CreateDynamicObject(2435, -2318.36621, 115.08720, -6.33417,   0.00000, 0.00000, -179.93996, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[13] = CreateDynamicObject(2435, -2321.04028, 107.34956, -6.33417,   0.00000, 0.00000, -359.76004, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[14] = CreateDynamicObject(2435, -2320.11938, 107.35111, -6.33417,   0.00000, 0.00000, -359.76004, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[15] = CreateDynamicObject(2435, -2319.19849, 107.35374, -6.33417,   0.00000, 0.00000, -359.76004, -1, 61, -1, 600.0, 600.0);
	interijerbolnice6[16] = CreateDynamicObject(2435, -2318.29688, 107.35716, -6.33417,   0.00000, 0.00000, -359.76004, -1, 61, -1, 600.0, 600.0);
	Loop(i, sizeof interijerbolnice6, 0) { SetDynamicObjectMaterial(interijerbolnice6[i], 2, 18029, "genintintsmallrest", "GB_restaursmll09" ); }
	new interijerbolnice7;
	interijerbolnice7 = CreateDynamicObject(6959, -2285.25806, 106.95802, -2.89306,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	SetDynamicObjectMaterial(interijerbolnice7, 0, 15053, "vghotelnice", "AH_flroortile3" );
	interijerbolnice7 = CreateDynamicObject(6959, -2326.60010, 113.31732, -1.43820,   0.00000, 0.00000, 0.00000, -1, 61, -1, 600.0, 600.0);
	SetDynamicObjectMaterial(interijerbolnice7, 0, 15053, "vghotelnice", "AH_flroortile3" );

	//basurero
	CreateDynamicObject(1412, 2213.31616, -2024.51282, 13.82031,   3.14159, 0.00000, 134.67693);
	CreateDynamicObject(1412, 2216.99292, -2028.18872, 13.82031,   3.14159, 0.00000, 134.67693);
	CreateDynamicObject(1412, 2220.64917, -2031.85938, 13.82031,   3.14159, 0.00000, 135.08296);
	CreateDynamicObject(1412, 2224.31909, -2035.51685, 13.82031,   3.14159, 0.00000, 135.08296);
	CreateDynamicObject(1412, 2228.01147, -2039.14941, 13.82031,   3.14159, 0.00000, 135.08296);
	CreateDynamicObject(1412, 2231.69165, -2042.79443, 13.82031,   3.14159, 0.00000, 135.08296);
	CreateDynamicObject(1412, 2235.36230, -2046.45068, 13.82031,   3.14159, 0.00000, 135.08296);
	CreateDynamicObject(1412, 2239.03613, -2050.10400, 13.82031,   3.14159, 0.00000, 135.08296);
	CreateDynamicObject(1412, 2242.71997, -2053.75806, 13.82031,   3.14159, 0.00000, 135.08296);
	CreateDynamicObject(1412, 2246.37671, -2057.39966, 13.82031,   3.14159, 0.00000, 135.08296);
	CreateDynamicObject(1412, 2250.05225, -2061.08350, 13.82031,   3.14159, 0.00000, 134.27089);
	CreateDynamicObject(1412, 2253.68213, -2064.77856, 13.82031,   3.14159, 0.00000, 134.57390);
	CreateDynamicObject(1412, 2257.33228, -2068.45825, 13.82031,   3.14159, 0.00000, 134.97993);
	CreateDynamicObject(1412, 2260.99902, -2072.11646, 13.82031,   3.14159, 0.00000, 134.97993);
	CreateDynamicObject(1412, 2264.67627, -2075.78394, 13.82031,   3.14159, 0.00000, 134.97993);
	CreateDynamicObject(1412, 2267.17383, -2078.24341, 13.82031,   3.14159, 0.00000, 134.97993);
	CreateDynamicObject(1412, 2266.98926, -2081.84302, 13.82031,   3.14159, 0.00000, 219.93456);
	CreateDynamicObject(1412, 2262.99756, -2085.18066, 13.82031,   3.14159, 0.00000, 218.91331);
	CreateDynamicObject(1412, 2244.88013, -2099.32813, 13.82031,   3.14159, 0.00000, 224.71790);
	CreateDynamicObject(1412, 2258.98975, -2088.44702, 13.82031,   3.14159, 0.00000, 218.91331);
	CreateDynamicObject(967, 2247.10522, -2098.90308, 12.54667,   0.00000, 0.00000, 311.06641);
	CreateDynamicObject(1380, 2240.50342, -2081.86035, 36.18330,   0.00000, 0.00000, 315.83313);
	CreateDynamicObject(18248, 2122.00269, -2009.61182, 20.42225,   0.00000, 0.00000, 103.34838);
	CreateDynamicObject(1412, 2136.72974, -2046.97485, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2125.61450, -2035.85266, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2121.95898, -2032.18030, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2118.32031, -2028.50769, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2114.66211, -2024.83960, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2111.00000, -2021.19470, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2107.34058, -2017.54785, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2103.70410, -2013.85657, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2100.05933, -2010.17444, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2096.39307, -2006.48840, 13.82031,   356.85840, 0.00000, 315.04495);
	CreateDynamicObject(1412, 2089.06274, -1999.15833, 13.82031,   356.85840, 0.00000, 315.04495);
	CreateDynamicObject(1412, 2092.71973, -2002.82776, 13.82031,   356.85840, 0.00000, 315.04495);
	CreateDynamicObject(1412, 2085.38428, -1995.48303, 13.82031,   356.85840, 0.00000, 315.04495);
	CreateDynamicObject(1412, 2081.72314, -1991.81787, 13.82031,   356.85840, 0.00000, 315.04495);
	CreateDynamicObject(1412, 2078.05908, -1988.13501, 13.82031,   356.85840, 0.00000, 315.35715);
	CreateDynamicObject(1412, 2074.36572, -1984.47339, 13.82031,   356.85840, 0.00000, 315.35715);
	CreateDynamicObject(1412, 2070.68921, -1980.81799, 13.82031,   356.85840, 0.00000, 315.35715);
	CreateDynamicObject(1412, 2067.00049, -1977.18359, 13.82031,   356.85840, 0.00000, 315.35715);
	CreateDynamicObject(1412, 2062.98608, -1973.94312, 13.82031,   356.85840, 0.00000, 325.90326);
	CreateDynamicObject(1412, 2151.64014, -2061.83667, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2155.31201, -2065.50635, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2158.95337, -2069.20239, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2161.66846, -2071.90649, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2170.31030, -2080.55493, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2173.96338, -2084.22803, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2177.62964, -2087.88721, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2181.26660, -2091.54785, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2184.94336, -2095.20532, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2188.59277, -2098.86157, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2192.28125, -2102.52563, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2192.84058, -2103.01172, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2207.64697, -2117.78027, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2203.95020, -2114.12817, 13.82031,   356.85840, 0.00000, -2.35619);
	CreateDynamicObject(1412, 2209.32642, -2119.43579, 13.82031,   356.85840, 0.00000, 313.82550);
	CreateDynamicObject(1344, 2204.31323, -1983.36340, 13.22095,   0.00000, 0.00000, 91.59683);
	CreateDynamicObject(8635, 2218.81152, -2060.21338, 12.47862,   0.00000, 0.00000, 225.08841);
	CreateDynamicObject(852, 2239.28955, -2081.77808, 13.89344,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3594, 2179.65820, -2036.29846, 13.11049,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3594, 2175.23999, -2031.12598, 13.11250,   0.00000, 0.00000, 40.19983);
	CreateDynamicObject(3594, 2175.63208, -2038.10425, 13.11350,   0.00000, 0.00000, 24.67913);
	CreateDynamicObject(3594, 2177.24512, -2036.03589, 14.07325,   0.00000, 0.00000, 31.71274);
	CreateDynamicObject(1450, 2194.04785, -1972.80750, 13.12137,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(952, 2165.65259, -2024.09155, 14.00842,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(952, 2150.36304, -2008.57361, 14.00842,   0.00000, 0.00000, 17.59180);
	CreateDynamicObject(851, 2129.82104, -2001.03955, 13.25244,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(851, 2129.63379, -1999.67029, 13.25244,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(851, 2130.99658, -2000.14563, 13.25244,   0.00000, 0.00000, 252.44771);
	CreateDynamicObject(1358, 2135.14893, -2005.67639, 13.32002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2146.13208, -2003.35913, 13.60932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2153.37817, -2007.11316, 13.60932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2156.00000, -2015.18054, 13.60932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2158.58130, -2010.97351, 13.60932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2146.10376, -2009.67041, 13.60932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2164.79443, -1997.09521, 13.60932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2155.04150, -1990.19287, 13.60932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2161.22217, -1988.87390, 13.60932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(910, 2193.04248, -1970.65015, 13.52010,   0.00000, 0.00000, 273.48364);
	CreateDynamicObject(1338, 2182.21509, -1968.63806, 13.05096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11496, 2201.19995, -1993.55396, 18.39400,   0.00000, 0.00000, 180.54219);
	CreateDynamicObject(11496, 2205.67676, -2014.90234, 19.09600,   0.00000, 0.00000, 202.76630);
	CreateDynamicObject(1339, 2203.37915, -2005.04553, 13.14030,   0.00000, 0.00000, 280.73065);
	CreateDynamicObject(5291, 2101.70093, -1981.37427, 13.01910,   0.00000, 0.00000, 239.20938);
	CreateDynamicObject(13590, 2164.44653, -1985.79382, 13.39765,   0.00000, 0.00000, 204.03107);
	CreateDynamicObject(19868, 2106.92188, -1941.35510, 23.34584,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19868, 2233.90527, -2106.74243, 12.34300,   0.00000, 0.00000, 313.22455);
	CreateDynamicObject(19868, 2230.38525, -2102.97095, 12.34300,   0.00000, 0.00000, 313.22455);
	CreateDynamicObject(19868, 2226.78442, -2099.24609, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2223.11084, -2095.58936, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2219.45679, -2091.92041, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2215.81226, -2088.26416, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2208.45361, -2080.80518, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2212.08057, -2084.50098, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2204.78931, -2077.14087, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2201.11450, -2073.46191, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2197.47559, -2069.79956, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2193.82739, -2066.13843, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2186.50928, -2058.83179, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2190.16724, -2062.47095, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2182.85083, -2055.16431, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2179.19727, -2051.49268, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2175.52710, -2047.80811, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2171.89478, -2044.14380, 12.34300,   0.00000, 0.00000, 314.95673);
	CreateDynamicObject(19868, 2168.24805, -2040.46521, 12.34300,   0.00000, 0.00000, 314.49554);
	CreateDynamicObject(19868, 2164.62134, -2036.76636, 12.34300,   0.00000, 0.00000, 314.49554);
	CreateDynamicObject(19868, 2160.98413, -2033.05322, 12.34300,   0.00000, 0.00000, 314.49554);
	CreateDynamicObject(19868, 2157.36182, -2029.35425, 12.34300,   0.00000, 0.00000, 314.49554);
	CreateDynamicObject(19868, 2153.74316, -2025.67480, 12.34300,   0.00000, 0.00000, 314.19250);
	CreateDynamicObject(19868, 2150.11157, -2021.98181, 12.34300,   0.00000, 0.00000, 314.19250);
	CreateDynamicObject(19868, 2146.49219, -2018.29126, 12.34300,   0.00000, 0.00000, 314.39960);
	CreateDynamicObject(19868, 2142.87231, -2014.60071, 12.34300,   0.00000, 0.00000, 314.39960);
	CreateDynamicObject(19868, 2139.25708, -2010.88464, 12.34300,   0.00000, 0.00000, 314.39960);
	CreateDynamicObject(19868, 2138.04956, -2009.64648, 12.34300,   0.00000, 0.00000, 314.39960);
	CreateDynamicObject(19868, 2130.70459, -2013.24561, 12.34300,   0.00000, 0.00000, 44.56079);
	CreateDynamicObject(19868, 2134.39844, -2009.60791, 12.34300,   0.00000, 0.00000, 44.56079);
	CreateDynamicObject(19868, 2127.01221, -2016.88062, 12.34300,   0.00000, 0.00000, 44.56079);
	CreateDynamicObject(19868, 2123.32056, -2020.50513, 12.34300,   0.00000, 0.00000, 44.56079);
	CreateDynamicObject(19868, 2119.64429, -2024.12634, 12.34300,   0.00000, 0.00000, 44.56079);
	CreateDynamicObject(19868, 2118.44775, -2025.36401, 12.34300,   0.00000, 0.00000, 44.56079);
	CreateDynamicObject(19131, 2195.97510, -1968.42822, 14.08885,   0.00000, 0.00000, 94.61835);
	CreateDynamicObject(1450, 2198.59326, -1969.01086, 13.29848,   0.00000, 0.00000, 3.96024);
	CreateDynamicObject(1347, 2201.93091, -1968.82129, 13.07065,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 2194.41943, -1969.55359, 13.28920,   0.00000, 0.00000, 335.58704);
	CreateDynamicObject(2607, 2201.79468, -1970.62769, 13.19666,   0.00000, 0.00000, 269.50137);
	CreateDynamicObject(2858, 2201.83545, -1971.30725, 13.60191,   0.00000, 0.00000, 351.60535);
	CreateDynamicObject(1210, 2201.74658, -1969.94360, 13.69110,   91.00000, 4.00000, 0.00000);
	CreateDynamicObject(1230, 2200.33032, -1968.81165, 13.12510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1230, 2194.24097, -1971.69373, 13.12510,   0.00000, 0.00000, 3.33092);
	CreateDynamicObject(11685, 2196.88916, -1968.86267, 12.69907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 2200.06006, -1973.78894, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2201.87646, -1976.93518, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2201.89258, -1980.05640, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2201.89209, -1980.56494, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2201.86670, -1973.79065, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2200.05933, -1976.91895, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2200.05811, -1980.03931, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2200.06226, -1980.80029, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2198.55127, -1973.81604, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2198.55933, -1976.97632, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2198.56689, -1980.11694, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2198.58911, -1980.87708, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2197.30957, -1973.81116, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2197.32397, -1976.95496, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2197.33008, -1980.11682, 12.64800,   0.00000, 0.00000, 90.18500);
	CreateDynamicObject(19425, 2197.34790, -1980.87695, 12.64800,   0.00000, 0.00000, 90.18500);

	//calle 1
	CreateDynamicObject(1256,1367.0000000,-1378.9000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(stonebench1) (1)
	CreateDynamicObject(1256,1367.0000000,-1374.8000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(stonebench1) (2)
	CreateDynamicObject(10244,1319.4000200,-1413.0999800,14.5000000,0.0000000,0.0000000,0.0000000); //object(vicjump_sfe) (1)
	CreateDynamicObject(10244,1328.4000000,-1388.3000000,14.5000000,0.0000000,0.0000000,180.0000000); //object(vicjump_sfe) (2)
	CreateDynamicObject(984,1321.7000000,-1404.6000000,18.7000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (1)
	CreateDynamicObject(16501,1323.9000000,-1407.9000000,17.9500000,0.0000000,90.0000000,0.0000000); //object(cn2_savgardr2_) (1)
	CreateDynamicObject(16501,1323.9000000,-1400.8000000,17.9500000,0.0000000,90.0000000,0.0000000); //object(cn2_savgardr2_) (2)
	CreateDynamicObject(16501,1323.9000000,-1393.8000000,17.9500000,0.0000000,90.0000000,0.0000000); //object(cn2_savgardr2_) (3)
	CreateDynamicObject(984,1321.7000000,-1396.6000000,18.7000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (2)
	CreateDynamicObject(984,1326.1000000,-1404.6000000,18.7000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (3)
	CreateDynamicObject(984,1326.1000000,-1396.6000000,18.7000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (4)
	CreateDynamicObject(1256,1333.5000000,-1379.0000000,13.3000000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (3)
	CreateDynamicObject(1256,1333.5000000,-1375.3000000,13.3000000,0.0000000,0.0000000,179.9950000); //object(stonebench1) (4)
	CreateDynamicObject(3515,1350.3000000,-1400.9000000,12.8000000,0.0000000,0.0000000,0.0000000); //object(vgsfountain) (1)
	CreateDynamicObject(9833,1349.9000000,-1401.0000000,16.0000000,0.0000000,0.0000000,0.0000000); //object(fountain_sfw) (1)
	CreateDynamicObject(869,1350.1000000,-1418.6000000,13.0000000,0.0000000,0.0000000,87.2500000); //object(veg_pflowerswee) (1)
	CreateDynamicObject(869,1348.2000000,-1443.1000000,13.0000000,0.0000000,0.0000000,87.2480000); //object(veg_pflowerswee) (2)
	CreateDynamicObject(869,1349.1000000,-1433.0000000,13.0000000,0.0000000,0.0000000,87.2480000); //object(veg_pflowerswee) (3)
	CreateDynamicObject(871,1307.1000000,-1546.4000000,12.8000000,0.0000000,0.0000000,2.0000000); //object(veg_procfpatchwee) (1)
	CreateDynamicObject(870,1349.3000000,-1429.7000000,12.8000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (1)
	CreateDynamicObject(951,1322.1000000,-1401.2000000,18.8000000,0.0000000,0.0000000,273.2500000); //object(cj_view_tele2) (1)
	CreateDynamicObject(749,1308.1000000,-1541.5000000,10.3000000,0.0000000,0.0000000,0.0000000); //object(sm_scrb_column3) (1)
	CreateDynamicObject(871,1348.6000000,-1428.2000000,13.0000000,0.0000000,0.0000000,2.0000000); //object(veg_procfpatchwee) (2)
	CreateDynamicObject(869,1349.5000000,-1426.6000000,13.0000000,0.0000000,0.0000000,87.2480000); //object(veg_pflowerswee) (4)
	CreateDynamicObject(748,1306.3000000,-1552.8000000,12.3000000,0.0000000,0.0000000,0.0000000); //object(sm_scrb_grp1) (1)
	CreateDynamicObject(748,1348.8000000,-1437.8000000,12.4000000,0.0000000,0.0000000,212.0000000); //object(sm_scrb_grp1) (2)
	CreateDynamicObject(746,1348.6000000,-1440.8000000,12.5000000,0.0000000,0.0000000,0.0000000); //object(sm_scrub_rock2) (1)
	CreateDynamicObject(869,1349.9004000,-1422.2998000,13.0000000,0.0000000,0.0000000,87.2480000); //object(veg_pflowerswee) (5)
	CreateDynamicObject(869,1347.9000000,-1446.4000000,13.0000000,0.0000000,0.0000000,87.2480000); //object(veg_pflowerswee) (6)
	CreateDynamicObject(3660,1345.2000000,-1458.2000000,15.0000000,0.0000000,0.0000000,77.2500000); //object(lasairfbed_las) (3)
	CreateDynamicObject(3660,1343.3000000,-1466.6000000,15.0000000,0.0000000,0.0000000,77.2450000); //object(lasairfbed_las) (4)
	CreateDynamicObject(3660,1336.4000000,-1485.5000000,15.0000000,0.0000000,0.0000000,62.7450000); //object(lasairfbed_las) (5)
	CreateDynamicObject(3660,1334.2000000,-1489.8000000,15.0000000,0.0000000,0.0000000,62.7430000); //object(lasairfbed_las) (6)
	CreateDynamicObject(3660,1324.0000000,-1507.2000000,15.2000000,0.0000000,0.0000000,56.7430000); //object(lasairfbed_las) (7)
	CreateDynamicObject(3660,1322.0000000,-1510.3000000,15.2000000,0.0000000,0.0000000,56.7390000); //object(lasairfbed_las) (8)
	CreateDynamicObject(3660,1312.3000000,-1528.7000000,15.2000000,0.0000000,0.0000000,68.0000000); //object(lasairfbed_las) (9)
	CreateDynamicObject(749,1349.4004000,-1425.7998000,8.8000000,0.0000000,0.0000000,0.0000000); //object(sm_scrb_column3) (2)
	CreateDynamicObject(748,1348.9004000,-1435.7002000,12.6000000,0.0000000,0.0000000,0.0000000); //object(sm_scrb_grp1) (3)
	CreateDynamicObject(869,1308.1000000,-1540.7000000,13.0000000,0.0000000,0.0000000,87.2480000); //object(veg_pflowerswee) (7)
	CreateDynamicObject(869,1307.8000000,-1544.2000000,13.0000000,0.0000000,0.0000000,87.2480000); //object(veg_pflowerswee) (8)
	CreateDynamicObject(871,1348.4004000,-1430.7002000,13.0000000,0.0000000,0.0000000,2.0000000); //object(veg_procfpatchwee) (3)
	CreateDynamicObject(871,1305.5000000,-1553.0000000,12.8000000,0.0000000,0.0000000,2.0000000); //object(veg_procfpatchwee) (4)
	CreateDynamicObject(869,1306.7000000,-1548.8000000,13.0000000,0.0000000,0.0000000,87.2480000); //object(veg_pflowerswee) (10)
	CreateDynamicObject(970,1350.1000000,-1398.6000000,12.9000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1352.3000000,-1401.0000000,12.9000000,0.0000000,0.0000000,90.0000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1348.0000000,-1401.0000000,12.9000000,0.0000000,0.0000000,90.0000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1350.0996000,-1403.4004000,12.9000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (4)
	CreateDynamicObject(14409,1333.5000000,-1430.7000000,10.7500000,0.0000000,0.0000000,268.2500000); //object(carter-stairs02) (1)
	CreateDynamicObject(3462,1350.0000000,-1417.6000000,14.1000000,0.0000000,0.0000000,270.0000000); //object(csrangel_lvs) (1)
	CreateDynamicObject(643,1329.1000000,-1438.5000000,14.4000000,0.0000000,0.0000000,0.0000000); //object(kb_chr_tbl_test) (1)
	CreateDynamicObject(643,1329.4000000,-1435.2000000,14.4000000,0.0000000,0.0000000,0.0000000); //object(kb_chr_tbl_test) (2)
	CreateDynamicObject(1281,1329.4000000,-1427.0000000,14.8000000,0.0000000,0.0000000,0.0000000); //object(parktable1) (1)
	CreateDynamicObject(1281,1329.5000000,-1423.2000000,14.8000000,0.0000000,0.0000000,0.0000000); //object(parktable1) (2)
	CreateDynamicObject(1257,1364.5000000,-1420.5000000,13.8000000,0.0000000,0.0000000,357.2500000); //object(bustopm) (1)
	CreateDynamicObject(1258,1332.2000000,-1414.5000000,13.2000000,0.0000000,0.0000000,180.0000000); //object(mpostbox1) (1)
	CreateDynamicObject(1258,1367.0000000,-1381.2000000,13.3000000,0.0000000,0.0000000,270.0000000); //object(mpostbox1) (2)
	CreateDynamicObject(1290,1349.6000000,-1420.6000000,18.6000000,0.0000000,0.0000000,0.0000000); //object(lamppost2) (1)
	CreateDynamicObject(1346,1333.7000000,-1370.7000000,13.9000000,0.0000000,0.0000000,90.0000000); //object(cj_phone_kiosk2) (1)
	CreateDynamicObject(1363,1365.9000000,-1415.1000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(cj_phone_kiosk) (1)
	CreateDynamicObject(1342,1324.9000000,-1436.3000000,15.0000000,0.0000000,0.0000000,0.0000000); //object(noodlecart_prop) (1)
	CreateDynamicObject(1341,1324.6000000,-1426.0000000,15.0000000,0.0000000,0.0000000,0.0000000); //object(icescart_prop) (1)
	CreateDynamicObject(1340,1325.0000000,-1424.2000000,15.1000000,0.0000000,0.0000000,0.0000000); //object(chillidogcart) (1)
	CreateDynamicObject(1571,1365.9000000,-1361.1000000,13.9000000,0.0000000,0.0000000,270.0000000); //object(cj_noodle_1) (1)
	CreateDynamicObject(955,1323.9000000,-1433.2000000,14.2000000,0.0000000,0.0000000,90.0000000); //object(cj_ext_sprunk) (1)
	CreateDynamicObject(1209,1324.0000000,-1432.0000000,13.9000000,0.0000000,0.0000000,90.0000000); //object(vendmach) (1)
	CreateDynamicObject(1776,1324.0000000,-1430.8000000,15.1000000,0.0000000,0.0000000,90.0000000); //object(cj_candyvendor) (1)
	CreateDynamicObject(2223,1329.9000000,-1423.1000000,14.9000000,0.0000000,0.0000000,0.0000000); //object(rustymed) (1)
	CreateDynamicObject(2342,1329.1000000,-1422.9000000,15.0000000,0.0000000,0.0000000,0.0000000); //object(donut_disp) (1)
	CreateDynamicObject(2838,1329.3000000,-1435.3000000,14.8000000,0.0000000,0.0000000,0.0000000); //object(gb_takeaway03) (1)
	CreateDynamicObject(2859,1330.0000000,-1427.3000000,14.8000000,0.0000000,0.0000000,0.0000000); //object(gb_kitchtakeway04) (1)
	CreateDynamicObject(1439,1370.7000000,-1368.5000000,12.6000000,0.0000000,0.0000000,270.0000000); //object(dyn_dumpster_1) (1)
	CreateDynamicObject(1337,1326.4000000,-1417.6000000,14.7000000,0.0000000,0.0000000,0.0000000); //object(binnt07_la) (4)
	CreateDynamicObject(1337,1325.1000000,-1417.6000000,14.7000000,0.0000000,0.0000000,0.0000000); //object(binnt07_la) (5)
	CreateDynamicObject(2675,1326.3000000,-1428.4000000,14.0000000,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_6) (1)
	CreateDynamicObject(2673,1325.1000000,-1428.2000000,14.1000000,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (1)
	CreateDynamicObject(2672,1327.0000000,-1435.8000000,14.2000000,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (1)
	CreateDynamicObject(970,1331.4000000,-1434.8000000,14.5000000,0.0000000,0.0000000,88.7500000); //object(fencesmallb) (5)
	CreateDynamicObject(970,1331.2000000,-1439.5000000,14.5000000,0.0000000,0.0000000,86.2480000); //object(fencesmallb) (6)
	CreateDynamicObject(970,1331.5000000,-1426.5000000,14.5000000,0.0000000,0.0000000,88.7480000); //object(fencesmallb) (7)
	CreateDynamicObject(970,1331.5699000,-1423.3000000,14.5000000,0.0000000,0.0000000,88.7480000); //object(fencesmallb) (9)
	CreateDynamicObject(970,1329.5000000,-1421.2000000,14.5000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (10)
	CreateDynamicObject(970,1327.3000000,-1419.0000000,14.6000000,0.0000000,0.0000000,90.0000000); //object(fencesmallb) (11)
	CreateDynamicObject(970,1325.2000000,-1416.7000000,14.6000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (12)
	CreateDynamicObject(970,1323.1000000,-1418.9000000,14.6000000,0.0000000,0.0000000,90.0000000); //object(fencesmallb) (13)
	CreateDynamicObject(970,1323.1000000,-1423.2000000,14.6000000,0.0000000,0.0000000,90.0000000); //object(fencesmallb) (16)
	CreateDynamicObject(970,1328.9000000,-1441.7000000,14.5000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (17)
	CreateDynamicObject(970,1325.3000000,-1439.9000000,14.5000000,0.0000000,0.0000000,309.7500000); //object(fencesmallb) (18)
	CreateDynamicObject(1297,1330.4000000,-1421.6000000,17.4000000,0.0000000,0.0000000,0.0000000); //object(lamppost1) (1)
	CreateDynamicObject(1297,1330.0000000,-1440.8000000,17.3000000,0.0000000,0.0000000,0.0000000); //object(lamppost1) (2)
	//calle 2
	CreateDynamicObject(10244,964.0999800,-1773.0000000,15.0000000,0.0000000,0.0000000,168.7500000); //object(vicjump_sfe) (1)
	CreateDynamicObject(10244,949.0000000,-1800.4000200,15.0000000,0.0000000,0.0000000,347.0000000); //object(vicjump_sfe) (2)
	CreateDynamicObject(16501,954.5999800,-1796.1000000,18.4000000,0.0000000,90.0000000,346.5000000); //object(cn2_savgardr2_) (1)
	CreateDynamicObject(16501,956.2000100,-1789.2000000,18.4000000,0.0000000,90.0000000,347.1500000); //object(cn2_savgardr2_) (2)
	CreateDynamicObject(16501,957.7000100,-1782.4000200,18.4000000,0.0000000,90.0000000,348.1460000); //object(cn2_savgardr2_) (3)
	CreateDynamicObject(16501,958.7000100,-1777.6000000,18.4000000,0.0000000,90.0000000,348.1460000); //object(cn2_savgardr2_) (4)
	CreateDynamicObject(982,958.7000100,-1787.2000000,19.2000000,0.0000000,0.0000000,347.7500000); //object(fenceshit) (1)
	CreateDynamicObject(982,954.5999800,-1786.4000000,19.2000000,0.0000000,0.0000000,347.2450000); //object(fenceshit) (2)
	CreateDynamicObject(1337,930.4000200,-1767.6000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(binnt07_la) (2)
	CreateDynamicObject(16000,918.4000200,-1808.4000200,17.5000000,0.0000000,0.0000000,353.5000000); //object(drvin_screen) (1)
	CreateDynamicObject(1256,959.2999900,-1781.4000000,19.2000000,0.0000000,0.0000000,347.7500000); //object(stonebench1) (1)
	CreateDynamicObject(1256,954.0999800,-1791.2000000,19.2000000,0.0000000,0.0000000,167.2500000); //object(stonebench1) (2)
	CreateDynamicObject(1256,865.2999900,-1761.2000000,13.2000000,0.0000000,0.0000000,88.2500000); //object(stonebench1) (3)
	CreateDynamicObject(1256,869.0000000,-1761.2000000,13.2000000,0.0000000,0.0000000,88.2480000); //object(stonebench1) (4)
	CreateDynamicObject(621,984.0999800,-1793.5000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(veg_palm02) (1)
	CreateDynamicObject(621,829.2000100,-1776.7000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(veg_palm02) (2)
	CreateDynamicObject(621,878.4003900,-1778.2002000,12.8000000,0.0000000,0.0000000,0.0000000); //object(veg_palm02) (3)
	CreateDynamicObject(621,803.7999900,-1776.8000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(veg_palm02) (4)
	CreateDynamicObject(803,882.5000000,-1778.5000000,13.5000000,0.0000000,0.0000000,0.0000000); //object(genveg_bush09) (1)
	CreateDynamicObject(803,893.2000100,-1779.5000000,13.5000000,0.0000000,0.0000000,0.0000000); //object(genveg_bush09) (2)
	CreateDynamicObject(869,886.5000000,-1778.6000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowerswee) (1)
	CreateDynamicObject(869,890.0000000,-1778.8000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowerswee) (2)
	CreateDynamicObject(869,897.5999800,-1779.3000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowerswee) (3)
	CreateDynamicObject(869,909.5999800,-1780.2000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowerswee) (4)
	CreateDynamicObject(871,900.7000100,-1778.9000000,12.9000000,0.0000000,0.0000000,0.0000000); //object(veg_procfpatchwee) (1)
	CreateDynamicObject(871,900.0000000,-1780.4000000,12.9000000,0.0000000,0.0000000,0.0000000); //object(veg_procfpatchwee) (2)
	CreateDynamicObject(871,913.5999800,-1779.5000000,12.9000000,0.0000000,0.0000000,0.0000000); //object(veg_procfpatchwee) (3)
	CreateDynamicObject(871,913.2999900,-1781.3000000,12.9000000,0.0000000,0.0000000,0.0000000); //object(veg_procfpatchwee) (4)
	CreateDynamicObject(14468,902.0000000,-1779.7000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(flower-bush09a) (1)
	CreateDynamicObject(14468,905.7000100,-1780.3000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(flower-bush09a) (2)
	CreateDynamicObject(14469,925.4000200,-1781.2000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(flower-bush08a) (1)
	CreateDynamicObject(14469,929.0000000,-1781.3000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(flower-bush08a) (2)
	CreateDynamicObject(802,914.9000200,-1781.3000000,12.9000000,0.0000000,0.0000000,0.0000000); //object(genveg_bush08) (1)
	CreateDynamicObject(802,915.0000000,-1779.8000000,12.9000000,0.0000000,0.0000000,0.0000000); //object(genveg_bush08) (2)
	CreateDynamicObject(802,916.2999900,-1779.9000000,12.9000000,0.0000000,352.0000000,74.0000000); //object(genveg_bush08) (3)
	CreateDynamicObject(802,916.4000200,-1781.1000000,12.9000000,0.0000000,351.9960000,73.9980000); //object(genveg_bush08) (4)
	CreateDynamicObject(803,919.2999900,-1781.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(genveg_bush09) (3)
	CreateDynamicObject(751,922.2000100,-1780.8000000,12.0000000,0.0000000,0.0000000,0.0000000); //object(sm_scrb_column1) (1)
	CreateDynamicObject(758,933.4000200,-1781.9000000,12.0000000,0.0000000,0.0000000,0.0000000); //object(sm_scrub_rock6) (1)
	CreateDynamicObject(758,935.2999900,-1781.6000000,11.5000000,0.0000000,0.0000000,110.0000000); //object(sm_scrub_rock6) (2)
	CreateDynamicObject(828,937.2999900,-1783.7000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(p_rubble2) (1)
	CreateDynamicObject(750,939.2999900,-1783.7000000,12.9000000,0.0000000,0.0000000,0.0000000); //object(sm_scrb_column2) (1)
	CreateDynamicObject(1539,1006.7000000,-1799.7000000,18.1000000,0.0000000,0.0000000,344.7500000); //object(lamotsig1_lacj) (1)
	CreateDynamicObject(11489,1051.7000000,-1794.8000000,12.7000000,0.0000000,0.0000000,294.0000000); //object(dam_statues) (1)
	CreateDynamicObject(1216,937.0000000,-1805.6000000,13.5000000,0.0000000,0.0000000,176.0000000); //object(phonebooth1) (1)
	CreateDynamicObject(1216,936.5000000,-1805.6000000,13.5000000,0.0000000,0.0000000,175.9950000); //object(phonebooth1) (2)
	CreateDynamicObject(1231,960.0000000,-1778.9000000,21.2000000,0.0000000,0.0000000,76.5000000); //object(streetlamp2) (1)
	CreateDynamicObject(1231,953.7000100,-1793.2000000,21.2000000,0.0000000,0.0000000,68.0000000); //object(streetlamp2) (2)
	CreateDynamicObject(1257,868.0000000,-1791.7000000,14.1000000,0.0000000,0.0000000,268.0000000); //object(bustopm) (1)
	CreateDynamicObject(1340,844.7999900,-1761.0000000,13.7000000,0.0000000,0.0000000,270.0000000); //object(chillidogcart) (1)
	CreateDynamicObject(1341,847.2000100,-1760.8000000,13.6000000,0.0000000,0.0000000,270.0000000); //object(icescart_prop) (1)
	CreateDynamicObject(1346,908.7999900,-1761.5000000,13.9000000,0.0000000,0.0000000,358.2500000); //object(cj_phone_kiosk2) (1)
	CreateDynamicObject(1363,900.7000100,-1795.5000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(cj_phone_kiosk) (1)
	CreateDynamicObject(3860,873.9000200,-1761.6000000,13.7000000,0.0000000,0.0000000,359.0000000); //object(marketstall04_sfxrf) (1)
	CreateDynamicObject(3861,877.0000000,-1761.6000000,13.7000000,0.0000000,0.0000000,0.5000000); //object(marketstall01_sfxrf) (1)
	CreateDynamicObject(3862,880.0999800,-1761.6000000,13.7000000,0.0000000,0.0000000,359.7500000); //object(marketstall02_sfxrf) (1)
	CreateDynamicObject(621,911.5996100,-1780.2998000,12.6000000,0.0000000,0.0000000,0.0000000); //object(veg_palm02) (5)
	CreateDynamicObject(3567,628.2000100,-1739.8000000,11.8000000,0.0000000,0.0000000,80.0000000); //object(lasnfltrail) (3)
	CreateDynamicObject(3567,628.7998000,-1736.5000000,11.8000000,0.0000000,0.0000000,79.9970000); //object(lasnfltrail) (4)
	CreateDynamicObject(3578,625.5000000,-1734.0000000,11.9000000,0.0000000,0.0000000,350.0000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(3578,632.7999900,-1735.3000000,11.9000000,0.0000000,0.0000000,349.9970000); //object(dockbarr1_la) (2)
	CreateDynamicObject(3578,624.2999900,-1741.0000000,11.8000000,0.0000000,0.0000000,349.9970000); //object(dockbarr1_la) (3)
	CreateDynamicObject(3578,631.5000000,-1742.3000000,11.8000000,0.0000000,0.0000000,350.0000000); //object(dockbarr1_la) (4)
	CreateDynamicObject(3578,631.5000000,-1742.8000000,11.7000000,0.0000000,0.0000000,349.9970000); //object(dockbarr1_la) (5)
	CreateDynamicObject(3578,624.2002000,-1741.5000000,11.7000000,0.0000000,0.0000000,349.9970000); //object(dockbarr1_la) (6)
	CreateDynamicObject(3578,632.9000200,-1734.8000000,11.8000000,0.0000000,0.0000000,349.9970000); //object(dockbarr1_la) (7)
	CreateDynamicObject(3578,624.5000000,-1733.3000000,11.8000000,0.0000000,0.0000000,349.9970000); //object(dockbarr1_la) (8)
	CreateDynamicObject(1237,638.4000200,-1739.8000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (1)
	CreateDynamicObject(1237,641.2999900,-1740.3000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (2)
	CreateDynamicObject(1237,644.2000100,-1740.9000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (3)
	CreateDynamicObject(1237,647.5999800,-1741.7000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (4)
	CreateDynamicObject(1237,618.7999900,-1736.2000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (5)
	CreateDynamicObject(1237,615.0999800,-1735.6000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (6)
	CreateDynamicObject(1237,611.4000200,-1735.0000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (7)
	CreateDynamicObject(1237,607.7999900,-1734.3000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (8)
	CreateDynamicObject(3567,628.4000200,-1738.8000000,11.8000000,0.0000000,0.0000000,79.9970000); //object(lasnfltrail) (5)
	CreateDynamicObject(970,637.0999800,-1739.6000000,13.2000000,0.0000000,0.0000000,80.0000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,619.9003900,-1736.5000000,13.2000000,0.0000000,0.0000000,79.9970000); //object(fencesmallb) (2)
	CreateDynamicObject(1238,629.0999800,-1735.4000000,13.0000000,0.0000000,0.0000000,0.0000000); //object(trafficcone) (1)
	CreateDynamicObject(1238,628.0000000,-1741.1000000,13.0000000,0.0000000,0.0000000,0.0000000); //object(trafficcone) (3)
	CreateDynamicObject(1215,628.7999900,-1736.7000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,628.2999900,-1739.6000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,619.4000200,-1739.5000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,620.4000200,-1733.7000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,637.5000000,-1736.9000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,636.5000000,-1742.5000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (6)
	CreateDynamicObject(1231,628.5000000,-1738.1000000,15.4000000,0.0000000,0.0000000,0.0000000); //object(streetlamp2) (3)
	CreateDynamicObject(1214,617.8089000,-1736.0098000,12.6237500,0.0000000,0.0000000,0.0000000); //object(bollard) (3)
	CreateDynamicObject(1214,616.5000000,-1735.8000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(bollard) (4)
	CreateDynamicObject(1214,614.0000000,-1735.4000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(bollard) (5)
	CreateDynamicObject(1214,612.5999800,-1735.2000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(bollard) (6)
	CreateDynamicObject(1214,610.2999900,-1734.7000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(bollard) (7)
	CreateDynamicObject(1214,609.2000100,-1734.5000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(bollard) (8)
	CreateDynamicObject(1214,646.5000000,-1741.4000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(bollard) (9)
	CreateDynamicObject(1214,645.2999900,-1741.1000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(bollard) (10)
	CreateDynamicObject(1214,643.2000100,-1740.6000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(bollard) (11)
	CreateDynamicObject(1214,642.0999800,-1740.4000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(bollard) (12)
	CreateDynamicObject(1214,640.2999900,-1740.0000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(bollard) (13)
	CreateDynamicObject(1214,639.2999900,-1739.8000000,12.4000000,0.0000000,0.0000000,0.0000000); //object(bollard) (14)
	
	// playa beach
	CreateDynamicObject(1255, 496.01700, -1884.80017, 2.05998,   0.00000, 0.00000, -97.20000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 496.71439, -1885.28882, 3.08290,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1642, 494.34912, -1884.81897, 1.72800,   0.00000, -6.00000, 81.32003, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598, 494.75409, -1884.90674, 1.94949,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 3612.31885, 7055.09375, -3521.57544,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 503.82025, -1878.22034, 2.60867,   0.00000, 0.00000, -1.08000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1643, 502.80780, -1877.96460, 2.27990,   2.00000, -2.00000, -2.44000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598, 502.93036, -1878.24536, 2.48998,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 504.47534, -1878.27490, 3.59778,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 510.19089, -1884.97900, 2.54173,   0.00000, 0.00000, -91.92002, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1641, 511.80750, -1884.97571, 2.17720,   0.00000, 2.00000, -92.44001, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598, 511.17575, -1884.99170, 2.47856,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 509.43549, -1884.89673, 3.47640,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 518.17877, -1893.58276, 1.45060,   8.00000, 0.00000, 1.62000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1640, 517.18103, -1893.43665, 1.22160,   10.00000, 0.00000, 4.68000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598, 517.29559, -1893.35681, 1.52460,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 518.84540, -1893.54126, 2.60279,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 518.67578, -1883.19153, 2.91980,   0.00000, 4.00000, -88.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1642, 520.31927, -1882.90442, 2.41120,   0.00000, 0.00000, -87.96000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598, 520.01959, -1882.98914, 2.71471,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 517.70135, -1883.10461, 3.74296,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 532.05579, -1868.35718, 3.84931,   0.00000, 0.00000, -0.84000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 531.94452, -1863.49292, 3.84931,   0.00000, 0.00000, 0.42000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 532.25574, -1856.56836, 4.35941,   0.00000, 0.00000, -1.26000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 539.11926, -1857.23206, 4.35941,   0.00000, 0.00000, -1.26000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 538.59576, -1863.14990, 4.35941,   0.00000, 0.00000, -1.26000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 538.55560, -1868.85010, 4.35941,   0.00000, 0.00000, -1.26000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 549.11322, -1857.43262, 4.35941,   0.00000, 0.00000, -1.26000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 548.12927, -1863.00317, 4.35941,   0.00000, 0.00000, -1.26000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281, 547.76550, -1869.02551, 4.35941,   0.00000, 0.00000, -1.26000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 534.59277, -1882.16125, 4.04040,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 536.86249, -1893.32922, 3.50040,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 543.47198, -1887.21582, 3.88040,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 551.05707, -1878.09265, 4.34036,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 556.98523, -1892.03003, 3.78040,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 505.11230, -1892.22375, 2.47640,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1637, 578.14929, -1893.12695, 4.36691,   0.00000, 0.00000, 0.06000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1637, 596.32861, -1893.42419, 4.36691,   0.00000, 0.00000, 0.06000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1461, 574.95337, -1891.59460, 3.36806,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1461, 593.34540, -1891.55029, 3.63677,   0.00000, 0.00000, 1.44000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1386, 601.71539, -1856.13110, 11.54848,   0.00000, 0.00000, -96.05994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1386, 606.52246, -1856.66980, 11.54848,   0.00000, 0.00000, -96.05994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1386, 611.76886, -1856.93689, 11.54848,   0.00000, 0.00000, -96.05994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2406, 602.36877, -1856.25891, 5.05290,   -92.00000, 0.00000, -4.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2405, 602.96680, -1856.12207, 4.97100,   -93.00000, 0.00000, -8.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2404, 603.54022, -1856.24622, 5.01300,   -92.00000, 0.00000, -9.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2404, 607.20569, -1856.65625, 4.95300,   -90.00000, 0.00000, -8.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2410, 607.76068, -1856.78003, 4.93630,   0.00000, 0.00000, -97.74005, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2406, 608.33679, -1856.93530, 5.01290,   -90.00000, 0.00000, -7.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2405, 612.47369, -1856.96899, 4.97100,   -93.00000, 0.00000, -4.14000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2410, 613.08209, -1856.91858, 4.93630,   0.00000, 0.00000, -97.74005, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2404, 613.71069, -1857.18420, 5.01300,   -92.00000, 0.00000, -8.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 566.35498, -1864.21936, 4.84336,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 569.35718, -1877.65247, 4.38340,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 576.02374, -1860.51379, 5.04436,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 579.86493, -1871.79871, 4.82440,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 560.84552, -1875.12476, 4.36340,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 568.54797, -1888.21851, 4.00340,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 584.05225, -1861.84448, 5.04436,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(642, 584.27557, -1880.07153, 4.40440,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 583.24109, -1861.78638, 4.31680,   0.00000, 0.00000, -104.81998, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 575.39581, -1859.96313, 3.97580,   0.00000, 0.00000, -22.86000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 583.18292, -1880.14966, 3.55680,   0.00000, 0.00000, -104.82000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 579.29547, -1871.29443, 3.75580,   0.00000, 0.00000, -22.86000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 567.51349, -1888.04626, 3.19680,   0.00000, 0.00000, -104.82000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 568.77637, -1876.97278, 3.23580,   0.00000, 0.00000, -22.56000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 561.60699, -1875.75415, 3.57680,   0.00000, 0.00000, -104.82000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 567.13153, -1864.93542, 4.01680,   0.00000, 0.00000, -104.82000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 506.20251, -1892.15833, 1.45060,   8.00000, 0.00000, 1.62000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 557.58667, -1892.19543, 2.69580,   0.00000, 0.00000, -22.86000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 551.75470, -1880.02197, 3.35680,   0.00000, 0.00000, -104.82000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 544.25305, -1887.10938, 2.69580,   0.00000, 0.00000, -22.86000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255, 536.17712, -1893.29236, 2.67680,   0.00000, 6.00000, -105.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646, 535.25360, -1882.48499, 2.83580,   0.00000, 0.00000, -22.86000, 0, 0, -1, 500.0, 500.0);

	CreateDynamicObject(973,347.721,-1726.041,6.683,0.000,0.000,-4.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,357.062,-1726.777,6.683,0.000,0.000,-4.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,338.380,-1725.305,6.683,0.000,0.000,-4.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,329.049,-1724.570,6.683,0.000,0.000,-4.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,319.767,-1723.399,6.683,0.000,0.000,-9.599, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,310.518,-1721.835,6.683,0.000,0.000,-9.599, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,301.299,-1720.276,6.683,0.000,0.000,-9.599, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,292.109,-1718.497,6.683,0.000,0.000,-12.399, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,283.310,-1715.604,7.036,0.000,4.399,-24.100, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,274.705,-1711.941,7.586,0.000,2.099,-21.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,266.013,-1708.487,7.853,0.000,1.299,-21.899, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,257.564,-1704.588,8.142,0.000,2.199,-26.999, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,249.227,-1700.342,8.591,0.000,3.199,-26.999, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,241.024,-1695.917,9.043,0.000,2.200,-29.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,233.746,-1690.626,9.813,0.000,6.499,-40.699, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,226.965,-1684.528,10.655,0.000,3.699,-42.599, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,220.076,-1678.192,11.270,0.000,3.699,-42.599, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,213.604,-1671.437,11.859,0.000,3.699,-49.799, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,207.562,-1664.288,12.464,0.000,3.699,-49.799, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,201.527,-1657.145,13.069,0.000,3.699,-49.799, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,195.489,-1650.000,13.553,0.000,2.099,-49.799, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,189.571,-1642.749,13.897,0.000,2.099,-51.899, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,184.107,-1635.182,14.240,0.000,2.099,-56.199, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,178.521,-1627.717,14.392,0.000,-0.000,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,172.568,-1620.491,14.392,0.000,-0.000,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,166.641,-1613.302,14.135,0.000,-3.200,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,160.741,-1606.146,13.616,0.000,-3.200,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,154.803,-1598.942,13.094,0.000,-3.200,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,148.871,-1591.746,12.573,0.000,-3.200,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-882.777,-1170.234,104.049,0.000,4.899,85.800, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-882.163,-1160.924,103.179,0.000,5.799,85.800, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-881.395,-1151.686,102.083,0.000,7.199,85.800, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-880.400,-1142.470,100.974,0.000,6.099,82.600, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-879.200,-1133.232,99.978,0.000,6.099,82.600, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-878.001,-1124.002,98.983,0.000,6.099,82.600, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-876.417,-1114.907,98.436,0.000,-0.300,79.100, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-874.672,-1105.848,97.812,0.000,8.099,79.100, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-872.584,-1096.848,96.495,0.000,8.099,75.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-870.199,-1087.944,95.183,0.000,8.099,75.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-867.410,-1079.301,93.948,0.000,5.599,71.800, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-864.177,-1070.675,93.043,0.000,5.599,67.300, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-860.407,-1062.293,91.712,0.000,10.499,64.100, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-856.042,-1054.108,90.419,0.000,5.699,59.200, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-851.279,-1046.118,89.491,0.000,5.699,59.200, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-851.279,-1046.118,89.491,0.000,5.699,59.200, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-845.723,-1038.843,88.223,0.000,10.099,46.100, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,347.721,-1726.041,6.683,0.000,0.000,-4.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,357.062,-1726.776,6.683,0.000,0.000,-4.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,338.380,-1725.305,6.683,0.000,0.000,-4.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,329.049,-1724.569,6.683,0.000,0.000,-4.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,319.766,-1723.399,6.683,0.000,0.000,-9.598, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,310.518,-1721.834,6.683,0.000,0.000,-9.598, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,301.299,-1720.276,6.683,0.000,0.000,-9.598, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,292.109,-1718.496,6.683,0.000,0.000,-12.399, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,283.309,-1715.604,7.035,0.000,4.399,-24.100, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,274.704,-1711.941,7.585,0.000,2.098,-21.500, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,266.013,-1708.487,7.853,0.000,1.299,-21.899, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,257.563,-1704.588,8.142,0.000,2.198,-26.999, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,249.227,-1700.342,8.590,0.000,3.198,-26.999, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,241.024,-1695.916,9.043,0.000,2.200,-29.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,233.746,-1690.625,9.812,0.000,6.499,-40.699, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,226.964,-1684.527,10.654,0.000,3.698,-42.598, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,220.076,-1678.192,11.270,0.000,3.698,-42.598, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,213.604,-1671.437,11.859,0.000,3.698,-49.798, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,207.561,-1664.287,12.463,0.000,3.698,-49.798, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,201.526,-1657.145,13.069,0.000,3.698,-49.798, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,195.488,-1650.000,13.553,0.000,2.098,-49.798, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,189.570,-1642.749,13.897,0.000,2.098,-51.898, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,184.106,-1635.182,14.239,0.000,2.098,-56.199, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,178.520,-1627.717,14.392,0.000,0.000,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,172.567,-1620.490,14.392,0.000,0.000,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,166.641,-1613.302,14.135,0.000,-3.200,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,160.740,-1606.145,13.616,0.000,-3.200,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,154.802,-1598.942,13.093,0.000,-3.200,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,148.871,-1591.745,12.572,0.000,-3.200,-50.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-882.776,-1170.234,104.049,0.000,4.899,85.800, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-882.163,-1160.923,103.179,0.000,5.798,85.800, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-881.395,-1151.686,102.083,0.000,7.198,85.800, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-880.400,-1142.469,100.973,0.000,6.098,82.599, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-879.200,-1133.232,99.977,0.000,6.098,82.599, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-878.000,-1124.001,98.983,0.000,6.098,82.599, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-876.416,-1114.906,98.435,0.000,-0.300,79.099, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-874.671,-1105.848,97.811,0.000,8.098,79.099, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-872.583,-1096.848,96.495,0.000,8.098,75.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-870.198,-1087.943,95.182,0.000,8.098,75.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-867.409,-1079.301,93.947,0.000,5.598,71.800, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-864.177,-1070.675,93.042,0.000,5.598,67.300, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-860.406,-1062.292,91.711,0.000,10.498,64.099, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-856.041,-1054.108,90.418,0.000,5.698,59.200, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-851.278,-1046.118,89.490,0.000,5.698,59.200, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-851.278,-1046.118,89.490,0.000,5.698,59.200, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(973,-845.723,-1038.843,88.222,0.000,10.098,46.099, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1643,323.013,-1887.050,1.023,2.750,359.750,0.012, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1461,287.534,-1876.208,2.138,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1461,335.608,-1876.168,2.344,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1461,244.995,-1876.144,1.713,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598,336.994,-1905.547,-0.053,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598,263.899,-1839.800,2.799,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1611,328.899,-1881.599,1.299,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1611,327.821,-1882.421,1.259,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1610,327.953,-1881.653,1.258,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1610,329.799,-1882.000,1.200,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1639,263.500,-1840.000,2.319,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646,327.500,-1879.200,1.639,3.040,359.000,3.993, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1647,335.788,-1872.500,3.180,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646,306.799,-1882.900,1.379,3.240,0.000,357.989, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646,303.700,-1882.599,1.389,3.240,0.000,341.998, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646,328.799,-1879.099,1.659,3.240,0.000,351.990, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2993,339.200,-1870.900,5.599,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2993,202.199,-1870.900,5.300,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2993,291.000,-1870.900,5.400,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2993,247.300,-1870.900,4.900,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1359,308.299,-1818.199,3.900,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1359,308.600,-1864.000,2.599,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1647,291.600,-1871.300,3.309,0.000,180.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1647,335.799,-1872.400,3.500,0.000,179.994,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1647,291.600,-1871.300,2.999,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,274.599,-1777.700,5.780,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,325.600,-1776.199,6.460,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,334.599,-1777.400,6.619,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1482,318.799,-1882.099,2.680,0.000,0.000,269.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1482,275.700,-1872.000,2.990,0.000,0.000,269.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1482,264.700,-1872.000,2.970,0.000,0.000,269.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255,262.200,-1871.900,2.000,0.000,3.990,279.997, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255,266.799,-1872.199,2.000,0.000,0.000,265.997, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255,264.100,-1872.400,2.000,0.000,0.000,273.997, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255,274.900,-1871.799,2.059,0.000,2.000,279.992, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1639,263.500,-1825.900,2.698,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598,312.099,-1883.000,1.399,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1598,253.100,-1828.500,3.099,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1482,306.090,-1882.099,2.650,0.000,0.000,269.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255,318.900,-1882.599,1.690,0.000,0.000,265.989, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1255,316.000,-1882.400,1.700,0.000,0.000,273.993, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1646,307.900,-1883.000,1.389,3.240,0.000,341.998, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(624,303.200,-1781.799,2.799,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(624,302.600,-1817.800,3.299,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(624,303.200,-1800.199,3.400,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(624,303.000,-1839.000,2.400,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(624,302.799,-1863.699,1.100,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(647,302.600,-1864.000,3.044,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(647,302.899,-1817.900,4.400,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(647,302.600,-1800.300,4.999,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(647,302.599,-1781.700,5.000,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(879,227.100,-1893.500,0.999,0.000,0.000,128.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(647,303.000,-1838.900,4.000,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(8648,207.000,-1776.389,3.468,0.725,0.000,269.796, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(8648,177.169,-1776.330,3.568,358.994,0.000,270.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(8648,325.500,-1779.719,4.000,0.098,0.000,261.996, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(8648,236.599,-1776.450,3.748,0.395,0.000,270.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(879,219.700,-1914.200,-3.000,0.000,0.000,249.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(880,222.299,-1906.700,-0.899,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,303.299,-1851.800,4.800,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,303.500,-1809.000,5.940,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,337.600,-1817.699,5.900,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,330.599,-1817.700,5.900,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281,294.100,-1850.599,3.099,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281,283.799,-1844.099,3.259,0.000,0.000,60.995, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281,288.200,-1850.400,3.096,2.000,0.000,4.999, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2405,287.200,-1870.149,4.099,355.994,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2406,302.799,-1880.400,2.500,348.799,0.000,179.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1243,215.799,-2083.500,-3.000,347.016,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1243,295.799,-2088.699,-3.000,6.998,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,303.700,-1790.500,6.039,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,308.599,-1773.799,6.150,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,289.000,-1778.000,5.860,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(8648,266.400,-1776.759,3.855,359.994,0.000,268.868, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(629,224.199,-1777.500,3.099,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(680,283.099,-1778.099,3.202,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(680,237.799,-1777.500,3.200,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(629,180.000,-1777.400,3.000,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(629,269.299,-1777.599,3.200,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(680,298.399,-1778.199,3.402,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(680,252.600,-1777.599,3.102,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(680,208.100,-1777.300,2.799,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(680,193.400,-1777.099,2.472,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(680,163.399,-1777.300,3.099,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(8648,296.299,-1777.400,3.880,359.994,0.000,268.868, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,317.599,-1775.099,6.320,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,303.500,-1828.300,5.469,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,244.899,-1777.199,5.690,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,259.099,-1777.299,5.690,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,169.899,-1777.000,5.679,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,229.299,-1777.099,5.699,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,185.300,-1777.099,5.369,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,199.899,-1777.099,5.189,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1232,215.299,-1777.099,5.449,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1281,290.799,-1839.299,3.460,0.000,359.100,55.992, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(8407,338.000,-1787.099,5.399,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(14449,279.400,-1809.200,4.699,1.674,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(14449,285.400,-1809.200,4.699,1.679,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2782,345.000,-1903.200,0.200,0.000,0.000,259.997, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1610,269.599,-1883.700,0.800,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1297,311.700,-1811.900,6.800,0.000,0.000,269.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1297,324.099,-1811.900,6.800,0.000,0.000,269.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1297,355.200,-1811.900,6.800,0.000,0.000,269.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1297,335.700,-1811.900,6.800,0.000,0.000,269.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1297,340.299,-1786.199,7.500,0.000,0.000,179.994, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1481,298.200,-1844.599,3.200,0.000,0.000,340.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1481,289.200,-1844.599,3.200,0.000,0.000,189.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(998,309.500,-1786.000,4.460,90.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(998,319.898,-1786.000,4.460,90.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(998,330.299,-1786.000,4.460,90.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(998,312.299,-1812.799,4.350,90.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(998,322.700,-1812.799,4.350,90.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(998,336.400,-1812.799,4.350,90.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(998,350.700,-1812.700,4.350,90.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(998,361.000,-1801.500,4.699,90.000,0.000,95.499, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(995,360.099,-1791.200,4.699,90.000,0.000,91.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(2405,298.000,-1898.200,0.600,335.994,179.994,160.998, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(1342,308.700,-1846.000,3.500,0.000,0.000,180.000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(879,220.900,-1900.500,0.000,0.000,0.000,295.993, 0, 0, -1, 500.0, 500.0);
	// Exterior ayuntamiento
	new ext_ayuntamiento;
	ext_ayuntamiento = CreateDynamicObject(18981,1465.448,-1754.408,19.916,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 3979, "civic01_lan", "airportwall_256128", 0);
	ext_ayuntamiento = CreateDynamicObject(18981,1496.380,-1754.429,19.916,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 3979, "civic01_lan", "airportwall_256128", 0);
	ext_ayuntamiento = CreateDynamicObject(19377,1482.169,-1744.510,27.151,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	ext_ayuntamiento = CreateDynamicObject(19377,1491.751,-1744.573,27.151,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	ext_ayuntamiento = CreateDynamicObject(19377,1472.584,-1744.592,27.151,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	ext_ayuntamiento = CreateDynamicObject(19378,1501.299,-1742.562,9.225,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 14616, "ab_pillartemp", "ab_Pillar", 0);
	ext_ayuntamiento = CreateDynamicObject(19378,1503.612,-1742.571,9.223,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 14616, "ab_pillartemp", "ab_Pillar", 0);
	ext_ayuntamiento = CreateDynamicObject(19378,1508.360,-1747.309,9.223,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 14616, "ab_pillartemp", "ab_Pillar", 0);
	ext_ayuntamiento = CreateDynamicObject(19378,1508.380,-1756.672,9.223,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 14616, "ab_pillartemp", "ab_Pillar", 0);
	ext_ayuntamiento = CreateDynamicObject(19378,1460.288,-1742.733,9.225,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 14616, "ab_pillartemp", "ab_Pillar", 0);
	ext_ayuntamiento = CreateDynamicObject(19378,1458.560,-1742.732,9.223,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 14616, "ab_pillartemp", "ab_Pillar", 0);
	ext_ayuntamiento = CreateDynamicObject(19378,1453.769,-1747.518,9.223,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 14616, "ab_pillartemp", "ab_Pillar", 0);
	ext_ayuntamiento = CreateDynamicObject(19378,1453.784,-1757.066,9.223,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 14616, "ab_pillartemp", "ab_Pillar", 0);
	ext_ayuntamiento = CreateDynamicObject(19440,1467.300,-1741.986,23.228,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	ext_ayuntamiento = CreateDynamicObject(19440,1467.300,-1741.986,19.730,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	ext_ayuntamiento = CreateDynamicObject(19440,1494.325,-1741.981,19.730,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	ext_ayuntamiento = CreateDynamicObject(19440,1494.325,-1741.981,23.228,0.000,0.000,90.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	ext_ayuntamiento = CreateDynamicObject(19441,1481.225,-1744.546,19.730,90.000,90.000,0.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 12802, "cunteroads2", "sw_gasground", 0);
	ext_ayuntamiento = CreateDynamicObject(19441,1479.295,-1744.531,19.730,90.000,90.000,0.000, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 12802, "cunteroads2", "sw_gasground", 0);
	ext_ayuntamiento = CreateDynamicObject(19361,1480.281,-1745.565,15.386,0.000,0.000,90.499, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 3603, "bevmans01_la", "lasbevcit7", 0);
	ext_ayuntamiento = CreateDynamicObject(19361,1494.436,-1742.548,13.542,0.000,0.000,88.400, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 10356, "groundbit_sfs", "ws_hextile", 0);
	ext_ayuntamiento = CreateDynamicObject(19361,1467.412,-1742.503,13.316,0.000,0.000,93.500, 0, 0, -1, 500.0, 500.0);
	SetDynamicObjectMaterial(ext_ayuntamiento, 0, 10356, "groundbit_sfs", "ws_hextile", 0);
	ext_ayuntamiento = CreateDynamicObject(5720,1480.868,-1752.332,22.474,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(1215,1478.142,-1744.405,14.101,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(1215,1482.348,-1744.259,14.101,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(1280,1470.923,-1741.664,12.855,0.000,0.000,-90.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(1280,1490.506,-1741.569,12.855,0.000,0.000,-90.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(1215,1475.860,-1744.353,14.101,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(1215,1471.920,-1744.352,14.101,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(1215,1484.832,-1744.331,14.101,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(1215,1489.026,-1744.372,14.101,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(19543,1461.291,-1773.948,14.466,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(19543,1500.940,-1773.812,14.444,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(808,1461.549,-1747.170,15.664,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(808,1499.778,-1746.405,15.747,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1505.880,-1753.537,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1505.880,-1751.537,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1505.880,-1749.537,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1505.880,-1747.537,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1505.880,-1745.537,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1505.880,-1744.537,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1456.022,-1753.966,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1456.022,-1751.966,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1456.022,-1749.966,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1456.022,-1747.966,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1456.022,-1745.966,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(870,1456.022,-1744.966,14.840,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(3532,1458.621,-1746.033,15.118,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(3532,1458.552,-1747.635,15.118,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(3532,1503.093,-1745.112,15.118,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(3532,1503.219,-1749.226,15.118,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(948,1482.496,-1741.653,12.508,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(948,1477.990,-1741.588,12.508,0.000,0.000,0.000, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(638,1467.468,-1742.200,13.132,0.000,0.000,90.899, 0, 0, -1, 500.0, 500.0);
	ext_ayuntamiento = CreateDynamicObject(638,1494.318,-1742.253,13.126,0.000,0.000,89.700, 0, 0, -1, 500.0, 500.0);

	//negocio: repartidor
	new int_camionero;
	int_camionero = CreateDynamicObject(19807,1037.760,-305.168,2076.504,0.000,0.000,-151.600, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(19379,1028.039,-305.879,2075.560,0.000,90.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 10023, "bigwhitesfe", "sfe_arch10", 0x00000000);
	int_camionero = CreateDynamicObject(19377,1032.839,-314.760,2079.199,0.000,90.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 6284, "bev_law2", "studwalltop_law", 0x00000000);
	int_camionero = CreateDynamicObject(19413,1037.289,-319.500,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19413,1029.271,-319.500,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19459,1038.949,-314.739,2077.370,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19367,1034.079,-319.500,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19440,1031.680,-319.500,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19379,1038.537,-315.509,2075.560,0.000,90.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 10023, "bigwhitesfe", "sfe_arch10", 0x00000000);
	int_camionero = CreateDynamicObject(19379,1028.038,-315.509,2075.560,0.000,90.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 10023, "bigwhitesfe", "sfe_arch10", 0x00000000);
	int_camionero = CreateDynamicObject(19379,1038.539,-305.880,2075.560,0.000,90.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 10023, "bigwhitesfe", "sfe_arch10", 0x00000000);
	int_camionero = CreateDynamicObject(19367,1033.300,-315.424,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19367,1034.989,-313.910,2077.370,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19367,1031.619,-313.910,2077.370,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19459,1027.599,-314.739,2077.370,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19367,1033.300,-310.799,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19440,1034.989,-311.510,2077.370,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19440,1031.619,-311.510,2077.370,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19459,1024.408,-305.299,2077.370,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19459,1027.670,-302.000,2077.370,0.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19459,1042.116,-305.299,2077.370,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19459,1037.300,-302.000,2077.370,0.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(1808,1028.007,-311.877,2075.647,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(2004,1042.030,-309.042,2076.079,0.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(19807,1027.507,-305.484,2076.484,0.000,0.000,155.499, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(2191,1031.759,-302.599,2075.647,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(1713,1030.474,-318.775,2075.647,0.000,0.000,180.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(18075,1033.304,-314.896,2079.177,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(2611,1035.127,-313.064,2077.362,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 18882, "hugebowls", "wallwhite2top", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 3, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 5, 19480, "signsurf", "sign", 0x00000000);
	int_camionero = CreateDynamicObject(3077,1024.555,-304.636,2079.899,180.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 1, 16640, "a51", "ws_stationfloor", 0x00000000);
	int_camionero = CreateDynamicObject(11714,-1716.672,-126.450,3.789,0.000,0.000,135.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(2198,1037.616,-305.102,2075.645,0.000,0.000,180.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 2, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 3, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 5, 19480, "signsurf", "sign", 0x00000000);
	int_camionero = CreateDynamicObject(2007,1041.321,-302.607,2075.647,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(1714,1040.288,-309.638,2075.647,0.000,0.000,-172.940, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(2193,1034.568,-305.124,2075.645,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 19480, "signsurf", "sign", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 2, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 4, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 6, 19480, "signsurf", "sign", 0x00000000);
	int_camionero = CreateDynamicObject(1721,1037.943,-305.962,2075.646,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(19860,1033.289,-310.722,2076.887,0.000,0.000,180.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 16093, "a51_ext", "des_backdoor1", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(19860,1026.288,-302.082,2076.887,0.000,0.000,180.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 16093, "a51_ext", "des_backdoor1", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(1235,1028.058,-310.537,2076.155,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(19367,1040.600,-310.011,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19367,1025.920,-310.011,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(1713,1037.634,-318.802,2075.647,0.000,0.000,180.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(1713,1028.270,-314.749,2075.647,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(1713,1038.297,-313.286,2075.647,0.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(19860,1042.038,-307.592,2076.887,0.000,0.000,450.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 16093, "a51_ext", "des_backdoor1", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(2193,1039.356,-309.401,2075.645,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 19480, "signsurf", "sign", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 2, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 4, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 6, 19480, "signsurf", "sign", 0x00000000);
	int_camionero = CreateDynamicObject(2193,1040.364,-305.142,2075.647,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 19480, "signsurf", "sign", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 2, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 4, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 6, 19480, "signsurf", "sign", 0x00000000);
	int_camionero = CreateDynamicObject(2198,1025.084,-308.511,2075.647,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 1, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 2, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 3, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 5, 19480, "signsurf", "sign", 0x00000000);
	int_camionero = CreateDynamicObject(2193,1028.701,-304.383,2075.645,0.000,0.000,180.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 19480, "signsurf", "sign", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 2, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 4, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 6, 19480, "signsurf", "sign", 0x00000000);
	int_camionero = CreateDynamicObject(2191,1030.079,-302.599,2075.647,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(1714,1040.603,-303.995,2075.647,0.000,0.000,-35.880, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(1714,1037.142,-303.539,2075.647,0.000,0.000,0.119, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(1714,1034.681,-303.900,2075.647,0.000,0.000,-57.060, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(1714,1027.900,-304.070,2075.647,0.000,0.000,21.899, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(1714,1026.571,-308.033,2075.647,0.000,0.000,-105.540, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(1846,1029.276,-320.420,2077.630,90.000,90.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 18757, "vcinteriors", "dt_office_gls_text", 0x00000000);
	int_camionero = CreateDynamicObject(1846,1037.400,-320.420,2077.630,90.000,90.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 18757, "vcinteriors", "dt_office_gls_text", 0x00000000);
	int_camionero = CreateDynamicObject(19174,1027.689,-313.986,2077.680,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 7418, "vgnbballsign2", "frogspawn1_256", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(19172,1038.869,-314.140,2077.679,0.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 8057, "vgsswarehse02", "ws_RShaul_transp_M", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(19175,1033.320,-315.511,2077.808,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 8057, "vgsswarehse02", "GB_truckdepot10", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(2007,1037.759,-302.611,2075.647,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(19377,1033.682,-314.760,2079.209,0.000,90.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 6284, "bev_law2", "studwalltop_law", 0x00000000);
	int_camionero = CreateDynamicObject(19377,1038.599,-305.130,2079.199,0.000,90.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 6284, "bev_law2", "studwalltop_law", 0x00000000);
	int_camionero = CreateDynamicObject(19377,1028.099,-305.130,2079.199,0.000,90.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 6284, "bev_law2", "studwalltop_law", 0x00000000);
	int_camionero = CreateDynamicObject(18075,1033.304,-306.439,2079.177,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(18075,1045.271,-306.439,2079.177,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(18075,1021.233,-306.439,2079.177,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(2611,1031.483,-313.134,2077.362,0.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 18882, "hugebowls", "wallwhite2top", 0xFFFFFFFF);
	SetDynamicObjectMaterial(int_camionero, 3, 19480, "signsurf", "sign", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 5, 19480, "signsurf", "sign", 0x00000000);
	int_camionero = CreateDynamicObject(2690,1041.694,-309.789,2075.988,0.000,0.000,181.139, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, -1, "none", "none", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(19367,1037.239,-319.640,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19367,1029.328,-319.640,2077.370,0.000,0.000,90.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 14383, "burg_1", "hospital_wall2", 0x00000000);
	int_camionero = CreateDynamicObject(19175,1034.090,-302.091,2077.808,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 8057, "vgsswarehse02", "GB_truckdepot10", 0x00000000);
	SetDynamicObjectMaterial(int_camionero, 1, 10765, "airportgnd_sfse", "ws_runwaytarmac", 0x00000000);
	int_camionero = CreateDynamicObject(19860,1033.288,-310.722,2076.887,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 0, 16093, "a51_ext", "des_backdoor1", 0xFFFFFFFF);
	int_camionero = CreateDynamicObject(19893,1037.185,-305.052,2076.434,0.000,0.000,177.400, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 14544, "ab_woozieb", "ap_screens1", 0x00000000);
	int_camionero = CreateDynamicObject(19893,1039.297,-304.377,2076.429,0.000,0.000,74.400, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 8869, "buildingsitevge", "ws_floodlight", 0x00000000);
	int_camionero = CreateDynamicObject(19893,1028.104,-305.454,2076.429,0.000,0.000,-172.799, -1, 51, -1, 300.0, 300.0);
	SetDynamicObjectMaterial(int_camionero, 1, 14544, "ab_woozieb", "ap_screens1", 0x00000000);
	int_camionero = CreateDynamicObject(19894,1025.036,-307.961,2076.435,0.000,0.000,111.399, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateObject(6959,1035.788,-311.675,2075.614,0.000,0.000,0.000, 300.0);
	int_camionero = CreateDynamicObject(1302,1038.468,-311.513,2075.647,0.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2961,1031.804,-310.748,2076.772,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2855,1034.201,-318.430,2076.192,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2854,1033.069,-318.579,2076.208,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2024,1033.112,-319.088,2075.647,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2239,1028.013,-316.921,2075.648,0.000,0.000,97.440, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2262,1040.137,-302.566,2077.213,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(14455,1022.356,-309.964,2077.167,0.000,0.000,0.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2265,1041.542,-304.002,2077.297,0.000,0.000,-90.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2239,1038.400,-317.065,2075.634,0.000,0.000,-92.220, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(2260,1040.598,-309.450,2077.100,0.000,0.000,180.000, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(19894,1033.429,-304.522,2076.430,0.000,0.000,104.499, -1, 51, -1, 300.0, 300.0);
	int_camionero = CreateDynamicObject(19894,1040.052,-308.273,2076.430,0.000,0.000,12.399, -1, 51, -1, 300.0, 300.0);

	//unity
	CreateDynamicObject(968, 1811.69995, -1892.80005, 13.10000,   0.00000, -40.00000, 270.00000);
	CreateDynamicObject(966,1811.69995117,-1892.80004883,12.39999962,0.00000000,0.00000000,270.00000000);
    CreateDynamicObject(19122, 1774.30066, -1897.03882, 12.94326,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19122, 1774.30396, -1899.11926, 12.94326,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1774.36890, -1886.63806, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1890.74268, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1894.85278, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1901.28357, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1905.39331, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1909.53015, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1913.61377, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, -1917.72339, 12.90600, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1924.27258, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1928.33447, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1932.49414, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1774.36890, -1933.44690, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1776.42957, -1935.47913, 12.90600,   0.00000, 0.00000, 179.88004);
    CreateDynamicObject(970, 1780.59229, -1935.47913, 12.90600,   0.00000, 0.00000, 179.88000);
    CreateDynamicObject(970, 1784.71533, -1935.47913, 12.90600,   0.00000, 0.00000, 179.88000);
    CreateDynamicObject(970, 1788.81653, -1935.49536, 12.90600,   0.00000, 0.00000, 179.88000);
    CreateDynamicObject(970, 1792.95850, -1935.49536, 12.90600,   0.00000, 0.00000, 179.88000);
    CreateDynamicObject(970, 1797.05872, -1935.49536, 12.90600,   0.00000, 0.00000, 179.88000);
    CreateDynamicObject(970, 1801.15942, -1935.49536, 12.90600,   0.00000, 0.00000, 179.88000);
    CreateDynamicObject(970, 1804.56299, -1935.49536, 12.90600,   0.00000, 0.00000, 179.88000);
    CreateDynamicObject(970, 1806.64136, -1933.39917, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1806.64136, -1929.25562, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1806.64063, -1925.11084, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1806.64136, -1921.00964, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1806.64136, -1916.88684, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1806.64136, -1912.75305, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1806.64136, -1908.61255, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1806.64136, -1904.45703, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1807.26526, -1898.31213, 12.90600,   0.00000, 0.00000, 70.92001);
    CreateDynamicObject(970, 1809.81274, -1895.48816, 12.90600,   0.00000, 0.00000, 24.96002);
    CreateDynamicObject(970, 1806.64136, -1902.31067, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1811.63477, -1896.68042, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1811.63586, -1900.77808, 12.90600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1811.66919, -1882.49365, 12.94600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1811.66919, -1878.38940, 12.94600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1811.66919, -1874.57312, 12.94600,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(970, 1809.60754, -1872.52698, 12.94600,   0.00000, 0.00000, 179.99989);
    CreateDynamicObject(970, 1809.58325, -1884.59082, 12.94600,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1799.65662, -1884.59082, 12.94600,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1795.53418, -1884.59082, 12.94600,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1791.42786, -1884.59082, 12.94600,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1787.32898, -1884.59082, 12.94600,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1783.23328, -1884.59082, 12.94600,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1779.13123, -1884.59082, 12.94600,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1776.44543, -1884.59082, 12.94600,   0.00000, 0.00000, 0.00000);

	//skate park
	CreateDynamicObject(5400, 1956.00000, -1331.09998, 17.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(13604, 1919.99756, -1399.01990, 13.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(13647, 1911.80005, -1446.88000, 12.40000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(13647, 1911.80005, -1446.19995, 12.40000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(13645, 1867.90002, -1406.56006, 13.25000,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(13645, 1867.90002, -1398.31995, 13.25000,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(5153, 1868.23499, -1402.50000, 13.86000,   0.00000, 24.00000, 90.50000);
	CreateDynamicObject(5153, 1869.19995, -1402.50000, 12.68000,   90.00000, 24.00000, 89.70000);
	CreateDynamicObject(5153, 1867.59497, -1402.50000, 13.86000,   0.00000, 24.00000, 90.10000);
	CreateDynamicObject(5153, 1866.65002, -1402.38904, 12.68000,   90.00000, 24.00000, 270.00000);
	CreateDynamicObject(13644, 1870.40002, -1360.00000, 14.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1810, 1905.09998, -1359.50000, 12.40000,   0.00000, 0.00000, 125.00000);
	CreateDynamicObject(2121, 1960.59961, -1401.79980, 12.90000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(1760, 1905.50000, -1357.50000, 12.40000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1755, 1909.80005, -1358.90002, 12.40000,   0.00000, 0.00000, 260.00000);
	CreateDynamicObject(2121, 1962.09961, -1403.09961, 12.90000,   0.00000, 0.00000, 279.99799);
	CreateDynamicObject(2673, 1905.40002, -1358.80005, 12.58900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 1908.19995, -1358.30005, 12.60000,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2671, 1858.80005, -1371.90002, 12.58000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(2673, 1961.59998, -1402.00000, 12.66000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(1227, 1899.30005, -1352.09998, 13.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1901.00000, -1352.00000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1898.50000, -1352.30005, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1862.19995, -1370.00000, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1862.09998, -1369.09998, 13.19500,   0.00000, 90.00000, 120.00000);
	CreateDynamicObject(1666, 1909.00000, -1418.00000, 15.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8530, 1866.90002, -1359.90002, 9.77000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(8530, 1870.50000, -1357.19995, 9.77000,   0.00000, 179.99500, 0.00000);
	CreateDynamicObject(8530, 1870.37000, -1359.80005, 10.20000,   0.00000, 179.99500, 0.00000);

	//GYM ganton
	CreateDynamicObject(1424,2224.1001000,-1719.0000000,13.0500000,0.0000000,0.0000000,86.0000000); //object(dyn_roadbarrier_2) (1)
	CreateDynamicObject(1424,2224.3000000,-1716.9900000,13.0500000,0.0000000,0.0000000,82.9960000); //object(dyn_roadbarrier_2) (2)
	CreateDynamicObject(1424,2224.6001000,-1714.9000000,13.0500000,0.0000000,0.0000000,82.9960000); //object(dyn_roadbarrier_2) (3)
	CreateDynamicObject(2110,2226.8000000,-1718.5000000,12.5000000,0.0000000,0.0000000,86.0000000); //object(low_dinning_4) (1)
	CreateDynamicObject(2309,2228.3000000,-1718.8000000,12.4500000,0.0000000,0.0000000,80.0000000); //object(med_office_chair2) (1)
	CreateDynamicObject(2309,2228.4500000,-1717.4000000,12.5500000,0.0000000,0.0000000,100.0000000); //object(med_office_chair2) (2)
	CreateDynamicObject(1424,2224.0000000,-1721.1000000,13.0700000,0.0000000,0.7000000,85.9950000); //object(dyn_roadbarrier_2) (4)
	CreateDynamicObject(1424,2224.6001000,-1723.1000000,13.1000000,0.0000000,0.0000000,310.0000000); //object(dyn_roadbarrier_2) (5)
	CreateDynamicObject(1424,2226.3000000,-1724.3000000,13.0800000,0.0000000,0.0000000,340.0000000); //object(dyn_roadbarrier_2) (6)
	CreateDynamicObject(1424,2228.3999000,-1724.7000000,13.0700000,0.0000000,0.0000000,0.0000000); //object(dyn_roadbarrier_2) (7)
	CreateDynamicObject(1424,2230.3000000,-1723.5000000,13.0800000,0.0000000,0.0000000,60.0000000); //object(dyn_roadbarrier_2) (8)
	CreateDynamicObject(2611,2228.6899000,-1714.8000000,14.0000000,0.0000000,0.0000000,270.0000000); //object(police_nb1) (1)
	CreateDynamicObject(2697,2228.7000000,-1716.5000000,14.3900000,0.0000000,0.0000000,270.0000000); //object(cj_banner14) (1)
	CreateDynamicObject(2695,2228.7000000,-1719.7000000,14.4000000,0.0000000,0.0000000,270.0000000); //object(cj_banner12) (1)
	CreateDynamicObject(2894,2227.0000000,-1718.1000000,13.2990000,0.0000000,0.0000000,80.0000000); //object(kmb_rhymesbook) (2)

	//parque verona beach
	CreateDynamicObject(1432, 380.60001, -1870.69995, 6.83000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1408, 386.55957, -1872.53027, 7.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1408, 381.33984, -1872.53027, 7.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1408, 378.70020, -1869.79980, 7.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1408, 386.54999, -1863.09998, 7.30000,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1432, 386.00000, -1865.09998, 6.83000,   0.00000, 0.00000, 329.99600);
	CreateDynamicObject(1432, 383.89999, -1870.68994, 6.83000,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1408, 378.70001, -1865.80005, 7.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1280, 940.90039, -1697.54980, 12.90000,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(1280, 948.20020, -1697.54980, 12.90000,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(6965, 947.09961, -1733.50000, 15.99900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6964, 947.09961, -1733.40039, 12.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 951.00000, -1729.59961, 11.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 948.00000, -1738.00000, 11.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 942.90039, -1730.59961, 11.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 951.70020, -1700.66895, 12.90000,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(1280, 951.70020, -1707.20020, 12.90000,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(1280, 951.70020, -1713.59961, 12.90000,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(1231, 952.40002, -1716.90002, 15.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 936.29999, -1697.19995, 15.30000,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(1231, 952.20001, -1697.00000, 15.30000,   0.00000, 0.00000, 325.00000);
	CreateDynamicObject(1231, 973.00000, -1726.90002, 15.30000,   0.00000, 0.00000, 324.99799);
	CreateDynamicObject(1231, 932.20001, -1759.30005, 15.30000,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(1232, 927.46997, -1731.18994, 15.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 927.52002, -1709.79895, 15.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 960.50000, -1764.80005, 15.30000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1231, 972.79999, -1752.30005, 15.30000,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(1280, 936.90039, -1702.50000, 12.90000,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1281, 956.09998, -1760.00000, 13.28700,   0.00000, 0.00000, 350.00000);
	CreateDynamicObject(1281, 950.59998, -1755.00000, 13.28700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 944.09998, -1757.80005, 13.28700,   0.00000, 0.00000, 350.00000);
	CreateDynamicObject(1281, 938.50000, -1753.40002, 13.28700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1340, 969.29999, -1730.18994, 13.65000,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(1341, 970.29999, -1735.00000, 13.45000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1342, 969.29999, -1739.69995, 13.55000,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(1571, 969.09998, -1745.09998, 13.85000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2425, 969.25000, -1743.90002, 13.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2362, 968.21997, -1744.18005, 13.63300,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2449, 970.20001, -1744.90002, 12.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2447, 969.00000, -1743.90002, 12.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(615, 959.79999, -1705.50000, 12.50000,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(792, 956.90002, -1747.90002, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 935.40002, -1709.30005, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1371, 963.20001, -1727.59998, 13.28000,   0.00000, 0.00000, 0.00000);

	//Deposito LSPD
	CreateDynamicObject(9339,1626.3994100,-1861.5996100,18.7100000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1626.3994100,-1861.5986300,17.5000000,179.9950000,0.0000000,90.0000000); //object(sfnvilla001_cm) (2)
	CreateDynamicObject(9339,1615.7998000,-1861.5976600,3.7500000,90.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm) (3)
	CreateDynamicObject(1411,1619.0996100,-1861.7998000,18.5600000,0.0000000,0.0000000,179.9950000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1624.3700000,-1861.7998000,18.5600000,0.0000000,0.0000000,179.9950000); //object(dyn_mesh_1) (2)
	CreateDynamicObject(1294,1619.9000200,-1861.6030300,18.2400000,0.0000000,90.0000000,0.0000000); //object(mlamppost) (2)
	CreateDynamicObject(1294,1628.4000200,-1861.5795900,18.2400000,180.0000000,270.0000000,0.0000000); //object(mlamppost) (3)
	CreateDynamicObject(2921,1616.4000200,-1855.5999800,17.6000000,0.0000000,0.0000000,165.2450000); //object(kmb_cam) (1)
	CreateDynamicObject(1615,1615.9000200,-1862.2900400,18.8000000,0.0000000,0.0000000,90.0000000); //object(nt_alarm2_01) (1)
	CreateDynamicObject(9339,1647.8193400,-1802.7793000,13.1000000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1622.6992200,-1797.8994100,13.1000000,0.0000000,0.0000000,68.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1606.3798800,-1791.2998000,14.5000000,0.0000000,0.0000000,68.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1606.3798800,-1791.2998000,13.1000000,0.0000000,0.0000000,68.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1622.6992200,-1797.8994100,14.5000000,0.0000000,0.0000000,68.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1647.8193400,-1802.7793000,14.5000000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1647.8193400,-1802.7793000,15.9000000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1622.6992200,-1797.8994100,15.9000000,0.0000000,0.0000000,68.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1606.3798800,-1791.2998000,15.9000000,0.0000000,0.0000000,68.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1606.3798800,-1791.2998000,17.3000000,0.0000000,0.0000000,68.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1622.6992200,-1797.8994100,17.3000000,0.0000000,0.0000000,68.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1647.8193400,-1802.7793000,17.3000000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(1411,1637.3994100,-1802.5000000,17.2000000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1642.6992200,-1802.5000000,17.2000000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1648.0000000,-1802.5000000,17.2000000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1653.2998000,-1802.5000000,17.2000000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1658.5996100,-1802.5000000,17.2000000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1632.1992200,-1801.5000000,17.2000000,0.0000000,0.0000000,337.9940000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1627.2998000,-1799.5000000,17.2000000,0.0000000,0.0000000,337.9940000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1622.3994100,-1797.5000000,17.2000000,0.0000000,0.0000000,337.9940000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1617.5000000,-1795.5000000,17.2000000,0.0000000,0.0000000,337.9940000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1612.5996100,-1793.5000000,17.2000000,0.0000000,0.0000000,337.9940000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1607.6992200,-1791.5000000,17.2000000,0.0000000,0.0000000,337.9940000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1602.7998000,-1789.5996100,17.2000000,0.0000000,0.0000000,337.9890000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(1411,1597.8994100,-1787.5996100,17.2000000,0.0000000,0.0000000,337.9890000); //object(dyn_mesh_1) (1)
	CreateDynamicObject(2921,1595.1999500,-1787.5000000,17.6000000,0.0000000,0.0000000,157.2450000); //object(kmb_cam) (1)
	CreateDynamicObject(2921,1600.0000000,-1843.3000500,17.6000000,0.0000000,0.0000000,261.2420000); //object(kmb_cam) (1)
	CreateDynamicObject(2921,1659.5999800,-1842.9000200,17.6000000,0.0000000,0.0000000,353.2380000); //object(kmb_cam) (1)
	CreateDynamicObject(2921,1660.5000000,-1802.9000200,17.6000000,0.0000000,0.0000000,68.2380000); //object(kmb_cam) (1)

	//interior sheriff
	CreateDynamicObject(3857, 239.60001, 113.10000, 1006.70001,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(3857, 239.59961, 113.09961, 1006.70001,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(3857, 253.20000, 115.60000, 1006.70001,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(3857, 253.19922, 115.59961, 1006.70001,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(3858, 246.10001, 119.40000, 1006.70001,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3858, 246.09961, 119.39941, 1006.70001,   0.00000, 0.00000, 44.99500);
	CreateDynamicObject(1510, 240.38600, 119.46000, 1003.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 244.39500, 119.45996, 1003.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 248.47501, 119.45996, 1003.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 252.53500, 119.45996, 1003.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1537, 219.89999, 120.30000, 998.01001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3089, 219.92000, 120.40000, 999.29999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3089, 219.89941, 121.79883, 999.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2930, 215.61914, 125.00000, 1000.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 213.20000, 124.93600, 998.70001,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(9339, 213.19922, 124.93500, 1001.34998,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(3089, 239.60001, 118.36000, 1003.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3089, 239.60001, 115.37000, 1003.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3089, 253.18945, 109.82910, 1003.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3089, 253.19299, 106.83400, 1003.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7191, 195.59961, 124.69922, 1004.20599,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(2949, 218.55000, 116.50000, 998.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3089, 218.50000, 116.49000, 999.29999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3089, 217.07001, 116.49000, 999.29999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3089, 218.20000, 116.50000, 1000.50000,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(1998, 215.00000, 118.20000, 998.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2356, 214.89999, 117.30000, 998.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1886, 219.70000, 124.60000, 1002.09998,   10.00000, 0.00000, 328.75000);
	CreateDynamicObject(2712, 273.60001, 121.30000, 1004.20001,   0.00000, 0.00000, 196.75000);
	CreateDynamicObject(1778, 275.39999, 123.09961, 1003.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1789, 274.10001, 122.80000, 1004.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 275.70001, 117.90400, 1003.60699,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2606, 219.70000, 117.70000, 1001.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3089, 275.75000, 117.88000, 1004.90002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 275.76953, 121.33000, 1003.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2527, 271.20001, 119.30000, 1003.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2527, 272.28000, 119.30000, 1003.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2527, 273.35999, 119.29980, 1003.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2527, 274.44000, 119.30000, 1003.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(920, 275.36899, 120.40000, 1004.09998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 266.82001, 120.40000, 1004.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14782, 271.28000, 116.37400, 1004.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1368, 263.95001, 117.30000, 1004.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 270.25400, 118.40000, 1004.25000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3089, 275.70001, 117.88000, 1004.90002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 266.98001, 115.87000, 1003.60699,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3089, 265.45700, 115.85000, 1004.90002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1569, 269.71500, 112.55000, 1003.61200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3089, 269.89999, 112.57000, 1004.90002,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(3089, 271.20001, 112.57000, 1004.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3089, 270.79999, 112.56000, 1006.00000,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(1723, 262.10001, 111.90000, 1003.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 266.39999, 108.20000, 1004.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2807, 267.79999, 107.60000, 1004.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2807, 267.79999, 108.70000, 1004.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2807, 264.96500, 108.70000, 1004.09998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2807, 264.96500, 107.60000, 1004.09998,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1723, 261.00000, 108.90000, 1003.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2297, 263.50000, 107.40000, 1003.59998,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(1502, 266.85999, 112.56000, 1003.60699,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(3089, 265.34000, 112.54000, 1004.90002,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1776, 267.79999, 110.50000, 1004.70001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1209, 261.10001, 107.40000, 1003.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(630, 261.20001, 111.90000, 1004.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 239.37000, 115.81900, 1009.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 239.38000, 113.90000, 1009.20001,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2911, 254.00000, 127.08000, 1002.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2911, 256.00000, 127.08900, 1002.20099,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3089, 248.00400, 87.59500, 1003.90002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2930, 258.89941, 93.22266, 1004.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 253.36993, 85.28001, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1998, 251.39999, 84.30000, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 251.30000, 84.00000, 1002.23999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3077, 258.89999, 83.70000, 1000.60004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 254.30000, 84.20000, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 252.30000, 84.20000, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1886, 251.10001, 91.60000, 1005.10004,   20.00000, 0.00000, 50.00000);
	CreateDynamicObject(1569, 227.10001, 69.80000, 1004.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2949, 248.00000, 86.10000, 1002.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3089, 248.00900, 86.08000, 1003.90002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19302, 266.31000, 76.71000, 1001.28998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 266.31000, 81.20000, 1001.28998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 266.31000, 85.71000, 1001.28998,   0.00000, 0.00000, 90.00000);

	//negocio: mecánico
	new g_medium;
	g_medium = CreateObject(19377, 1517.22485, -1643.66882, 1373.43250,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0); //piso
	g_medium = CreateObject(19377, 1507.61499, -1643.66882, 1373.41858,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0); //piso
	g_medium = CreateObject(19377, 1507.61499, -1654.15845, 1373.41858,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0); //piso
	g_medium = CreateObject(19377, 1517.22485, -1654.12903, 1373.41858,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0); //piso
	g_medium = CreateObject(19377, 1517.22485, -1633.16895, 1373.41858,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0); //piso
	g_medium = CreateObject(19377, 1507.61499, -1633.16895, 1373.41858,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0); //piso
	g_medium = CreateDynamicObject(19377, 1507.60413, -1643.66882, 1377.00928,   0.00000, 90.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0); //techo
	g_medium = CreateDynamicObject(19377, 1507.61499, -1633.16895, 1377.00928,   0.00000, 90.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0); //techo
	g_medium = CreateDynamicObject(19377, 1517.22485, -1633.16895, 1377.00928,   0.00000, 90.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0); //techo
	g_medium = CreateDynamicObject(19377, 1517.22485, -1643.66882, 1377.00928,   0.00000, 90.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0); //techo
	g_medium = CreateDynamicObject(19377, 1517.22485, -1654.14929, 1377.00928,   0.00000, 90.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0); //techo
	g_medium = CreateDynamicObject(19377, 1507.60413, -1654.16846, 1377.00928,   0.00000, 90.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0); //techo
	g_medium = CreateDynamicObject(19451, 1517.27148, -1635.28845, 1375.23486,   0.00000, 0.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1522.03223, -1643.23779, 1375.23486,   0.00000, 0.00000, 0.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1522.02966, -1633.73523, 1375.23486,   0.00000, 0.00000, 0.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1507.66162, -1635.28845, 1375.23486,   0.00000, 0.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1503.10376, -1633.73523, 1375.23486,   0.00000, 0.00000, 0.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1503.10901, -1643.23779, 1375.23486,   0.00000, 0.00000, 0.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1503.11829, -1652.85767, 1375.23486,   0.00000, 0.00000, 0.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1507.66162, -1657.47839, 1375.23486,   0.00000, 0.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1517.27148, -1657.46191, 1375.23486,   0.00000, 0.00000, 90.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1512.45605, -1654.06628, 1375.23486,   0.00000, 0.00000, 0.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	g_medium = CreateDynamicObject(19451, 1522.03296, -1652.85767, 1375.23486,   0.00000, 0.00000, 0.00000, -1, 34);
	SetDynamicObjectMaterial(g_medium, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0); //pared
	CreateDynamicObject(9093, 1512.13489, -1635.37830, 1375.19434,   0.00000, 0.00000, 90.00000, -1, 34);
	CreateDynamicObject(19872, 1507.78271, -1653.38721, 1371.62915,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19872, 1517.32910, -1653.38721, 1371.62915,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19815, 1503.20557, -1654.42236, 1375.49634,   0.00000, 0.00000, 90.00000, -1, 34);
	CreateDynamicObject(19929, 1503.56934, -1656.06006, 1373.47913,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19929, 1503.56775, -1653.20117, 1373.47766,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19929, 1521.59644, -1656.06006, 1373.47766,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(19929, 1521.60132, -1653.20117, 1373.47766,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(19815, 1521.95813, -1654.57263, 1375.49634,   0.00000, 0.00000, -90.00000, -1, 34);
	CreateDynamicObject(19899, 1513.03003, -1653.17578, 1373.49036,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19899, 1511.88000, -1651.35815, 1373.49036,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(2475, 1512.31396, -1654.59778, 1374.07483,   0.00000, 0.00000, -90.00000, -1, 34);
	CreateDynamicObject(2475, 1517.55518, -1657.30579, 1374.07483,   0.00000, 0.00000, -180.00000, -1, 34);
	CreateDynamicObject(1348, 1521.45313, -1650.68005, 1374.19824,   0.00000, 0.00000, 90.00000, -1, 34);
	CreateDynamicObject(1348, 1511.42834, -1656.87793, 1374.19824,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19903, 1505.33643, -1656.99194, 1373.48926,   0.00000, 0.00000, 90.00000, -1, 34);
	CreateDynamicObject(19903, 1514.83728, -1656.99194, 1373.48926,   0.00000, 0.00000, 90.00000, -1, 34);
	CreateDynamicObject(2959, 1507.60486, -1635.30737, 1373.48694,   0.00000, 0.00000, 90.00000, -1, 34);
	CreateDynamicObject(2626, 1504.86072, -1636.36401, 1373.99768,   0.00000, 0.00000, 90.00000, -1, 34);
	CreateDynamicObject(2872, 1520.55139, -1635.87390, 1373.48242,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(2961, 1516.56030, -1635.39465, 1374.80273,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19898, 1511.51294, -1640.92358, 1373.51965,   0.00000, 0.00000, -114.24000, -1, 34);
	CreateDynamicObject(19898, 1516.52014, -1653.54272, 1373.51965,   0.00000, 0.00000, -114.24000, -1, 34);
	CreateDynamicObject(19898, 1508.04663, -1650.96960, 1373.51965,   0.00000, 0.00000, -210.47992, -1, 34);
	CreateDynamicObject(2690, 1508.05054, -1635.43958, 1374.87085,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(1738, 1503.43140, -1640.89819, 1374.07349,   0.00000, 0.00000, 90.00000, -1, 34);
	CreateDynamicObject(18634, 1517.48413, -1657.01746, 1374.21680,   0.00000, 90.00000, 88.31389, -1, 34);
	CreateDynamicObject(18634, 1512.07776, -1654.81470, 1374.21680,   0.00000, 90.00000, -9.24611, -1, 34);
	CreateDynamicObject(19917, 1503.63989, -1652.47083, 1374.37842,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19917, 1521.44434, -1656.53223, 1374.37842,   0.00000, 0.00000, -7.80000, -1, 34);
	CreateDynamicObject(19921, 1511.58606, -1651.63831, 1374.84277,   0.00000, 0.00000, -86.88004, -1, 34);
	CreateDynamicObject(19627, 1521.50916, -1652.36780, 1374.41553,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(1327, 1504.20166, -1646.57593, 1373.48804,   0.00000, 90.00000, 0.00000, -1, 34);
	CreateDynamicObject(1327, 1504.40625, -1648.39856, 1373.48804,   0.00000, 90.00000, 0.00000, -1, 34);
	CreateDynamicObject(1327, 1504.18005, -1647.57910, 1374.13318,   0.00000, 90.00000, 0.00000, -1, 34);
	CreateDynamicObject(2290, 1521.30249, -1640.58740, 1373.50232,   0.00000, 0.00000, -90.00000, -1, 34);
	CreateDynamicObject(2255, 1511.88867, -1653.39575, 1374.56750,   0.00000, 0.00000, -90.00000, -1, 34);
	CreateDynamicObject(2241, 1504.89063, -1637.74915, 1373.99133,   0.00000, 0.00000, -123.95998, -1, 34);
	CreateDynamicObject(1083, 1521.89124, -1645.61841, 1375.77637,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(1084, 1521.88416, -1647.08667, 1374.39319,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(1082, 1521.88586, -1647.01563, 1375.77637,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(1081, 1521.87146, -1648.47632, 1375.77637,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(1080, 1521.87439, -1648.46667, 1374.39319,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(1079, 1521.87439, -1645.68262, 1374.39319,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(19900, 1513.23193, -1650.69153, 1373.48682,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(19621, 1513.39990, -1650.76245, 1374.45825,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(1754, 1519.24561, -1635.97998, 1373.50232,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(1073, 1521.89124, -1644.20496, 1374.39319,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(1085, 1521.89124, -1644.20496, 1375.77637,   0.00000, 0.00000, 180.00000, -1, 34);
	CreateDynamicObject(2614, 1518.29456, -1635.41968, 1375.92676,   0.00000, 0.00000, 0.00000, -1, 34);
	CreateDynamicObject(2290, 1521.30249, -1637.19604, 1373.50232,   0.00000, 0.00000, -90.00000, -1, 34);
	CreateDynamicObject(1327, 1504.22327, -1644.62915, 1373.48804,   0.00000, 90.00000, -21.90001, -1, 34);
	CreateDynamicObject(1327, 1504.09167, -1645.47937, 1374.13318,   0.00000, 90.00000, -42.66000, -1, 34);

	//negocio: fabrica de drogas (163 objetos)
	CreateObject(19552, -2167.30981, -238.97917, 543.70978,   0.00000, 0.00000, 0.00000);
	CreateObject(2633, -2166.76416, -239.20621, 546.24670,   0.00000, 0.00000, 0.00000);
	CreateObject(2633, -2171.03027, -239.20621, 546.24670,   0.00000, 0.00000, 0.00000);
	CreateObject(2633, -2183.82861, -239.20621, 546.24670,   0.00000, 0.00000, 0.00000);
	CreateObject(2633, -2175.29639, -239.20621, 546.24670,   0.00000, 0.00000, 0.00000);
	CreateObject(2633, -2179.56250, -239.20621, 546.24670,   0.00000, 0.00000, 0.00000);
	CreateObject(2633, -2188.09448, -239.20621, 546.24670,   0.00000, 0.00000, 0.00000);
	CreateObject(2633, -2162.51709, -239.20621, 546.24670,   0.00000, 0.00000, 0.00000);
	CreateObject(2633, -2158.30811, -239.20621, 546.24670,   0.00000, 0.00000, 0.00000);
	CreateObject(11233, -2164.45313, -255.39059, 546.34351,   0.00000, 0.00000, 0.00000);
	CreateObject(11085, -2164.46143, -237.64322, 549.62048,   0.00000, 0.00000, 0.00000);
	CreateObject(11234, -2180.45361, -251.46700, 546.21161,   0.00000, 0.00000, 0.00000);
	CreateObject(3066, -2178.64160, -250.81821, 544.49219,   0.00000, 0.00000, -90.00000);
	CreateObject(11087, -2143.22656, -261.24219, 546.31329,   0.00000, 0.00000, 0.00000);
	CreateObject(11090, -2158.82031, -266.23441, 544.21619,   0.00000, 0.00000, 273.51660);
	CreateObject(11236, -2164.46777, -255.40410, 546.34460,   0.00000, 0.00000, 0.00000);
	CreateObject(11235, -2180.45313, -261.28909, 546.21130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11007, -2171.67627, -270.29626, 42.88787,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(11007, -2164.45508, -248.02699, 548.99652,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(11089, -2185.52344, -263.92969, 546.98199,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(11089, -2137.08691, -263.93359, 546.98199,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19858, -2138.92603, -253.06970, 544.99402,   0.00000, 0.00000, 270.00000, -1, 9);
	CreateDynamicObject(19860, -2163.56812, -225.79730, 544.87280,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19393, -2185.20313, -223.91560, 545.48877,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(1499, -2185.22559, -223.14191, 543.73761,   0.00000, 0.00000, -90.00000, -1, 9);
	CreateDynamicObject(19364, -2185.20117, -221.45979, 545.48480,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19364, -2183.68384, -222.21700, 545.48480,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19364, -2180.47388, -222.21700, 545.48480,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19456, -2181.13965, -220.69540, 545.48480,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19393, -2185.20313, -219.08859, 545.48877,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19364, -2185.20117, -216.59779, 545.48480,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19364, -2181.12305, -216.60747, 545.48480,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(1499, -2185.22559, -218.31190, 543.73761,   0.00000, 0.00000, -90.00000, -1, 9);
	CreateDynamicObject(19393, -2188.42651, -214.89850, 545.48480,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19456, -2182.02856, -214.89850, 545.48480,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(1499, -2189.20166, -214.89850, 543.73761,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19456, -2181.13965, -220.69540, 548.98199,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19364, -2181.13232, -216.55214, 548.98199,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19456, -2185.42871, -214.89850, 548.98199,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19364, -2185.21826, -216.60831, 548.98199,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19456, -2185.20117, -220.69540, 548.98199,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(11086, -2164.07959, -237.24969, 551.63751,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(11089, -2191.89136, -246.81371, 546.98199,   0.00000, 0.00000, -90.00000, -1, 9);
	CreateDynamicObject(931, -2158.48804, -239.32620, 544.78418,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(931, -2162.54492, -239.32620, 544.78418,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(931, -2166.79297, -239.32620, 544.78418,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(931, -2170.99194, -239.32620, 544.78418,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(931, -2175.31787, -239.32620, 544.78418,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(931, -2179.50000, -239.32620, 544.78418,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(931, -2183.92798, -239.32620, 544.78418,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(931, -2189.11548, -236.44769, 544.78418,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(931, -2189.11548, -233.24969, 544.78418,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(941, -2161.71582, -233.25200, 544.21350,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(941, -2166.42358, -233.25020, 544.21350,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(941, -2171.16162, -233.25020, 544.21350,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(941, -2176.12354, -233.25020, 544.21350,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(941, -2181.46167, -233.25020, 544.21350,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(11700, -2159.01147, -267.71939, 543.73798,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(14467, -2141.66382, -238.04140, 546.44092,   0.00000, 0.00000, 270.00000, -1, 9);
	CreateDynamicObject(3761, -2139.78662, -229.43900, 545.80182,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(1449, -2162.53662, -254.84151, 544.34290,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(19924, -2155.36499, -266.02219, 548.65161,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2960, -2155.22070, -266.03561, 550.85321,   0.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(2960, -2155.36841, -266.16660, 550.85321,   0.00000, 90.00000, 270.00000, -1, 9);
	CreateDynamicObject(19924, -2158.91504, -266.02219, 548.65161,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2960, -2158.93335, -266.16660, 550.85321,   0.00000, 90.00000, 270.00000, -1, 9);
	CreateDynamicObject(2960, -2158.78564, -266.03561, 550.85321,   0.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(19924, -2162.16992, -266.02219, 548.65161,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2960, -2162.18823, -266.16660, 550.85321,   0.00000, 90.00000, 270.00000, -1, 9);
	CreateDynamicObject(2960, -2162.04053, -266.03561, 550.85321,   0.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(1447, -2169.88452, -243.33530, 545.17352,   0.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(1447, -2168.48462, -242.02730, 545.17352,   0.00000, 90.00000, 90.00000, -1, 9);
	CreateDynamicObject(1447, -2172.74463, -242.01930, 545.17352,   0.00000, 90.00000, 90.00000, -1, 9);
	CreateDynamicObject(1447, -2174.08447, -243.33530, 545.17352,   0.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(1447, -2178.38745, -243.32500, 545.17352,   0.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(1447, -2182.66748, -243.32500, 545.17352,   0.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(1447, -2177.12964, -242.00130, 545.17352,   0.00000, 90.00000, 90.00000, -1, 9);
	CreateDynamicObject(1447, -2181.35352, -242.00130, 545.17352,   0.00000, 90.00000, 90.00000, -1, 9);
	CreateDynamicObject(2603, -2170.33325, -241.49440, 544.19421,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(2603, -2174.68921, -241.49440, 544.19421,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(2603, -2178.97925, -241.49440, 544.19421,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(2603, -2183.46729, -241.49440, 544.19421,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(931, -2181.68359, -227.04201, 544.78418,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2530, -2160.07227, -226.53940, 543.73602,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2530, -2159.08228, -226.53940, 543.73602,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2530, -2158.09229, -226.53940, 543.73602,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2530, -2157.10229, -226.53940, 543.73602,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19375, -2181.07495, -210.01910, 543.74292,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19375, -2190.08398, -210.01910, 543.74292,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19375, -2185.65845, -205.11301, 543.74292,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19393, -2185.85132, -206.75560, 545.48230,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19364, -2190.58301, -208.30099, 545.48230,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19364, -2187.36890, -208.30099, 545.48230,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19305, -2185.77368, -207.92300, 545.17609,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(1723, -2189.54590, -212.48740, 543.76288,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(1724, -2188.73389, -209.50760, 543.74298,   0.00000, 0.00000, 30.67370, -1, 9);
	CreateDynamicObject(631, -2189.27563, -209.36520, 544.66412,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2267, -2189.97290, -211.46500, 545.74048,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(2605, -2183.81250, -209.30980, 544.13739,   0.00000, 0.00000, 146.01170, -1, 9);
	CreateDynamicObject(1720, -2183.06250, -208.38850, 543.74359,   0.00000, 0.00000, 324.78741, -1, 9);
	CreateDynamicObject(2069, -2182.59863, -209.85640, 543.79279,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(1829, -2181.89600, -205.64780, 544.19397,   0.00000, 0.00000, -90.00000, -1, 9);
	CreateDynamicObject(19166, -2181.19043, -211.32401, 545.52881,   0.00000, 270.00000, 0.00000, -1, 9);
	CreateDynamicObject(362, -2181.42529, -210.24319, 546.61200,   0.00000, 30.00000, 282.88531, -1, 9);
	CreateDynamicObject(631, -2181.79541, -214.27589, 544.64410,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(1723, -2182.95044, -214.30640, 543.74268,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(19456, -2190.48438, -206.81360, 546.89478,   180.00000, 90.00000, -90.00000, -1, 9);
	CreateDynamicObject(2737, -2189.92798, -206.52890, 545.36438,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(970, -2187.91406, -208.30580, 547.65051,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(970, -2185.85010, -206.24890, 547.65051,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19375, -2185.64136, -205.10265, 554.09729,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19375, -2181.07275, -209.99922, 554.21619,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19375, -2190.04590, -209.97742, 554.07343,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2525, -2182.23291, -222.81630, 543.73792,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2524, -2184.23975, -222.81509, 543.73792,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2475, -2184.62793, -215.08080, 543.73590,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2475, -2183.13696, -215.08080, 543.73590,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2475, -2181.65796, -215.08080, 543.73590,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2475, -2181.26831, -222.06059, 543.73749,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(2475, -2182.71338, -222.06059, 543.73749,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(2475, -2184.15845, -222.06059, 543.73749,   0.00000, 0.00000, 180.00000, -1, 9);
	CreateDynamicObject(1441, -2141.05396, -241.52283, 544.34174,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19911, -2138.92920, -247.38260, 543.12109,   90.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(970, -2187.91406, -208.30580, 548.61780,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(970, -2185.85010, -206.24890, 548.61780,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19364, -2183.68384, -222.21700, 548.98199,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19364, -2180.47388, -222.21700, 548.98199,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19456, -2185.42871, -214.89850, 552.47852,   0.00000, 0.00000, 90.00000, -1, 9);
	CreateDynamicObject(19364, -2185.20117, -216.59779, 552.47852,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19456, -2185.20117, -220.69540, 552.47852,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19303, -2186.61523, -206.17957, 544.98022,   0.00000, 0.00000, 10.89746, -1, 9);
	CreateDynamicObject(19376, -2190.57373, -233.22990, 550.80573,   90.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2190.57373, -247.99590, 550.80573,   90.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2190.57373, -263.08289, 550.80573,   90.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2171.44263, -270.44009, 549.67767,   90.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2160.94263, -270.44009, 549.67767,   90.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2150.50952, -270.44009, 549.67767,   90.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2140.00854, -270.44009, 549.67767,   90.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2138.33594, -262.29001, 549.67767,   90.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2138.33594, -247.70399, 549.67767,   90.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2138.33594, -233.67900, 549.67767,   90.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2148.81470, -225.63350, 549.67767,   90.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2159.28271, -225.60941, 549.67767,   90.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2169.78369, -225.60941, 549.67767,   90.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(19376, -2180.25195, -225.63345, 549.67767,   90.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(935, -2155.89917, -226.83990, 544.29669,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(11727, -2162.76855, -226.18369, 547.74554,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2635, -2146.86304, -230.84851, 544.13861,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2120, -2148.12109, -229.62958, 544.38269,   0.00000, 0.00000, 148.46973, -1, 9);
	CreateDynamicObject(2079, -2144.71875, -230.93742, 544.38269,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2079, -2145.48218, -232.50783, 544.38269,   0.00000, 0.00000, 323.68991, -1, 9);
	CreateDynamicObject(2079, -2145.07178, -229.27850, 544.38269,   0.00000, 0.00000, 40.12595, -1, 9);
	CreateDynamicObject(935, -2188.96338, -239.47145, 544.31158,   0.00000, 0.00000, 349.32422, -1, 9);
	CreateDynamicObject(935, -2189.26367, -238.37958, 544.31158,   0.00000, 0.00000, 35.83215, -1, 9);
	CreateDynamicObject(16779, -2185.18237, -211.95724, 547.93323,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19305, -2185.92578, -207.92300, 545.17609,   0.00000, 0.00000, 270.00000, -1, 9);
	CreateDynamicObject(3092, -2188.04956, -206.65820, 547.16321,   90.00000, 90.00000, 40.12590, -1, 9);
	CreateDynamicObject(2073, -2185.18799, -211.96941, 547.61951,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(2074, -2187.81519, -206.69740, 546.58521,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(19379, -2184.93359, -210.02090, 543.64471,   0.00000, 90.00000, 0.00000, -1, 9);
	CreateDynamicObject(18716, -2162.11279, -266.54102, 543.60400,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(18716, -2158.82690, -266.44354, 543.60382,   0.00000, 0.00000, 0.00000, -1, 9);
	CreateDynamicObject(18716, -2155.16846, -266.23203, 543.60352,   0.00000, 0.00000, 0.00000, -1, 9);

	//fix negocios
	CreateDynamicObject(19859, 219.03239, -97.79388, 1005.48975,   0.00000, 0.00000, -90.00000); // binco
	CreateDynamicObject(1498, 213.85040, -39.89032, 1001.00452,   0.00000, 0.00000, 0.00000); //sub urban
	CreateDynamicObject(3089, 201.22789, -130.50816, 1003.70264,   0.00000, 0.00000, 0.00000); //pro laps
	CreateDynamicObject(19859, 501.19180, -67.27486, 999.00745,   0.00000, 0.00000, 0.00000); //bar

	//puerto interior zenon city:
	CreateObject(16150, 984.70001, -1941.40002, 2834.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10444, 977.90002, -1924.40002, 2835.10010,   0.00000, 0.00000, 0.75000);
	CreateDynamicObject(1649, 982.59998, -1937.90002, 2835.39990,   270.00000, 180.00000, 180.00000);
	CreateDynamicObject(1649, 985.29999, -1937.40002, 2833.80005,   0.00000, 0.00000, 91.25000);
	CreateDynamicObject(1649, 983.09998, -1939.59998, 2833.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 985.29999, -1937.40002, 2833.80005,   0.00000, 0.00000, 91.25000);
	CreateDynamicObject(1649, 983.09998, -1939.59998, 2833.80005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 983.09998, -1939.59998, 2833.80005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1649, 985.29999, -1937.40002, 2833.80005,   0.00000, 0.00000, 271.25000);
	CreateDynamicObject(1649, 985.29999, -1937.40002, 2833.80005,   0.00000, 0.00000, 271.23999);
	CreateDynamicObject(10444, 977.90002, -1924.40002, 2835.10010,   0.00000, 0.00000, 0.75000);
	CreateDynamicObject(10444, 977.90002, -1924.40002, 2835.30005,   359.25000, 180.00000, 180.75000);
	CreateDynamicObject(10444, 977.90002, -1924.40002, 2835.30005,   359.25000, 179.99001, 180.74001);
	CreateDynamicObject(1649, 983.09998, -1939.59998, 2833.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 983.09998, -1934.69995, 2835.39990,   270.00000, 179.99001, 179.99001);
	CreateDynamicObject(1649, 982.59998, -1937.90002, 2835.39990,   270.00000, 179.99001, 179.99001);
	CreateDynamicObject(1649, 982.59998, -1937.90002, 2835.39990,   90.00000, 184.73000, 175.27000);
	CreateDynamicObject(1649, 982.59998, -1937.90002, 2835.39990,   90.00000, 184.72000, 175.27000);
	CreateDynamicObject(1649, 983.09998, -1934.69995, 2835.39990,   270.00000, 179.99001, 179.99001);
	CreateDynamicObject(1649, 983.09998, -1934.69995, 2835.39990,   90.00000, 173.64000, 186.36000);
	CreateDynamicObject(1649, 983.09998, -1934.69995, 2835.39990,   90.00000, 173.64000, 186.35001);
	CreateDynamicObject(902, 982.29999, -1937.00000, 2834.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(953, 983.59998, -1936.09998, 2834.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(953, 984.70001, -1936.09998, 2834.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1461, 986.00000, -1935.69995, 2834.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1461, 986.59998, -1935.69995, 2834.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1461, 987.20001, -1935.69995, 2834.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1461, 987.79999, -1935.69995, 2834.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1599, 981.79999, -1938.90002, 2834.60010,   0.00000, 0.00000, 334.00000);
	CreateDynamicObject(1599, 983.59998, -1938.00000, 2834.39990,   0.00000, 0.00000, 250.00000);
	CreateDynamicObject(1600, 984.40002, -1937.30005, 2834.39990,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(2782, 984.79999, -1938.90002, 2834.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2406, 981.00000, -1944.00000, 2835.30005,   0.00000, 0.00000, 89.50000);
	CreateDynamicObject(2406, 981.00000, -1940.09998, 2835.30005,   0.00000, 0.00000, 89.49000);
	CreateDynamicObject(2405, 981.00000, -1943.40002, 2835.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2405, 981.00000, -1940.69995, 2835.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2404, 981.09998, -1942.80005, 2835.30005,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(2404, 981.09998, -1941.30005, 2835.30005,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(2410, 981.00000, -1942.09998, 2835.30005,   0.01000, 88.00000, 359.75000);
	CreateDynamicObject(1649, 983.20001, -1950.50000, 2834.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1649, 985.29999, -1952.69995, 2834.30005,   0.00000, 0.00000, 87.99000);
	CreateDynamicObject(1649, 985.29999, -1952.69995, 2834.30005,   0.00000, 0.00000, 87.99000);
	CreateDynamicObject(1649, 983.20001, -1950.50000, 2834.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1649, 983.20001, -1950.50000, 2834.30005,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(1649, 983.20001, -1950.50000, 2834.30005,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(1649, 985.29999, -1952.69995, 2834.30005,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(1649, 985.29999, -1952.69995, 2834.30005,   0.00000, 0.00000, 267.98001);
	CreateDynamicObject(10444, 977.90002, -1965.59998, 2835.80005,   0.00000, 0.00000, 359.25000);
	CreateDynamicObject(10444, 977.90002, -1965.59998, 2835.80005,   0.00000, 180.00000, 179.24001);
	CreateDynamicObject(10444, 977.90002, -1965.59998, 2835.80005,   0.00000, 179.99001, 179.24001);
	CreateDynamicObject(1604, 983.20001, -1938.80005, 2834.60010,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1603, 985.00000, -1936.40002, 2835.19995,   0.00000, 0.00000, 14.00000);
	CreateDynamicObject(1604, 983.90002, -1937.09998, 2834.69995,   0.00000, 0.00000, 166.00000);
	CreateDynamicObject(1649, 982.59998, -1952.69995, 2835.89990,   270.25000, 360.00000, 90.24000);
	CreateDynamicObject(1610, 981.59998, -1954.00000, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1610, 984.90002, -1954.00000, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1610, 981.90002, -1951.00000, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1610, 984.50000, -1952.09998, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1601, 984.40002, -1953.19995, 2835.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1602, 984.90002, -1953.69995, 2835.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1605, 983.29999, -1953.50000, 2835.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1606, 982.29999, -1953.90002, 2835.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(902, 982.59998, -1953.59998, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 987.09998, -1942.00000, 2835.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 987.20001, -1946.00000, 2835.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 987.09998, -1950.59998, 2835.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1885, 981.29999, -1945.50000, 2834.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1885, 981.50000, -1948.19995, 2834.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2433, 991.79999, -1942.09998, 2834.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2433, 989.90002, -1942.09998, 2834.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2484, 992.50000, -1942.30005, 2835.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2459, 988.00000, -1954.09998, 2834.60010,   0.00000, 0.00000, 90.25000);
	CreateDynamicObject(3004, 987.09998, -1954.59998, 2835.89990,   284.00000, 0.00000, 0.00000);
	CreateDynamicObject(2712, 993.00000, -1940.40002, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2712, 993.00000, -1940.69995, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2712, 993.00000, -1941.00000, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2712, 993.00000, -1941.30005, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2712, 993.00000, -1941.59998, 2834.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1514, 989.90002, -1942.30005, 2835.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 986.79999, -1954.59998, 2835.89990,   284.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 986.50000, -1954.59998, 2835.89990,   284.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 986.20001, -1954.59998, 2835.89990,   284.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 985.90002, -1954.59998, 2835.89990,   284.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 985.59998, -1954.59998, 2835.89990,   284.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 988.40002, -1951.80005, 2836.10010,   274.00000, 0.00000, 100.00000);
	CreateDynamicObject(3004, 988.40002, -1951.30005, 2836.10010,   273.98999, 0.00000, 100.00000);
	CreateDynamicObject(3004, 988.40002, -1950.90002, 2836.10010,   273.98999, 0.00000, 100.00000);
	CreateDynamicObject(3004, 988.40002, -1950.59998, 2836.10010,   273.98999, 0.00000, 100.00000);
	CreateDynamicObject(3004, 988.40002, -1950.40002, 2836.10010,   273.98999, 0.00000, 100.00000);
	CreateDynamicObject(3004, 988.40002, -1951.50000, 2836.10010,   273.98999, 0.00000, 100.00000);
	CreateDynamicObject(1643, 987.79999, -1953.40002, 2836.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1642, 987.90002, -1953.40002, 2835.19995,   0.00000, 0.00000, 2.25000);
	CreateDynamicObject(1643, 987.90002, -1953.50000, 2835.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1641, 987.90002, -1953.30005, 2835.39990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1640, 987.79999, -1953.19995, 2835.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 990.79999, -1942.40002, 2835.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2118, 983.90002, -1943.80005, 2834.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1892, 981.09998, -1946.40002, 2834.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 990.90002, -1947.50000, 2834.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1704, 992.79999, -1947.50000, 2834.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1504, 980.79999, -1947.69995, 2834.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2954, 988.40002, -1937.19995, 2834.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2954, 988.40002, -1938.30005, 2834.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2954, 993.40002, -1945.80005, 2834.00000,   0.00000, 0.00000, 180.49001);
	CreateDynamicObject(14705, 983.90002, -1943.80005, 2835.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 983.90002, -1943.09998, 2834.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2700, 988.90002, -1945.50000, 2836.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2700, 985.59998, -1935.90002, 2836.30005,   0.00000, 0.00000, 270.00000);

	// LSPD, puertas de botón en movimiento
	lspdBoton[0] = CreateButton(1564.7094, -1686.3870, 4991.0264, -90.00000); //derecha
	lspdBoton[1] = CreateButton(1564.7924, -1688.6149, 4991.0264, 90.00000);
	lspdPuerta[0] = CreateDynamicObject(1495, 1564.76685, -1688.26770, 4989.52588,   0.00000, 0.00000, 90.00000);
	lspdBoton[2] = CreateButton(1564.7831, -1664.2659, 4991.0264, 90.00000); //izquierda
	lspdBoton[3] = CreateButton(1564.6952, -1666.5781, 4991.0264, -90.00000);
	lspdPuerta[1] = CreateDynamicObject(1495, 1564.73792, -1664.65930, 4989.52588,   0.00000, 0.00000, -90.00000);

	// Puertas para ir a la planta de arriba.
	LSPD_NEW1 = CreateDynamicObject(980, 1556.67175, -1698.34778, 4991.5, 0.00000, 0.00000, 270.00000);
	LSPD_NEW2 = CreateDynamicObject(980, 1556.77905, -1636.08850, 4991.5, 0.00000, 0.00000, 270.00000);
	// Puertas Sur de LSPD - Planta Baja. X4
	LSPD_NEW3 = CreateDynamicObject(1495, 1562.7060, -1659.93030, 4989.41101, 0.00000, 0.00000, -90.0); // Taquillas LSPD.
	LSPD_NEW4 = CreateDynamicObject(1495, 1570.5215, -1643.77222, 4989.41101, 0.00000, 0.00000, 90.00); // Sala de Camaras.
	LSPD_NEW5 = CreateDynamicObject(1495, 1570.5500, -1649.62769, 4989.41101, 0.00000, 0.00000, 90.00); // Sospechosos (Cops).
	LSPD_NEW6 = CreateDynamicObject(1495, 1570.51929, -1661.46106, 4989.41101,0.00000, 0.00000, 90.00); // Sospechosos (Robs).
	LSPD_NEW7 = CreateDynamicObject(1557, 1569.59998, -1699.50000, 4989.57996, 0.00000, 0.0000, 90.00); // Puerta A Sala Reuniones.
	LSPD_NEW8 = CreateDynamicObject(1557, 1569.59998, -1696.50000, 4989.57996, 0.00000, 0.0000, -90.0); // Puerta B Sala Reuniones.

	//portones pay'n'spray y garajes bomba - 23objs
	CreateDynamicObject(3055, -2716.31543, 217.10870, 4.81060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, -1936.04590, 238.76511, 35.29234,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -1904.38037, 277.68741, 44.22923,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 488.26205, -1735.09851, 12.26543,   0.00000, 0.00000, -8.82009);
	CreateDynamicObject(3037, 2071.53345, -1831.41931, 14.71101,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3037, 1024.65637, -1029.40503, 33.17221,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 719.99597, -462.45871, 16.18870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 1968.35901, 2162.46069, 12.03571,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3037, 2386.58740, 1043.47095, 11.59417,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3055, -99.86170, 1111.43054, 21.92550,   0.00000, 0.00000, 180.06000);
	CreateDynamicObject(3055, -2425.47705, 1028.07092, 54.36167,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3037, 2004.33838, 2317.83545, 10.89087,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 2393.64673, 1483.40466, 13.03957,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -1420.48181, 2591.06958, 58.05499,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3055, 2644.70435, -2039.17969, 13.13976,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -1904.38037, 277.68741, 39.18500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3037, 1043.12134, -1026.01782, 33.16642,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, -99.86170, 1111.43054, 16.88100,   0.00000, 0.00000, 180.06000);
	CreateDynamicObject(3055, -2425.47705, 1028.07092, 49.32000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3037, 2004.76624, 2303.63574, 10.89087,   0.00000, 0.00000, 88.97997);
	CreateDynamicObject(3055, 2393.64673, 1483.40466, 7.99493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 1843.35730, -1855.73181, 13.08770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, -1420.48181, 2591.06958, 53.01722,   0.00000, 0.00000, 180.00000);

}

mapeos_total()
{
	// fabrica interior
	CreateDynamicObject(14784, 1422.40173, 201.43672, 1009.41412,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1966, 1451.22534, 234.65698, 1002.84894,   0.00000, 0.00000, 89.18275);
	CreateDynamicObject(16773, 1433.85156, 238.67192, 1001.85101,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19799, 1451.06580, 176.58978, 1002.82562,   0.00000, 0.00000, 90.34000);
	CreateDynamicObject(1966, 1451.04419, 175.47502, 1002.84894,   0.00000, 0.00000, 89.18275);
	CreateDynamicObject(19913, 1433.58838, 200.51166, 999.90320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19913, 1383.67236, 200.46883, 999.90320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18260, 1398.89099, 164.82605, 1002.96161,   0.00000, 0.00000, 356.38669);
	CreateDynamicObject(18260, 1396.15625, 167.89290, 1002.96161,   0.00000, 0.00000, 237.84644);
	CreateDynamicObject(3577, 1403.05359, 179.18536, 1002.14178,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3576, 1397.60645, 178.56587, 1002.88171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1414.32483, 164.54097, 1002.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1429.37634, 165.60272, 1002.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1403.82080, 202.04460, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1413.45117, 202.04460, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1394.19202, 202.04460, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1394.19202, 202.04460, 1004.37170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1403.82080, 202.04460, 1004.37170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1413.45117, 202.04460, 1004.37170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1423.01965, 202.04460, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1432.59167, 202.04460, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1442.29102, 202.04460, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1451.81042, 202.04460, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1423.01965, 202.04460, 1004.37170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1432.59167, 202.04460, 1004.37170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1442.29102, 202.04460, 1004.37170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 1451.81042, 202.04460, 1004.37170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2669, 1397.04932, 185.17416, 1001.17639,   0.00000, 0.00000, 88.89130);
	CreateDynamicObject(2669, 1397.32410, 190.84790, 1001.17639,   0.00000, 0.00000, 88.89130);
	CreateDynamicObject(2669, 1402.26172, 196.22348, 1001.17639,   0.00000, 0.00000, 25.73110);
	CreateDynamicObject(3566, 1413.37939, 186.60255, 1002.30328,   0.00000, 0.00000, 269.71640);
	CreateDynamicObject(3566, 1441.04065, 194.38249, 1002.30328,   0.00000, 0.00000, 269.71640);
	CreateDynamicObject(3566, 1440.53613, 187.59171, 1002.30328,   0.00000, 0.00000, 269.71640);
	CreateDynamicObject(18260, 1428.61182, 193.50323, 1001.38617,   0.00000, 0.00000, 256.59912);
	CreateDynamicObject(1685, 1395.64685, 184.82724, 1000.64117,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1397.39636, 185.55826, 1000.64117,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1403.14807, 178.21022, 1002.92712,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1397.43469, 186.26936, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1402.00000, 8429.00000, 178.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1406.00000, 1600.00000, 176.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1397.67908, 185.95451, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1397.32397, 185.57353, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1397.53564, 185.14102, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1395.74939, 185.51260, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1395.60339, 185.13788, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1395.58813, 184.77766, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1395.59351, 184.33766, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1397.34827, 184.74057, 1001.39380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1403.21606, 178.52356, 1002.92712,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1403.20117, 177.83185, 1002.92712,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1402.19092, 178.11153, 1002.92712,   0.00000, 0.00000, 51.82732);
	CreateDynamicObject(3761, 1420.00000, 7301.00000, 173.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3761, 1394.26440, 175.13446, 1003.46436,   0.00000, 0.00000, 187.98251);
	CreateDynamicObject(931, 1421.64893, 165.51341, 1002.41473,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3576, 1407.38550, 178.65892, 1002.88171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19922, 1402.87085, 168.78345, 1001.38971,   0.00000, 0.00000, 333.63962);
	CreateDynamicObject(2043, 1403.95789, 168.32153, 1002.27606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1403.53577, 168.44733, 1002.27606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1403.05164, 168.63725, 1002.27606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1403.33557, 168.60182, 1002.27606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1403.75757, 168.47595, 1002.27606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 1401.81482, 169.36340, 1002.17902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 1402.43542, 169.26309, 1001.50702,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 1402.82556, 168.81981, 1001.50702,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 1403.33875, 168.50627, 1001.50702,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 1401.84070, 169.54004, 1001.50702,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 1403.84058, 168.17639, 1001.50702,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1400.98633, 175.81825, 1002.17645,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19922, 1400.35254, 175.07576, 1001.38971,   0.00000, 0.00000, 230.29123);
	CreateDynamicObject(2035, 1400.65967, 175.45064, 1002.17645,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1401.01343, 176.25040, 1002.17645,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 1399.78455, 174.04141, 1002.17902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14800, 1394.84717, 177.49803, 1002.08447,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1348, 1411.59326, 178.68631, 1002.11322,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1407.62549, 164.98146, 1002.10339,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11717, 1433.80212, 170.06883, 1001.38373,   0.00000, 0.00000, 178.90672);
	CreateDynamicObject(11717, 1435.62622, 172.03957, 1001.38373,   0.00000, 0.00000, 253.84344);
	CreateDynamicObject(11717, 1431.47217, 170.05273, 1001.38373,   0.00000, 0.00000, 178.90672);
	CreateDynamicObject(19922, 1432.72632, 171.99490, 1000.99078,   0.00000, 0.00000, 3.69000);
	CreateDynamicObject(2009, 1447.66663, 173.91463, 1001.39038,   0.00000, 0.00000, 267.81461);
	CreateDynamicObject(2009, 1448.57593, 171.89317, 1001.39038,   0.00000, 0.00000, 177.92366);
	CreateDynamicObject(1514, 1447.75525, 173.91960, 1002.44818,   0.00000, 0.00000, 173.45940);
	CreateDynamicObject(19920, 1448.17371, 173.93880, 1002.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19999, 1447.81067, 172.84035, 1001.39172,   0.00000, 0.00000, 174.07457);
	CreateDynamicObject(3578, 1415.76709, 181.68008, 1002.19141,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1434.86292, 179.13823, 1002.19141,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1420.88208, 194.44887, 1000.61664,   0.00000, 0.00000, 86.11314);
	CreateDynamicObject(3578, 1431.35571, 189.37111, 1000.61664,   0.00000, 0.00000, 87.95618);
	CreateDynamicObject(3578, 1438.56482, 184.26364, 1000.61664,   0.00000, 0.00000, 177.60603);

	// fabrica exterior
	CreateDynamicObject(3776, 2515.20313, -2133.25244, 21.58210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3776, 2515.65601, -2110.19019, 21.55620,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3776, 2516.06396, -2087.13013, 21.57020,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3258, 2506.56323, -2097.33105, 16.96528,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3258, 2506.09619, -2120.26001, 16.96528,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3258, 2505.88159, -2141.87476, 16.96528,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 2424.91504, -2089.17651, 18.35764,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 2505.64844, -2089.44092, 9.13623,   0.00000, 0.00000, -0.96000);
	CreateDynamicObject(967, 2425.24390, -2094.09375, 12.54170,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(966, 2424.91797, -2092.24585, 12.50700,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3877, 2424.70239, -2084.39429, 14.06247,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 2424.77563, -2092.80640, 14.10484,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18763, 2424.32520, -2084.79688, 19.27604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18763, 2424.33765, -2087.73730, 19.27604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18763, 2424.34937, -2090.62915, 19.27604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18763, 2424.38574, -2093.51001, 19.27604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2634, 2505.28394, -2085.88550, 14.00990,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(3576, 2453.59253, -2068.52051, 15.66810,   0.00000, 0.00000, 328.90741);
	CreateDynamicObject(3570, 2446.99805, -2070.56396, 15.50060,   0.00000, 0.00000, 89.09769);
	CreateDynamicObject(3570, 2446.97778, -2070.54321, 18.02023,   0.00000, 0.00000, 89.09769);
	CreateDynamicObject(3577, 2454.09253, -2068.96411, 13.37330,   0.00000, 0.00000, 270.21432);
	CreateDynamicObject(3576, 2450.11621, -2068.93799, 14.03945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2455.11182, -2069.41357, 12.75852,   0.00000, 0.00000, 356.78568);
	CreateDynamicObject(2035, 2455.03589, -2068.95337, 12.75852,   0.00000, 0.00000, 338.78812);
	CreateDynamicObject(2035, 2455.20801, -2068.92480, 12.64633,   0.00000, 0.00000, 356.78568);
	CreateDynamicObject(2035, 2454.63379, -2068.81787, 12.75852,   0.00000, 0.00000, 12.01399);
	CreateDynamicObject(3015, 2454.22656, -2059.24609, 22.30473,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 2452.85449, -2070.44434, 14.37621,   0.00000, 0.00000, 1.15668);
	CreateDynamicObject(3037, 2504.62842, -2109.07349, 14.60030,   0.00000, 0.00000, 358.87460);
	CreateDynamicObject(3037, 2504.62329, -2109.23389, 16.55623,   0.00000, 0.00000, 358.87463);
	CreateDynamicObject(3037, 2504.63916, -2132.38354, 16.45119,   0.00000, 0.00000, 358.87463);
	CreateDynamicObject(3037, 2504.65698, -2132.42676, 13.90807,   0.00000, 0.00000, 358.87463);
	CreateDynamicObject(3574, 2473.74438, -2138.98511, 12.48114,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3573, 2461.72217, -2136.73950, 14.96476,   0.00000, 0.00000, 269.77612);
	CreateDynamicObject(3574, 2452.39355, -2135.43286, 14.95340,   0.00000, 0.00000, 269.99799);
	CreateDynamicObject(3620, 2441.74707, -2133.78418, 25.83591,   0.00000, 0.00000, 91.46906);
	CreateDynamicObject(3573, 2432.29102, -2126.63940, 15.26930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2500.47388, -2103.71997, 13.23260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2500.20386, -2114.28760, 13.23260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3576, 2449.70996, -2072.18213, 14.03945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3576, 2453.03882, -2071.86206, 14.03945,   0.00000, 0.00000, 335.31873);
	CreateDynamicObject(3577, 2450.51099, -2067.83740, 14.58952,   0.00000, 0.00000, 268.13791);
	CreateDynamicObject(3578, 2500.21167, -2126.94922, 13.23260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2500.49268, -2137.68848, 13.23260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3658, 2501.63110, -2130.03369, 13.16296,   0.00000, 0.00000, 359.35342);
	CreateDynamicObject(3658, 2501.61279, -2132.51611, 13.16296,   0.00000, 0.00000, 359.35342);
	CreateDynamicObject(3658, 2501.62476, -2135.29883, 13.16296,   0.00000, 0.00000, 359.35342);
	CreateDynamicObject(3577, 2496.93481, -2134.33984, 12.54462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 2498.00781, -2135.58057, 13.35336,   0.00000, 0.00000, 1.33656);
	CreateDynamicObject(2043, 2497.11670, -2134.59570, 13.38768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 2497.48438, -2134.61987, 13.47972,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 2497.86060, -2133.87231, 13.38768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 2497.41260, -2135.19067, 13.38768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 2497.78076, -2134.64941, 13.47972,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 2496.48828, -2135.11719, 13.35336,   0.00000, 0.00000, 1.33656);
	CreateDynamicObject(2035, 2496.45068, -2133.57886, 13.38096,   0.00000, 0.00000, 310.83206);
	CreateDynamicObject(2035, 2496.73120, -2133.41675, 13.41422,   0.00000, 0.00000, 308.07315);
	CreateDynamicObject(2035, 2497.02124, -2133.31860, 13.41422,   0.00000, 0.00000, 308.07315);
	CreateDynamicObject(2035, 2496.14551, -2133.80176, 13.41422,   0.00000, 0.00000, 308.07315);
	CreateDynamicObject(3015, 2495.88745, -2135.11743, 13.35336,   0.00000, 0.00000, 1.33656);
	CreateDynamicObject(3015, 2496.18872, -2134.75854, 13.35336,   0.00000, 0.00000, 1.33656);
	CreateDynamicObject(2043, 2497.52124, -2134.04517, 13.38768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3570, 2446.87036, -2079.45557, 15.50060,   0.00000, 0.00000, 89.09769);
	CreateDynamicObject(3279, 2429.19434, -2070.58350, 12.53477,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 2429.32129, -2106.88013, 12.53477,   0.00000, 0.00000, 0.02749);
	CreateDynamicObject(19967, 2424.10864, -2092.75708, 12.54487,   0.00000, 0.00000, 269.17276);
	CreateDynamicObject(3566, 2443.39233, -2133.55518, 14.94880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3566, 2449.31226, -2102.64355, 14.94880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3566, 2440.08911, -2075.92310, 14.94880,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3566, 2453.83008, -2102.69849, 14.94880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18257, 2461.67773, -2067.16748, 12.53903,   0.00000, 0.00000, 179.22899);
	CreateDynamicObject(3799, 2457.73877, -2068.17871, 12.54055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18260, 2473.91138, -2069.32202, 14.20202,   0.00000, 0.00000, 172.40616);
	CreateDynamicObject(18257, 2506.48926, -2112.81274, 12.53835,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14800, 2504.45117, -2122.68115, 21.28430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14800, 2504.45117, -2122.68115, 21.28430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2503.08398, -2108.66724, 13.27951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2499.16479, -2110.48071, 13.27951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 2501.35034, -2108.62744, 13.27951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3631, 2495.46191, -2111.29663, 13.16032,   0.00000, 0.00000, 231.69350);
	CreateDynamicObject(3630, 2499.80688, -2106.05762, 13.96625,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18257, 2494.58203, -2127.72485, 12.59417,   0.00000, 0.00000, 245.47743);
	CreateDynamicObject(1635, 2504.73877, -2086.44312, 20.59875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1635, 2504.85254, -2097.60596, 20.59875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1635, 2504.32373, -2109.50195, 20.59875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1635, 2503.75757, -2132.73926, 20.59875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3037, 2505.20825, -2085.94507, 17.83009,   0.00000, 0.00000, 358.87463);
	CreateDynamicObject(3566, 2487.02637, -2113.69067, 14.86018,   0.00000, 0.00000, 129.00401);
	CreateDynamicObject(3578, 2490.87451, -2106.55176, 13.23260,   0.00000, 0.00000, 33.28373);
	CreateDynamicObject(3631, 2530.86108, -2072.11011, 13.05666,   0.00000, 0.00000, 29.15911);
	CreateDynamicObject(3630, 2531.61572, -2067.84985, 14.09787,   0.00000, 0.00000, 0.95172);
	CreateDynamicObject(3631, 2530.80347, -2072.13599, 14.16724,   0.00000, 0.00000, 29.15911);
	CreateDynamicObject(3631, 2530.86401, -2072.15210, 15.15188,   0.00000, 0.00000, 29.15911);
	CreateDynamicObject(1685, 2527.73462, -2070.32837, 13.11658,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3627, 2197.60181, -2223.55151, 19.35430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3627, 2461.71118, -2101.22290, 16.36340,   0.00000, 0.02000, 270.18961);
	CreateDynamicObject(3566, 2512.34888, -2070.72144, 14.86018,   0.00000, 0.00000, 105.35081);
	CreateDynamicObject(3566, 2491.35229, -2073.75854, 14.94880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3566, 2491.40308, -2080.00635, 14.94880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3570, 2473.58228, -2078.34229, 14.94880,   0.00000, 0.00000, 37.93451);
	CreateDynamicObject(18257, 2466.29541, -2070.30127, 12.53840,   0.00000, 0.00000, 111.22962);
	CreateDynamicObject(3570, 2456.18896, -2133.83740, 33.36860,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(3567, 2434.24951, -2119.28955, 13.25780,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3570, 2456.16821, -2133.82373, 33.36860,   0.00000, 180.00000, 89.00000);
	CreateDynamicObject(5262, 2460.23438, -2075.88745, 15.41915,   0.00000, 0.00000, 90.38345);
	CreateDynamicObject(3578, 2482.84277, -2113.04468, 13.23260,   0.00000, 0.00000, 44.79894);
	CreateDynamicObject(3578, 2477.03003, -2121.45313, 13.23260,   0.00000, 0.00000, 66.26060);

	// ayuntamiento exterior
	CreateDynamicObject(1566, 1525.47559, -1793.15051, 33.89389,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2773, 1531.29419, -1825.67639, 13.05024,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1527.18201, -1825.71960, 13.05024,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3806, 1533.17493, -1824.83801, 14.06846,   0.00000, 0.00000, -89.81998);
	CreateDynamicObject(1825, 1535.21606, -1830.47571, 12.51978,   0.00000, 0.00000, 40.91999);
	CreateDynamicObject(1825, 1536.46216, -1834.49829, 12.51978,   0.00000, 0.00000, -74.69999);
	CreateDynamicObject(19176, 1529.25134, -1824.57715, 14.01027,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11395, 1552.53967, -1853.48218, 18.88859,   0.00000, 0.00000, 60.00000);

	// ayuntamiento interior
	new AyuntamientoSalida;
	AyuntamientoSalida = CreateObject(19370, 1480.89709, -1763.31, 2986.5,   0.00000, 0.00000, 270.00000);
	SetObjectMaterialText(AyuntamientoSalida, "SALIDA", 0, 140, "Verdana", 150, 1, -1, 0, 1);
	CreateObject(10023, 1480.90002, -1756.00000, 2990.00000,   0.00000, 0.00000, 0.00000, 800);
	CreateObject(6866, 1500.40002, -1783.29895, 2965.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1488.90002, -1770.29895, 2981.62012,   0.00000, 0.00000, 0.00000);
	CreateObject(10023, 1480.90002, -1816.79895, 2989.50000,   0.00000, 0.00000, 180.00000);
	CreateObject(10023, 1480.90002, -1770.50000, 2989.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(14414, 1480.90002, -1831.80005, 2984.39893,   0.00000, 0.00000, 0.00000);
	CreateObject(14414, 1476.90002, -1831.80005, 2984.39893,   0.00000, 0.00000, 0.00000);
	CreateObject(14414, 1484.90002, -1831.80005, 2984.39893,   0.00000, 0.00000, 0.00000);
	CreateObject(14414, 1480.90002, -1840.71899, 2990.53394,   0.00000, 0.00000, 0.00000);
	CreateObject(14414, 1484.90002, -1840.71899, 2990.53394,   0.00000, 0.00000, 0.00000);
	CreateObject(14414, 1476.90002, -1840.71899, 2990.53394,   0.00000, 0.00000, 0.00000);
	CreateObject(18070, 1480.90002, -1799.50000, 2982.39893,   0.00000, 0.00000, 179.99400);
	CreateObject(18070, 1484.98999, -1804.19995, 2982.39502,   0.00000, 0.00000, 90.00000);
	CreateObject(18070, 1476.83398, -1804.19995, 2982.39502,   0.00000, 0.00000, 270.00000);
	CreateObject(7586, 1480.90002, -1805.00000, 2995.50000,   179.99400, 0.00000, 29.99700);
	CreateObject(12911, 1480.90002, -1754.50000, 2980.00000,   0.00000, 0.00000, 270.00000);
	CreateObject(8661, 1422.00000, -1849.00000, 2993.69897,   0.00000, 0.00000, 20.00000);
	CreateObject(14596, 1477.30005, -1854.69897, 2987.02808,   0.00000, 0.00000, 270.00000);
	CreateObject(11472, 1481.00000, -1845.54004, 2992.97900,   0.00000, 270.00000, 270.00000);
	CreateObject(11472, 1481.00000, -1848.81104, 2992.97900,   0.00000, 270.00000, 270.00000);
	CreateObject(16644, 1476.80005, -1862.30005, 2993.80005,   0.00000, 0.00000, 0.00000);
	CreateObject(4558, 1534.69995, -1776.90002, 2988.00000,   0.00000, 0.00000, 270.00000);
	CreateObject(4558, 1534.69995, -1821.71899, 2987.07007,   0.00000, 179.99400, 270.00000);
	CreateObject(4558, 1427.09900, -1820.40002, 2987.92896,   0.00000, 0.00000, 90.00000);
	CreateObject(4558, 1427.09900, -1775.59900, 2987.00000,   0.00000, 179.99400, 90.00000);
	CreateObject(17926, 1481.28003, -1844.50000, 2983.97900,   0.00000, 0.00000, 88.00000);
	CreateObject(8425, 1480.69897, -1824.30005, 2998.11011,   0.00000, 105.00000, 90.00000);
	CreateObject(10974, 1480.79895, -1786.25000, 2995.05005,   0.00000, 0.00000, 90.00000);
	CreateObject(10288, 1485.00000, -1740.90002, 2970.00000,   0.00000, 0.00000, 90.00000);
	CreateObject(9926, 1504.29895, -1825.42896, 2955.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(9926, 1457.50000, -1843.20898, 2955.00000,   0.00000, 0.00000, 179.99400);
	CreateObject(8401, 1444.69995, -1781.19995, 2996.00000,   0.00000, 179.99400, 0.00000);
	CreateObject(8401, 1516.90002, -1781.19995, 2996.00000,   0.00000, 179.99400, 0.00000);
	CreateObject(8425, 1481.40002, -1818.30005, 2996.35010,   0.00000, 180.00000, 270.00000);
	CreateObject(9623, 1480.90002, -1760.59900, 2984.50000,   0.00000, 270.00000, 90.00000);
	CreateObject(9114, 1479.59900, -1806.19897, 2980.30005,   0.00000, 0.00000, 0.00000);
	CreateObject(9114, 1475.30005, -1806.19897, 2980.30005,   0.00000, 0.00000, 0.00000);
	CreateObject(3943, 1483.59900, -1850.69995, 2992.50000,   0.00000, 0.00000, 90.00000);
	CreateObject(8401, 1516.90100, -1828.18005, 2996.01001,   0.00000, 179.99400, 0.00000);
	CreateObject(8401, 1444.69897, -1828.17896, 2996.01001,   0.00000, 179.99400, 0.00000);
	CreateObject(3406, 1464.80005, -1827.00000, 2987.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(3406, 1450.40002, -1826.90002, 2987.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(3406, 1498.19897, -1826.90002, 2987.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(3406, 1512.29895, -1826.90002, 2987.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(998, 1480.90002, -1832.00000, 2987.00000,   55.00000, 90.00000, 0.00000);
	CreateObject(998, 1480.90002, -1840.30005, 2992.80005,   54.99800, 90.00000, 0.00000);
	CreateObject(11472, 1493.00000, -1842.80005, 2992.97900,   0.00000, 270.00000, 90.00000);
	CreateObject(11472, 1493.00000, -1846.07202, 2992.97900,   0.00000, 270.00000, 90.00000);
	CreateObject(11472, 1468.45398, -1845.54004, 2992.97900,   0.00000, 270.00000, 270.00000);
	CreateObject(11472, 1468.45398, -1848.81201, 2992.97900,   0.00000, 270.00000, 270.00000);
	CreateObject(1536, 1477.40002, -1763.40002, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateObject(1536, 1480.42004, -1763.36401, 2981.69897,   0.00000, 0.00000, 180.00000);
	CreateObject(1536, 1484.40002, -1763.36401, 2981.69897,   0.00000, 0.00000, 179.99400);
	CreateObject(1536, 1481.38098, -1763.40002, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1474.82397, -1776.20398, 2983.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3660, 1486.44897, -1776.19897, 2983.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3660, 1470.55298, -1776.20398, 2983.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3660, 1490.71399, -1776.20496, 2983.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9831, 1489.19897, -1754.59900, 2979.73804,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(9831, 1473.90002, -1753.50000, 2979.73804,   6.99800, 0.00000, 0.00000);
	CreateDynamicObject(6965, 1472.90002, -1784.59900, 2975.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6965, 1488.80005, -1785.09900, 2975.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2976, 1480.90002, -1763.40002, 2984.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2888, 1473.30005, -1763.90002, 2981.39893,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(2888, 1489.09900, -1763.90002, 2981.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14855, 1449.00000, -1769.19995, 2986.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 1474.42004, -1804.23901, 2982.44897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1247, 1452.19897, -1766.50000, 2982.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1239, 1480.90002, -1797.15002, 2982.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1274, 1487.31006, -1804.19897, 2982.44897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18090, 1511.19995, -1765.00000, 2984.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7191, 1504.23401, -1849.05005, 2995.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7191, 1457.84399, -1849.05005, 2995.50000,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(7191, 1507.86902, -1842.44897, 2995.69897,   180.00000, 0.00000, 270.00000);
	CreateDynamicObject(7191, 1453.93201, -1842.44202, 2995.69897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(7191, 1465.50000, -1855.40002, 2995.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7191, 1496.90002, -1855.00000, 2995.69897,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(7191, 1481.59900, -1849.05505, 2998.44897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1490.00000, -1842.59900, 2978.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1494.40002, -1842.59900, 2978.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1491.90002, -1841.80005, 2982.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1481.69897, -1794.59900, 2982.40894,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1480.09900, -1794.50000, 2982.40894,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3659, 1486.00000, -1841.19897, 2977.39893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18066, 1480.90002, -1797.19897, 2982.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18066, 1474.55005, -1804.21899, 2982.42896,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18066, 1487.28003, -1804.19897, 2982.43896,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(18066, 1452.11902, -1766.50000, 2982.15894,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1444, 1480.92505, -1812.59900, 2982.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3462, 1492.50000, -1770.00000, 2983.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3462, 1469.30005, -1769.90002, 2983.19897,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3471, 1488.90002, -1821.30005, 2983.00000,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(3471, 1472.90002, -1821.30005, 2983.00000,   0.00000, 0.00000, 87.99500);
	CreateDynamicObject(4199, 1480.90002, -1770.19897, 2979.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1480.90002, -1799.69897, 2981.89893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1484.80005, -1804.19897, 2981.89893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2202, 1449.00000, -1763.80005, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1476.80005, -1804.19897, 2981.89893,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3462, 1492.50000, -1775.00000, 2983.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3462, 1492.50000, -1779.90002, 2983.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3462, 1469.30005, -1775.00000, 2983.19897,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(3462, 1469.30005, -1780.00000, 2983.19897,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(2190, 1479.90002, -1797.40002, 2982.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1451.50000, -1771.19897, 2982.69897,   0.00000, 0.00000, 244.00000);
	CreateDynamicObject(2596, 1450.50000, -1763.40002, 2984.69897,   0.00000, 0.00000, 324.00000);
	CreateDynamicObject(2813, 1451.69897, -1764.30005, 2982.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2827, 1449.19897, -1774.40002, 2982.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2854, 1449.59900, -1774.09900, 2982.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1469.50000, -1772.50000, 2982.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1469.50000, -1777.50000, 2982.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1469.50000, -1782.59900, 2982.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1492.30005, -1772.50000, 2982.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1492.30005, -1777.50000, 2982.39893,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1256, 1492.30005, -1782.50000, 2982.39893,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1723, 1458.30005, -1763.90002, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 1461.19897, -1763.90002, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, 1456.40002, -1816.09900, 2981.69897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1456.40002, -1811.09900, 2981.69897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1456.40002, -1806.09900, 2981.69897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2182, 1447.40002, -1807.09900, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2182, 1447.40002, -1812.09900, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2182, 1447.40002, -1817.00000, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2183, 1450.40002, -1807.19897, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2183, 1450.40002, -1812.19897, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2183, 1450.40002, -1817.30005, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2310, 1452.90002, -1804.69897, 2982.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2310, 1450.90002, -1804.69897, 2982.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2310, 1452.90002, -1804.69995, 2982.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2310, 1452.90002, -1809.69897, 2982.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2310, 1450.90002, -1809.80005, 2982.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2310, 1452.90002, -1814.80005, 2982.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2310, 1450.90002, -1814.80005, 2982.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2310, 1452.90002, -1808.40002, 2982.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2310, 1450.90002, -1808.40002, 2982.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2310, 1452.90002, -1813.40002, 2982.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2310, 1450.90002, -1813.40002, 2982.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2310, 1450.90002, -1818.50000, 2982.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2310, 1452.90002, -1818.50000, 2982.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(12842, 1511.19897, -1774.19897, 2982.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1475.30005, -1803.90002, 2982.89893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1451.80005, -1799.00000, 2982.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 1451.90002, -1794.09900, 2982.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2571, 1449.09900, -1800.59900, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2571, 1449.09900, -1795.59900, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2571, 1454.80005, -1792.59900, 2981.69897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2571, 1454.80005, -1797.59900, 2981.69897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2290, 1451.00000, -1792.19897, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 1452.90002, -1800.90002, 2981.69897,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2239, 1479.00000, -1800.40002, 2981.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2239, 1482.69897, -1800.30005, 2981.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 1512.90002, -1780.40002, 2982.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 1509.40002, -1780.40002, 2982.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 1486.19897, -1842.59900, 2976.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 1487.19897, -1842.59900, 2976.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2604, 1446.50000, -1767.90002, 2982.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1515.90002, -1822.09900, 2983.39893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1515.90002, -1816.40002, 2983.39893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14632, 1501.59900, -1830.19897, 2983.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14632, 1501.59900, -1822.40002, 2983.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14455, 1515.90002, -1810.69897, 2983.39893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14813, 1513.69897, -1801.19897, 2982.14893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3089, 1480.30005, -1849.90002, 2983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1497, 1486.09900, -1857.50000, 2992.39893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16501, 1486.00000, -1857.69897, 2994.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1476.19897, -1763.40002, 2986.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1485.59900, -1763.40002, 2986.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1476.19897, -1763.40002, 2995.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1485.59900, -1763.40002, 2995.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2994, 1469.30005, -1764.40002, 2982.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2967, 1451.09900, -1764.59900, 2982.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 1452.19897, -1766.50000, 2988.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2612, 1447.50000, -1763.40002, 2984.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14629, 1511.40002, -1777.19897, 2992.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14629, 1460.80005, -1777.19897, 2992.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14611, 1481.00000, -1805.09900, 2988.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1789, 1493.00000, -1764.09900, 2982.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1446.09900, -1821.59900, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2818, 1512.80005, -1767.69897, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2818, 1510.40002, -1767.69897, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 1483.19897, -1806.30005, 2982.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2853, 1483.69897, -1806.69897, 2982.89893,   0.00000, 0.00000, 340.00000);
	CreateDynamicObject(643, 1512.09900, -1785.69897, 2982.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(643, 1506.90002, -1783.80005, 2982.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(643, 1508.90002, -1789.69897, 2982.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, 1447.80005, -1806.19897, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1447.80005, -1811.19897, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1447.80005, -1816.09900, 2981.69897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1724, 1459.00000, -1767.30005, 2981.69897,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 1458.40002, -1768.40002, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 1461.19897, -1768.40002, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1461.80005, -1767.30005, 2981.69897,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1724, 1459.00000, -1772.00000, 2981.69897,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1723, 1461.80005, -1772.00000, 2981.69897,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1806, 1449.90002, -1766.69897, 2981.69897,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1806, 1449.80005, -1770.80005, 2981.69897,   0.00000, 0.00000, 267.99399);
	CreateDynamicObject(1810, 1513.40002, -1778.90002, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1810, 1510.90002, -1779.80005, 2981.69897,   0.00000, 0.00000, 304.00000);
	CreateDynamicObject(1810, 1513.90002, -1781.59900, 2981.69897,   0.00000, 0.00000, 225.99600);
	CreateDynamicObject(1810, 1508.09900, -1778.90002, 2981.67896,   0.00000, 0.00000, 51.99700);
	CreateDynamicObject(2784, 1452.09900, -1784.00000, 2983.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 1476.80005, -1782.50000, 2981.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 1488.59900, -1782.50000, 2981.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1515.19897, -1767.40002, 2983.69897,   0.00000, 0.00000, 296.00000);
	CreateDynamicObject(627, 1475.69897, -1765.80005, 2983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(627, 1486.19897, -1765.80005, 2983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(632, 1452.19897, -1796.50000, 2982.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1479.69897, -1806.90002, 2982.11011,   0.00000, 0.00000, 24.00000);
	CreateDynamicObject(644, 1482.09900, -1806.90002, 2982.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 1457.30005, -1816.40002, 2983.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 1457.30005, -1811.40002, 2983.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 1457.19897, -1806.40002, 2983.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1472.90002, -1784.30005, 2981.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1488.80005, -1784.59900, 2981.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2244, 1483.59900, -1797.59900, 2983.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2244, 1477.90002, -1797.59900, 2983.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2251, 1451.69897, -1769.09900, 2983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3439, 1481.00000, -1804.00000, 2983.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1505.69897, -1764.59900, 2983.69897,   0.00000, 0.00000, 295.99799);
	CreateDynamicObject(5644, 1506.30005, -1835.69897, 2981.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5644, 1457.19897, -1835.69897, 2981.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14595, 1481.47400, -1864.19897, 2980.08008,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(4199, 1462.69897, -1853.30005, 2974.21899,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1470.71899, -1844.15002, 2997.61108,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1491.71399, -1844.15002, 2997.61108,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1481.21301, -1844.15002, 2997.61108,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1726, 1479.02905, -1876.29504, 2976.11011,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1479.02905, -1873.29504, 2976.11011,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1494.22205, -1884.58606, 2976.31104,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1493.31299, -1884.58606, 2976.10889,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1492.39001, -1884.58606, 2976.10889,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1491.48206, -1884.58606, 2976.10889,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1490.57300, -1884.58606, 2976.10889,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1489.66895, -1884.58606, 2976.10889,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1488.74902, -1884.58606, 2976.10889,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1487.82898, -1884.58606, 2976.10889,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1495.75000, -1883.81604, 2976.11792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1493.80005, -1881.34900, 2976.12695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1495.90002, -1882.81604, 2976.55688,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1663, 1495.90002, -1884.81604, 2976.55688,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1492.80005, -1881.34900, 2976.12695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1491.80005, -1881.34900, 2976.12695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1490.80005, -1881.34900, 2976.12695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1489.80005, -1881.34900, 2976.12695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1488.80005, -1881.34900, 2976.12695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1486.02197, -1883.21301, 2976.12695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1493.80005, -1886.40002, 2976.12695,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1492.80005, -1886.40002, 2976.12695,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1491.80005, -1886.40002, 2976.12695,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1490.80005, -1886.40002, 2976.12695,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1489.80005, -1886.40002, 2976.12695,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1488.80005, -1886.40002, 2976.12695,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1487.80005, -1886.40002, 2976.12695,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2311, 1494.22205, -1884.58606, 2976.10889,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1493.31299, -1884.58606, 2976.31104,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1492.39001, -1884.58606, 2976.31104,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1491.48206, -1884.58606, 2976.31104,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1490.57300, -1884.58606, 2976.31104,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1489.66895, -1884.58606, 2976.31104,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1488.74902, -1884.58606, 2976.31104,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1487.82898, -1884.58606, 2976.31104,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1487.80005, -1881.34900, 2976.12695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1486.02197, -1884.22095, 2976.12695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(632, 1485.18604, -1888.60205, 2976.54907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(632, 1485.18604, -1886.60205, 2976.54907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(632, 1485.18604, -1884.60205, 2976.54907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1478.37598, -1849.85095, 2975.29810,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1478.37598, -1855.42297, 2975.29810,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 1478.36597, -1852.75598, 2980.24902,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(2690, 1478.58496, -1851.09497, 2977.48193,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1302, 1475.90796, -1869.00098, 2976.12598,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1775, 1474.60706, -1868.81604, 2977.20410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1776, 1473.23804, -1868.89502, 2977.20190,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11665, 1480.80005, -1882.50000, 2976.78003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2763, 1476.06006, -1863.32104, 2976.49707,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2763, 1474.06995, -1861.89502, 2976.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1473.69202, -1860.40002, 2976.62891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1475.85400, -1861.86499, 2976.62891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1474.40002, -1860.40002, 2976.62891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1476.55005, -1861.86499, 2976.62891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2802, 1473.49194, -1864.76196, 2976.45898,   0.00000, 0.00000, 186.51500);
	CreateDynamicObject(2802, 1476.45605, -1865.93701, 2976.45898,   0.00000, 0.00000, 116.10100);
	CreateDynamicObject(2198, 1494.13794, -1856.91895, 2976.09302,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2198, 1494.13794, -1853.90002, 2976.09302,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2184, 1504.81995, -1853.45300, 2976.09912,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1489.40405, -1856.86206, 2976.11792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1489.40405, -1855.86206, 2976.11792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1489.40405, -1854.86206, 2976.11792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1489.40405, -1853.86206, 2976.11792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1489.40405, -1852.86206, 2976.11792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1489.40405, -1851.86206, 2976.11792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2356, 1495.49402, -1853.35205, 2976.11890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2356, 1495.54602, -1856.41199, 2976.11890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1727, 1507.59595, -1854.81104, 2976.11011,   0.00000, 0.00000, -160.00000);
	CreateDynamicObject(1727, 1504.98596, -1855.23901, 2976.11011,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(1714, 1505.84204, -1851.24194, 2976.10303,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1505.84998, -1855.26001, 2976.11108,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1497.93604, -1851.60205, 2976.11011,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2161, 1497.95105, -1853.46997, 2976.10889,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2162, 1497.96301, -1856.58801, 2976.09912,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2202, 1497.59497, -1854.69299, 2976.10889,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2700, 1475.97205, -1859.56104, 2978.92310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2002, 1478.97205, -1870.06396, 2976.11011,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2063, 1480.98804, -1844.42297, 2983.07202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1491.29895, -1859.23303, 2976.12500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1484.02502, -1848.86096, 2976.38306,   0.00000, 0.00000, 56.23000);
	CreateDynamicObject(644, 1484.02502, -1850.86096, 2976.38306,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1484.02502, -1852.86096, 2976.38306,   0.00000, 0.00000, 316.25800);
	CreateDynamicObject(644, 1484.02502, -1854.86096, 2976.38306,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1477.29797, -1868.98706, 2977.02588,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1477.56104, -1859.82495, 2977.02588,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 1503.22900, -1850.86401, 2977.41602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, 1507.55505, -1850.57605, 2976.08594,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1505.06396, -1859.20801, 2976.12500,   0.00000, 0.00000, 0.00000);

	// LSPD interior
	new LSPD_OBJECT[30];
	LSPD_OBJECT[0] = CreateObject(18981, 1556.44995, -1663.09998, 5000.00000,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[1] = CreateObject(18981, 1556.46997, -1688.09998, 5000.00000,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[2] = CreateObject(18981, 1577.12000, -1701.88000, 5000.00000,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[3] = CreateObject(18981, 1577.12000, -1676.88000, 5000.00000,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[4] = CreateObject(18981, 1576.95996, -1651.87000, 5000.00000,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[5] = CreateObject(18981, 1565.05005, -1637.39001, 5000.00000,   0.00000, 0.00000, 90.00000);
	LSPD_OBJECT[6] = CreateObject(18981, 1543.07996, -1642.81006, 5000.00000,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[7] = CreateObject(18981, 1544.05005, -1651.09998, 5000.00000,   0.00000, 0.00000, 90.00000);
	LSPD_OBJECT[8] = CreateObject(18981, 1543.98999, -1700.06006, 5000.00000,   0.00000, 0.00000, 90.00000);
	LSPD_OBJECT[9] = CreateObject(18981, 1564.21997, -1713.90002, 5000.00000,   0.00000, 0.00000, 90.00000);
	LSPD_OBJECT[10] = CreateObject(18981, 1539.21997, -1713.90002, 5000.00000,   0.00000, 0.00000, 90.00000);
	LSPD_OBJECT[11] = CreateObject(18981, 1576.95996, -1626.88000, 5000.00000,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[12] = CreateObject(18981, 1540.05005, -1637.39001, 5000.00000,   0.00000, 0.00000, 90.00000);
	LSPD_OBJECT[13] = CreateObject(18981, 1544.54004, -1708.34998, 5000.00000,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[14] = CreateObject(18981, 1567.47998, -1696.09998, 4989.04004,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[15] = CreateObject(18981, 1567.50000, -1671.16003, 4989.04004,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[16] = CreateObject(18981, 1569.22998, -1701.79004, 4993.90002,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[17] = CreateObject(18981, 1569.22998, -1715.64001, 4993.92004,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[18] = CreateObject(18981, 1569.35999, -1651.18994, 4993.90002,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[19] = CreateObject(18981, 1569.35999, -1626.18994, 4993.90002,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[20] = CreateObject(18981, 1569.31006, -1701.75000, 4999.97998,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[21] = CreateObject(18981, 1544.40002, -1702.84998, 4999.97998,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[22] = CreateObject(18981, 1568.62000, -1676.88000, 4999.97998,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[23] = CreateObject(18981, 1568.02002, -1627.33997, 4999.97998,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[24] = CreateObject(18981, 1544.33997, -1643.18005, 4999.97998,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[25] = CreateObject(18981, 1569.41003, -1651.93005, 4999.97998,   0.00000, 90.00000, 0.00000);
	LSPD_OBJECT[26] = CreateObject(19370, 1576.6994, -1677.4489, 4995.7229, 0.0000, 0.0000, 180.0);
	LSPD_OBJECT[27] = CreateObject(19370, 1556.7880, -1643.9266, 4991.4803,   0.00000, 0.00000, 0.00000);
	LSPD_OBJECT[28] = CreateObject(19370, 1556.6541, -1705.3131, 4991.5043, 0.0000, 0.0000, 180.0);
	LSPD_OBJECT[29] = CreateObject(3976, 1571.63, -1675.74, 35.68, 360.00, 0.00, 0.09, 800); /// Edificio de LSPD. (Comisaria)
	CreateObject(18981, 1569.35999, -1651.19995, 4983.71997,   0.00000, 90.00000, 0.00000);
	CreateObject(18981, 1569.35999, -1651.19995, 4988.20996,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(LSPD_OBJECT[29], 6, 4014, "civic01_lan", "crazy paving", 0);
	SetObjectMaterial(LSPD_OBJECT[29], 4, 4014, "civic01_lan", "crazy paving", 0);
	SetObjectMaterial(LSPD_OBJECT[29], 8, 4014, "civic01_lan", "crazy paving", 0);
	SetObjectMaterial(LSPD_OBJECT[29], 5, 4014, "civic01_lan", "crazy paving", 0);
	SetObjectMaterial(LSPD_OBJECT[29], 7, 4014, "civic01_lan", "crazy paving", 0);
	SetObjectMaterial(LSPD_OBJECT[29], 12, 4586, "skyscrap3_lan2", "sl_skyscrpr05", 0);
	SetObjectMaterialText(LSPD_OBJECT[26], "LSPD", 0, 140, "Verdana", 215, 1, -1, 0, 1);
	SetObjectMaterialText(LSPD_OBJECT[27], "{000000}SECTOR SUR\n{2E2EFE} - Oficinas Altos Cargos\n - Asuntos Internos\n - Prisión (P.Inf.)", 0, 140, "Verdana", 50, 0, -1, 0, 1);
	SetObjectMaterialText(LSPD_OBJECT[28], "{000000}SECTOR NORTE\n{2E2EFE} - Recursos Humanos\n - Escuela de Cadetes\n - Garage (P.Inf.)", 0, 140, "Verdana", 50, 0, -1, 0, 1);
	SetObjectMaterial(LSPD_OBJECT[16], 0, 10941, "silicon2_sfse", "ws_stationfloor", 0);
	SetObjectMaterial(LSPD_OBJECT[17], 0, 10941, "silicon2_sfse", "ws_stationfloor", 0);
	SetObjectMaterial(LSPD_OBJECT[18], 0, 10941, "silicon2_sfse", "ws_stationfloor", 0);
	SetObjectMaterial(LSPD_OBJECT[19], 0, 10941, "silicon2_sfse", "ws_stationfloor", 0);
	SetObjectMaterial(LSPD_OBJECT[0], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[1], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[2], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[3], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[4], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[5], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[6], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[7], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[8], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[9], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[10], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[11], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[12], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
	SetObjectMaterial(LSPD_OBJECT[13], 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
 	SetObjectMaterial(LSPD_OBJECT[20], 0, 14853, "gen_pol_vegas", "mp_police_win", 0);
	SetObjectMaterial(LSPD_OBJECT[21], 0, 14853, "gen_pol_vegas", "mp_police_win", 0);
	SetObjectMaterial(LSPD_OBJECT[22], 0, 14853, "gen_pol_vegas", "mp_police_win", 0);
	SetObjectMaterial(LSPD_OBJECT[23], 0, 14853, "gen_pol_vegas", "mp_police_win", 0);
	SetObjectMaterial(LSPD_OBJECT[24], 0, 14853, "gen_pol_vegas", "mp_police_win", 0);
	SetObjectMaterial(LSPD_OBJECT[25], 0, 14853, "gen_pol_vegas", "mp_police_win", 0);
 	SetObjectMaterial(LSPD_OBJECT[14], 0, 14853, "gen_pol_vegas", "blue_carpet_256", 0);
	SetObjectMaterial(LSPD_OBJECT[15], 0, 14853, "gen_pol_vegas", "blue_carpet_256", 0);
 	CreateDynamicObject(1536, 1557.04004, -1678.10901, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1557.04004, -1675.10901, 4989.58008,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19375, 1560.00000, -1689.21899, 4994.31006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1560.00000, -1663.72900, 4994.31006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1574.04004, -1689.33899, 4994.31006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1573.97900, -1663.75000, 4994.31006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2191, 1576.10901, -1665.15002, 4989.52002,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2191, 1576.10901, -1667.15002, 4989.52002,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19379, 1571.97900, -1694.51001, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(6099, 1512.85901, -1670.81006, 4990.56006,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1562.34900, -1694.51001, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1571.81006, -1705.01001, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1562.18896, -1705.01001, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1552.71899, -1694.52002, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1552.56006, -1705.01001, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1542.97900, -1705.75000, 4989.47900,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1571.81006, -1715.51001, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1562.18896, -1715.50000, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1552.58899, -1715.50000, 4989.52002,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1542.97900, -1716.21899, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18755, 1554.70898, -1709.53003, 4991.56006,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19464, 1553.75000, -1703.18896, 4991.87598,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18758, 1554.68005, -1709.51001, 4991.29004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19464, 1548.01001, -1705.67004, 4996.95020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14407, 1554.01001, -1705.10901, 4991.21924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1547.92004, -1705.67004, 4992.12891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1553.78003, -1705.67004, 4996.95020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18758, 1554.68005, -1709.55005, 4996.35010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19464, 1553.69897, -1705.68896, 4992.12891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18758, 1554.68005, -1701.52002, 4991.29004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19464, 1559.80005, -1700.45898, 4996.95020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19465, 1565.70898, -1700.45898, 4996.95020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1571.64001, -1700.45898, 4996.95020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1577.48901, -1700.45898, 4996.95020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1568.53003, -1703.48901, 4996.95020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 1568.53003, -1709.40002, 4996.95020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1568.53003, -1715.26001, 4996.95020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1569.67004, -1692.27002, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 1569.67004, -1698.02002, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1569.67004, -1709.77002, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1569.67004, -1715.61902, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1571.81897, -1658.44897, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1562.18896, -1658.45898, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1552.56897, -1658.43896, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1562.18005, -1647.96899, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1571.81006, -1647.94897, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1571.81897, -1637.45898, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1562.18896, -1637.46899, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1552.54004, -1640.68896, 4989.50000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1561.78003, -1651.16003, 4989.47900,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19464, 1570.55005, -1654.77002, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 1570.54004, -1660.70898, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1573.63000, -1651.92004, 4988.16016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19465, 1570.55005, -1648.86902, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1573.56897, -1646.04004, 4991.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19465, 1570.54004, -1643.02002, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1570.55005, -1637.21899, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 1562.70898, -1660.68005, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1562.70898, -1654.79004, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1559.88000, -1650.69897, 4991.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1562.72900, -1653.55005, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18758, 1554.80005, -1648.23901, 4991.29004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19464, 1553.83899, -1641.69897, 4991.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1550.72900, -1641.70898, 4991.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14407, 1553.98901, -1643.82898, 4991.16016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18758, 1554.80005, -1640.27002, 4991.29004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18755, 1554.90002, -1648.11902, 4991.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19464, 1550.72900, -1644.35901, 4991.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1553.86902, -1644.35901, 4991.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1544.89001, -1644.35901, 4991.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1543.08899, -1641.81897, 4989.52002,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19464, 1553.91003, -1644.35901, 4996.91016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1550.72900, -1644.35901, 4996.91016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1544.89001, -1644.35901, 4996.91016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1559.68005, -1651.77002, 4996.91016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19465, 1562.50000, -1654.83899, 4996.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1562.50000, -1660.78003, 4996.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 1570.42004, -1642.96899, 4996.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 1570.42004, -1654.81006, 4996.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1570.43005, -1637.05005, 4996.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1573.50000, -1651.72900, 4996.91016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1560.67004, -1691.61902, 4994.79004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1558.80005, -1690.81897, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1560.67004, -1697.69897, 4994.79004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1564.19897, -1697.69897, 4994.79004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1564.19897, -1691.61902, 4994.79004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1568.92004, -1691.61902, 4994.79004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1568.92004, -1697.69897, 4994.79004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2607, 1572.90002, -1695.53003, 4994.81006,   0.00000, 0.00000, 9270.00000);
	CreateDynamicObject(1671, 1558.76001, -1692.56897, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1562.27002, -1690.78003, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1562.26001, -1692.40002, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1566.91003, -1690.92004, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1566.89001, -1692.53003, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1567.07898, -1696.86902, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1567.05005, -1698.78003, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1562.31006, -1698.78003, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1562.26001, -1696.45898, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1558.70898, -1698.84900, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1558.61902, -1696.63000, 4994.85010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1574.44897, -1695.26001, 4994.39893,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2611, 1576.53003, -1695.51001, 4995.93018,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2611, 1576.54004, -1692.85901, 4995.93018,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2607, 1572.89001, -1693.60901, 4994.81006,   0.00000, 0.00000, 9270.00000);
	CreateDynamicObject(1714, 1574.34900, -1693.31897, 4994.39893,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2166, 1573.27002, -1705.13000, 4994.41895,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1573.28003, -1707.08899, 4994.41895,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2186, 1573.38000, -1709.03003, 4994.49023,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1704, 1571.07898, -1704.94897, 4994.41895,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1704, 1571.07898, -1707.14001, 4994.41895,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2611, 1576.51001, -1708.02002, 4996.35010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 1574.76001, -1706.39001, 4994.41895,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19464, 1569.67004, -1703.94897, 4991.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 1574.04004, -1698.39001, 4989.99023,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1572.72900, -1698.40002, 4989.99023,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1572.70898, -1702.64001, 4989.99023,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1574.03003, -1702.64001, 4989.99023,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1572.71899, -1706.90002, 4989.99023,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1574.02002, -1706.90002, 4989.99023,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1573.45898, -1710.59900, 4989.58887,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1573.36902, -1694.38000, 4989.58887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1571.06897, -1706.92004, 4990.06006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1571.06006, -1704.85901, 4990.06006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1571.05005, -1702.57898, 4990.06006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1571.09900, -1700.43005, 4990.06006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1575.76001, -1697.82898, 4990.06006,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1575.79004, -1700.42004, 4990.06006,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1575.81006, -1703.03003, 4990.06006,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1575.77002, -1705.69897, 4990.06006,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1575.70898, -1708.01001, 4990.06006,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14532, 1571.56897, -1692.39001, 4990.56885,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14532, 1577.10901, -1695.20898, 4990.56885,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14532, 1574.92004, -1712.08899, 4990.56885,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, 1560.04004, -1697.93896, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 1558.21899, -1698.53003, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1560.04004, -1694.29004, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 1558.27002, -1694.56006, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1560.04004, -1690.70898, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1563.18896, -1690.70898, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1563.18896, -1694.29004, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1563.18896, -1697.93896, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 1558.21899, -1691.18896, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1561.34900, -1691.26001, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1561.36902, -1694.85901, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1561.43005, -1698.08899, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.98901, -1684.84900, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1565.44897, -1669.54004, 4989.93896,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1565.45898, -1673.81897, 4989.93896,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1565.46899, -1678.06897, 4989.93896,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1565.47900, -1682.32898, 4989.93896,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1564.77002, -1681.10901, 4985.20020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 1565.45898, -1683.76001, 4989.95898,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.97900, -1682.94897, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.95898, -1678.90002, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.96899, -1677.01001, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1573.03003, -1672.89001, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1573.03003, -1670.98901, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1573.07898, -1667.18896, 4989.58008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.05005, -1683.82898, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1572.04004, -1681.93005, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1572.06897, -1677.90002, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1572.06897, -1675.98901, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1572.10901, -1671.89001, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1572.11902, -1669.95898, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2172, 1572.17004, -1666.18005, 4989.58008,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19375, 1566.05005, -1681.06006, 4985.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1566.08899, -1672.21899, 4985.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1564.76001, -1671.78003, 4985.20020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19386, 1564.73901, -1687.53003, 4991.29004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1564.74878, -1667.73779, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3857, 1566.97900, -1663.76001, 4995.37012,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3857, 1566.97900, -1663.68896, 5001.18018,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3857, 1567.32898, -1689.26001, 4995.37012,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3857, 1567.32898, -1689.26001, 5001.16895,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3850, 1556.72900, -1701.34900, 4994.91895,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1556.88000, -1640.09900, 4994.95020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1556.88000, -1636.67004, 4994.95020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1570.41003, -1648.89001, 4996.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1570.42004, -1660.72900, 4996.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18758, 1554.81897, -1640.03003, 4991.29004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18758, 1554.80005, -1648.23901, 4996.29883,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18755, 1554.90002, -1648.11902, 4986.14014,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18758, 1554.90002, -1648.22900, 4986.14893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19385, 1558.55005, -1652.27002, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1561.72900, -1652.26001, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1564.93005, -1652.27002, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1568.11902, -1652.26001, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1558.56897, -1644.17004, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1561.75000, -1644.16003, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1564.94897, -1644.17004, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1568.16003, -1644.17004, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 1569.78003, -1650.60901, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 1569.79004, -1645.88000, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1569.80005, -1648.20898, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1556.90002, -1642.48901, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1560.13000, -1642.46899, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1563.33899, -1642.46899, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1566.60901, -1642.46899, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1569.71899, -1642.50000, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1571.48901, -1644.23901, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1571.48901, -1648.33899, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1571.44897, -1651.85901, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1569.73901, -1653.96899, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1566.28003, -1653.96899, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1563.31006, -1653.94897, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1560.00000, -1653.95898, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1556.91003, -1653.94897, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1558.42004, -1655.47900, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1561.68005, -1655.54004, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1564.83899, -1655.56897, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1568.06897, -1655.54004, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1572.98901, -1650.34900, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1573.02002, -1647.22900, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1573.02002, -1644.07898, 4985.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1568.18896, -1640.96899, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1564.94897, -1640.93896, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1561.72900, -1640.95898, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1558.58899, -1640.96899, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 1570.77002, -1672.39001, 4990.12891,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1570.82898, -1670.39001, 4990.12891,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1570.83899, -1676.11902, 4990.12891,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1570.68005, -1678.58899, 4990.12891,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1574.30005, -1676.31897, 4990.12891,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1574.34900, -1678.42004, 4990.12891,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1574.54004, -1682.63000, 4990.12891,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1574.51001, -1684.89001, 4990.12891,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1570.51001, -1682.45898, 4990.12891,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1570.41003, -1684.81006, 4990.12891,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1570.56897, -1666.48901, 4990.12891,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1574.31006, -1666.66003, 4990.12891,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 1567.30005, -1669.58899, 4989.54004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2356, 1567.36902, -1673.48901, 4989.54004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2356, 1567.30005, -1677.36902, 4989.54004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2356, 1567.43005, -1680.33899, 4989.54004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2356, 1567.42004, -1683.97900, 4989.54004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1558.77002, -1664.20898, 4989.52979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1557.47900, -1667.57898, 4989.52979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1557.43005, -1672.27002, 4989.52979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1560.94897, -1688.63000, 4989.52979,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1557.47900, -1687.56006, 4989.52979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1557.47900, -1682.52002, 4989.52979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1558.45898, -1644.19897, 4985.45898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1561.61902, -1644.17004, 4985.45898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1564.82898, -1644.20898, 4985.45898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1567.98901, -1644.18896, 4985.45898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1569.73901, -1645.71899, 4985.45898,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19302, 1569.73901, -1650.47900, 4985.45898,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19302, 1568.22900, -1652.22900, 4985.45898,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19302, 1565.01001, -1652.23901, 4985.45898,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19302, 1561.81897, -1652.22900, 4985.45898,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19302, 1558.63000, -1652.23901, 4985.45898,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1771, 1557.66003, -1642.34900, 4984.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1560.86902, -1642.35901, 4984.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1564.07898, -1642.31897, 4984.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1567.38000, -1642.38000, 4984.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1571.65002, -1647.59900, 4984.83887,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1771, 1571.60901, -1649.14001, 4984.83887,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1771, 1568.96899, -1654.18005, 4984.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1565.48901, -1654.18896, 4984.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1562.51001, -1654.16003, 4984.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1559.13000, -1654.09900, 4984.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8169, 1575.33899, -1652.01001, 4990.58887,   15.00000, 90.00000, 270.00000);
	CreateDynamicObject(8169, 1572.81897, -1652.02002, 4990.58887,   15.00000, 90.00000, 270.00000);
	CreateDynamicObject(3857, 1574.18896, -1651.80005, 4990.58887,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(14782, 1562.18896, -1655.39001, 4990.56006,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14782, 1557.32898, -1654.44897, 4990.56006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 1557.35901, -1660.54004, 4990.56006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2063, 1560.20898, -1651.18005, 4990.47900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, 1560.03003, -1663.33899, 4990.47900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1573.29004, -1663.18005, 4989.52979,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1575.75000, -1663.15002, 4989.52979,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1571.19897, -1656.72900, 4989.52979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1575.97900, -1654.71899, 4989.52979,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2606, 1576.68005, -1643.09900, 4991.29883,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2606, 1576.68005, -1641.13000, 4991.29883,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2606, 1576.68005, -1641.13000, 4990.64893,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2606, 1576.68005, -1643.13000, 4990.64893,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1715, 1572.92004, -1641.02002, 4989.56885,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1572.93896, -1642.68005, 4989.56885,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2206, 1574.68005, -1642.76001, 4989.58887,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1569.86902, -1639.39001, 4989.52979,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 1566.98901, -1638.39001, 4989.52979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1563.21899, -1638.39001, 4989.52979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1574.35901, -1643.02002, 4994.39014,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1576.11902, -1641.70898, 4994.39893,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2204, 1575.13000, -1647.16003, 4994.37891,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19464, 1573.50000, -1647.42004, 4996.91016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2206, 1572.93896, -1659.52002, 4994.39014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1573.76001, -1661.31897, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1571.41003, -1652.35901, 4994.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1573.93005, -1652.33899, 4994.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1572.89001, -1657.65002, 4995.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 1574.46899, -1657.59900, 4995.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1571.06006, -1641.36902, 4994.39893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16662, 1558.93005, -1662.60901, 5004.24023,   63.00000, 90.00000, 90.00000);
	CreateDynamicObject(1722, 1561.58899, -1656.70898, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1560.76001, -1656.67004, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1557.57898, -1656.67004, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1558.18005, -1656.66003, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1558.82898, -1656.65002, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1558.82898, -1654.88000, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1558.18005, -1654.86902, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1557.56006, -1654.86902, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1557.56897, -1653.22900, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1558.18896, -1653.21899, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1558.85901, -1653.20898, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1560.72900, -1653.14001, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 1561.48901, -1653.10901, 4994.39893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1502, 1570.41003, -1655.56897, 4994.37012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1570.40002, -1643.73901, 4994.37012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1562.50000, -1654.06006, 4994.37012,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 1566.22900, -1638.44897, 4994.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1569.78003, -1639.25000, 4994.39893,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 1562.79004, -1638.41003, 4994.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1559.28003, -1638.36902, 4994.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1557.44897, -1641.52002, 4994.39893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 1557.93005, -1638.51001, 4995.43018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1562.23901, -1638.34900, 4995.43018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1565.64001, -1638.34900, 4995.43018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1569.47900, -1638.46899, 4995.43018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 1561.73901, -1640.66003, 4994.79004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 1565.93896, -1640.66003, 4994.77002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1569.90002, -1638.56897, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1566.27002, -1638.35901, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 1567.10901, -1640.51001, 4989.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 1564.05005, -1640.33899, 4989.96924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1569.05005, -1705.68896, 4989.52979,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 1569.03003, -1709.23901, 4989.52979,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 1568.07898, -1712.85901, 4989.52979,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1564.61902, -1712.84900, 4989.52979,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(630, 1569.06006, -1712.75000, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1569.23901, -1708.54004, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1565.45898, -1712.81006, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 1566.81006, -1710.39001, 4989.97900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1892, 1557.52295, -1677.14294, 4989.50586,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1565.56897, -1712.90002, 4994.41895,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(630, 1562.39001, -1712.80005, 4995.43018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1566.70898, -1713.05005, 4995.43018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1560.66003, -1662.05005, 4994.39893,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 1557.16003, -1662.04004, 4994.39893,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 1559.54004, -1660.43896, 4994.33887,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18755, 1554.90002, -1648.11902, 4996.35010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18755, 1554.70898, -1709.53003, 4996.31885,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2198, 1566.43896, -1705.90002, 4994.39893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1567.98901, -1704.96899, 4994.41895,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 1557.67004, -1669.32898, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1557.50000, -1664.46899, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1557.68896, -1684.01001, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1557.91003, -1688.57898, 4990.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 1559.82898, -1668.50000, 4989.91895,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1559.77002, -1684.43896, 4989.91895,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1568.54004, -1710.15002, 4994.37012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1566.47900, -1700.46899, 4994.37012,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1572.43896, -1648.60901, 4989.56885,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1574.06897, -1648.53003, 4989.56885,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1574.25000, -1650.35901, 4989.58887,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19386, 1564.73901, -1665.43005, 4991.29004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1552.07898, -1703.18896, 4991.87598,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1564.74878, -1669.97900, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1672.21899, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1674.45886, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1676.69995, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1678.93994, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1681.18103, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1683.41895, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1685.65747, 4991.41113,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19356, 1564.74695, -1665.43005, 4994.79004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1564.74878, -1667.73779, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19356, 1564.73901, -1687.53003, 4994.79004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1564.74878, -1669.97900, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1672.21899, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1674.45886, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1676.69995, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1678.93994, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1681.18103, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1683.41895, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1685.65747, 4993.34766,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19356, 1564.73901, -1687.53003, 4998.29150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19356, 1564.74695, -1665.43005, 4998.29150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1564.74878, -1667.73779, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1669.97900, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1672.21899, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1674.45886, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1676.69995, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1678.93994, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1681.18103, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1683.41895, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1685.65747, 4995.28320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1667.73779, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1669.97900, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1672.21899, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1674.45886, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1676.69995, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1678.93994, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1681.18103, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1683.41895, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 1564.74878, -1685.65747, 4997.21924,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3578, 1556.78296, -1700.34265, 4988.79626,   5.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1556.91345, -1640.46875, 4988.79626,   5.00000, 0.00000, 90.00000);
	CreateDynamicObject(1533, 1560.53943, -1713.37500, 4994.40125,   0.00000, 0.00000, 180.00000); // Puerta para ir al tejado. ((DDOOR)
	// ((Ascensor Sotano - Parking))
	CreateDynamicObject(18758, 1522.20801, -1677.85706, 7.16830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18757, 1522.23853, -1677.86292, 7.09240,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18755, 1522.20203, -1677.85144, 7.09240,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18756, 1522.22473, -1677.88660, 7.09240,   0.00000, 0.00000, 180.00000);
	// ((Comisaria EXTRA (ACCESO ENTRADA LSPD)))
	CreateDynamicObject(1533, 1555.33325, -1675.59045, 15.16360,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1533, 1555.33325, -1674.10315, 15.16360,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3851, 1555.35706, -1676.32666, 18.11460,   0.00000, 0.00000, 0.00000);
	// ((LSPD Parking Adicional Acceso))
	CreateDynamicObject(19463, 1568.76819, -1690.01465, 10.42880,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19463, 1568.77625, -1690.01465, 6.92990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9093, 1568.69751, -1690.10046, 6.65880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1537, 1561.30884, -1690.14905, 4.87770,   0.00000, 0.00000, 0.00000);
	/// ((lspd Parking Adicional Map - Coordenada Z: +20000))
	CreateObject(7494, 1498.83801, -1667.00000, 2000.00000,   0.00000, 0.00000, 90.00000, 800); // Base del suelo del parking.
	CreateDynamicObject(9093, 1481.28394, -1671.83020, 2004.75757,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19788, 1473.49414, -1665.80347, 2002.99231,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19535, 1488.49231, -1650.80286, 2002.99231,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19788, 1488.48877, -1665.79749, 2002.99231,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19535, 1473.49097, -1650.81091, 2002.99231,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19788, 1473.49792, -1635.81250, 2002.99231,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19788, 1488.49292, -1635.81653, 2002.99231,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1480.28491, -1629.38843, 2007.07275,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1480.97205, -1657.31274, 2003.68054,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1480.54871, -1629.38806, 1999.77783,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18980, 1481.01575, -1658.26440, 2005.34021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1492.40613, -1672.44995, 2001.72449,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1467.41199, -1672.44995, 2001.72449,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18980, 1481.01575, -1643.19434, 2005.34021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1495.40613, -1629.00000, 2001.72449,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1466.41199, -1629.00000, 2001.72449,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10183, 1490.69067, -1649.96484, 2003.00818,   0.00000, 0.00000, 315.39999);
	CreateDynamicObject(10183, 1471.28259, -1650.01318, 2003.01624,   0.00000, 0.00000, 135.39999);
	CreateDynamicObject(19377, 1481.32214, -1671.86426, 2007.16858,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1480.55664, -1629.38013, 2014.35107,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1480.97437, -1642.26099, 2003.68054,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1480.98584, -1659.27307, 2003.68054,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1480.96973, -1644.24390, 2003.68054,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19538, 1486.73010, -1650.65576, 2011.12659,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 1496.01160, -1689.00110, 2004.36292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(6959, 1466.03662, -1649.49829, 2004.36292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(6959, 1496.01416, -1649.49829, 2004.36292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(6959, 1466.04456, -1689.00110, 2004.36292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1537, 1466.05371, -1669.71594, 2003.14746,   0.00000, 0.00000, 90.00000);

	// Estacionamiento privado LSPD (Dentro del Interior).
	new LSPDX;
	LSPDX = CreateObject(18981, 1567.50183, -1721.13281, 4983.49805,   0.00000, 90.00000, 0.00000, 800);
	SetObjectMaterial(LSPDX, 0, 10756, "airportroads_sfse", "ws_carpark2", 0xFFFFFFFF);
	LSPDX = CreateObject(18981, 1567.50696, -1696.13562, 4983.49805,   0.00000, 90.00000, 0.00000, 800);
	SetObjectMaterial(LSPDX, 0, 10756, "airportroads_sfse", "ws_carpark2", 0xFFFFFFFF);
	CreateDynamicObject(1533, 1560.53943, -1713.37500, 4989.49951,   0.00000, 0.00000, 180.00000); // Puerta provisional.
	CreateDynamicObject(18755, 1554.70898, -1709.53003, 4985.93994,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18758, 1577.77039, -1709.51001, 4985.91602,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18981, 1567.50537, -1714.17395, 4988.00391,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 1558.42004, -1655.47900, 4985.96924,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1579.91553, -1718.30664, 4985.74561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1556.65515, -1691.07202, 4985.74561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1575.19080, -1686.16663, 4985.74561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1575.19080, -1723.21252, 4985.74561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1571.00232, -1686.17969, 4985.74561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1579.92432, -1700.70349, 4985.74561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1579.92468, -1691.07202, 4985.74561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18758, 1554.68005, -1709.51001, 4985.91602,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19447, 1556.65515, -1718.30664, 4985.74561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1561.37415, -1686.17969, 4985.74561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1571.00232, -1723.20447, 4985.74561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1561.37415, -1723.20447, 4985.74561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18755, 1581.72437, -1709.41931, 4985.93994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19538, 1587.75598, -1702.34009, 4987.49561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18980, 1568.27576, -1709.41272, 4975.97852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1556.65515, -1700.70349, 4985.74561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10183, 1560.49512, -1733.17114, 4984.01123,   0.00000, 0.00000, 134.48520);
	CreateDynamicObject(10183, 1560.64502, -1686.30078, 4984.01123,   0.00000, 0.00000, 134.48520);
	CreateDynamicObject(10183, 1575.92798, -1686.26599, 4984.01123,   0.00000, 0.00000, 315.43799);
	CreateDynamicObject(10183, 1575.93933, -1733.10437, 4984.01123,   0.00000, 0.00000, 315.43799);
	CreateDynamicObject(18981, 1567.50696, -1696.13562, 4988.00391,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(983, 1576.62048, -1706.73645, 4984.66797,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1559.93127, -1706.73645, 4984.66797,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1576.62048, -1712.18726, 4984.66797,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1559.93127, -1712.18726, 4984.66797,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4084, 1568.28613, -1723.17810, 4985.70361,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1360, 1573.89136, -1709.41272, 4984.74756,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1562.62708, -1709.41272, 4984.74756,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1570.59668, -1709.62219, 4984.01318,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1565.59668, -1709.62219, 4984.01318,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19972, 1568.27576, -1686.25195, 4983.99268,   0.00000, 0.00000, 0.00000);

	// Exterior LSPD
	CreateDynamicObject(1229, 1534.65942, -1684.08569, 14.10938,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(8843, 1531.96729, -1693.13269, 12.42140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1527.36328, -1650.21155, 12.42140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3749, 1546.40002, -1627.64795, 18.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1544.80005, -1617.69995, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1539.69995, -1612.59998, 17.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1539.69995, -1607.50000, 17.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1544.80005, -1602.40002, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1555.09998, -1602.40002, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1596.30005, -1602.40002, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1565.40002, -1602.40002, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1575.69995, -1602.40002, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1586.00000, -1602.40002, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1596.30005, -1602.40002, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1602.90002, -1602.40002, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1608.09998, -1628.19995, 17.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1608.09998, -1607.59998, 17.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1608.09998, -1617.90002, 17.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1608.09998, -1632.90002, 17.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1603.00000, -1638.00000, 17.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2886, 1544.00000, -1631.30005, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 1544.69995, -1633.09998, 12.48800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1543.90002, -1634.80005, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1543.69995, -1619.09998, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1543.69995, -1620.50000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1571.30005, -1622.80005, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1555.30005, -1622.80005, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1568.09998, -1622.80005, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1556.00000, -1617.59998, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1568.80005, -1617.59998, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1570.40002, -1617.59998, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3660, 1567.40002, -1619.90002, 14.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1558.40002, -1619.90002, 14.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1578.40002, -1633.50000, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1578.40002, -1633.50000, 14.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1578.40002, -1633.50000, 14.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 1544.30005, -1632.19995, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 1578.20117, -1634.84448, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 1579.61206, -1634.68799, 12.60000,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(2356, 1579.88574, -1636.86523, 12.60000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2356, 1579.91931, -1635.56250, 12.60000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2002, 1577.90002, -1635.50000, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2608, 1581.19995, -1637.59998, 15.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2608, 1579.50000, -1637.59998, 15.20000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2190, 1580.19995, -1633.30005, 13.70000,   0.00000, 0.00000, 337.00000);
	CreateDynamicObject(2190, 1581.69995, -1633.59998, 13.70000,   0.00000, 0.00000, 318.00000);
	CreateDynamicObject(2190, 1581.69995, -1635.59998, 13.70000,   0.00000, 0.00000, 250.00000);
	CreateDynamicObject(2190, 1581.59998, -1637.50000, 13.70000,   0.00000, 0.00000, 249.99001);
	CreateDynamicObject(2222, 1581.59998, -1634.30005, 13.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2222, 1581.50000, -1636.00000, 13.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2222, 1581.50000, -1636.50000, 13.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2500, 1582.00000, -1637.00000, 14.60000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1344, 1597.00000, -1637.30005, 13.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1344, 1599.30005, -1637.30005, 13.50000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(4597, 1564.40002, -1632.80005, 12.90000,   0.00000, 0.00000, 0.00000);


	// FBI exterior
	CreateDynamicObject(3439, 332.08188, -1529.53442, 37.02547,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3439, 341.40625, -1516.39941, 37.02958,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4003, 331.78772, -1517.19641, 45.05106,   0.00000, 0.00000, 230.00000);
	CreateDynamicObject(1569, 324.23700, -1515.80017, 35.03251,   0.00000, 0.00000, 52.00000);
	CreateDynamicObject(1569, 326.08875, -1513.44812, 35.03251,   0.00000, 0.00000, 231.49829);
	CreateDynamicObject(3433, 326.12500, -1515.38477, 38.28454,   0.00000, 0.00000, 141.49841);
	CreateDynamicObject(1361, 326.86716, -1513.38123, 35.77585,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 324.32687, -1516.54395, 35.77585,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 326.85196, -1513.34583, 36.33979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 324.35074, -1516.53479, 36.33979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3115, 320.04175, -1508.22339, 76.42503,   0.00000, 0.00000, 322.00000);
	CreateDynamicObject(4638, 307.87363, -1508.37024, 78.45611,   0.00000, 0.00000, 52.00000);
	CreateDynamicObject(3877, 322.47675, -1521.57324, 78.37759,   0.00000, 0.00000, 322.00000);
	CreateDynamicObject(3877, 317.59277, -1494.85352, 78.40346,   0.00000, 0.00000, 321.99829);
	CreateDynamicObject(3877, 333.58984, -1507.36133, 78.37912,   0.00000, 0.00000, 321.99829);
	CreateDynamicObject(3934, 320.10107, -1508.41492, 76.73971,   0.00000, 0.00000, 322.00000);
	CreateDynamicObject(1569, 315.90195, -1515.08923, 23.92034,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(1569, 317.59940, -1512.66382, 23.92030,   0.00000, 0.00000, -125.00000);

	// FBI interior
	FBILobbyRightBTN[0] = CreateButton(300.05300903,-1521.40747070,-44.59006119,180); //Lobby Button Right
	FBILobbyRightBTN[1] = CreateButton(300.16033936,-1521.84387207,-44.59006119,0); //Lobby Button Right
	FBILobbyRight = CreateDynamicObject(1536,302.39355469,-1521.62988281,-46.13965225,0.00000000,0.00000000,179.99450684,600); //Lobby Door Right
	CreateObject(14602, 291.64355, -1505.73730, -40.76299,   0.00000, 0.00000, 179.99451);
	CreateObject(14593, 308.32129, -1535.68750, -43.80563,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2685, 300.49490, -1495.37646, -38.65333,   0.00000, 0.00000, 90.04395);
	CreateDynamicObject(1522, 276.98993, -1506.53882, -46.13738,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3798, 301.63208, -1521.53662, -48.13918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14782, 309.60202, -1543.15442, -45.20715,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 309.58765, -1536.19519, -45.20715,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, 309.09744, -1546.07031, -46.13375,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, 309.09747, -1542.33789, -46.13375,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, 309.09802, -1538.61096, -46.13375,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, 309.09781, -1534.87769, -46.13375,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, 309.09717, -1534.07751, -46.13375,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, 308.94421, -1531.32495, -46.13555,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 308.94485, -1535.05347, -46.13555,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 308.94528, -1538.78503, -46.13555,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 308.94180, -1542.47778, -46.13555,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 308.94659, -1543.31519, -46.13555,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1806, 309.10547, -1505.52637, -46.12368,   0.00000, 0.00000, 105.87994);
	CreateDynamicObject(2190, 307.29688, -1506.07813, -45.40362,   0.00000, 0.00000, 104.99634);
	CreateDynamicObject(1892, 278.57611, -1506.30029, -46.13018,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 304.49936, -1504.94629, -45.61295,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 304.50589, -1506.51086, -45.61295,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 302.58798, -1506.51135, -45.61295,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 303.51633, -1503.98291, -45.61295,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 302.57733, -1503.02441, -45.61295,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 301.60446, -1505.54932, -45.61295,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 300.64789, -1503.04053, -45.61295,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 299.66089, -1503.99854, -45.61295,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 298.72501, -1504.95776, -45.61115,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 300.66803, -1506.51233, -45.61115,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 298.75299, -1506.51001, -45.61295,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 314.12897, -1505.99866, -46.13018,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1806, 312.65527, -1512.03027, -46.12368,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 312.62912, -1518.00183, -46.12368,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 312.64999, -1499.31555, -46.12368,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 312.67896, -1493.98633, -46.12368,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 310.62238, -1512.26941, -45.21636,   0.00000, 0.00000, 104.99631);
	CreateDynamicObject(2190, 310.59692, -1518.19751, -45.21636,   0.00000, 0.00000, 104.99631);
	CreateDynamicObject(2190, 310.74307, -1499.55859, -45.21636,   0.00000, 0.00000, 104.99631);
	CreateDynamicObject(2190, 310.70114, -1494.10925, -45.21636,   0.00000, 0.00000, 104.99634);
	CreateDynamicObject(1616, 277.92636, -1509.63354, -43.22993,   0.00000, 0.00000, 267.23145);
	CreateDynamicObject(1533, 295.40659, -1498.22327, -46.12210,   0.00000, 0.00000, 0.00000);

	// FBI prisión
	CreateObject(14412, 1424.09961, -1560.39941, 4348.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2928, 1441.69922, -1567.09961, 4340.39990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2928, 1441.69995, -1569.69995, 4340.39990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(7191, 1410.29980, -1532.19922, 4341.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7191, 1418.09961, -1532.19922, 4341.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7191, 1426.09998, -1532.19995, 4341.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7191, 1434.09961, -1532.09961, 4341.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7191, 1427.79980, -1552.29980, 4343.20020,   0.00000, 270.00000, 90.24719);
	CreateDynamicObject(14407, 1403.33813, -1553.45825, 4340.10010,   0.00000, 0.00000, 179.49463);
	CreateDynamicObject(7191, 1410.09961, -1589.39941, 4341.10010,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(7191, 1418.09961, -1589.29980, 4341.10010,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(7191, 1425.80005, -1589.40002, 4341.20020,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(7191, 1433.90002, -1589.30005, 4341.10010,   0.00000, 0.00000, 180.24451);
	CreateDynamicObject(7191, 1419.09998, -1569.19995, 4343.20020,   0.00000, 270.00000, 89.74716);
	CreateDynamicObject(8656, 1419.00000, -1567.00000, 4328.10010,   270.00000, 180.00000, 89.75006);
	CreateDynamicObject(8656, 1421.09998, -1567.00000, 4328.10010,   270.00000, 180.00150, 90.00430);
	CreateDynamicObject(8656, 1427.09998, -1567.09998, 4328.29980,   270.00000, 180.00000, 90.00000);
	CreateDynamicObject(8656, 1429.09998, -1567.09998, 4328.29980,   270.00000, 180.00000, 90.00000);
	CreateDynamicObject(8656, 1411.50000, -1567.09998, 4328.20020,   270.00000, 180.00153, 89.75427);
	CreateDynamicObject(8656, 1413.69922, -1567.09961, 4328.20020,   270.00000, 179.99451, 89.74731);
	CreateDynamicObject(8656, 1411.69922, -1554.50000, 4328.20020,   270.00000, 179.99451, 89.74731);
	CreateDynamicObject(8656, 1413.89941, -1554.50000, 4328.20020,   270.00000, 179.99451, 89.74731);
	CreateDynamicObject(8656, 1419.50000, -1554.50000, 4328.20020,   270.00000, 180.00150, 89.75427);
	CreateDynamicObject(8656, 1421.69922, -1554.50000, 4328.20020,   270.00000, 179.99451, 89.74731);
	CreateDynamicObject(8656, 1432.69995, -1554.40002, 4328.10010,   270.00000, 179.99451, 89.74731);
	CreateDynamicObject(8656, 1430.50000, -1554.39941, 4328.10010,   270.00000, 180.00000, 269.74731);
	CreateDynamicObject(1649, 1401.19995, -1562.69995, 4345.29980,   0.00000, 0.00000, 89.75000);
	CreateDynamicObject(1649, 1401.19995, -1558.69995, 4345.29980,   0.00000, 0.00000, 89.74731);
	CreateDynamicObject(1649, 1401.19995, -1554.50000, 4345.29980,   0.00000, 0.00000, 89.74731);
	CreateDynamicObject(1649, 1401.19995, -1566.69995, 4345.20020,   0.00000, 0.00000, 89.74731);
	CreateDynamicObject(1649, 1400.90002, -1566.90002, 4345.39990,   0.00000, 0.00000, 269.49731);
	CreateDynamicObject(1649, 1400.90002, -1562.80005, 4345.39990,   0.00000, 0.00000, 269.99463);
	CreateDynamicObject(1649, 1400.90002, -1558.69995, 4345.39990,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(1649, 1400.90002, -1554.69995, 4345.39990,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(984, 1407.79980, -1567.19922, 4343.89990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1420.69922, -1567.19922, 4343.89990,   0.00000, 0.00000, 269.24744);
	CreateDynamicObject(984, 1430.79980, -1567.29980, 4343.89990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2605, 1399.00000, -1551.80005, 4343.70020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2612, 1400.69995, -1551.50000, 4345.39990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2614, 1401.40002, -1560.80005, 4348.29980,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(2356, 1400.40002, -1552.00000, 4343.29980,   0.00000, 0.00000, 82.75000);
	CreateDynamicObject(2604, 1394.80005, -1546.90002, 4344.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, 1393.00000, -1550.19995, 4345.89990,   0.00000, 0.00000, 90.50000);
	CreateDynamicObject(2610, 1393.00000, -1550.80005, 4344.10010,   0.00000, 0.00000, 89.25000);
	CreateDynamicObject(2610, 1393.00000, -1550.30005, 4344.10010,   0.00000, 0.00000, 89.24744);
	CreateDynamicObject(2610, 1393.00000, -1549.80005, 4344.10010,   0.00000, 0.00000, 89.24744);
	CreateDynamicObject(1723, 1393.40002, -1556.59998, 4343.29980,   0.00000, 0.00000, 89.25000);
	CreateDynamicObject(1723, 1393.40002, -1560.09998, 4343.29980,   0.00000, 0.00000, 89.24744);
	CreateDynamicObject(2762, 1407.09998, -1571.69995, 4339.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2762, 1407.09998, -1569.69995, 4339.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2762, 1407.09998, -1567.69995, 4339.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2762, 1403.19995, -1567.69995, 4339.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2762, 1403.19995, -1569.69995, 4339.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2762, 1403.19995, -1571.69995, 4339.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1844, 1401.50000, -1564.40002, 4339.20020,   0.00000, 0.00000, 89.75000);
	CreateDynamicObject(1886, 1404.90002, -1568.00000, 4343.20020,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(955, 1401.30005, -1562.19995, 4339.60010,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(2342, 1407.09998, -1567.19995, 4340.12988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1410.90002, -1568.90002, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1416.69995, -1573.30005, 4339.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2603, 1419.69995, -1573.00000, 4339.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2603, 1424.69995, -1572.50000, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1432.80005, -1572.30005, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1430.19995, -1572.30005, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1433.19995, -1548.09998, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1433.19995, -1552.50000, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1419.40002, -1548.09998, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1419.40002, -1552.30005, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1411.40002, -1552.50000, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1413.19995, -1552.50000, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2738, 1410.80005, -1547.19995, 4339.79980,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(2738, 1423.30005, -1546.80005, 4339.79980,   0.00000, 0.00000, 0.74951);
	CreateDynamicObject(2738, 1429.30005, -1546.90002, 4339.79980,   0.00000, 0.00000, 0.74707);
	CreateDynamicObject(2738, 1426.59998, -1568.09998, 4339.79980,   0.00000, 0.00000, 0.74707);
	CreateDynamicObject(2738, 1419.50000, -1568.00000, 4339.79980,   0.00000, 0.00000, 0.74707);
	CreateDynamicObject(2738, 1410.69995, -1573.00000, 4339.79980,   0.00000, 0.00000, 90.99707);
	CreateDynamicObject(2684, 1400.19995, -1546.50000, 4345.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2588, 1416.40002, -1546.40002, 4341.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2587, 1420.40002, -1546.40002, 4341.70020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2928, 1392.80005, -1569.69995, 4344.60010,   0.00000, 0.00000, 270.25000);
	CreateDynamicObject(2928, 1392.80005, -1567.19995, 4344.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1280, 1441.00000, -1550.19995, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1441.00000, -1554.19995, 4339.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 1397.09998, -1546.90002, 4343.29980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1412.76855, -1550.37805, 4346.59619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1425.64807, -1550.39746, 4346.59619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1430.29077, -1550.39758, 4346.59619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1437.36230, -1557.47131, 4346.59619,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19313, 1437.36121, -1563.46716, 4346.59619,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19313, 1430.33411, -1570.41516, 4346.59619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1417.61023, -1570.45654, 4346.59619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1408.29187, -1570.45020, 4346.59619,   0.00000, 0.00000, 0.00000);

	// SAEM exterior
	CreateDynamicObject(3626, 2740.43994, -2447.39990, 14.04000,   0.00000, 0.00000, 89.57000);
	CreateDynamicObject(1537, 2742.10596, -2448.76587, 12.81000,   0.00000, 0.00000, 90.18000);
	CreateDynamicObject(3749, 2338.48438, -2354.23096, 18.24123,   0.00000, 0.00000, 44.00000);
	CreateDynamicObject(3749, 2274.45410, -2663.34277, 18.26919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3749, 2459.12500, -2256.07739, 29.91576,   0.00000, 0.00000, 45.99475);
	CreateDynamicObject(10771, 2697.39941, -2298.39941, -0.80000,   0.00000, 0.00000, 0.49988);
	CreateDynamicObject(10770, 2700.69995, -2305.80005, 32.30000,   0.00000, 0.00000, 0.50000);
	CreateDynamicObject(11146, 2688.39990, -2297.89990, 6.00000,   0.00000, 0.00000, 0.49988);
	CreateDynamicObject(3885, 2729.30005, -2305.39990, 14.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3885, 2700.60010, -2304.80005, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11237, 2703.50000, -2305.60010, 32.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3884, 2729.50000, -2305.50000, 14.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3884, 2700.60010, -2304.50000, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3934, 2754.00000, -2305.80005, 11.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16644, 2752.50000, -2331.30005, 12.50000,   0.00000, 0.00000, 89.25000);
	CreateDynamicObject(16644, 2752.69995, -2313.89990, 11.30000,   0.00000, 8.75000, 89.74744);
	CreateDynamicObject(3934, 2780.69995, -2304.80005, 11.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11489, 2708.39990, -2391.50000, 12.80000,   0.00000, 0.00000, 324.00000);
	CreateDynamicObject(1215, 2751.60010, -2330.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2754.19995, -2330.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2751.80005, -2310.80005, 11.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2754.30005, -2310.80005, 11.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2776.39990, -2308.60010, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2784.60010, -2301.19995, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2784.60010, -2308.50000, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2776.60010, -2301.39990, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2757.89990, -2302.30005, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2757.80005, -2309.50000, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2749.89990, -2309.50000, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2750.00000, -2302.39990, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2621.60010, -2298.80005, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3526, 2622.00000, -2304.80005, 11.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3526, 2621.89990, -2292.30005, 11.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8613, 2604.10010, -2293.89990, 7.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1477, 2608.10010, -2298.39990, 2.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3877, 2720.26587, -2520.79077, 14.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 2720.22192, -2486.82959, 14.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 2720.19995, -2409.19995, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 2720.19995, -2401.60010, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2742.00000, -2451.69995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2747.00000, -2485.80005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, 2706.89990, -2300.19995, 13.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(974, 2714.19995, -2301.60010, 4.20000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(974, 2709.80005, -2298.30005, 6.70000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(994, 2754.19995, -2323.89990, 12.60000,   0.00000, 0.00000, 269.75000);
	CreateDynamicObject(994, 2751.69995, -2323.80005, 12.60000,   0.00000, 0.00000, 269.24731);
	CreateDynamicObject(994, 2754.30005, -2311.00000, 11.00000,   0.00000, 351.00000, 270.49194);
	CreateDynamicObject(994, 2751.80005, -2311.10010, 11.10000,   0.00000, 350.99670, 270.48889);
	CreateDynamicObject(8038, 2716.60059, -2404.89941, 23.40000,   0.00000, 0.00000, 44.99500);
	CreateDynamicObject(3093, 2742.00000, -2450.19995, 14.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 2741.30005, -2421.39990, 44.30000,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(1649, 2744.39990, -2424.50000, 44.30000,   0.00000, 0.00000, 314.99500);
	CreateDynamicObject(1649, 2741.30005, -2421.39990, 47.60000,   0.00000, 0.00000, 315.49500);
	CreateDynamicObject(1649, 2744.39990, -2424.50000, 47.60000,   0.00000, 0.00000, 314.99500);
	CreateDynamicObject(16501, 2741.89990, -2425.00000, 49.20000,   0.00000, 90.00000, 45.25000);
	CreateDynamicObject(16501, 2738.89990, -2428.10010, 49.20000,   0.00000, 90.00000, 45.24700);
	CreateDynamicObject(16501, 2738.50000, -2428.50000, 49.20000,   0.00000, 90.00000, 45.24700);
	CreateDynamicObject(16501, 2737.10010, -2427.10010, 49.20000,   0.00000, 90.00000, 45.24700);
	CreateDynamicObject(16501, 2740.50000, -2423.60010, 49.20000,   0.00000, 90.00000, 45.24700);
	CreateDynamicObject(16501, 2740.00000, -2424.10010, 49.20000,   0.00000, 90.00000, 45.49700);
	CreateDynamicObject(1649, 2741.19995, -2430.60010, 47.60000,   0.00000, 0.00000, 224.73900);
	CreateDynamicObject(1649, 2734.89990, -2424.39990, 47.60000,   0.00000, 0.00000, 43.24200);
	CreateDynamicObject(1649, 2738.10010, -2421.30005, 47.60000,   0.00000, 0.00000, 43.49200);
	CreateDynamicObject(1649, 2734.89990, -2424.39990, 44.30000,   0.00000, 0.00000, 45.24200);
	CreateDynamicObject(1649, 2744.29980, -2427.50000, 47.60000,   0.00000, 0.00000, 224.98900);
	CreateDynamicObject(1649, 2744.30005, -2427.50000, 44.30000,   0.00000, 0.00000, 224.98900);
	CreateDynamicObject(1649, 2741.20020, -2430.59961, 44.30000,   0.00000, 0.00000, 224.23900);
	CreateDynamicObject(1649, 2738.10010, -2421.30005, 44.30000,   0.00000, 0.00000, 42.98900);
	CreateDynamicObject(1649, 2738.10010, -2430.69995, 47.60000,   0.00000, 0.00000, 135.73100);
	CreateDynamicObject(1649, 2738.10010, -2430.69995, 44.30000,   0.00000, 0.00000, 135.23100);
	CreateDynamicObject(1649, 2735.00000, -2427.60010, 44.30000,   0.00000, 0.00000, 134.23599);
	CreateDynamicObject(1649, 2735.00000, -2427.60010, 47.60000,   0.00000, 0.00000, 132.73599);
	CreateDynamicObject(1649, 2734.89990, -2427.60010, 47.60000,   0.00000, 0.00000, 312.73099);
	CreateDynamicObject(1649, 2738.10059, -2430.70020, 47.60000,   0.00000, 0.00000, 315.73099);
	CreateDynamicObject(1649, 2735.00000, -2427.59961, 44.30000,   0.00000, 0.00000, 314.23099);
	CreateDynamicObject(1649, 2738.10059, -2430.70020, 44.30000,   0.00000, 0.00000, 315.23099);
	CreateDynamicObject(1649, 2741.20020, -2430.59961, 47.60000,   0.00000, 0.00000, 44.73600);
	CreateDynamicObject(1649, 2744.29980, -2427.50000, 47.60000,   0.00000, 0.00000, 44.98900);
	CreateDynamicObject(1649, 2744.29980, -2427.50000, 44.30000,   0.00000, 0.00000, 44.98900);
	CreateDynamicObject(1649, 2741.20020, -2430.59961, 44.30000,   0.00000, 0.00000, 44.23600);
	CreateDynamicObject(1649, 2744.40039, -2424.50000, 47.60000,   0.00000, 0.00000, 134.99500);
	CreateDynamicObject(1649, 2741.29980, -2421.39941, 47.60000,   0.00000, 0.00000, 135.49400);
	CreateDynamicObject(1649, 2741.29980, -2421.39941, 44.30000,   0.00000, 0.00000, 134.99500);
	CreateDynamicObject(1649, 2744.40039, -2424.50000, 44.30000,   0.00000, 0.00000, 134.99500);
	CreateDynamicObject(1649, 2734.90039, -2424.39941, 47.60000,   0.00000, 0.00000, 223.23700);
	CreateDynamicObject(1649, 2734.90039, -2424.39941, 44.30000,   0.00000, 0.00000, 225.23599);
	CreateDynamicObject(1649, 2738.10059, -2421.29980, 44.30000,   0.00000, 0.00000, 223.48399);
	CreateDynamicObject(1649, 2738.10059, -2421.29980, 47.60000,   0.00000, 0.00000, 223.48900);
	CreateDynamicObject(16501, 2739.19995, -2421.89990, 14.80000,   90.00000, 0.00000, 267.00000);
	CreateDynamicObject(16501, 2739.19995, -2421.89990, 20.80000,   90.00000, 0.00000, 266.99500);
	CreateDynamicObject(16501, 2739.19995, -2421.89990, 27.10000,   90.00000, 0.00000, 266.99500);
	CreateDynamicObject(16501, 2739.19995, -2421.89990, 31.00000,   90.00000, 0.00000, 266.99500);
	CreateDynamicObject(16501, 2743.60010, -2426.10010, 16.00000,   90.00000, 0.00000, 182.74500);
	CreateDynamicObject(16501, 2743.60010, -2426.10010, 23.00000,   90.00000, 0.00000, 182.24100);
	CreateDynamicObject(16501, 2743.60010, -2426.10010, 28.80000,   90.00000, 0.00000, 182.24100);
	CreateDynamicObject(16501, 2743.60010, -2426.10010, 32.00000,   90.00000, 0.00000, 182.24100);
	CreateDynamicObject(16501, 2739.30005, -2430.19995, 15.60000,   90.00000, 0.00000, 91.99100);
	CreateDynamicObject(16501, 2739.30005, -2430.19995, 22.40000,   90.00000, 0.00000, 91.98900);
	CreateDynamicObject(16501, 2739.30005, -2430.19995, 28.60000,   90.00000, 0.00000, 91.98900);
	CreateDynamicObject(16501, 2739.30005, -2430.19995, 31.60000,   90.00000, 0.00000, 91.98900);
	CreateDynamicObject(16501, 2735.60010, -2426.60010, 16.00000,   90.00000, 0.00000, 182.24100);
	CreateDynamicObject(16501, 2735.60010, -2426.60010, 22.80000,   90.00000, 0.00000, 182.24100);
	CreateDynamicObject(16501, 2735.60010, -2426.60010, 28.80000,   90.00000, 0.00000, 182.24100);
	CreateDynamicObject(16501, 2735.60010, -2426.60010, 33.00000,   90.00000, 0.00000, 182.24100);
	CreateDynamicObject(2954, 2743.60010, -2425.50000, 12.60000,   0.00000, 0.00000, 1.75000);
	CreateDynamicObject(3386, 2739.60010, -2431.19995, 42.80000,   0.00000, 0.00000, 47.50000);
	CreateDynamicObject(3386, 2738.60010, -2430.30005, 42.80000,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(3386, 2737.89990, -2429.50000, 42.80000,   0.00000, 0.00000, 224.00000);
	CreateDynamicObject(3389, 2734.80005, -2425.89990, 42.80000,   0.00000, 0.00000, 31.00000);
	CreateDynamicObject(3390, 2736.39990, -2427.60010, 42.80000,   0.00000, 0.00000, 224.00000);
	CreateDynamicObject(3391, 2736.80005, -2423.69995, 42.80000,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(3396, 2740.50000, -2421.89990, 42.80000,   0.00000, 0.00000, 46.00000);
	CreateDynamicObject(3385, 2742.19995, -2423.10010, 43.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16782, 2744.19995, -2427.30005, 44.80000,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(16782, 2741.89990, -2429.50000, 44.80000,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(3877, 2745.00000, -2425.89990, 50.90000,   0.00000, 0.00000, 314.25000);
	CreateDynamicObject(3877, 2739.39990, -2431.69995, 50.90000,   0.00000, 0.00000, 315.50000);
	CreateDynamicObject(3877, 2739.50000, -2420.50000, 50.90000,   0.00000, 0.00000, 314.24701);
	CreateDynamicObject(3877, 2733.80005, -2426.19995, 50.90000,   0.00000, 0.00000, 314.24701);
	CreateDynamicObject(1682, 2741.00000, -2424.50000, 55.70000,   0.00000, 0.00000, 315.50000);
	CreateDynamicObject(1663, 2737.00000, -2427.00000, 43.20000,   0.00000, 0.00000, 290.00000);
	CreateDynamicObject(1663, 2737.10010, -2424.60010, 43.20000,   0.00000, 0.00000, 183.99500);
	CreateDynamicObject(1663, 2739.30005, -2422.30005, 43.20000,   0.00000, 0.00000, 79.49400);
	CreateDynamicObject(3396, 2743.60010, -2424.89990, 42.80000,   0.00000, 0.00000, 46.00000);
	CreateDynamicObject(1663, 2742.50000, -2425.30005, 43.20000,   0.00000, 0.00000, 79.49200);
	CreateDynamicObject(1684, 2721.92920, -2425.27612, 14.07800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3264, 2486.48633, -2274.40771, 23.92680,   0.00000, 0.00000, 225.83095);
	CreateDynamicObject(3264, 2477.74561, -2283.48608, 23.92680,   0.00000, 0.00000, 225.73094);
	CreateDynamicObject(10763, 2786.34131, -2534.25903, 45.09930,   0.00000, 0.00000, 314.76245);
	CreateDynamicObject(7981, 2800.34375, -2493.59253, 17.45216,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1682, 2798.16040, -2488.64746, 28.52810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3268, 2740.43921, -2471.63037, 12.41578,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3268, 2704.10986, -2472.35498, 12.41580,   0.00000, 0.00000, 359.69696);
	CreateDynamicObject(3268, 2704.50464, -2436.15820, 12.41580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9244, 2524.38599, -2403.02515, 17.57770,   0.00000, 0.00000, 134.30150);
	CreateDynamicObject(9243, 2550.93823, -2409.39722, 17.53973,   0.00000, 0.00000, 44.83178);
	CreateDynamicObject(11454, 2644.93628, -2443.25952, 12.64659,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9241, 2749.43945, -2358.64624, 14.34646,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9241, 2717.50171, -2358.35596, 14.34646,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3286, 2685.20142, -2546.61475, 17.14395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3286, 2685.50317, -2528.95923, 17.14395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3287, 2681.13599, -2529.93286, 16.99555,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3287, 2692.36230, -2535.70581, 16.99555,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3287, 2681.04053, -2538.96948, 16.99555,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3287, 2710.80542, -2528.12329, 16.99555,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3286, 2704.51343, -2546.10938, 17.14395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3286, 2705.54956, -2527.97705, 17.14395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3287, 2710.60034, -2539.70142, 16.99555,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3287, 2700.16138, -2535.60791, 16.99555,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8434, 2463.85107, -2538.17554, 17.68855,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(4199, 2504.48877, -2418.15869, 13.92500,   0.00000, 0.00000, 135.01823);
	CreateDynamicObject(16098, 2502.06592, -2368.87598, 17.04106,   0.00000, 0.00000, 315.17798);
	CreateDynamicObject(16098, 2461.47290, -2409.47974, 17.04106,   0.00000, 0.00000, 315.17798);
	CreateDynamicObject(16613, 2520.12720, -2529.38745, 17.52341,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16138, 2526.05981, -2439.69116, 12.44427,   0.00000, 0.00000, 44.11122);
	CreateDynamicObject(16137, 2509.90234, -2488.28003, 12.59660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10610, 2455.14771, -2617.17139, 22.22780,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(10676, 2397.99146, -2606.72241, 13.82616,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2384.23193, -2621.22290, 13.20048,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2411.79053, -2622.10376, 13.20048,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2384.24829, -2634.05957, 13.20048,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2384.26685, -2646.86084, 13.20048,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2411.71924, -2647.68018, 13.20048,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2411.77368, -2634.87427, 13.20048,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1595, 2386.28125, -2596.29272, 26.50570,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1595, 2385.95142, -2617.72363, 26.50570,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1694, 2406.44482, -2566.55615, 29.93606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2551.08057, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2562.95459, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2574.88110, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2586.83960, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2598.76294, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2610.76953, -2330.64990, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2622.73828, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2634.74976, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2646.70435, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2658.62305, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2670.52881, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2682.41016, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2798.90649, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2786.95264, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2775.04199, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2810.87988, -2330.43555, 12.56740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2810.85547, -2342.30420, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.85547, -2354.27222, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.86816, -2366.25220, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.83765, -2378.18262, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.82300, -2390.14600, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.82471, -2402.07861, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.85547, -2414.00366, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.89771, -2493.56348, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.90259, -2505.47827, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.87695, -2517.42285, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.85376, -2529.32202, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.93237, -2541.28784, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2810.93530, -2553.22314, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2811.01343, -2565.19849, 12.56740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2799.14136, -2565.18701, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2787.15161, -2565.13452, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2775.23022, -2565.12964, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2763.31494, -2565.16235, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2738.46094, -2565.74561, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2726.53345, -2565.80005, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2714.62451, -2565.75757, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2702.71582, -2565.81860, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2690.78369, -2565.84741, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2678.86572, -2565.86572, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2667.00146, -2565.87378, 12.56740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2667.27466, -2553.96362, 12.46740,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2667.32080, -2542.02759, 12.46740,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2667.22559, -2530.07642, 12.46740,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2544.96851, -2330.40625, 12.57150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2667.20923, -2518.13892, 12.46740,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2666.36963, -2482.16504, 12.46740,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2666.33813, -2470.18213, 12.46740,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2666.36084, -2458.22510, 12.46740,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2654.34546, -2458.15308, 12.46740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2642.41895, -2458.13232, 12.46740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2630.45483, -2458.13379, 12.46740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2604.70508, -2458.86450, 12.46740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2592.75366, -2458.87988, 12.46740,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2580.80518, -2458.84985, 12.46740,   0.00000, 0.00000, 359.69696);
	CreateDynamicObject(987, 2568.87915, -2458.80615, 12.46740,   0.00000, 0.00000, 359.69696);
	CreateDynamicObject(987, 2556.93237, -2458.75244, 12.46740,   0.00000, 0.00000, 359.69696);
	CreateDynamicObject(987, 2556.85474, -2470.69507, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2556.82617, -2482.64917, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2568.93018, -2494.58862, 12.57150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2556.87085, -2494.56616, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2561.24072, -2525.62891, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2561.22192, -2537.61304, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2561.21021, -2549.57983, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2561.19653, -2561.52563, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2561.17969, -2567.50293, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2549.28833, -2567.43701, 12.57150,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2537.34668, -2567.44312, 12.57150,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(987, 2525.41406, -2567.44312, 12.57150,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(987, 2525.40112, -2579.46240, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2525.39038, -2591.40234, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2525.37939, -2603.34326, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2525.39746, -2615.27612, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2525.37451, -2627.26855, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2525.35254, -2639.18579, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2525.32983, -2651.11572, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2525.34619, -2663.07104, 12.57150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 2525.32349, -2674.99268, 12.57150,   0.00000, 0.00000, 89.79900);
	CreateDynamicObject(987, 2525.29907, -2686.89331, 12.57150,   0.00000, 0.00000, 89.79900);
	CreateDynamicObject(987, 2525.26343, -2695.89697, 12.57150,   0.00000, 0.00000, 89.79900);
	CreateDynamicObject(987, 2513.37134, -2695.85791, 12.57150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2501.43750, -2695.86890, 12.57150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2489.50122, -2695.84863, 12.57150,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(987, 2477.58545, -2695.86353, 12.57150,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(987, 2465.63110, -2695.80298, 12.57150,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(987, 2444.54858, -2696.76123, 12.57150,   0.00000, 0.00000, 359.69897);
	CreateDynamicObject(987, 2432.60815, -2696.70361, 12.57150,   0.00000, 0.00000, 359.69897);
	CreateDynamicObject(987, 2420.64136, -2696.62842, 12.57150,   0.00000, 0.00000, 359.69897);
	CreateDynamicObject(987, 2408.73657, -2696.57227, 12.57150,   0.00000, 0.00000, 359.69897);
	CreateDynamicObject(987, 2396.78418, -2696.50049, 12.57150,   0.00000, 0.00000, 359.69897);
	CreateDynamicObject(987, 2384.85547, -2696.38940, 12.57150,   0.00000, 0.00000, 359.69897);
	CreateDynamicObject(987, 2378.86694, -2696.30078, 12.57150,   0.00000, 0.00000, 359.39594);
	CreateDynamicObject(987, 2378.92261, -2684.39087, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2378.89478, -2672.40625, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.11450, -2643.77197, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.11987, -2631.85376, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.17163, -2619.91382, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.17554, -2607.98413, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.15161, -2596.05664, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.17822, -2584.12085, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.16357, -2572.21021, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.15015, -2560.25903, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.17041, -2548.33057, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.17798, -2536.41235, 12.57150,   0.00000, 0.00000, 269.89999);
	CreateDynamicObject(987, 2374.02466, -2513.92017, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.13013, -2502.05249, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.20972, -2490.09985, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.24902, -2478.14331, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2374.24414, -2466.14160, 12.57150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 2382.57446, -2457.64966, 12.57150,   0.00000, 0.00000, 225.57233);
	CreateDynamicObject(987, 2390.90747, -2449.08984, 12.57150,   0.00000, 0.00000, 225.57233);
	CreateDynamicObject(987, 2399.32324, -2440.58057, 12.57150,   0.00000, 0.00000, 225.57233);
	CreateDynamicObject(987, 2407.66919, -2432.00122, 12.57150,   0.00000, 0.00000, 225.57233);
	CreateDynamicObject(987, 2424.88159, -2415.07153, 12.57150,   0.00000, 0.00000, 225.57233);
	CreateDynamicObject(987, 2433.19189, -2406.57983, 12.57150,   0.00000, 0.00000, 225.57233);
	CreateDynamicObject(987, 2441.67261, -2398.17065, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2450.13892, -2389.80029, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2458.57568, -2381.39746, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2467.06738, -2372.95654, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2475.49854, -2364.51782, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2483.91235, -2356.06567, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2492.40698, -2347.65723, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2500.88403, -2339.20679, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2509.32300, -2330.74707, 12.57150,   0.00000, 0.00000, 224.92574);
	CreateDynamicObject(987, 2521.19116, -2330.82373, 12.57150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 2533.10303, -2330.86450, 12.57150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(9260, 2403.08374, -2500.62451, 17.56260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 2429.96460, -2422.52905, 12.52689,   0.00000, 0.00000, 315.17798);
	CreateDynamicObject(3279, 2378.37451, -2544.72363, 12.73190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 2408.33032, -2445.75732, 12.73193,   0.00000, 0.00000, 315.17798);
	CreateDynamicObject(3279, 2378.96460, -2517.32056, 12.73190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 2379.65454, -2647.61157, 12.61436,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 2384.41724, -2680.12354, 12.61436,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 2447.26563, -2691.69507, 12.61440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3279, 2487.53882, -2690.75610, 12.61440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3279, 2742.15503, -2559.68115, 12.59730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3279, 2609.48315, -2453.42896, 12.59730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3279, 2671.51392, -2335.36670, 12.59730,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3279, 2776.41431, -2338.33032, 12.39226,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3279, 2802.43701, -2406.71533, 12.59730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3279, 2803.01538, -2545.29639, 12.59730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10773, 2799.49390, -2337.39136, 15.16700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10773, 2728.62036, -2548.83276, 15.16700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3787, 2793.93433, -2340.98022, 13.16963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3787, 2791.99609, -2345.26563, 13.16963,   0.00000, 0.00000, 41.13348);
	CreateDynamicObject(3787, 2788.50317, -2342.43677, 13.16963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, 2790.75293, -2351.51001, 12.44914,   0.00000, 0.00000, 15.81788);
	CreateDynamicObject(964, 2795.09692, -2352.17358, 12.50780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, 2793.30713, -2351.13599, 12.50780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, 2796.01099, -2349.54077, 12.50780,   0.00000, 0.00000, 28.69576);
	CreateDynamicObject(964, 2792.58643, -2349.06567, 12.50780,   0.00000, 0.00000, 28.69576);
	CreateDynamicObject(964, 2789.15454, -2349.69971, 12.44914,   0.00000, 0.00000, 54.46963);
	CreateDynamicObject(2973, 2805.06226, -2353.22510, 12.60631,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 2854.68872, -2428.29932, 10.19081,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3264, 2365.69971, -2390.36621, 12.50380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3264, 2373.40845, -2381.18335, 12.50380,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2060, 2593.59888, -2381.58228, 12.94415,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(2060, 2593.62427, -2381.52441, 12.64114,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(2060, 2594.54785, -2384.97925, 12.64114,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(2060, 2586.78882, -2391.84082, 12.84928,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(967, 2588.14063, -2391.26782, 12.55340,   0.00000, 0.00000, 135.98051);
	CreateDynamicObject(966, 2589.23975, -2390.33105, 12.24849,   0.00000, 0.00000, 224.39345);
	CreateDynamicObject(968, 2589.13306, -2390.34497, 13.09270,   0.00000, -30.00000, 224.39340);
	CreateDynamicObject(2060, 2594.57910, -2385.02515, 13.14818,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(2060, 2586.79639, -2391.82666, 13.04008,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(2060, 2586.76123, -2391.80493, 12.63708,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(967, 2409.32202, -2431.09375, 12.55340,   0.00000, 0.00000, 135.98051);
	CreateDynamicObject(968, 2410.06909, -2430.21094, 13.09270,   0.00000, -30.00000, 224.39340);
	CreateDynamicObject(966, 2409.97485, -2430.19458, 12.24849,   0.00000, 0.00000, 224.39345);
	CreateDynamicObject(2060, 2407.99243, -2431.42676, 12.95028,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(2060, 2407.99390, -2431.39819, 12.63708,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(3749, 2589.51050, -2387.12280, 17.97313,   0.00000, 0.00000, 44.35700);
	CreateDynamicObject(2060, 2594.57910, -2385.02515, 12.84517,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(3666, 2583.10645, -2389.26245, 13.01507,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2592.24854, -2380.39307, 13.01507,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 2413.20190, -2428.95679, 17.90217,   0.00000, 0.00000, 43.61972);
	CreateDynamicObject(3666, 2415.48413, -2422.83276, 12.95401,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2406.82544, -2430.77783, 12.95401,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 2382.90649, -2663.30981, 18.27360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(967, 2381.70996, -2667.42944, 12.48750,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(966, 2381.25146, -2666.01465, 12.48810,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(968, 2381.23706, -2666.00977, 13.16730,   0.00000, -30.00000, 270.00000);
	CreateDynamicObject(3264, 2290.29346, -2669.24438, 12.47880,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3264, 2302.30713, -2669.11841, 12.47880,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3264, 2290.53223, -2657.25928, 12.47880,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3264, 2302.26904, -2657.31543, 12.47880,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(7023, 2482.17285, -2440.76294, 12.77203,   0.00000, 0.00000, 312.23193);
	CreateDynamicObject(8397, 2585.57642, -2344.41113, 18.63862,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3330, 2613.62158, -2504.16846, 1.93760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10766, 2838.32251, -2442.36450, 10.65000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10767, 2838.54565, -2569.69360, -2.03200,   0.00000, 0.00000, 225.00000);
	CreateDynamicObject(8038, 2654.28027, -2359.00415, 32.54473,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(4726, 2503.60229, -2458.19971, 11.55021,   0.00000, 0.00000, 4.36038);
	CreateDynamicObject(18850, 2507.82446, -2617.84619, 1.86656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10766, 2838.38306, -2696.85425, 10.65000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1684, 2718.56323, -2388.07202, 14.07800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3877, 2720.19995, -2500.19995, 14.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 2720.19995, -2507.80005, 14.00000,   0.00000, 0.00000, 0.00000);

	// SAEM interior principal
	CreateDynamicObject(16150,2911.38671875,2132.02832031,-0.67968750,0.00000000,0.00000000,357.99499512); //object(ufo_barinterior) (1)
	CreateDynamicObject(14842,2918.41918945,2132.07641602,-0.08257473,0.00000000,0.00000000,269.00000000); //object(int_policea07) (1)
	CreateDynamicObject(2738,2919.18725586,2125.79589844,-0.06902504,0.00000000,0.00000000,178.00000000); //object(cj_toilet_bs) (1)
	CreateDynamicObject(2738,2917.95947266,2125.76635742,-0.06902504,0.00000000,0.00000000,177.99499512); //object(cj_toilet_bs) (2)
	CreateDynamicObject(2738,2916.61914062,2125.77783203,-0.06902504,0.00000000,0.00000000,177.99499512); //object(cj_toilet_bs) (3)
	CreateDynamicObject(2739,2915.72265625,2130.07666016,-0.64300251,0.00000000,0.00000000,86.00000000); //object(cj_b_sink1) (1)
	CreateDynamicObject(2603,2909.25463867,2136.75048828,-0.21862763,0.00000000,0.00000000,266.25000000); //object(police_cell_bed) (1)
	CreateDynamicObject(2603,2909.19555664,2134.43017578,-0.21862763,0.00000000,0.00000000,266.24816895); //object(police_cell_bed) (2)
	CreateDynamicObject(2603,2909.06030273,2131.92919922,-0.21862763,0.00000000,0.00000000,266.24816895); //object(police_cell_bed) (3)
	CreateDynamicObject(2603,2913.96582031,2136.75756836,-0.21862763,0.00000000,0.00000000,266.24816895); //object(police_cell_bed) (4)
	CreateDynamicObject(2603,2913.87060547,2133.76928711,-0.21862763,0.00000000,0.00000000,266.24816895); //object(police_cell_bed) (5)
	CreateDynamicObject(2603,2913.84692383,2131.59375000,-0.21862763,0.00000000,0.00000000,266.24816895); //object(police_cell_bed) (6)
	CreateDynamicObject(2603,2908.90722656,2129.15844727,-0.21862763,0.00000000,0.00000000,266.24816895); //object(police_cell_bed) (7)
	CreateDynamicObject(2596,2911.75000000,2137.87133789,1.69875479,0.00000000,0.00000000,0.00000000); //object(cj_sex_tv) (1)
	CreateDynamicObject(2331,2907.95239258,2130.53564453,-0.42821521,0.00000000,0.00000000,0.00000000); //object(cj_bed_furn_1) (1)
	CreateDynamicObject(2331,2907.88208008,2133.12353516,-0.42821521,0.00000000,0.00000000,0.00000000); //object(cj_bed_furn_1) (2)
	CreateDynamicObject(2331,2908.10937500,2135.66601562,-0.42821521,0.00000000,0.00000000,0.00000000); //object(cj_bed_furn_1) (3)
	CreateDynamicObject(2331,2914.83081055,2135.27392578,-0.42821521,0.00000000,0.00000000,0.00000000); //object(cj_bed_furn_1) (4)
	CreateDynamicObject(2331,2914.93212891,2132.67895508,-0.42821521,0.00000000,0.00000000,0.00000000); //object(cj_bed_furn_1) (5)
	CreateDynamicObject(2002,2912.03564453,2119.21630859,-0.07541287,0.00000000,0.00000000,178.00000000); //object(water_coolnu) (1)
	CreateDynamicObject(1828,2909.48168945,2126.70898438,-0.67968750,0.00000000,0.00000000,0.00000000); //object(man_sdr_rug) (1)
	CreateDynamicObject(1481,2914.12426758,2119.21435547,0.61733305,0.00000000,0.00000000,219.75000000); //object(dyn_bar_b_q) (1)
	CreateDynamicObject(2762,2909.51318359,2121.48510742,0.31939495,0.00000000,0.00000000,0.00000000); //object(cj_chick_table) (1)
	CreateDynamicObject(2762,2909.51806641,2122.52612305,0.31939495,0.00000000,0.00000000,0.00000000); //object(cj_chick_table) (2)
	CreateDynamicObject(2762,2911.58984375,2122.53100586,0.32706249,0.00000000,0.00000000,0.00000000); //object(cj_chick_table) (3)
	CreateDynamicObject(2762,2911.58325195,2121.49291992,0.31939495,0.00000000,0.00000000,0.00000000); //object(cj_chick_table) (4)
	CreateDynamicObject(2121,2911.63989258,2120.15551758,0.42747712,0.00000000,0.00000000,180.00000000); //object(low_din_chair_2) (1)
	CreateDynamicObject(2121,2910.44311523,2120.15673828,0.42747712,0.00000000,0.00000000,179.99450684); //object(low_din_chair_2) (2)
	CreateDynamicObject(2121,2909.40649414,2120.12133789,0.42747712,0.00000000,0.00000000,179.99450684); //object(low_din_chair_2) (3)
	CreateDynamicObject(2121,2909.31469727,2124.02441406,0.42747712,0.00000000,0.00000000,358.24450684); //object(low_din_chair_2) (4)
	CreateDynamicObject(2121,2910.70751953,2124.03564453,0.42747712,0.00000000,0.00000000,358.24218750); //object(low_din_chair_2) (5)
	CreateDynamicObject(2121,2911.96997070,2124.01025391,0.42747712,0.00000000,0.00000000,358.24218750); //object(low_din_chair_2) (6)

	// SAEM interior visitas
	CreateDynamicObject(16662, 431.07251, 2295.58618, 8904.12695,   0.00000, 0.00000, 64.25500);
	CreateDynamicObject(16782, 429.41916, 2295.08765, 8905.13574,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 439.69135, 2298.13721, 8902.92285,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 438.25098, 2298.09448, 8902.92285,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 435.94043, 2295.25708, 8902.92285,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 438.25098, 2292.34375, 8902.92285,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 439.75098, 2292.34375, 8902.92285,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1714, 441.90039, 2294.66455, 8902.92285,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 441.90039, 2295.88379, 8902.92285,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2928, 448.66022, 2296.34546, 8905.11328,   0.00000, 0.00000, 284.56995);
	CreateDynamicObject(2928, 448.70410, 2293.74731, 8905.13867,   0.00000, 0.00000, 256.33801);
	CreateDynamicObject(16656, 323.33789, 2349.18555, 8907.41797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2929, 311.09714, 2345.27686, 8906.06152,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3095, 314.78580, 2359.58301, 8904.41797,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(14782, 333.39362, 2354.51611, 8905.43359,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14782, 333.39355, 2344.51563, 8905.43359,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(11631, 323.16818, 2348.00073, 8905.67090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2063, 320.52637, 2347.62793, 8905.32715,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2063, 317.98242, 2347.62793, 8905.32715,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2063, 315.44214, 2347.62793, 8905.32715,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2063, 312.90381, 2347.62793, 8905.32715,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(964, 312.18411, 2352.98901, 8904.42480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(964, 312.45776, 2354.40039, 8904.42480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(964, 312.18359, 2355.83179, 8904.42480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(964, 312.43359, 2357.38110, 8904.42480,   0.00000, 0.00000, 99.92499);
	CreateDynamicObject(2612, 324.55103, 2340.80957, 8906.29688,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2611, 331.74023, 2340.81836, 8906.31445,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2614, 328.25525, 2357.53418, 8908.07520,   12.25000, 0.25000, 1.25000);
	CreateDynamicObject(925, 320.99564, 2358.16089, 8905.47949,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(931, 321.01129, 2355.60913, 8905.47949,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2358, 312.25879, 2350.14063, 8904.54102,   0.00000, 0.00000, 97.94000);
	CreateDynamicObject(2358, 311.75879, 2350.90210, 8904.54102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 311.75879, 2351.73926, 8904.54102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2985, 311.95950, 2359.00903, 8904.41797,   0.00000, 0.00000, 304.41998);
	CreateDynamicObject(2985, 313.45898, 2359.00879, 8904.41797,   0.00000, 0.00000, 340.14999);
	CreateDynamicObject(3794, 315.27972, 2356.30176, 8905.01758,   0.00000, 0.00000, 258.09009);
	CreateDynamicObject(3794, 317.55319, 2355.90356, 8905.01758,   0.00000, 0.00000, 271.98499);
	CreateDynamicObject(2971, 317.58398, 2350.74316, 8904.41797,   0.00000, 0.00000, 59.55002);
	CreateDynamicObject(1714, 324.25931, 2348.30933, 8904.42480,   0.00000, 0.00000, 280.59998);
	CreateDynamicObject(1431, 322.96432, 2342.16528, 8904.95898,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 328.14355, 2357.38647, 8905.43359,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2358, 311.81372, 2349.09277, 8904.54102,   0.00000, 0.00000, 79.00000);
	CreateDynamicObject(1584, 329.27994, 2340.46069, 8904.74805,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1583, 327.66278, 2340.46021, 8904.94141,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1585, 328.45837, 2340.41626, 8905.14746,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1330, 322.95447, 2356.10889, 8904.89453,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 322.75034, 2355.04395, 8904.41797,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 323.70987, 2357.44580, 8905.02344,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16782, 333.36020, 2349.37866, 8907.83691,   0.00000, 12.00000, 180.00000);
	CreateDynamicObject(2606, 333.72656, 2352.78223, 8908.05762,   29.99817, 0.00000, 270.00000);
	CreateDynamicObject(2606, 333.72656, 2355.78223, 8908.05762,   29.99817, 0.00000, 270.00000);
	CreateDynamicObject(2606, 333.72656, 2345.99268, 8908.05762,   29.99817, 0.00000, 270.00000);
	CreateDynamicObject(2606, 333.72656, 2343.07739, 8908.05762,   29.99817, 0.00000, 270.00000);
	CreateDynamicObject(964, 314.68359, 2353.48828, 8904.42480,   0.00000, 0.00000, 54.26999);
	CreateDynamicObject(1217, 316.38776, 2352.38525, 8904.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 316.88770, 2353.09521, 8904.83887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 320.94043, 2348.87646, 8904.78906,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 321.41455, 2349.57324, 8904.78906,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2358, 312.50879, 2351.39063, 8904.54102,   0.00000, 0.00000, 147.56262);
	CreateDynamicObject(2973, 314.67163, 2349.98975, 8904.41797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3013, 314.89899, 2353.52539, 8905.53809,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 317.89606, 2352.42358, 8904.41797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14666, 317.74313, 2350.72070, 8904.47949,   0.00000, 90.00000, 258.76498);
	CreateDynamicObject(2690, 333.67639, 2350.83716, 8904.78418,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 333.30936, 2349.85449, 8904.42480,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 333.30859, 2348.87695, 8904.42480,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2332, 332.20908, 2357.98145, 8906.00293,   0.00000, 0.00000, 0.00000);

	// SAEM interior hospital
	CreateDynamicObject(14668, 1241.97754, 316.33203, -12.74219,   0.00000, 0.00000, 155.50049);
	CreateDynamicObject(16500, 1250.81274, 320.83963, -10.74798,   0.00000, 0.00000, 155.54028);
	CreateDynamicObject(16500, 1239.35352, 326.01270, -10.74798,   0.00000, 0.00000, 335.35217);
	CreateDynamicObject(2948, 1247.15527, 325.59375, -12.74219,   0.00000, 0.00000, 244.99512);
	CreateDynamicObject(2948, 1245.40308, 326.37210, -12.74219,   0.00000, 0.00000, 66.34619);
	CreateDynamicObject(2948, 1247.12720, 325.60193, -12.74219,   0.00000, 0.00000, 66.09619);
	CreateDynamicObject(2948, 1245.40234, 326.37207, -12.74219,   0.00000, 0.00000, 245.70691);
	CreateDynamicObject(16500, 1252.00989, 322.11307, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1239.74902, 327.75781, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1235.33691, 329.73535, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1240.55054, 322.84387, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1247.58594, 319.62402, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1256.47546, 320.10950, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1248.91370, 316.69904, -10.77297,   0.00000, 0.00000, 334.99854);
	CreateDynamicObject(1523, 1247.88477, 314.44531, -12.74219,   0.00000, 0.00000, 244.41835);
	CreateDynamicObject(16500, 1246.14551, 310.84180, -10.77297,   0.00000, 0.00000, 334.98962);
	CreateDynamicObject(16500, 1252.14880, 317.80109, -10.77297,   0.00000, 0.00000, 245.26428);
	CreateDynamicObject(1523, 1254.36462, 316.69269, -12.74219,   0.00000, 0.00000, 336.14319);
	CreateDynamicObject(1649, 1248.17285, 314.98782, -8.57648,   0.00000, 0.00000, 244.40540);
	CreateDynamicObject(1649, 1248.17285, 314.98730, -8.60148,   0.00000, 0.00000, 64.36163);
	CreateDynamicObject(1649, 1246.27283, 311.03754, -8.55148,   0.00000, 0.00000, 64.36163);
	CreateDynamicObject(1649, 1246.30090, 311.09235, -8.55148,   0.00000, 0.00000, 244.40186);
	CreateDynamicObject(1649, 1254.16479, 316.79169, -8.57645,   0.00000, 0.00000, 335.97522);
	CreateDynamicObject(1649, 1254.16406, 316.79102, -8.57645,   0.00000, 0.00000, 155.72510);
	CreateDynamicObject(16500, 1247.32373, 307.67590, -10.77297,   0.00000, 0.00000, 245.75934);
	CreateDynamicObject(16500, 1251.80969, 305.65091, -10.77297,   0.00000, 0.00000, 245.75940);
	CreateDynamicObject(16500, 1243.76367, 311.42090, -10.77297,   0.00000, 0.00000, 245.75867);
	CreateDynamicObject(1523, 1241.49548, 312.37070, -12.74219,   0.00000, 0.00000, 244.42029);
	CreateDynamicObject(1523, 1240.27075, 309.60211, -12.74219,   0.00000, 0.00000, 65.72797);
	CreateDynamicObject(16500, 1247.50244, 307.82385, -10.77297,   0.00000, 0.00000, 65.71851);
	CreateDynamicObject(16500, 1252.05347, 305.75854, -10.77297,   0.00000, 0.00000, 65.71472);
	CreateDynamicObject(1649, 1240.60669, 310.42484, -8.60148,   0.00000, 0.00000, 64.60791);
	CreateDynamicObject(1649, 1240.60645, 310.42480, -8.60148,   0.00000, 0.00000, 244.06482);
	CreateDynamicObject(16500, 1239.35999, 326.08981, -10.74798,   0.00000, 0.00000, 155.89246);
	CreateDynamicObject(16500, 1239.72461, 327.66138, -10.74798,   0.00000, 0.00000, 245.43292);
	CreateDynamicObject(16500, 1235.31458, 329.69034, -10.74798,   0.00000, 0.00000, 245.43292);
	CreateDynamicObject(1533, 1234.31519, 309.46381, -12.74219,   0.00000, 0.00000, 155.50513);
	CreateDynamicObject(1533, 1232.99585, 310.07184, -12.74219,   0.00000, 0.00000, 155.50049);
	CreateDynamicObject(16500, 1238.01563, 310.55383, -10.77297,   0.00000, 0.00000, 245.75867);
	CreateDynamicObject(16500, 1234.83643, 309.34338, -10.77297,   0.00000, 0.00000, 335.48840);
	CreateDynamicObject(1649, 1238.71875, 306.44983, -8.60148,   0.00000, 0.00000, 64.60510);
	CreateDynamicObject(1649, 1238.67871, 306.48254, -8.60148,   0.00000, 0.00000, 244.06128);
	CreateDynamicObject(16500, 1238.48389, 305.86618, -12.24794,   0.00000, 0.00000, 335.48401);
	CreateDynamicObject(1523, 1239.58984, 308.04517, -12.74219,   0.00000, 0.00000, 65.72571);
	CreateDynamicObject(16500, 1231.15173, 310.99179, -10.77297,   0.00000, 0.00000, 156.02393);
	CreateDynamicObject(16500, 1233.19141, 315.54788, -10.77297,   0.00000, 0.00000, 156.02234);
	CreateDynamicObject(1523, 1234.16479, 317.82318, -12.74219,   0.00000, 0.00000, 64.95856);
	CreateDynamicObject(1523, 1235.37109, 320.58069, -12.74219,   0.00000, 0.00000, 245.49683);
	CreateDynamicObject(16500, 1236.36914, 322.84473, -10.77297,   0.00000, 0.00000, 156.02234);
	CreateDynamicObject(1649, 1234.76709, 319.18820, -8.59538,   0.00000, 0.00000, 65.00464);
	CreateDynamicObject(1649, 1236.58801, 323.16397, -8.54538,   0.00000, 0.00000, 65.98560);
	CreateDynamicObject(1649, 1232.92041, 315.24493, -8.54538,   0.00000, 0.00000, 65.00464);
	CreateDynamicObject(1649, 1234.76660, 319.18750, -8.59538,   0.00000, 0.00000, 244.96059);
	CreateDynamicObject(1649, 1232.97607, 315.24399, -8.54538,   0.00000, 0.00000, 246.19165);
	CreateDynamicObject(1649, 1236.59753, 323.12589, -8.59538,   0.00000, 0.00000, 245.20667);
	CreateDynamicObject(3395, 1232.95813, 325.62491, -12.74219,   0.00000, 0.00000, 156.00500);
	CreateDynamicObject(3383, 1229.17004, 312.88651, -12.74219,   0.00000, 0.00000, 335.68018);
	CreateDynamicObject(3383, 1235.95825, 327.98694, -12.74219,   0.00000, 0.00000, 155.96655);
	CreateDynamicObject(1997, 1236.24475, 309.35019, -12.74219,   0.00000, 0.00000, 65.77496);
	CreateDynamicObject(1997, 1236.72546, 310.39508, -12.74219,   0.00000, 0.00000, 65.76965);
	CreateDynamicObject(3383, 1229.52942, 317.27881, -12.74219,   0.00000, 0.00000, 245.69653);
	CreateDynamicObject(2008, 1241.20190, 324.26700, -12.74219,   0.00000, 0.00000, 336.69519);
	CreateDynamicObject(1738, 1240.81738, 326.84961, -12.08756,   0.00000, 0.00000, 335.69275);
	CreateDynamicObject(2146, 1234.80371, 324.82031, -12.25664,   0.00000, 0.00000, 336.17615);
	CreateDynamicObject(1997, 1232.04016, 316.25040, -12.74219,   0.00000, 0.00000, 175.09460);
	CreateDynamicObject(1997, 1248.82654, 304.07025, -12.74219,   0.00000, 0.00000, 155.49963);
	CreateDynamicObject(1997, 1246.90649, 304.92480, -12.74219,   0.00000, 0.00000, 155.49500);
	CreateDynamicObject(1997, 1244.87305, 305.83728, -12.74219,   0.00000, 0.00000, 155.49500);
	CreateDynamicObject(1997, 1244.81934, 309.47733, -12.74219,   0.00000, 0.00000, 335.24963);
	CreateDynamicObject(2162, 1253.01160, 310.06793, -11.24219,   0.00000, 0.00000, 244.41833);
	CreateDynamicObject(2008, 1251.26917, 309.88666, -12.74219,   0.00000, 0.00000, 66.50244);
	CreateDynamicObject(1726, 1248.90039, 319.74414, -12.74219,   0.00000, 0.00000, 156.54968);
	CreateDynamicObject(2596, 1249.45508, 323.78613, -10.29656,   0.00000, 0.00000, 338.39539);
	CreateDynamicObject(1715, 1241.55798, 322.76785, -12.74219,   0.00000, 0.00000, 156.70996);
	CreateDynamicObject(1720, 1250.06714, 310.47797, -12.74219,   0.00000, 0.00000, 65.82001);
	CreateDynamicObject(2007, 1239.17920, 324.16730, -12.74219,   0.00000, 0.00000, 65.43457);
	CreateDynamicObject(2167, 1251.28076, 321.43665, -12.74219,   0.00000, 0.00000, 64.69995);
	CreateDynamicObject(2167, 1250.51172, 319.78027, -12.74219,   0.00000, 0.00000, 64.69299);
	CreateDynamicObject(2690, 1239.27393, 327.61548, -11.28875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1246.33704, 320.47070, -12.74219,   0.00000, 0.00000, 155.67529);
	CreateDynamicObject(1714, 1252.76184, 310.21146, -12.74219,   0.00000, 0.00000, 246.90088);
	CreateDynamicObject(1720, 1250.44446, 311.32257, -12.74219,   0.00000, 0.00000, 65.81909);
	CreateDynamicObject(2146, 1251.83618, 317.28320, -12.25664,   0.00000, 0.00000, 245.00635);
	CreateDynamicObject(2167, 1245.82532, 309.92209, -12.74219,   0.00000, 0.00000, 64.69299);
	CreateDynamicObject(2007, 1251.34546, 307.54480, -12.74219,   0.00000, 0.00000, 246.36035);
	CreateDynamicObject(2000, 1250.98633, 306.63806, -12.74219,   0.00000, 0.00000, 246.11035);
	CreateDynamicObject(1727, 1236.46252, 321.43970, -12.74219,   0.00000, 0.00000, 65.72992);
	CreateDynamicObject(1726, 1246.81396, 319.24847, -12.74219,   0.00000, 0.00000, 335.78394);
	CreateDynamicObject(1726, 1243.85376, 312.12213, -12.74219,   0.00000, 0.00000, 156.32092);
	CreateDynamicObject(2855, 1246.18347, 317.07831, -12.66718,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 1246.80884, 316.68179, -12.21718,   0.00000, 0.00000, 322.97522);
	CreateDynamicObject(2855, 1248.94165, 321.79312, -12.21718,   0.00000, 0.00000, 359.75000);
	CreateDynamicObject(1738, 1246.50134, 312.30136, -12.08756,   0.00000, 0.00000, 244.38344);
	CreateDynamicObject(1738, 1253.85608, 312.57608, -12.08756,   0.00000, 0.00000, 244.37988);
	CreateDynamicObject(2596, 1247.68323, 315.02133, -10.29656,   0.00000, 0.00000, 230.45618);
	CreateDynamicObject(2596, 1242.10974, 321.77347, -10.29656,   0.00000, 0.00000, 359.31458);
	CreateDynamicObject(2315, 1247.90137, 322.11005, -12.74219,   0.00000, 0.00000, 335.71021);
	CreateDynamicObject(2315, 1246.10486, 317.15662, -12.74219,   0.00000, 0.00000, 335.70923);
	CreateDynamicObject(2380, 1254.35303, 320.86847, -11.49442,   0.00000, 0.00000, 335.16516);
	CreateDynamicObject(2816, 1246.20117, 317.14130, -12.24656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1247.99146, 322.01169, -12.24656,   0.00000, 0.00000, 0.00000);

	// SAEM interior 2
	CreateDynamicObject(14444, 293.21860, -101.78796, 984.35254,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, 319.16223, -109.51467, 987.27777,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2957, 318.63461, -92.50829, 990.10193,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16782, 321.70508, -94.95128, 990.65826,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 321.61465, -89.80796, 990.89038,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 321.61777, -89.80796, 990.44470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 321.61343, -89.80796, 989.96881,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 321.61859, -89.80796, 989.51984,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1818, 323.58524, -93.07565, 988.90723,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 324.24475, -91.67890, 989.05566,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 324.23514, -91.58057, 989.05566,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 324.23068, -91.46791, 989.05566,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 324.22147, -91.33222, 989.05566,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 324.21008, -91.20542, 989.05566,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 324.15714, -90.93748, 989.30060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 324.09451, -90.28191, 989.30060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 323.62921, -90.66323, 989.30060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2709, 324.41739, -92.09039, 989.55243,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2709, 324.42676, -92.34000, 989.55243,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2709, 324.20920, -92.39192, 989.55243,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2709, 324.18890, -92.12542, 989.55243,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2057, 323.69345, -92.21627, 989.58325,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(330, 323.32227, -92.63863, 989.38800,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(335, 323.32227, -92.99044, 989.39429,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 324.06558, -93.04486, 989.41278,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1210, 324.36313, -92.69723, 989.56122,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 324.36298, -92.93040, 989.56122,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 322.87204, -92.86321, 989.36743,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2332, 319.45770, -90.34071, 989.37164,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 324.43604, -94.44013, 988.90723,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2852, 323.80096, -93.83560, 988.90723,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2121, 319.29846, -94.85558, 989.41876,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1666, 319.45334, -90.40706, 989.92401,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 319.58441, -90.17252, 989.92401,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 320.13260, -90.22279, 989.01208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 320.40933, -90.21881, 989.01202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14782, 296.83990, -104.07632, 985.54828,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 296.84338, -110.16436, 985.54828,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14780, 310.76620, -110.42224, 985.39905,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8614, 317.75204, -94.98029, 986.65143,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(330, 304.97806, -114.56114, 985.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 316.93311, -109.28664, 984.53223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 315.57492, -109.40419, 984.53223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 316.29514, -112.39885, 984.57855,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2828, 302.85373, -107.53070, 985.58691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2056, 302.75778, -107.84354, 986.89337,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(347, 302.36130, -104.60161, 985.59180,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(347, 302.32544, -105.01211, 985.61078,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(371, 303.29559, -107.54486, 984.77448,   270.00000, 0.00000, 90.00000);
	CreateDynamicObject(371, 303.28021, -107.08427, 984.77448,   270.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 302.82309, -107.09167, 985.58691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2919, 298.31622, -113.85212, 985.19891,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3111, 302.85812, -106.01476, 985.58691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3031, 288.74780, -92.09885, 986.13599,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 310.03165, -88.42532, 984.53223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 309.02109, -91.21243, 984.53223,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2290, 312.96808, -89.25542, 984.53223,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2111, 310.97171, -90.44971, 984.92188,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1892, 290.37808, -103.42841, 984.53223,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2041, 302.48517, -103.44599, 985.79187,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2041, 302.82339, -103.45808, 985.79187,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2041, 303.19342, -103.46465, 985.79187,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3013, 302.99890, -103.00858, 985.73419,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3013, 302.51184, -103.00974, 985.73419,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 296.85748, -100.57891, 984.64343,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14391, 287.98965, -95.94555, 985.49231,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9819, 289.69452, -89.31338, 985.62256,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 301.89731, -105.06790, 984.53223,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 289.60297, -95.68546, 984.53223,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2180, 310.15671, -102.50092, 984.53223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2180, 310.15405, -101.66014, 984.53223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2180, 310.15295, -100.82211, 984.53223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2180, 310.15158, -99.99081, 984.53223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2180, 310.15021, -99.15012, 984.53223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2180, 311.12509, -98.38869, 984.53223,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2124, 312.03711, -98.80958, 985.36371,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 312.03717, -99.85750, 985.36371,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 312.01697, -100.98612, 985.36371,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 311.98590, -102.10433, 985.36371,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 310.53552, -97.67616, 985.36371,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2124, 310.45352, -103.24484, 985.36371,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2207, 308.81250, -101.43771, 984.53223,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 307.78116, -100.63223, 984.99243,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2957, 323.76300, -92.58511, 1002.85400,   0.00000, 0.00000, 0.00000);

	// SAEM interior prisión
	CreateDynamicObject(4724, 174.20000, 1930.00000, 3868.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(976, 168.70000, 1944.80005, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(976, 177.59961, 1944.79980, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(3361, 193.50000, 1939.30005, 3867.39990,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(976, 168.70000, 1944.80005, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(976, 177.60001, 1944.80005, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(976, 186.50000, 1944.80005, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(976, 195.39999, 1944.80005, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 177.50000, 1951.30005, 3866.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 177.50000, 1951.30005, 3868.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 177.50000, 1951.30005, 3869.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 177.50000, 1951.30005, 3870.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 177.50000, 1951.30005, 3872.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1941.90002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1952.69995, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1950.00000, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1947.30005, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1944.59998, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(976, 186.50000, 1944.80005, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(976, 195.39999, 1944.80005, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 168.60001, 1951.19995, 3866.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 168.60001, 1951.19995, 3868.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 168.60001, 1951.19995, 3869.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 168.60001, 1951.19995, 3870.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 168.60001, 1951.19995, 3872.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 195.30000, 1951.30005, 3866.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 186.39999, 1951.30005, 3866.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 186.39999, 1951.30005, 3868.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 186.39999, 1951.30005, 3869.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 186.39999, 1951.30005, 3870.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 186.39999, 1951.30005, 3872.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 195.30000, 1951.30005, 3868.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 195.30000, 1951.30005, 3869.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 195.30000, 1951.30005, 3870.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 195.30000, 1951.30005, 3872.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 204.20000, 1951.30005, 3866.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 204.20000, 1951.30005, 3868.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 204.20000, 1951.30005, 3869.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 204.20000, 1951.30005, 3870.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 204.20000, 1951.30005, 3872.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1944.69995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1950.09998, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1952.80005, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 169.30000, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1958.19995, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1955.39941, 3869.60010,   269.98901, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1955.40002, 3869.60010,   269.99451, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1955.50000, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.59961, 1952.79980, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1952.80005, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.19922, 1952.79980, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1952.80005, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1952.80005, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1952.80005, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1952.80005, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.69922, 1952.79980, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1952.80005, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1950.09998, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.69922, 1950.09961, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39941, 1950.09961, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1950.09998, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.79980, 1950.09961, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1950.09998, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1950.09998, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89941, 1950.09961, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1950.09998, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 173.00000, 1947.39941, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 176.70000, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 180.39999, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 184.10001, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 187.80000, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 191.50000, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 195.20000, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 198.89999, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 202.60001, 1947.40002, 3869.39990,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 203.50000, 1951.19995, 3872.80005,   0.00000, 89.49994, 0.00000);
	CreateDynamicObject(984, 202.20000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 200.89999, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 199.60001, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 198.30000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 197.00000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 195.70000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 194.39999, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 193.10001, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 191.80000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 190.50000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 189.20000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 187.89999, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 186.60001, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 185.30000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 184.00000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 182.70000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 181.39999, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 180.10001, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 178.80000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 177.50000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 176.20000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 174.89999, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 173.60001, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 172.30000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 171.00000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 169.70000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(984, 169.20000, 1951.19995, 3872.80005,   0.00000, 89.49463, 0.00000);
	CreateDynamicObject(4724, 200.00000, 1929.50000, 3868.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2639, 202.20000, 1929.40002, 3866.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2639, 201.80000, 1932.69995, 3866.89990,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2923, 196.19922, 1924.59961, 3866.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 177.89999, 1925.09998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2632, 174.00000, 1927.09998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 174.00000, 1925.09998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 170.50000, 1934.69995, 3866.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2629, 170.00000, 1926.50000, 3866.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2627, 173.50000, 1934.40002, 3866.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 169.89999, 1931.40002, 3866.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2528, 170.20000, 1955.69995, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 179.50000, 1955.69995, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 188.20000, 1955.69995, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 197.30000, 1955.59998, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 197.00000, 1955.69995, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 187.80000, 1955.69995, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 178.70000, 1955.69995, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 169.70000, 1955.69995, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 171.20000, 1955.59998, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 180.50000, 1955.59998, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 189.20000, 1955.59998, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 198.20000, 1955.59998, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 198.00000, 1955.69995, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 188.50000, 1955.69995, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 179.20000, 1955.59998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 170.30000, 1955.69995, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 175.20000, 1952.59998, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 184.00000, 1952.40002, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 193.00000, 1952.40002, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 201.89999, 1952.40002, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 201.60001, 1952.50000, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 192.80000, 1952.50000, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 183.10001, 1952.50000, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 174.20000, 1952.19995, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 169.30000, 1955.59998, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 178.50000, 1955.50000, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 187.39999, 1955.69995, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 196.30000, 1955.50000, 3869.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 196.00000, 1955.59998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 187.00000, 1955.59998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 178.10001, 1955.50000, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 169.20000, 1955.40002, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2915, 175.50000, 1927.50000, 3866.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2916, 179.30000, 1925.00000, 3866.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2913, 169.50000, 1926.09998, 3867.30005,   271.27441, 348.68408, 348.68408);
	CreateDynamicObject(2921, 207.00000, 1914.69995, 3874.39990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 207.00000, 1946.59998, 3874.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 207.00000, 1931.59998, 3874.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 184.00000, 1913.00000, 3874.60010,   0.00000, 0.00000, 261.75000);
	CreateDynamicObject(2921, 162.20000, 1913.00000, 3874.60010,   0.00000, 0.00000, 261.74927);
	CreateDynamicObject(2921, 155.00000, 1931.59998, 3874.60010,   0.00000, 0.00000, 191.74927);
	CreateDynamicObject(2644, 204.30000, 1930.59998, 3866.69995,   0.00000, 0.00000, 0.49988);
	CreateDynamicObject(1892, 189.30000, 1924.59998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2639, 203.89999, 1932.69995, 3866.89990,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2644, 203.39999, 1930.59998, 3866.69995,   0.00000, 0.00000, 0.49988);
	CreateDynamicObject(2644, 202.50000, 1930.59998, 3866.69995,   0.00000, 0.00000, 0.49988);
	CreateDynamicObject(2644, 201.60001, 1930.59998, 3866.69995,   0.00000, 0.00000, 0.49988);
	CreateDynamicObject(2639, 204.30000, 1929.40002, 3866.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 177.89999, 1927.09998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2915, 176.39999, 1925.30005, 3866.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2915, 176.30000, 1927.40002, 3866.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2915, 175.50000, 1925.40002, 3866.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2916, 179.39999, 1927.09998, 3866.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2916, 172.50000, 1927.19995, 3866.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2916, 172.39999, 1925.09998, 3866.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1892, 186.89999, 1924.59998, 3866.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 189.00000, 1924.09998, 3866.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 186.60001, 1924.09998, 3866.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 177.10001, 1935.40002, 3869.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 183.09961, 1935.50000, 3869.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 190.70000, 1935.30005, 3869.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 172.89999, 1942.00000, 3870.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 185.70000, 1942.00000, 3870.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 201.20000, 1942.00000, 3870.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8228, 237.80000, 1924.09998, 3868.89990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8228, 136.60001, 1956.30005, 3868.80005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3095, 173.00000, 1951.80005, 3877.00000,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8228, 237.80000, 1877.19995, 3874.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8228, 136.50000, 2003.19995, 3874.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3095, 182.00000, 1951.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 191.00000, 1951.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 200.00000, 1951.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 200.00000, 1942.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 191.00000, 1942.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 182.00000, 1942.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 173.00000, 1942.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 173.00000, 1933.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 182.00000, 1933.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 191.00000, 1933.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 200.00000, 1933.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 200.00000, 1924.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 191.00000, 1924.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 182.00000, 1924.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 173.00000, 1924.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 209.00000, 1951.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 209.00000, 1942.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 209.00000, 1933.80005, 3877.00000,   179.99451, 0.00000, 0.00000);
	CreateDynamicObject(3095, 209.00000, 1924.80005, 3877.00000,   179.99451, 0.00000, 0.00000);

	// SAEM Barco, Map ubicado en SF, roles navales.
	CreateDynamicObject(3399, -1286.89001, 472.39001, 10.45000,   0.00000, 0.00000, 88.61000);
	CreateDynamicObject(3399, -1286.66003, 481.70001, 14.95000,   0.00000, 0.00000, 88.20000);
	CreateDynamicObject(3399, -1287.02002, 467.32999, 8.29000,   0.00000, 0.00000, 88.61000);
	CreateDynamicObject(3399, -1452.73999, 493.13000, 15.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3399, -1458.22998, 493.10999, 12.75000,   0.00000, 0.00000, 359.59000);
	CreateDynamicObject(3399, -1461.10999, 493.10001, 11.15000,   0.00000, 0.00000, 357.09000);
	CreateDynamicObject(2176, -1369.53003, 499.87000, 12.27000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13187, -1290.40002, 500.47000, 11.36000,   0.00000, 0.00000, 93.03000);
	CreateDynamicObject(13187, -1294.93005, 500.25000, 11.36000,   0.00000, 0.00000, 93.03000);
	CreateDynamicObject(13187, -1297.88000, 495.09000, 11.36000,   0.00000, 0.00000, 3.73000);
	CreateDynamicObject(1491, -1298.27002, 500.01001, 10.19000,   0.00000, 0.00000, 275.07999);
	CreateDynamicObject(2299, -1288.84998, 496.98999, 10.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2299, -1292.43005, 496.82001, 10.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2299, -1295.44995, 496.66000, 10.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2299, -1296.27002, 496.87000, 10.19000,   0.00000, 0.00000, 180.42000);
	CreateDynamicObject(2299, -1293.40002, 496.76999, 10.19000,   0.00000, 0.00000, 180.42000);
	CreateDynamicObject(2299, -1290.62000, 496.85001, 10.19000,   0.00000, 0.00000, 180.42000);
	CreateDynamicObject(2299, -1287.77002, 496.95001, 10.19000,   0.00000, 0.00000, 180.42000);
	CreateDynamicObject(2167, -1287.27002, 496.98999, 10.29000,   0.00000, 0.00000, 272.62000);
	CreateDynamicObject(2167, -1290.10999, 500.45001, 10.23000,   0.00000, 0.00000, 1.99000);
	CreateDynamicObject(2167, -1293.48999, 500.25000, 10.23000,   0.00000, 0.00000, 1.99000);
	CreateDynamicObject(2167, -1289.68994, 493.17999, 10.23000,   0.00000, 0.00000, 182.08000);
	CreateDynamicObject(2167, -1292.54004, 493.06000, 10.23000,   0.00000, 0.00000, 182.08000);
	CreateDynamicObject(2167, -1295.26001, 493.17001, 10.23000,   0.00000, 0.00000, 182.08000);
	CreateDynamicObject(14582, -1292.92004, 507.29001, 13.95000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18102, -1289.95996, 502.67999, 14.77000,   0.00000, 0.00000, 285.34000);
	CreateDynamicObject(18102, -1297.72998, 501.82001, 14.77000,   0.00000, 0.00000, 285.34000);
	CreateDynamicObject(1709, -1294.16003, 512.73999, 10.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1709, -1298.56995, 505.57999, 10.19000,   0.00000, 0.00000, 87.63000);
	CreateDynamicObject(1709, -1290.31006, 502.07999, 10.19000,   0.00000, 0.00000, 184.95000);

	// centro de licencias
	CreateDynamicObject(970, 2071.69995, -1920.19995, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2071.69995, -1918.09998, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2071.69995, -1903.19995, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2071.69995, -1907.30005, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2071.69995, -1909.40002, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2069.60010, -1922.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2065.50000, -1922.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2061.39990, -1922.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2052.00000, -1922.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2049.89990, -1920.19995, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2049.89990, -1916.09998, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2049.89990, -1903.19995, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2049.89990, -1907.30005, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2052.00000, -1901.09998, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2056.10010, -1901.09998, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2060.19995, -1901.09998, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2064.30005, -1901.09998, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2066.38794, -1901.08997, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 2051.60010, -1897.59998, 13.15000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1359, 2054.30005, -1897.69995, 13.12000,   0.00000, 0.00000, 0.00000);

	// INTERIOR RUSOS (Mafia Rusa):
	CreateDynamicObject(4604, -111.40000, 80.10000, 4006.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8565, -84.70000, 90.40000, 4010.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(8565, -26.00000, 101.00000, 4010.00000,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(8565, -83.00000, 59.30000, 4010.00000,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(8565, -42.75000, 48.00000, 4010.00000,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(4604, -93.70000, 143.89999, 4006.11011,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14407, -30.50000, 81.50000, 4009.00000,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(14407, -30.65000, 77.55000, 4009.00000,   0.00000, 0.00000, 87.99000);
	CreateDynamicObject(14407, -30.80000, 73.59000, 4009.00000,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(14407, -30.95000, 69.70000, 4009.00000,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(14407, -63.00000, 54.00000, 4002.64990,   0.00000, 0.00000, 179.98000);
	CreateDynamicObject(4604, 4.70000, 83.70000, 4012.20996,   0.00000, 0.00000, 87.99000);
	CreateDynamicObject(8565, -7.80000, 100.20000, 4015.80005,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, -27.60000, 82.00000, 4024.00000,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(2774, -28.05000, 68.70000, 4024.00000,   0.00000, 0.00000, 357.98999);
	CreateDynamicObject(8565, -37.70000, 47.99000, 4015.80005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(8565, 7.50000, 33.40000, 4015.80005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(8565, 29.00000, 64.80000, 4015.80005,   0.00000, 0.00000, 269.98001);
	CreateDynamicObject(8565, -16.70000, 14.30000, 4015.80005,   0.00000, 0.00000, 269.98001);
	CreateDynamicObject(8565, -104.40000, 124.90000, 4010.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(8565, -26.00000, 135.89999, 4010.00000,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(5156, -64.70000, 51.00000, 3949.39990,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(5156, -61.07000, 51.00000, 4009.00000,   0.00000, 89.99000, 180.00000);
	CreateDynamicObject(5156, -58.00000, 30.20000, 3999.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, -65.20000, 34.60000, 4011.00000,   0.00000, 0.00000, 357.98999);
	CreateDynamicObject(5156, -61.10000, 17.50000, 3999.69995,   0.00000, 89.99000, 179.99001);
	CreateDynamicObject(5156, -82.70000, 34.00000, 3999.69995,   0.00000, 89.99000, 271.98999);
	CreateDynamicObject(5156, -66.30000, 18.30000, 3999.60010,   0.00000, 89.99000, 93.99000);
	CreateDynamicObject(5156, -82.60000, 25.10000, 3999.69995,   0.00000, 89.99000, 3.99000);
	CreateDynamicObject(4206, -63.90000, 126.30000, 4006.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8565, -64.80000, 159.00000, 4010.00000,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(2774, -63.90000, 107.20000, 4018.00000,   0.00000, 0.00000, 357.98999);
	CreateDynamicObject(2774, -46.80000, 107.20000, 4018.00000,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, -57.60000, 107.20000, 4018.00000,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, -53.00000, 107.20000, 4018.00000,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, -57.20000, 107.25000, 4009.39990,   0.00000, 90.00000, 359.97000);
	CreateDynamicObject(1491, -56.80000, 107.00000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, -53.79000, 107.03000, 4006.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -64.63000, 107.00000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -60.90000, 107.00000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -51.70000, 107.00000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -48.00000, 107.00000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -62.60000, 107.00000, 4010.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -58.90000, 107.00000, 4010.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -55.20000, 107.00000, 4010.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -51.50000, 107.00000, 4010.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -47.80000, 107.00000, 4010.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -62.60000, 107.00000, 4012.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -58.90000, 107.00000, 4012.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -55.20000, 107.00000, 4012.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -51.50000, 107.00000, 4012.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -47.80000, 107.00000, 4012.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -58.60000, 107.50000, 4006.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, -62.30000, 107.50000, 4006.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -49.00000, 107.50000, 4006.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -45.30000, 107.50000, 4006.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -47.80000, 107.50000, 4010.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -51.50000, 107.50000, 4010.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -55.20000, 107.50000, 4010.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -58.90000, 107.50000, 4010.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -62.50000, 107.50000, 4010.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -47.90000, 107.50000, 4012.89990,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -51.60000, 107.50000, 4012.89990,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -55.30000, 107.50000, 4012.89990,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -59.00000, 107.50000, 4012.89990,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -62.70000, 107.50000, 4012.89990,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(906, -56.00000, 117.40000, 4006.00000,   0.00000, 0.00000, 32.00000);
	CreateDynamicObject(906, -51.60000, 121.00000, 4006.10010,   0.00000, 0.00000, 61.99000);
	CreateDynamicObject(880, -50.50000, 126.30000, 4006.00000,   0.00000, 0.00000, 102.00000);
	CreateDynamicObject(906, -57.20000, 116.00000, 4006.00000,   0.00000, 0.00000, 209.99001);
	CreateDynamicObject(906, -62.20000, 114.70000, 4006.00000,   0.00000, 0.00000, 187.98000);
	CreateDynamicObject(906, -67.40000, 115.20000, 4006.00000,   0.00000, 0.00000, 159.98000);
	CreateDynamicObject(906, -74.10000, 119.60000, 4006.00000,   0.00000, 0.00000, 311.97000);
	CreateDynamicObject(906, -75.00000, 122.20000, 4006.10010,   0.00000, 0.00000, 117.96000);
	CreateDynamicObject(906, -76.20000, 126.90000, 4006.10010,   0.00000, 0.00000, 91.95000);
	CreateDynamicObject(906, -74.00000, 134.30000, 4006.00000,   0.00000, 0.00000, 229.94000);
	CreateDynamicObject(906, -51.60000, 132.00000, 4006.00000,   0.00000, 0.00000, 125.94000);
	CreateDynamicObject(906, -70.00000, 137.20000, 4006.00000,   0.00000, 0.00000, 189.94000);
	CreateDynamicObject(906, -65.10000, 138.80000, 4006.00000,   0.00000, 0.00000, 189.92999);
	CreateDynamicObject(906, -60.00000, 138.00000, 4006.00000,   0.00000, 0.00000, 157.92999);
	CreateDynamicObject(906, -55.50000, 135.20000, 4006.00000,   0.00000, 0.00000, 137.92000);
	CreateDynamicObject(2415, -69.30000, 130.50000, 4004.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, -60.40000, 130.50000, 4004.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, -70.70000, 123.20000, 4004.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, -61.50000, 123.50000, 4004.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, -65.80000, 119.10000, 4004.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, -75.40000, 119.20000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, -77.60000, 126.40000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, -69.00000, 139.60001, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, -74.30000, 136.10001, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, -56.60000, 139.39999, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, -51.90000, 136.30000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, -47.10000, 125.20000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, -49.60000, 118.90000, 4006.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1255, -73.70000, 113.20000, 4006.69995,   0.00000, 0.00000, 56.00000);
	CreateDynamicObject(1255, -77.60000, 116.60000, 4006.69995,   0.00000, 0.00000, 44.00000);
	CreateDynamicObject(1255, -79.40000, 120.30000, 4006.69995,   0.00000, 0.00000, 29.99000);
	CreateDynamicObject(1255, -76.40000, 138.10001, 4006.69995,   0.00000, 0.00000, 329.98999);
	CreateDynamicObject(1255, -78.70000, 135.00000, 4006.69995,   0.00000, 0.00000, 335.98999);
	CreateDynamicObject(1255, -79.90000, 131.20000, 4006.69995,   0.00000, 0.00000, 349.98001);
	CreateDynamicObject(1255, -53.90000, 113.70000, 4006.69995,   0.00000, 0.00000, 128.00000);
	CreateDynamicObject(1255, -50.10000, 116.90000, 4006.69995,   0.00000, 0.00000, 141.99001);
	CreateDynamicObject(1255, -48.00000, 121.10000, 4006.69995,   0.00000, 0.00000, 157.99001);
	CreateDynamicObject(1255, -47.90000, 130.50000, 4006.69995,   0.00000, 0.00000, 185.98000);
	CreateDynamicObject(1255, -48.80000, 134.30000, 4006.69995,   0.00000, 0.00000, 213.98000);
	CreateDynamicObject(1255, -51.50000, 137.89999, 4006.69995,   0.00000, 0.00000, 227.97000);
	CreateDynamicObject(16151, -83.40000, 114.60000, 4006.39990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1541, -82.87000, 116.10000, 4007.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1667, -82.70000, 111.10000, 4007.12012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -82.30000, 111.70000, 4007.12012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, -82.70000, 111.50000, 4007.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, -82.20000, 113.00000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, -82.20000, 114.30000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, -82.20000, 114.10000, 4007.10010,   0.00000, 0.00000, 356.00000);
	CreateDynamicObject(1544, -82.30000, 113.00000, 4007.00000,   0.00000, 0.00000, 86.00000);
	CreateDynamicObject(1544, -82.30000, 113.10000, 4007.00000,   0.00000, 0.00000, 85.99000);
	CreateDynamicObject(1544, -82.30000, 114.30000, 4007.00000,   0.00000, 0.00000, 85.99000);
	CreateDynamicObject(1215, -84.20000, 108.80000, 4006.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -76.60000, 119.50000, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -51.30000, 118.20000, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -60.60000, 112.90000, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -55.20000, 115.30000, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -71.90000, 115.00000, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -75.90000, 135.70000, 4006.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -77.50000, 131.10001, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -69.80000, 139.50000, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -56.80000, 139.20000, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -52.90000, 136.30000, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -49.70000, 130.89999, 4006.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, -83.00000, 137.10001, 4006.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, -47.90000, 110.30000, 4006.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, -52.50000, 110.30000, 4006.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, -47.60000, 138.60001, 4006.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, -48.90000, 97.20000, 4006.08008,   0.00000, 0.00000, 271.98999);
	CreateDynamicObject(2774, -61.10000, 67.12000, 4018.00000,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(2774, -64.80000, 67.12000, 4018.00000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(2774, -63.20000, 67.08000, 4009.39990,   0.00000, 89.99000, 359.98001);
	CreateDynamicObject(2395, -62.10000, 67.40000, 4010.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -62.20000, 67.40000, 4012.89990,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2774, -45.18000, 81.90000, 4018.00000,   0.00000, 0.00000, 357.98999);
	CreateDynamicObject(2774, -45.18000, 68.80000, 4018.00000,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, -45.10000, 75.00000, 4009.39990,   0.00000, 89.99000, 269.98001);
	CreateDynamicObject(2395, -45.30000, 80.70000, 4010.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -45.30000, 77.00000, 4010.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -45.30000, 73.30000, 4010.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -45.30000, 69.70000, 4010.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -45.30000, 80.60000, 4012.89990,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -45.30000, 77.10000, 4012.89990,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -45.30000, 73.40000, 4012.89990,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -45.30000, 69.90000, 4012.89990,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2774, -45.18000, 75.10000, 4018.00000,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2395, -64.40000, 66.30000, 4010.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -63.70000, 66.30000, 4012.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -44.90000, 70.10000, 4010.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, -44.90000, 73.80000, 4010.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 77.50000, 4010.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 81.10000, 4010.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 70.10000, 4012.89990,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 73.80000, 4012.89990,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 77.50000, 4012.89990,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 81.10000, 4012.89990,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(3409, -80.00000, 19.10000, 3999.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, -79.70000, 23.80000, 3999.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, -79.80000, 28.30000, 3999.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, -79.80000, 32.90000, 3999.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, -75.50000, 19.30000, 3999.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, -75.20000, 24.00000, 3999.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, -75.30000, 28.40000, 3999.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, -75.50000, 32.90000, 3999.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, -73.00000, 32.40000, 4000.14990,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(3850, -72.75000, 28.90000, 4000.14990,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(3850, -72.40000, 19.90000, 4000.14990,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(3850, -72.40000, 23.40000, 4000.14990,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(941, -63.60000, 21.00000, 4000.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, -65.90000, 21.00000, 4000.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, -68.20000, 21.00000, 4000.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, -70.50000, 21.00000, 4000.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, -63.70000, 24.20000, 4000.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, -66.00000, 24.20000, 4000.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, -68.30000, 24.20000, 4000.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, -70.60000, 24.20000, 4000.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, -71.30000, 33.40000, 4000.50000,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(944, -68.40000, 33.60000, 4000.50000,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(944, -71.20000, 31.90000, 4000.50000,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(944, -68.40000, 32.10000, 4000.50000,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(944, -70.10000, 32.60000, 4001.94995,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(17969, -61.20000, 31.10000, 4001.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17969, -61.20000, 22.80000, 4001.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2901, -63.30000, 21.10000, 4000.80005,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(2901, -65.20000, 21.10000, 4000.80005,   0.00000, 0.00000, 357.98999);
	CreateDynamicObject(2901, -67.00000, 21.10000, 4000.80005,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2901, -68.70000, 21.10000, 4000.80005,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2901, -70.40000, 21.10000, 4000.80005,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2891, -62.80000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -62.80000, 24.00000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -63.40000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -63.40000, 24.00000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -64.00000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -64.00000, 24.00000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -64.60000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -64.60000, 24.00000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -65.10000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -65.10000, 23.90000, 4000.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -65.60000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -65.60000, 24.00000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -66.10000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -66.10000, 23.90000, 4000.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -66.60000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -66.60000, 23.90000, 4000.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, -67.40000, 24.30000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, -68.90000, 24.10000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, -70.40000, 24.00000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -71.10000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -70.30000, 24.50000, 4000.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -69.70000, 24.50000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, -68.20000, 24.40000, 4000.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, -7.00000, 53.90000, 4024.00000,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, -7.00000, 81.00000, 4024.00000,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, -7.00000, 70.80000, 4024.00000,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, -7.00000, 60.60000, 4024.00000,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, -6.90000, 69.40000, 4015.50000,   0.00000, 89.99000, 269.98001);
	CreateDynamicObject(2774, -6.90000, 54.70000, 4015.50000,   0.00000, 89.99000, 269.98001);
	CreateDynamicObject(2395, -7.40000, 79.90000, 4012.19995,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(1491, -7.45000, 76.70000, 4012.19995,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(1491, -7.45000, 73.70000, 4012.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, -7.60000, 73.30000, 4012.19995,   0.00000, 0.00000, 267.98001);
	CreateDynamicObject(1649, -7.10000, 67.90000, 4013.80005,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1649, -7.25000, 63.50000, 4013.80005,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(1649, -7.30000, 57.70000, 4013.80005,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(1649, -7.45000, 53.30000, 4013.80005,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(2395, -7.30000, 79.70000, 4016.30005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -7.30000, 76.00000, 4016.30005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -7.30000, 72.30000, 4016.30005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -7.30000, 68.60000, 4016.30005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -7.30000, 64.90000, 4016.30005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -7.30000, 61.50000, 4016.30005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -7.30000, 57.80000, 4016.30005,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(1649, -64.60000, 59.80000, 4031.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5156, -7.70000, 55.00000, 4012.30005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2357, 4.90000, 61.60000, 4012.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2357, 4.90000, 65.80000, 4012.60010,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2357, 4.90000, 70.00000, 4012.60010,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2357, -2.30000, 70.10000, 4012.60010,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2357, 3.40000, 72.80000, 4012.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, -0.80000, 72.80000, 4012.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, -2.30000, 65.90000, 4012.60010,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2357, -2.30000, 61.80000, 4012.60010,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2395, -7.40000, 70.50000, 4012.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -7.30000, 77.10000, 4012.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -6.60000, 77.10000, 4016.30005,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -6.60000, 73.40000, 4016.30005,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -6.60000, 69.70000, 4016.30005,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -6.60000, 66.00000, 4016.30005,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -6.60000, 62.30000, 4016.30005,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -6.60000, 58.60000, 4016.30005,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -6.60000, 54.90000, 4016.30005,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(1714, 1.40000, 74.60000, 4012.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 6.60000, 72.30000, 4012.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 6.60000, 70.80000, 4012.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 6.60000, 69.40000, 4012.19995,   0.00000, 0.00000, 266.00000);
	CreateDynamicObject(1714, 6.60000, 68.10000, 4012.19995,   0.00000, 0.00000, 265.98999);
	CreateDynamicObject(1714, 6.60000, 66.70000, 4012.19995,   0.00000, 0.00000, 265.98999);
	CreateDynamicObject(1714, 6.60000, 65.30000, 4012.19995,   0.00000, 0.00000, 265.98999);
	CreateDynamicObject(1714, 6.60000, 63.90000, 4012.19995,   0.00000, 0.00000, 265.98999);
	CreateDynamicObject(1714, 6.50000, 62.50000, 4012.19995,   0.00000, 0.00000, 265.98999);
	CreateDynamicObject(1714, 6.50000, 61.20000, 4012.19995,   0.00000, 0.00000, 265.98999);
	CreateDynamicObject(1714, 6.40000, 59.80000, 4012.19995,   0.00000, 0.00000, 265.98999);
	CreateDynamicObject(1714, -3.80000, 59.80000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.80000, 61.10000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.80000, 62.40000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.70000, 63.70000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.80000, 65.00000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.80000, 66.40000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.80000, 67.90000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.90000, 69.30000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.80000, 70.50000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.80000, 71.90000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1714, -3.90000, 72.90000, 4012.19995,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(1667, 1.70000, 73.30000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 72.30000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 71.00000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 69.70000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 68.20000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 66.90000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 65.60000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 64.00000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 62.70000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 61.40000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 5.40000, 60.00000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.80000, 59.90000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.80000, 61.10000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.70000, 62.20000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.80000, 63.40000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.80000, 64.60000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.80000, 66.00000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.80000, 67.40000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.80000, 69.20000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.70000, 70.40000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.70000, 71.60000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, -2.70000, 72.70000, 4013.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1.10000, 73.30000, 4013.05005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3044, 1.00000, 73.40000, 4013.10010,   0.00000, 0.00000, 28.00000);
	CreateDynamicObject(1846, 1.30000, 54.38000, 4015.00000,   90.00000, 90.00000, 270.00000);
	CreateDynamicObject(2229, 2.70000, 53.00000, 4014.30005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, -0.70000, 53.00000, 4014.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2491, 4.00000, 57.90000, 4011.60010,   0.00000, 0.00000, 22.00000);
	CreateDynamicObject(1952, 3.90000, 57.40000, 4013.60010,   90.00000, 90.00000, 224.00000);
	CreateDynamicObject(2227, 1.60000, 70.80000, 4012.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14565, 2.20000, 82.60000, 4014.10010,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(1726, 10.20000, 77.60000, 4012.19995,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1726, 10.20000, 72.30000, 4012.19995,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(1726, 10.10000, 66.10000, 4012.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(1726, 10.20000, 58.90000, 4012.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2774, -11.70000, 52.60000, 4024.00000,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, -18.60000, 52.60000, 4024.00000,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, -13.30000, 52.50000, 4015.50000,   0.00000, 90.00000, 179.98000);
	CreateDynamicObject(1491, -13.80000, 53.00000, 4012.14990,   0.00000, 0.00000, 177.99001);
	CreateDynamicObject(1491, -16.80000, 53.00000, 4012.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -17.20000, 53.10000, 4012.16992,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -10.60000, 53.10000, 4012.17993,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -12.90000, 52.90000, 4016.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -16.60000, 52.90000, 4016.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -13.00000, 52.90000, 4019.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -16.40000, 52.90000, 4019.00000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, -13.34000, 52.87000, 4012.17993,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -20.00000, 52.90000, 4012.17993,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -17.40000, 52.70000, 4016.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -13.70000, 52.70000, 4016.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -17.50000, 52.70000, 4019.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -13.80000, 52.70000, 4019.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1481, -11.10000, 50.00000, 4012.89990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1481, -11.10000, 48.40000, 4012.89990,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2131, -11.30000, 46.40000, 4012.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2131, -11.30000, 44.40000, 4012.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2131, -11.30000, 42.40000, 4012.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2132, -18.90000, 50.30000, 4012.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2132, -18.90000, 48.30000, 4012.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2339, -18.90000, 47.30000, 4012.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2339, -18.90000, 46.30000, 4012.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2339, -18.90000, 43.40000, 4012.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2339, -18.90000, 42.40000, 4012.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2339, -18.90000, 41.40000, 4012.19995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2415, -11.50000, 39.20000, 4012.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2415, -11.50000, 37.00000, 4012.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2415, -11.50000, 34.80000, 4012.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2417, -14.30000, 34.70000, 4012.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2417, -16.30000, 34.70000, 4012.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2417, -18.50000, 34.70000, 4012.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2426, -19.10000, 41.50000, 4013.29004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2453, -19.10000, 42.30000, 4013.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2453, -19.10000, 42.90000, 4013.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2453, -19.10000, 43.50000, 4013.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, -14.30000, 34.70000, 4011.62012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, -16.30000, 34.70000, 4011.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, -18.50000, 34.80000, 4011.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1409, -17.30000, 52.50000, 4012.33008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1370, -13.30000, 34.60000, 4012.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1370, -15.30000, 34.70000, 4012.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1370, -17.40000, 34.70000, 4012.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(936, -18.70000, 39.20000, 4012.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(936, -18.70000, 37.40000, 4012.69995,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2804, -18.80000, 37.00000, 4013.28003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2804, -18.40000, 37.10000, 4013.28003,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(2804, -18.80000, 39.60000, 4013.28003,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(2806, -18.70000, 38.00000, 4013.37012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2806, -18.50000, 38.80000, 4013.37012,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(2812, -19.00000, 48.20000, 4013.26001,   0.00000, 0.00000, 78.00000);
	CreateDynamicObject(2820, -19.10000, 50.10000, 4013.26001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2830, -19.00000, 50.60000, 4013.26001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2822, -18.90000, 46.40000, 4013.26001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2822, -18.90000, 47.10000, 4013.26001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, -64.75000, 84.40000, 4006.10010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, -64.75000, 87.40000, 4006.10010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3471, -57.50000, 105.40000, 4007.19995,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(3471, -53.10000, 105.40000, 4007.19995,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(3660, -64.40000, 97.20000, 4007.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(630, -62.10000, 106.40000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -59.50000, 106.40000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -51.10000, 106.20000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -48.60000, 106.20000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, -64.10000, 71.10000, 4006.08008,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(1726, -64.00000, 80.10000, 4006.08008,   0.00000, 0.00000, 91.99000);
	CreateDynamicObject(630, -64.20000, 76.60000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, -47.90000, 68.50000, 4006.08008,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, -53.70000, 68.50000, 4006.08008,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1726, -58.20000, 68.50000, 4006.08008,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(630, -56.90000, 68.30000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -51.70000, 68.20000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -64.40000, 108.40000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, -49.00000, 92.30000, 4006.08008,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(2964, -49.00000, 88.00000, 4006.08008,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(1432, -82.60000, 124.20000, 4006.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, -82.90000, 130.60001, 4006.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, -52.80000, 98.90000, 4006.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, -47.70000, 100.60000, 4006.60010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, -51.10000, 100.60000, 4006.60010,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(3850, -52.80000, 95.50000, 4006.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, -52.80000, 92.10000, 4006.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, -52.80000, 88.70000, 4006.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, -52.80000, 85.30000, 4006.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, -51.10000, 83.60000, 4006.60010,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(1726, -52.20000, 86.80000, 4006.10010,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(1726, -52.20000, 91.50000, 4006.10010,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(1726, -52.20000, 96.40000, 4006.10010,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(1726, -24.30000, 81.80000, 4012.19995,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1726, -17.60000, 81.70000, 4012.19995,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1726, -11.40000, 81.40000, 4012.19995,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1726, -24.70000, 68.50000, 4012.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1726, -20.10000, 68.60000, 4012.19995,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1726, -18.90000, 56.80000, 4012.19995,   0.00000, 0.00000, 87.99000);
	CreateDynamicObject(1726, -18.80000, 64.00000, 4012.19995,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(630, -38.90000, 68.40000, 4006.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -41.30000, 68.40000, 4007.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -43.80000, 68.40000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -38.90000, 82.30000, 4006.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -41.30000, 82.30000, 4007.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -43.80000, 82.30000, 4007.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -23.30000, 68.30000, 4013.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -25.60000, 82.10000, 4013.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -19.80000, 81.90000, 4013.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -13.40000, 81.70000, 4013.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -8.20000, 81.60000, 4013.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, -19.00000, 61.30000, 4013.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5156, -67.80000, 95.50000, 4013.60010,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(5156, -62.20000, 87.20000, 4013.60010,   0.00000, 179.99001, 89.99000);
	CreateDynamicObject(5156, -28.10000, 78.00000, 4017.00000,   0.00000, 179.99001, 89.99000);
	CreateDynamicObject(5156, 2.40000, 66.30000, 4017.00000,   0.00000, 179.99001, 89.99000);
	CreateDynamicObject(2395, -44.90000, 69.70000, 4015.50000,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 73.40000, 4015.50000,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 77.10000, 4015.39990,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.90000, 80.80000, 4015.39990,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(2395, -44.10000, 82.70000, 4014.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -40.40000, 82.70000, 4015.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -36.70000, 82.70000, 4015.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -33.00000, 82.70000, 4015.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -29.30000, 82.70000, 4015.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18647, -62.90000, 66.10000, 4009.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(335, -18.50000, 39.00000, 4013.69995,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(353, -67.78400, 32.41570, 4001.15210,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(353, -67.19657, 32.57361, 4001.15210,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(353, -68.03035, 33.49686, 4001.15210,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(353, -67.55457, 33.56348, 4001.15210,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(353, -67.18327, 34.08207, 4001.15210,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(356, -71.46332, 31.46082, 4001.13330,   90.00000, 0.00000, -179.94003);
	CreateDynamicObject(356, -71.96594, 33.12317, 4001.13330,   90.00000, 0.00000, -225.53999);
	CreateDynamicObject(356, -71.95299, 32.24305, 4001.13330,   90.00000, 0.00000, -225.84000);
	CreateDynamicObject(2043, -70.53259, 31.36402, 4001.12793,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2043, -69.87494, 31.65987, 4001.12793,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2043, -69.06106, 31.52725, 4001.12793,   0.00000, 0.00000, 90.00000);

	// INTERIOR RUSOS, Optimizado. 24/12/2015.
	// Sistema de ascensor en construcción. Precisa de actualizar timer en la GM.
	CreateObject(18758, 691.92603, -1275.28894, 2200.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18756, 695.76599, -1275.09021, 2200.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 695.76532, -1275.18726, 2200.17000,   0.00000, 0.00000, 0.00000);
	CreateObject(19552, 671.40802, -1270.15906, 2198.25000,   0.00000, 0.00000, 0.00000);
	CreateObject(8059, 713.87701, -1255.50000, 2201.62109,   0.00000, 0.00000, 180.00000);
	CreateObject(8059, 713.87701, -1294.79297, 2201.62109,   0.00000, 0.00000, 0.00000);
	CreateObject(18758, 738.15302, -1269.73206, 2217.98096,   0.00000, 0.00000, -45.00000);
	// Este objeto es un edificio que es el hueco del ascensor en caso de bug, carga muy rápido.
	CreateDynamicObject(4563, 768.18079, -1285.18921, 2120.0,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4563, 764.19513, -1307.46008, 2120.0,   0.00000, 0.00000, 90.00000);
	// Y esto las paredes de la izquierda.
	CreateObject(18981, 746.42798, -1272.45, 2208.61035,   0.00000, 0.00000, 90.00000);
	CreateObject(18981, 746.42798, -1272.45, 2183.62134,   0.00000, 0.00000, 90.00000);
	CreateObject(7019, 727.54999, -1262.97900, 2206.35010,   0.00000, 180.00000, 90.00000);
	CreateObject(18758, 735.92700, -1275.06702, 2072.19897,   0.00000, 0.00000, 0.00000);
	CreateObject(19552, 671.40802, -1270.15906, 2070.46509,   0.00000, 0.00000, 0.00000, 800); //Desbug Parking.
	CreateDynamicObject(19552, 734.15802, -1270.15698, 2135.77295,   0.00000, 90.00000, 359.89899);
	CreateDynamicObject(19885, 681.60101, -1240.18005, 2070.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19885, 681.60101, -1300.18103, 2070.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, 707.32001, -1275.14502, 2070.93799,   5.75000, 90.00000, 90.00000); // Madera.
	CreateObject(19452, 697.73602, -1275.14502, 2071.42700,   0.00000, 90.00000, 90.00000);
	CreateObject(19452, 688.11102, -1275.14502, 2071.42700,   0.00000, 90.00000, 90.00000);
	CreateObject(19452, 678.48700, -1275.14502, 2071.42700,   0.00000, 90.00000, 90.00000);
	CreateObject(19452, 668.87201, -1275.14502, 2071.42700,   0.00000, 90.00000, 90.00000);
	CreateObject(19452, 665.50000, -1275.14502, 2071.41895,   0.00000, 90.00000, 90.00000);
	CreateObject(19452, 655.90302, -1275.14502, 2070.96289,   -5.50000, 90.00000, 90.00000);
	CreateDynamicObject(10023, 649.40997, -1275.41602, 2078.27710,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(10023, 631.41498, -1275.42297, 2078.26099,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19543, 639.75598, -1275.06396, 2070.49707,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 722.00000, -1227.94897, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 697.01501, -1322.80005, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 672.03601, -1322.80005, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 647.06403, -1322.80005, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 622.08002, -1322.80005, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 737.70001, -1322.80005, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 697.01501, -1227.94897, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 672.03601, -1227.94897, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 647.06403, -1227.94897, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 622.08002, -1227.94897, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 734.37903, -1291.40906, 2080.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 734.37903, -1316.38696, 2080.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 734.37903, -1258.59900, 2080.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 614.20502, -1233.62402, 2080.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 734.37903, -1233.62402, 2080.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 614.20001, -1258.59900, 2080.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 614.19000, -1276.47803, 2080.66211,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 614.20001, -1316.38696, 2080.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 614.20001, -1291.40906, 2080.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17299, 684.30103, -1303.61804, 2060.68506,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(897, 689.03699, -1245.94995, 2066.86499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(758, 683.18903, -1246.28003, 2070.12305,   0.00000, 0.00000, 11.13600);
	CreateDynamicObject(758, 685.71698, -1238.66003, 2070.12305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(758, 693.14899, -1240.13000, 2070.12305,   0.00000, 0.00000, 247.48399);
	CreateDynamicObject(758, 687.70697, -1254.02295, 2070.12305,   0.00000, 0.00000, 307.24500);
	CreateDynamicObject(758, 683.18903, -1246.28003, 2070.12305,   0.00000, 0.00000, 11.13600);
	CreateDynamicObject(758, 697.59100, -1247.64905, 2070.12305,   0.00000, 0.00000, 330.37799);
	CreateDynamicObject(758, 694.58801, -1254.39197, 2070.12305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(752, 690.34399, -1256.40295, 2068.85693,   0.00000, 0.00000, 257.29401);
	CreateDynamicObject(752, 696.04498, -1250.83899, 2068.85693,   0.00000, 0.00000, 359.69601);
	CreateDynamicObject(752, 687.39502, -1241.17603, 2068.85693,   0.00000, 0.00000, 359.69601);
	CreateDynamicObject(752, 695.28497, -1243.73706, 2068.85693,   0.00000, 0.00000, 256.34799);
	CreateDynamicObject(752, 689.40399, -1239.25305, 2068.85693,   0.00000, 0.00000, 239.02901);
	CreateDynamicObject(752, 684.38000, -1250.88501, 2068.85693,   0.00000, 0.00000, 190.25301);
	CreateDynamicObject(19841, 689.16998, -1300.12500, 2065.04492,   0.00000, 0.00000, 106.36000);
	CreateDynamicObject(19840, 673.10400, -1293.76794, 2071.35400,   0.00000, 0.00000, 245.24699);
	CreateDynamicObject(887, 692.94800, -1269.03503, 2070.12305,   0.00000, 0.00000, 328.82501);
	CreateDynamicObject(771, 696.22601, -1290.19800, 2042.37695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(751, 666.21899, -1244.97095, 2068.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(751, 678.32300, -1234.31799, 2067.94092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(751, 678.17798, -1256.27100, 2067.42993,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 689.09302, -1246.32397, 2070.50391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 711.38300, -1277.82104, 2070.79297,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(778, 675.55902, -1247.54602, 2063.41797,   0.00000, 0.00000, 42.38100);
	CreateDynamicObject(9833, 692.62097, -1280.36304, 2072.45190,   0.00000, 0.00000, 352.54099);
	CreateDynamicObject(1825, 642.34698, -1280.27905, 2070.49097,   0.00000, 0.00000, 322.17599);
	CreateDynamicObject(2784, 639.83099, -1275.26196, 2071.55591,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9833, 672.40503, -1280.27405, 2072.45190,   0.00000, 0.00000, 352.54099);
	CreateDynamicObject(3515, 666.32202, -1245.08496, 2069.26294,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 677.95099, -1256.14600, 2069.35791,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 678.26801, -1234.02295, 2069.56494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(887, 671.03900, -1268.41699, 2069.96802,   0.00000, 0.00000, 338.19501);
	CreateDynamicObject(887, 682.30902, -1267.67297, 2068.16211,   0.00000, 0.00000, 192.00999);
	CreateDynamicObject(1825, 636.96301, -1273.95105, 2070.49097,   0.00000, 0.00000, 292.33801);
	CreateDynamicObject(1825, 636.19702, -1282.80200, 2070.49097,   0.00000, 0.00000, 322.17599);
	CreateDynamicObject(1825, 644.50702, -1271.81604, 2070.49097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 711.51202, -1272.40002, 2070.79297,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 700.00000, -1273.39697, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 695.00000, -1273.39697, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 690.00000, -1273.39697, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 685.00000, -1273.39697, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 680.00000, -1273.39697, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 675.00000, -1273.39697, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 670.00000, -1273.39697, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 665.00000, -1276.89795, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 665.00000, -1273.39697, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 670.00000, -1276.89795, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 675.00000, -1276.89795, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 680.00000, -1276.89795, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 685.00000, -1276.89795, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 690.00000, -1276.89795, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 695.00000, -1276.89795, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 700.00000, -1276.89795, 2072.04102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2780, 691.43799, -1248.01099, 2066.17798,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11489, 624.23499, -1275.46997, 2070.42310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 654.23901, -1280.82800, 2070.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1726, 654.23901, -1283.82800, 2070.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1726, 654.23901, -1265.00000, 2070.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1726, 654.23901, -1268.00000, 2070.44995,   0.00000, 0.00000, -90.00000);
	CreateObject(4604, 633.58301, -1205.69702, 2210.00000,   0.00000, 0.00000, 0.00000, 800); // Desbug suelo.
	CreateDynamicObject(8565, 660.28302, -1195.39905, 2213.89795,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(8565, 718.98401, -1184.79700, 2213.89795,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(8565, 661.98401, -1226.49902, 2213.89795,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(8565, 702.23401, -1237.79700, 2213.89795,   0.00000, 0.00000, 269.98901);
	CreateObject(4604, 651.28302, -1141.89905, 2210.00903,   0.00000, 0.00000, 180.00000, 800); // Desbug suelo.
	CreateDynamicObject(14407, 714.48401, -1204.29700, 2212.89795,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(14407, 714.33301, -1208.24902, 2212.89795,   0.00000, 0.00000, 87.98600);
	CreateDynamicObject(14407, 714.18402, -1212.20801, 2212.89795,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(14407, 714.03302, -1216.09802, 2212.89795,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(14407, 681.98401, -1231.79700, 2206.54810,   0.00000, 0.00000, 179.97900);
	CreateObject(4604, 749.68402, -1202.09802, 2216.10693,   0.00000, 0.00000, 87.98600, 800); // Desbug suelo.
	CreateDynamicObject(8565, 737.18402, -1185.59802, 2219.69800,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, 717.38300, -1203.79700, 2227.89795,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(2774, 716.93402, -1217.09802, 2227.89795,   0.00000, 0.00000, 357.98901);
	CreateDynamicObject(8565, 707.27600, -1277.77100, 2219.69800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(8565, 752.48401, -1252.39905, 2219.69800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(8565, 774.02301, -1220.99805, 2219.69800,   0.00000, 0.00000, 269.98001);
	CreateDynamicObject(8565, 640.58301, -1160.89905, 2213.89795,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(8565, 718.98401, -1149.89905, 2213.89795,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(5156, 680.50403, -1234.89404, 2188.87598,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(5156, 683.91400, -1234.79700, 2212.89795,   0.00000, 89.98600, 180.00000);
	CreateDynamicObject(5156, 686.98401, -1255.59802, 2203.39795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 679.78302, -1251.19702, 2214.89795,   0.00000, 0.00000, 357.98901);
	CreateDynamicObject(5156, 683.88300, -1268.29700, 2203.59692,   0.00000, 89.98600, 179.99001);
	CreateDynamicObject(5156, 662.28302, -1251.79700, 2203.59692,   0.00000, 89.98600, 271.98901);
	CreateDynamicObject(5156, 679.42102, -1265.85095, 2203.50000,   0.00000, 89.98600, 93.98600);
	CreateDynamicObject(5156, 662.38300, -1260.69702, 2203.59692,   0.00000, 89.98600, 3.99000);
	CreateDynamicObject(4206, 681.08301, -1159.49902, 2210.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8565, 680.18402, -1126.79700, 2213.89795,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(2774, 681.08301, -1178.59802, 2221.89795,   0.00000, 0.00000, 357.98901);
	CreateDynamicObject(2774, 698.18402, -1178.59802, 2221.89795,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, 687.38300, -1178.59802, 2221.89795,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, 691.98401, -1178.59802, 2221.89795,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, 687.78302, -1178.54700, 2213.29810,   0.00000, 90.00000, 359.97000);
	CreateDynamicObject(1491, 688.18402, -1178.79700, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 691.19299, -1178.76904, 2209.89795,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 680.35400, -1178.79700, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 684.08301, -1178.79700, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 693.28302, -1178.79700, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 696.98401, -1178.79700, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 682.38300, -1178.79700, 2214.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 686.08301, -1178.79700, 2214.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 689.78302, -1178.79700, 2214.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 693.48401, -1178.79700, 2214.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 697.18402, -1178.79700, 2214.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 682.38300, -1178.79700, 2216.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 686.08301, -1178.79700, 2216.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 689.78302, -1178.79700, 2216.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 693.48401, -1178.79700, 2216.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 697.18402, -1178.79700, 2216.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 686.38300, -1178.29700, 2209.89795,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 682.68402, -1178.29700, 2209.89795,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 695.98401, -1178.29700, 2209.89795,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 699.68402, -1178.29700, 2209.89795,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 697.18402, -1178.29700, 2214.09692,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 693.48401, -1178.29700, 2214.09692,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 689.78302, -1178.29700, 2214.09692,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 686.08301, -1178.29700, 2214.09692,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 682.48401, -1178.29700, 2214.09692,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 697.08301, -1178.29700, 2216.79810,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 693.38300, -1178.29700, 2216.79810,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 689.68402, -1178.29700, 2216.79810,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 685.98401, -1178.29700, 2216.79810,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 682.28302, -1178.29700, 2216.79810,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(906, 688.98401, -1168.39905, 2209.89795,   0.00000, 0.00000, 32.00000);
	CreateDynamicObject(906, 693.38300, -1164.79700, 2210.00000,   0.00000, 0.00000, 61.99000);
	CreateDynamicObject(880, 694.48401, -1159.49902, 2209.89795,   0.00000, 0.00000, 102.00000);
	CreateDynamicObject(906, 687.78302, -1169.79700, 2209.89795,   0.00000, 0.00000, 209.99001);
	CreateDynamicObject(906, 682.78302, -1171.09802, 2209.89795,   0.00000, 0.00000, 187.97900);
	CreateDynamicObject(906, 677.58301, -1170.59802, 2209.89795,   0.00000, 0.00000, 159.97900);
	CreateDynamicObject(906, 670.88300, -1166.19702, 2209.89795,   0.00000, 0.00000, 311.97000);
	CreateDynamicObject(906, 669.98401, -1163.59802, 2210.00000,   0.00000, 0.00000, 117.95800);
	CreateDynamicObject(906, 668.78302, -1158.89905, 2210.00000,   0.00000, 0.00000, 91.94600);
	CreateDynamicObject(906, 670.98401, -1151.49902, 2209.89795,   0.00000, 0.00000, 229.94000);
	CreateDynamicObject(906, 693.38300, -1153.79700, 2209.89795,   0.00000, 0.00000, 125.94000);
	CreateDynamicObject(906, 674.98401, -1148.59802, 2209.89795,   0.00000, 0.00000, 189.94000);
	CreateDynamicObject(906, 679.88300, -1146.99902, 2209.89795,   0.00000, 0.00000, 189.92900);
	CreateDynamicObject(906, 684.98401, -1147.79700, 2209.89795,   0.00000, 0.00000, 157.92900);
	CreateDynamicObject(906, 689.48401, -1150.59802, 2209.89795,   0.00000, 0.00000, 137.91901);
	CreateDynamicObject(2415, 675.68402, -1155.29700, 2208.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 684.58301, -1155.29700, 2208.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 674.28302, -1162.59802, 2208.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 683.48401, -1162.29700, 2208.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 679.18402, -1166.69702, 2208.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 669.58301, -1166.59802, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 667.38300, -1159.39905, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 675.98401, -1146.19702, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 670.68402, -1149.69702, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 688.38300, -1146.39905, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 693.08301, -1149.49902, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 697.88300, -1160.59802, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(634, 695.38300, -1166.89905, 2209.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1255, 671.28302, -1172.59802, 2210.59692,   0.00000, 0.00000, 56.00000);
	CreateDynamicObject(1255, 667.38300, -1169.19702, 2210.59692,   0.00000, 0.00000, 44.00000);
	CreateDynamicObject(1255, 665.58301, -1165.49902, 2210.59692,   0.00000, 0.00000, 29.98900);
	CreateDynamicObject(1255, 668.58301, -1147.69702, 2210.59692,   0.00000, 0.00000, 329.98901);
	CreateDynamicObject(1255, 666.28302, -1150.79700, 2210.59692,   0.00000, 0.00000, 335.98901);
	CreateDynamicObject(1255, 665.08301, -1154.59802, 2210.59692,   0.00000, 0.00000, 349.98001);
	CreateDynamicObject(1255, 691.08301, -1172.09802, 2210.59692,   0.00000, 0.00000, 128.00000);
	CreateDynamicObject(1255, 694.88300, -1168.89905, 2210.59692,   0.00000, 0.00000, 141.99001);
	CreateDynamicObject(1255, 696.98401, -1164.69702, 2210.59692,   0.00000, 0.00000, 157.99001);
	CreateDynamicObject(1255, 697.08301, -1155.29700, 2210.59692,   0.00000, 0.00000, 185.97900);
	CreateDynamicObject(1255, 696.18402, -1151.49902, 2210.59692,   0.00000, 0.00000, 213.97900);
	CreateDynamicObject(1255, 693.48401, -1147.89905, 2210.59692,   0.00000, 0.00000, 227.97000);
	CreateDynamicObject(16151, 661.58301, -1171.19702, 2210.29810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1541, 662.11401, -1169.69702, 2211.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1667, 662.28302, -1174.69702, 2211.02002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 662.68402, -1174.09802, 2211.02002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 662.28302, -1174.29700, 2211.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 662.78302, -1172.79700, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 662.78302, -1171.49902, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 662.78302, -1171.69702, 2211.00000,   0.00000, 0.00000, 356.00000);
	CreateDynamicObject(1544, 662.68402, -1172.79700, 2210.89795,   0.00000, 0.00000, 86.00000);
	CreateDynamicObject(1544, 662.68402, -1172.69702, 2210.89795,   0.00000, 0.00000, 85.98600);
	CreateDynamicObject(1544, 662.68402, -1171.49902, 2210.89795,   0.00000, 0.00000, 85.98600);
	CreateDynamicObject(1215, 660.78302, -1176.99902, 2210.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 668.38300, -1166.29700, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 693.68402, -1167.59802, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 684.38300, -1172.89905, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 689.78302, -1170.49902, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 673.08301, -1170.79700, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 669.08301, -1150.09802, 2210.69800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 667.48401, -1154.69702, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 675.18402, -1146.29700, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 688.18402, -1146.59802, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 692.08301, -1149.49902, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 695.28302, -1154.89905, 2210.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 661.98401, -1148.69702, 2210.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 697.08301, -1175.49902, 2210.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 692.48401, -1175.49902, 2210.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 697.38300, -1147.19702, 2210.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 696.08301, -1188.59802, 2209.97900,   0.00000, 0.00000, 271.98901);
	CreateDynamicObject(2774, 683.88300, -1218.67700, 2221.89795,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(2774, 680.18402, -1218.67700, 2221.89795,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(2774, 681.78302, -1218.71802, 2213.29810,   0.00000, 89.98600, 359.98001);
	CreateDynamicObject(2395, 682.88300, -1218.39905, 2214.09692,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 682.78302, -1218.39905, 2216.79810,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2774, 699.80402, -1203.89905, 2221.89795,   0.00000, 0.00000, 357.98901);
	CreateDynamicObject(2774, 699.80402, -1216.99902, 2221.89795,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, 699.88300, -1210.79700, 2213.29810,   0.00000, 89.98600, 269.98001);
	CreateDynamicObject(2395, 699.68402, -1205.09802, 2214.09692,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 699.68402, -1208.79700, 2214.09692,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 699.68402, -1212.49902, 2214.09692,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 699.68402, -1216.09802, 2214.09692,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 699.68402, -1205.19702, 2216.79810,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 699.68402, -1208.69702, 2216.79810,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 699.68402, -1212.39905, 2216.79810,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 699.68402, -1215.89905, 2216.79810,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2774, 699.80402, -1210.69702, 2221.89795,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2395, 680.58301, -1219.49902, 2214.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 681.28302, -1219.49902, 2216.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 700.08301, -1215.69702, 2214.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, 700.08301, -1211.99902, 2214.09692,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1208.29700, 2214.09692,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1204.69702, 2214.09692,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1215.69702, 2216.79810,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1211.99902, 2216.79810,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1208.29700, 2216.79810,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1204.69702, 2216.79810,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(3409, 664.98401, -1266.69702, 2203.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, 665.28302, -1261.99902, 2203.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, 665.18402, -1257.49902, 2203.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, 665.18402, -1252.89905, 2203.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, 669.48401, -1266.49902, 2203.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, 669.78302, -1261.79700, 2203.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, 669.68402, -1257.39905, 2203.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, 669.48401, -1252.89905, 2203.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 671.98401, -1253.39905, 2204.04810,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(3850, 672.23401, -1256.89905, 2204.04810,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(3850, 672.58301, -1265.89905, 2204.04810,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(3850, 672.58301, -1262.39905, 2204.04810,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(941, 681.38300, -1264.79700, 2204.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 679.08301, -1264.79700, 2204.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 676.78302, -1264.79700, 2204.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 674.48401, -1264.79700, 2204.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 681.28302, -1261.59802, 2204.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 678.98401, -1261.59802, 2204.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 676.68402, -1261.59802, 2204.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 674.38300, -1261.59802, 2204.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 673.68402, -1252.39905, 2204.39795,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(944, 676.58301, -1252.19702, 2204.39795,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(944, 673.78302, -1253.89905, 2204.39795,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(944, 676.58301, -1253.69702, 2204.39795,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(944, 674.88300, -1253.19702, 2205.84692,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(17969, 683.78302, -1254.69702, 2205.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17969, 683.78302, -1262.99902, 2205.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2901, 681.68402, -1264.69702, 2204.69800,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(2901, 679.78302, -1264.69702, 2204.69800,   0.00000, 0.00000, 357.98901);
	CreateDynamicObject(2901, 677.98401, -1264.69702, 2204.69800,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2901, 676.28302, -1264.69702, 2204.69800,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2901, 674.58301, -1264.69702, 2204.69800,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2891, 682.18402, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 682.18402, -1261.79700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 681.58301, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 681.58301, -1261.79700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 680.98401, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 680.98401, -1261.79700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 680.38300, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 680.38300, -1261.79700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 679.88300, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 679.88300, -1261.89905, 2204.39795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 679.38300, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 679.38300, -1261.79700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 678.88300, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 678.88300, -1261.89905, 2204.39795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 678.38300, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 678.38300, -1261.89905, 2204.39795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, 677.58301, -1261.49902, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, 676.08301, -1261.69702, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, 674.58301, -1261.79700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 673.88300, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 674.68402, -1261.29700, 2204.59692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 675.28302, -1261.29700, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 676.78302, -1261.39905, 2204.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 737.98401, -1231.89905, 2227.89795,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, 737.98401, -1204.79700, 2227.89795,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, 737.98401, -1214.99902, 2227.89795,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, 737.98401, -1225.19702, 2227.89795,   0.00000, 0.00000, 357.97000);
	CreateDynamicObject(2774, 738.08301, -1216.39905, 2219.39795,   0.00000, 89.98600, 269.98001);
	CreateDynamicObject(2774, 738.08301, -1231.09802, 2219.39795,   0.00000, 89.98600, 269.98001);
	CreateDynamicObject(2395, 737.24701, -1205.79504, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 737.24701, -1212.49902, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 737.88300, -1217.89905, 2217.69800,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1649, 737.73401, -1222.29700, 2217.69800,   0.00000, 0.00000, 267.98901);
	CreateDynamicObject(1649, 737.68402, -1228.09802, 2217.69800,   0.00000, 0.00000, 267.98901);
	CreateDynamicObject(1649, 737.53302, -1232.49902, 2217.69800,   0.00000, 0.00000, 267.98901);
	CreateDynamicObject(2395, 737.68402, -1206.09802, 2220.19800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 737.68402, -1209.79700, 2220.19800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 737.68402, -1213.49902, 2220.19800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 737.68402, -1217.19702, 2220.19800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 737.68402, -1220.89905, 2220.19800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 737.68402, -1224.29700, 2220.19800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2395, 737.68402, -1227.99902, 2220.19800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(5156, 737.28302, -1230.79700, 2216.19800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2357, 749.88300, -1224.19702, 2216.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2357, 749.88300, -1219.99902, 2216.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2357, 749.88300, -1215.79700, 2216.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2357, 742.68402, -1215.69702, 2216.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2357, 748.38300, -1212.99902, 2216.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 744.18402, -1212.99902, 2216.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 742.68402, -1219.89905, 2216.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2357, 742.68402, -1223.99902, 2216.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 737.58301, -1215.23401, 2216.09692,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 737.58301, -1208.54602, 2216.09692,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 738.38300, -1208.69702, 2220.19800,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 738.38300, -1212.39905, 2220.19800,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 738.38300, -1216.09802, 2220.19800,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 738.38300, -1219.79700, 2220.19800,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 738.38300, -1223.49902, 2220.19800,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 738.38300, -1227.19702, 2220.19800,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 738.38300, -1230.89905, 2220.19800,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(1714, 746.38300, -1211.19702, 2216.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 751.55701, -1213.00000, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 740.95001, -1213.00000, 2216.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1667, 746.68402, -1212.49902, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1213.49902, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1214.79700, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1216.09802, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1217.59802, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1218.89905, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1220.19702, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1221.79700, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1223.09802, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1224.39905, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 750.38300, -1225.79700, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.18402, -1225.89905, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.18402, -1224.69702, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.28302, -1223.59802, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.18402, -1222.39905, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.18402, -1221.19702, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.18402, -1219.79700, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.18402, -1218.39905, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.18402, -1216.59802, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.28302, -1215.39905, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.28302, -1214.19702, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 742.28302, -1213.09802, 2217.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 746.08301, -1212.49902, 2216.94800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3044, 745.98401, -1212.39905, 2217.00000,   0.00000, 0.00000, 28.00000);
	CreateDynamicObject(1846, 746.28302, -1231.41699, 2218.89795,   90.00000, 90.00000, 270.00000);
	CreateDynamicObject(2229, 747.68402, -1232.79700, 2218.19800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 744.28302, -1232.79700, 2218.19800,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2491, 748.98401, -1227.89905, 2215.50000,   0.00000, 0.00000, 22.00000);
	CreateDynamicObject(1952, 748.88300, -1228.39905, 2217.50000,   90.00000, 90.00000, 224.00000);
	CreateDynamicObject(2227, 746.58301, -1214.99902, 2216.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14565, 747.18402, -1203.19702, 2218.00000,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(1726, 755.18402, -1208.19702, 2216.09692,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1726, 755.18402, -1213.49902, 2216.09692,   0.00000, 0.00000, 267.98901);
	CreateDynamicObject(1726, 755.08301, -1219.69702, 2216.09692,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(1726, 755.18402, -1226.89905, 2216.09692,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2774, 733.28302, -1233.19702, 2227.89795,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, 726.38300, -1258.84900, 2227.89795,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, 731.68402, -1233.29700, 2219.39795,   0.00000, 90.00000, 179.97900);
	CreateDynamicObject(1491, 731.18402, -1232.79700, 2216.04810,   0.00000, 0.00000, 177.99001);
	CreateDynamicObject(1491, 728.18402, -1232.79700, 2216.04810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 727.78302, -1232.69702, 2216.06909,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 734.38300, -1232.69702, 2216.07788,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 732.08301, -1232.89905, 2220.19800,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 728.38300, -1232.89905, 2220.19800,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 731.98401, -1232.89905, 2222.89795,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 728.58301, -1232.89905, 2222.89795,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 731.64301, -1232.92700, 2216.07788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 724.98401, -1232.89905, 2216.07788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 727.58301, -1233.09802, 2220.19800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 731.28302, -1233.09802, 2220.19800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 727.48401, -1233.09802, 2222.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 731.18402, -1233.09802, 2222.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 687.48401, -1180.39905, 2211.09692,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(3471, 691.88300, -1180.39905, 2211.09692,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(3660, 680.58301, -1188.59802, 2211.39795,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(630, 682.88300, -1179.39905, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 685.48401, -1179.39905, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 693.88300, -1179.59802, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 696.38300, -1179.59802, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 680.88300, -1214.69702, 2209.97900,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(1726, 680.93298, -1202.29102, 2209.97900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 680.78302, -1209.19702, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 697.08301, -1217.29700, 2209.97900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 686.78302, -1217.29700, 2209.97900,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(630, 688.08301, -1217.49902, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 693.28302, -1217.59802, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 680.58301, -1177.39905, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 695.98401, -1193.49902, 2209.97900,   0.00000, 0.00000, 267.98901);
	CreateDynamicObject(2964, 695.98401, -1197.79700, 2209.97900,   0.00000, 0.00000, 267.98901);
	CreateDynamicObject(1432, 662.38300, -1161.59802, 2210.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 662.08301, -1155.19702, 2210.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 692.18402, -1186.89905, 2210.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 697.28302, -1185.19702, 2210.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 693.88300, -1185.19702, 2210.50000,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(3850, 692.18402, -1190.29700, 2210.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 692.18402, -1193.69702, 2210.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 692.18402, -1197.09802, 2210.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 692.18402, -1200.49902, 2210.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 693.88300, -1202.19702, 2210.50000,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(1726, 692.78302, -1198.99902, 2210.00000,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(1726, 692.78302, -1194.29700, 2210.00000,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(1726, 692.78302, -1189.39905, 2210.00000,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(1726, 720.68402, -1203.99902, 2216.09692,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1726, 727.38300, -1204.09802, 2216.09692,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1726, 733.58301, -1204.39905, 2216.09692,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1726, 720.28302, -1217.29700, 2216.09692,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1726, 724.88300, -1217.19702, 2216.09692,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1726, 726.08301, -1228.99902, 2216.09692,   0.00000, 0.00000, 87.98600);
	CreateDynamicObject(1726, 726.18402, -1221.79700, 2216.09692,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(630, 706.08301, -1217.39905, 2210.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 703.68402, -1217.39905, 2210.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 701.18402, -1217.39905, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 706.08301, -1203.49902, 2210.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 703.68402, -1203.49902, 2210.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 701.18402, -1203.49902, 2211.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 721.68402, -1217.49902, 2217.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 719.38300, -1203.69702, 2217.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 725.18402, -1203.89905, 2217.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 731.58301, -1204.09802, 2217.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 736.78302, -1204.19702, 2217.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 725.98401, -1224.49902, 2217.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5156, 677.18402, -1190.29700, 2217.50000,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(5156, 682.78302, -1198.59802, 2217.50000,   0.00000, 179.99001, 89.98600);
	CreateDynamicObject(5156, 716.77197, -1207.72302, 2220.89795,   0.00000, 179.99001, 89.98600);
	CreateDynamicObject(5156, 747.38300, -1219.49902, 2220.89795,   0.00000, 179.99001, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1216.09802, 2219.39795,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1212.39905, 2219.39795,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1208.69702, 2219.29810,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.08301, -1204.99902, 2219.29810,   0.00000, 0.00000, 89.98600);
	CreateDynamicObject(2395, 700.88300, -1203.09802, 2218.19800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 704.58301, -1203.09802, 2219.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 708.28302, -1203.09802, 2218.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 711.98401, -1203.09802, 2218.89795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 715.68402, -1203.09802, 2219.09692,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(353, 677.20001, -1253.38306, 2205.05200,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(353, 677.78601, -1253.22302, 2205.05200,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(353, 676.95300, -1252.30200, 2205.05200,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(353, 677.42902, -1252.23401, 2205.05200,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(353, 677.80103, -1251.71704, 2205.05200,   90.00000, 0.00000, -77.40000);
	CreateDynamicObject(356, 673.52002, -1254.33801, 2205.03198,   90.00000, 0.00000, -179.94000);
	CreateDynamicObject(356, 673.01801, -1252.67603, 2205.03198,   90.00000, 0.00000, -225.53900);
	CreateDynamicObject(356, 673.03101, -1253.55603, 2205.03198,   90.00000, 0.00000, -225.83900);
	CreateDynamicObject(2043, 674.45001, -1254.43506, 2205.02490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2043, 675.10901, -1254.13904, 2205.02490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2043, 675.92200, -1254.27002, 2205.02490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19545, 734.12299, -1290.85706, 2208.66699,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 728.65503, -1277.82300, 2216.16089,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8565, 707.28302, -1237.80701, 2219.69800,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(19377, 728.90302, -1258.56995, 2215.99292,   -2.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 728.90302, -1268.19604, 2216.16089,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8565, 715.15503, -1297.41199, 2219.69800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18758, 735.92700, -1275.09900, 2200.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18758, 735.92700, -1275.09900, 2217.98096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 726.38300, -1233.19702, 2227.89795,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, 733.28302, -1258.84900, 2227.89795,   0.00000, 0.00000, 357.98001);
	CreateDynamicObject(2774, 731.68402, -1258.84900, 2219.39795,   0.00000, 90.00000, 179.97900);
	CreateDynamicObject(1491, 728.18402, -1258.84900, 2216.04810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 731.18402, -1258.84900, 2216.04810,   0.00000, 0.00000, 177.99001);
	CreateDynamicObject(2395, 731.64301, -1258.84900, 2216.07788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 724.98401, -1258.84900, 2216.07788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 731.28302, -1258.84900, 2220.19800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 727.58301, -1258.84900, 2220.19800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 734.38300, -1258.69702, 2216.07788,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 727.73602, -1258.69702, 2216.06909,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 732.08301, -1258.69702, 2220.19800,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2395, 728.38300, -1258.69702, 2220.19800,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1726, 680.98401, -1205.69702, 2209.97900,   0.00000, 0.00000, 90.00000);
	CreateObject(19532, 720.11200, -1539.91101, 2070.46899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19530, 671.62000, -1264.26501, 2087.79810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1537, 689.00000, -1217.80005, 2209.95410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18647, 693.98798, -1275.15198, 2201.64502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 682.06097, -1247.61401, 2066.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 693.81799, -1252.04797, 2065.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 686.58502, -1256.34399, 2065.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1537, 690.50000, -1217.80005, 2209.95410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(771, 677.64697, -1314.37000, 2052.32202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2780, 667.17102, -1292.64099, 2066.44507,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2780, 696.14899, -1297.78503, 2066.52490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18777, 786.87598, -1648.58997, -19.78000,   0.00000, 0.00000, 180.00000);
	CreateObject(18772, 720.03497, -1447.33899, 2072.94897,   0.00000, 0.00000, 0.00000, 800);
	CreateDynamicObject(18981, 727.39203, -1322.80701, 2088.10596,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 702.40002, -1322.80701, 2080.66992,   0.00000, 0.00000, 90.00000);
	CreateObject(19532, 720.11200, -1289.93994, 2070.46899,   0.00000, 0.00000, 0.00000, 800);
	CreateObject(19532, 720.11200, -1414.93396, 2070.46899,   0.00000, 0.00000, 0.00000, 800);
	CreateDynamicObject(19460, 720.09601, -1576.03198, 2070.32690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4084, 720.11603, -1572.45105, 2072.19800,   0.00000, 0.00000, -90.00000);
	CreateObject(19545, 720.08502, -1572.38794, 2077.85498,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(4084, 766.47302, -1648.53699, 5.52800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(17033, 767.71399, -1637.90796, 2.87100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 768.63202, -1631.03601, 9.12500,   3.14100, 0.00000, 1.24600);
	CreateDynamicObject(762, 774.76202, -1641.78699, 5.59900,   356.85800, 0.00000, 353.68100);
	CreateDynamicObject(19454, 766.50702, -1648.50195, 7.17200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 766.50702, -1648.50195, 3.71800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(617, 771.28802, -1648.47705, 3.72710,   0.00000, 0.00000, 314.62900);
	CreateDynamicObject(873, 770.42798, -1641.04602, 9.23400,   0.00000, 0.00000, 265.89801);
	CreateDynamicObject(803, 764.40802, -1644.74500, 9.41800,   0.00000, 0.00000, 339.52100);
	CreateDynamicObject(728, 772.60498, -1649.18396, 3.29900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(898, 778.53400, -1628.98499, 2.16000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(730, 773.89697, -1659.31299, 3.42800,   0.00000, 0.00000, 332.42899);
	CreateDynamicObject(1714, 751.55701, -1215.00000, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 751.55701, -1217.00000, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 751.55701, -1219.00000, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 751.55701, -1221.00000, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 751.55701, -1223.00000, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 751.55701, -1225.00000, 2216.09692,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 740.95001, -1215.00000, 2216.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 740.95001, -1217.00000, 2216.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 740.95001, -1219.00000, 2216.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 740.95001, -1221.00000, 2216.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 740.95001, -1223.00000, 2216.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 740.95001, -1225.00000, 2216.09692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19305, 737.53247, -1212.41089, 2217.47607,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11737, 737.28601, -1208.24902, 2217.72095,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(3627, 710.00000, -1254.73523, 2073.91895,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3627, 710.00000, -1296.09509, 2073.91895,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10009, 681.82581, -1299.56165, 2080.39282,   0.00000, 0.00000, 160.01421);
	CreateDynamicObject(19630, 697.87250, -1281.00195, 2071.01196,   90.00000, 90.00000, 126.09970);
	CreateDynamicObject(4199, 720.10742, -1568.26880, 2068.19995,   0.00000, 0.00000, 0.00000);

	// EXTERIOR RUSOS:
	new Rusos; // HQ Ext Rusos.
	Rusos = CreateObject(6522, 702.86719, -1276.03125, 20.79430,   0.00000, 0.00000, 0.00000, 800);
	SetObjectMaterial(Rusos, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE", 0);
	SetObjectMaterial(Rusos, 1, 18752, "Volcano", "rocktb128", 0);
	SetObjectMaterial(Rusos, 2, 16021, "des_geyser", "shingles1", 0);
	SetObjectMaterial(Rusos, 6, 16005, "des_stownmain2", "des_ghotwood1", 0);
	CreateDynamicObject(18757, 693.94647, -1277.82446, 14.42220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18756, 693.94513, -1273.82825, 14.42220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8210, 716.70227, -1183.50598, 18.92342,   0.00000, 3.00000, 239.60339);
	CreateDynamicObject(987, 736.04730, -1149.08704, 20.36570,   0.00000, 2.00000, 242.06715);
	CreateDynamicObject(987, 739.14447, -1143.27014, 20.36570,   0.00000, 1.00000, 242.06720);
	CreateDynamicObject(987, 751.04590, -1142.58655, 21.12189,   0.00000, 1.00000, 183.30901);
	CreateDynamicObject(987, 762.75128, -1142.73840, 21.10390,   0.00000, 0.00000, 179.97580);
	CreateDynamicObject(987, 774.71808, -1142.76697, 21.25780,   0.00000, 0.00000, 179.60330);
	CreateDynamicObject(987, 783.80743, -1143.03662, 21.25780,   0.00000, 0.00000, 179.60330);
	CreateDynamicObject(987, 702.90680, -1207.88391, 14.60645,   0.00000, 7.00000, 147.03860);
	CreateDynamicObject(987, 671.27441, -1214.47571, 17.00409,   0.00000, 5.00000, 214.78940);
	CreateDynamicObject(987, 671.27441, -1214.47571, 15.58600,   0.00000, 0.00000, 214.78940);
	CreateDynamicObject(987, 702.60620, -1207.61682, 17.04681,   0.00000, 7.00000, 147.03860);

	// INTERIOR LCN (Mafia Italiana - La Cosa Nostra):
	new lcn1; // Porton de LCN, en Los Santos.
	// Nuevo Exterior & Interior de LCN (Actualizado). Coordenada Z: +2.000.
	// ((Texturas))
	lcn1 = CreateObject(18766, 1284.59412, -2064.01978, 61.16470,   0.00000, 90.00000, 89.00000);
	SetObjectMaterial(lcn1, 0, 7586, "miragecasino2", "nt_bonav1", 0);
	lcn1 = CreateObject(18766, 1284.61060, -2049.01953, 61.16470,   0.00000, 90.00000, 89.00000);
	SetObjectMaterial(lcn1, 0, 7586, "miragecasino2", "nt_bonav1", 0);
	lcn1 = CreateObject(18766, 1283.61304, -2064.00024, 61.16470,   0.00000, 90.00000, 89.00000);
	SetObjectMaterial(lcn1, 0, 7586, "miragecasino2", "nt_bonav1", 0);
	lcn1 = CreateObject(18766, 1283.61304, -2048.99976, 61.16470,   0.00000, 90.00000, 89.00000);
	SetObjectMaterial(lcn1, 0, 7586, "miragecasino2", "nt_bonav1", 0);
	lcn1 = CreateObject(4826, 1102.91406, -2036.98438, 77.33590,   0.00000, 0.00000, 0.00000,800);
	SetObjectMaterial(lcn1, 0, 7586, "miragecasino2", "nt_bonav1", 0);
	lcn1 = CreateObject(4826, 1102.91406, -2036.98438, 77.33590,   0.00000, 0.00000, 0.00000,800);
	SetObjectMaterial(lcn1, 0, 7892, "vegasneon", "neon", 0);
	lcn1 = CreateObject(4825, 1146.01306, -2037.00330, 65.50020,   360.00000, 0.00000, 0.00000,800);
	SetObjectMaterial(lcn1, 2, 7586, "miragecasino2", "nt_bonav1", 0);
	SetObjectMaterial(lcn1, 3, 6872, "vgndwntwn5", "glasswindow2_256", 0);
	SetObjectMaterial(lcn1, 4, 6872, "vgndwntwn5", "hirisedoor1_256", 0);
	// ((Mapeado LCN - Exterior))
	CreateDynamicObject(3749, 1426.71301, -1884.20898, 18.29700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2399, 1205.58801, -2014.43298, 71.89700,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2397, 1205.58801, -2015.29297, 71.46700,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1441, 1204.18604, -2017.71899, 71.23900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(348, 1203.93799, -2016.90698, 70.62000,   90.00000, 0.00000, -76.00000);
	CreateDynamicObject(348, 1203.97095, -2017.12903, 70.62000,   90.00000, 0.00000, 55.00000);
	CreateDynamicObject(348, 1203.98999, -2017.24902, 70.62000,   90.00000, 0.00000, 55.00000);
	CreateDynamicObject(348, 1204.29199, -2017.21106, 70.62000,   90.00000, 0.00000, 105.00000);
	CreateDynamicObject(348, 1204.36804, -2016.74304, 70.62000,   90.00000, 0.00000, 193.00000);
	CreateDynamicObject(348, 1204.16602, -2016.89502, 70.62000,   90.00000, 0.00000, 178.00000);
	CreateDynamicObject(356, 1204.41101, -2017.30298, 71.29500,   18.00000, 105.00000, 0.00000);
	CreateDynamicObject(356, 1204.24097, -2017.30896, 71.29500,   18.00000, 105.00000, 0.00000);
	CreateDynamicObject(356, 1204.52600, -2016.95203, 71.29500,   18.00000, 105.00000, -273.00000);
	CreateDynamicObject(356, 1204.32300, -2016.87097, 71.02600,   18.00000, 149.00000, 0.00000);
	CreateDynamicObject(1450, 1202.08606, -2017.75696, 71.18200,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2041, 1203.15503, -2017.00696, 70.70800,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(2040, 1202.47498, -2016.96899, 70.70800,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(2043, 1202.82703, -2016.76196, 70.70800,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(2478, 1200.63098, -2018.02197, 70.88200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2926, 1200.68896, -2017.35205, 70.56010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(373, 1200.75500, -2017.17896, 70.81010,   -222.00000, 25.00000, 2.00000);
	CreateDynamicObject(373, 1200.55701, -2017.58105, 70.81010,   0.00000, 25.00000, 0.00000);
	CreateDynamicObject(373, 1200.87305, -2017.59399, 70.81010,   0.00000, 25.00000, -47.00000);
	CreateDynamicObject(19464, 1123.49500, -2041.43799, 71.82100,   270.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1123.49500, -2032.57397, 71.82100,   270.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1124.28894, -2027.12695, 69.99100,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1124.28894, -2046.86499, 69.99100,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19124, 1158.75500, -2077.14795, 70.58610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1152.90002, -2077.14795, 70.58610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1140.56995, -2077.14795, 70.58610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1171.15906, -2077.14795, 70.58610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1177.02600, -2077.14795, 70.58610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1189.45801, -2077.14795, 70.58610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1260.47498, -2005.77295, 57.54800,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(7586, 1175.07996, -2037.07202, 62.45700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1284.91199, -2048.90796, 59.11800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1284.91199, -2048.90796, 62.55800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1284.91199, -2048.90796, 65.56800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1284.91199, -2063.95801, 59.11800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1284.91199, -2063.95801, 62.55800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1284.91199, -2063.95801, 65.56800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1285.39905, -2061.70801, 58.25810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1285.39905, -2051.39209, 58.25810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1242.72595, -2044.88794, 64.60900,   360.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1280.28101, -2046.06201, 64.18500,   360.00000, 0.00000, 0.00000);
	CreateDynamicObject(3534, 1240.02100, -2035.46301, 61.97800,   0.00000, 0.00000, 355.93201);
	CreateDynamicObject(3534, 1240.05896, -2038.70300, 61.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1185.43201, -2040.38098, 69.43900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1185.43201, -2033.61206, 69.43900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1179.95300, -2046.37402, 69.43900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1170.12195, -2046.37402, 69.43900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1164.54797, -2040.38098, 69.43900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1164.54797, -2033.61206, 69.43900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1179.95300, -2027.55396, 69.43900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1170.12195, -2027.56995, 69.43900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3534, 1137.93298, -2040.08899, 68.86500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3534, 1137.93298, -2033.96802, 68.86500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3935, 1117.84094, -2037.01404, 77.86210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19126, 1130.84998, -2066.56299, 68.50100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1131.02600, -2043.86804, 68.50100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1131.04602, -2030.08704, 68.50100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1130.83203, -2007.45703, 68.50100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1123.18896, -2039.42798, 65.77290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1123.18896, -2034.58496, 65.77290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1284.12000, -2041.40906, 59.19490,   0.00000, 0.00000, -89.86000);
	CreateDynamicObject(8674, 1284.12000, -2041.40906, 62.11000,   0.00000, 0.00000, -89.86000);
	CreateDynamicObject(8674, 1284.09705, -2031.03198, 59.19490,   0.00000, 0.00000, -89.86000);
	CreateDynamicObject(8674, 1284.09705, -2031.03198, 62.11000,   0.00000, 0.00000, -89.86000);
	CreateDynamicObject(8674, 1284.07104, -2020.66504, 59.19490,   0.00000, 0.00000, -89.86000);
	CreateDynamicObject(8674, 1284.07104, -2020.66504, 62.11000,   0.00000, 0.00000, -89.86000);
	CreateDynamicObject(8674, 1284.04297, -2010.30396, 59.19490,   0.00000, 0.00000, -89.86000);
	CreateDynamicObject(8674, 1284.04297, -2010.30396, 62.11000,   0.00000, 0.00000, -89.86000);
	CreateDynamicObject(18766, 1283.64099, -2005.13196, 60.73400,   0.00000, 90.00000, 89.86000);
	CreateDynamicObject(18766, 1281.64294, -2003.13403, 60.73100,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8674, 1273.98804, -2002.64795, 59.19490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1273.98804, -2002.64795, 62.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1263.63599, -2002.64795, 59.19490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1253.27502, -2002.64795, 59.19490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1242.94495, -2002.64795, 59.19490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1263.64099, -2002.64795, 62.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1253.27502, -2002.64795, 62.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1242.94495, -2002.64795, 62.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11474, 1243.14697, -2069.54199, 59.92500,   0.00000, 0.00000, 96.87900);
	CreateDynamicObject(8674, 1248.11694, -2065.34595, 59.19490,   0.00000, 0.00000, -1.72000);
	CreateDynamicObject(11474, 1242.77100, -2066.62207, 59.92500,   0.00000, 0.00000, -83.12000);
	CreateDynamicObject(11474, 1243.14697, -2069.54199, 61.39100,   0.00000, 0.00000, 96.87900);
	CreateDynamicObject(11474, 1242.77100, -2066.62207, 61.39100,   0.00000, 0.00000, -83.12000);
	CreateDynamicObject(8674, 1248.11694, -2065.34595, 62.11000,   0.00000, 0.00000, -1.72000);
	CreateDynamicObject(11474, 1242.77100, -2066.62207, 62.89500,   0.00000, 0.00000, -83.12000);
	CreateDynamicObject(11474, 1243.14697, -2069.54199, 62.89500,   0.00000, 0.00000, 96.87900);
	CreateDynamicObject(11474, 1243.14697, -2069.54199, 58.43510,   0.00000, 0.00000, 96.87900);
	CreateDynamicObject(11474, 1242.77100, -2066.62207, 58.43510,   0.00000, 0.00000, -83.12000);
	CreateDynamicObject(18766, 1240.48804, -2070.52197, 62.95800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1240.48901, -2003.02502, 62.95800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8674, 1258.44800, -2065.66406, 59.19490,   0.00000, 0.00000, -1.72000);
	CreateDynamicObject(8674, 1258.44800, -2065.66406, 62.11000,   0.00000, 0.00000, -1.72000);
	CreateDynamicObject(8674, 1268.80701, -2065.98389, 59.19490,   0.00000, 0.00000, -1.72000);
	CreateDynamicObject(8674, 1268.80701, -2065.98389, 62.11000,   0.00000, 0.00000, -1.72000);
	CreateDynamicObject(8674, 1279.15503, -2066.31396, 59.19490,   0.00000, 0.00000, -1.72000);
	CreateDynamicObject(8674, 1279.15503, -2066.31396, 62.11000,   0.00000, 0.00000, -1.72000);
	CreateDynamicObject(18766, 1236.36096, -2003.02002, 62.95400,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1215.57703, -2003.02502, 69.95400,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1212.92395, -2003.02600, 69.95800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1236.36096, -2070.52295, 62.95700,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1215.57703, -2070.52295, 69.95800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18766, 1212.91101, -2070.52393, 69.95400,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8674, 1210.44397, -1998.34204, 69.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1210.44397, -1998.34204, 72.30600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1205.27405, -1993.16895, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1205.27405, -1993.16895, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1194.92700, -1993.16895, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1184.56995, -1993.16895, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1174.22400, -1993.16895, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1163.90002, -1993.17297, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1153.53198, -1993.18896, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1143.17603, -1993.16895, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1132.82605, -1993.16895, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1122.47498, -1993.16895, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1112.11902, -1993.16895, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1109.54700, -1993.17004, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1103.68896, -2019.31604, 69.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.67505, -2008.94604, 69.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.67505, -1998.59802, 69.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1098.50000, -2024.48804, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1098.50000, -2024.48804, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1103.67505, -2019.30200, 72.30600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.67505, -2008.94604, 72.30600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.67505, -1998.59802, 72.30600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1109.56702, -1993.17004, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1112.11902, -1993.16895, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1122.47498, -1993.16895, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1143.17603, -1993.16895, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1153.53198, -1993.18896, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1163.90002, -1993.17297, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1174.22400, -1993.16895, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1184.56995, -1993.16895, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1194.92700, -1993.16895, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1104.14795, -1993.64697, 63.27400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1209.96106, -1993.65002, 63.27400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1224.98901, -2003.00598, 58.68400,   22.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1224.98901, -2070.52393, 58.68400,   22.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1210.44397, -2075.63794, 69.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1210.44397, -2075.63794, 72.30600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1205.27405, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1210.22095, -2080.33301, 63.27400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1194.92700, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1184.56995, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1174.22400, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1163.90002, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1153.53198, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1143.17603, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1122.47498, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1109.54700, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1112.11902, -2080.81812, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1109.56702, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1122.47498, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1112.11902, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1143.17603, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1153.53198, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1163.90002, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1174.22400, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1184.56995, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1194.92700, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1205.27405, -2080.81812, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1104.14795, -2080.32495, 63.27400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1103.68896, -2054.95508, 69.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.68896, -2065.30396, 69.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.68896, -2075.64990, 69.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.68896, -2075.64990, 72.30600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.68896, -2065.30396, 72.30600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1103.68896, -2054.95508, 72.30600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18980, 1093.36206, -2024.75305, 63.27400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1098.50000, -2049.78198, 69.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1098.50000, -2049.78198, 72.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1093.36206, -2049.49707, 63.27400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1137.67297, -2080.33203, 63.27400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1127.81604, -2080.32910, 63.27400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1264.19995, -2046.17200, 57.64290,   0.00000, 1.91900, -1.72000);
	CreateDynamicObject(19376, 1246.35706, -2040.91199, 53.62300,   1.72000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1246.36804, -2036.18506, 53.62300,   1.72000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1246.36804, -2031.45496, 53.62300,   1.72000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1246.36804, -2026.72498, 53.62300,   1.72000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1246.36804, -2021.99500, 53.62300,   1.72000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1246.36804, -2017.26501, 53.62300,   1.72000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1246.36804, -2012.53503, 53.62300,   1.72000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1276.12402, -2012.53503, 52.78100,   1.49000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1276.12402, -2017.26501, 52.78100,   1.49000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1276.12402, -2021.99500, 52.78100,   1.49000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1276.12402, -2026.72498, 52.78100,   1.14900, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1276.12402, -2031.45496, 52.78100,   1.09000, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1276.14404, -2036.18506, 52.81010,   0.84800, 0.00000, 88.27900);
	CreateDynamicObject(19376, 1276.12402, -2040.91504, 52.81010,   0.74900, 0.00000, 88.27900);
	CreateDynamicObject(5360, 1164.98999, -2077.15088, 71.42900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3437, 1144.04700, -2077.15088, 74.59200,   90.00000, 0.00000, 270.00000);
	CreateDynamicObject(3437, 1186.07300, -2077.15088, 74.59200,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3437, 1174.50903, -2077.15088, 74.59900,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3437, 1155.62097, -2077.15088, 74.59900,   90.00000, 0.00000, 270.00000);
	CreateDynamicObject(3437, 1170.82397, -2077.15088, 74.58800,   90.00000, 0.00000, 270.00000);
	CreateDynamicObject(3437, 1159.30701, -2077.15088, 74.58800,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 1144.35498, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1148.22498, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1152.09497, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1155.96497, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1159.83606, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1163.70605, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1167.57605, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1171.44604, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1175.31604, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1179.18604, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1183.05603, -2074.48706, 67.98500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16326, 1206.00000, -2021.00000, 68.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1093.55396, -2049.80811, 68.40300,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1088.56702, -2048.23511, 69.66100,   0.00000, 0.00000, 61.72000);
	CreateDynamicObject(19325, 1093.53406, -2024.47595, 68.40300,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1088.54700, -2026.04797, 69.66100,   0.00000, 0.00000, 118.23000);
	CreateDynamicObject(19325, 1084.42505, -2029.77600, 68.40300,   90.00000, 0.00000, 146.85001);
	CreateDynamicObject(19325, 1082.30701, -2034.62500, 69.66100,   0.00000, 0.00000, 162.27901);
	CreateDynamicObject(19325, 1082.28003, -2039.59399, 69.66100,   0.00000, 0.00000, 197.72900);
	CreateDynamicObject(19325, 1084.41101, -2044.48999, 68.40300,   90.00000, 0.00000, 212.85001);
	CreateDynamicObject(2179, 1171.17798, -2077.11206, 71.44100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1177.05396, -2077.11206, 67.14100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1158.76501, -2077.11206, 67.14100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1152.91504, -2077.11206, 67.14100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1140.50903, -2077.11206, 67.14100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1158.76501, -2077.11206, 71.44100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1152.91504, -2077.11206, 71.44100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1140.50903, -2077.11206, 71.44100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1189.46301, -2077.11206, 67.14100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1171.17798, -2077.11206, 67.14100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1177.05396, -2077.11206, 71.44100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1189.46301, -2077.11206, 71.44100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1537, 1204.76501, -2024.63904, 67.88500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1132.82605, -1993.16895, 69.42000,   0.00000, 0.00000, 0.00000);
	// Vallado Anti IHQ. LCN.
	CreateDynamicObject(987, 1524.93005, -2052.28174, 28.42150,   0.00000, 5.00000, 105.30630);
	CreateDynamicObject(987, 1519.71802, -1921.51672, 20.98130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1519.68079, -1933.40442, 20.98130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1519.68555, -1945.37805, 20.98130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1519.67444, -1957.36340, 20.98130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1519.57373, -1969.29883, 20.98130,   0.00000, 0.00000, 89.48990);
	CreateDynamicObject(987, 1519.47156, -1981.26453, 22.05550,   0.00000, 5.00000, 89.48990);
	CreateDynamicObject(987, 1519.38135, -1993.14368, 23.14290,   0.00000, 5.00000, 89.48990);
	CreateDynamicObject(987, 1519.28076, -2005.08667, 24.21960,   0.00000, 5.00000, 89.48990);
	CreateDynamicObject(987, 1519.53113, -2017.01514, 25.29140,   0.00000, 5.00000, 91.09960);
	CreateDynamicObject(987, 1520.27405, -2028.90137, 26.32850,   0.00000, 5.00000, 93.41410);
	CreateDynamicObject(987, 1521.68835, -2040.76892, 27.38120,   0.00000, 5.00000, 96.63810);
	CreateDynamicObject(987, 1518.34351, -2102.70117, 14.37650,   0.00000, 0.00000, 355.47070);
	CreateDynamicObject(987, 1530.22388, -2103.68799, 14.37650,   0.00000, 0.00000, 15.27474);
	// ((Mapeado LCN - Interior))
	CreateObject(10784, 1257.50000, -2023.09900, 2035.00000,   0.00000, 0.00000, 180.00000, 800); // Desbug Estacionamiento Interno.
	CreateDynamicObject(4877, 1120.96802, -1875.85095, 2024.41394,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5057, 1110.62500, -1849.99194, 2024.82800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4888, 1236.20300, -1876.15601, 2021.45300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4889, 1335.31995, -1882.31201, 2017.08496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4880, 1391.56995, -1891.58496, 2018.52295,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4887, 1478.71802, -1900.76501, 2022.39795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(618, 1146.13196, -1998.46802, 2067.55396,   356.85800, 0.00000, -1.07000);
	CreateDynamicObject(618, 1139.17896, -1997.76501, 2067.55396,   356.85800, 0.00000, -1.88900);
	CreateDynamicObject(618, 1165.60095, -1988.17102, 2064.54590,   356.85800, 0.00000, -2.25300);
	CreateDynamicObject(618, 1165.13196, -1994.11694, 2066.80396,   356.85800, 0.00000, -1.88900);
	CreateDynamicObject(618, 1190.19495, -1995.45300, 2066.80396,   356.85800, 0.00000, -0.55900);
	CreateDynamicObject(661, 1190.81201, -1987.73401, 2064.63208,   356.85800, 0.00000, -2.80800);
	CreateDynamicObject(691, 1208.64795, -2000.06995, 2067.38989,   356.85800, 0.00000, -0.64900);
	CreateDynamicObject(661, 1274.11304, -1999.67297, 2057.04590,   356.85800, 0.00000, 3.14100);
	CreateDynamicObject(661, 1280.44495, -1992.74194, 2054.71802,   356.85800, 0.00000, -2.22600);
	CreateDynamicObject(691, 1291.04602, -2007.06995, 2054.88208,   3.14100, 0.00000, 2.77000);
	CreateDynamicObject(661, 1284.98401, -2020.25000, 2057.15601,   356.85800, 0.00000, 3.14100);
	CreateDynamicObject(691, 1290.87500, -2042.60901, 2055.78906,   356.85800, 0.00000, -0.78200);
	CreateDynamicObject(691, 1148.07800, -2088.72607, 2067.89795,   3.14100, 0.00000, 2.30200);
	CreateDynamicObject(691, 1174.14795, -2117.53101, 2065.01489,   356.85800, 0.00000, -2.53000);
	CreateDynamicObject(691, 1187.02295, -2114.74194, 2063.74194,   356.85800, 0.00000, -1.30900);
	CreateDynamicObject(691, 1202.36694, -2112.28906, 2061.61694,   356.85800, 0.00000, -2.25300);
	CreateDynamicObject(713, 1233.36694, -2095.78906, 2058.41504,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(691, 1258.17102, -2081.92896, 2055.78906,   356.85800, 0.00000, -0.78200);
	CreateDynamicObject(691, 1248.20300, -2089.95288, 2056.25000,   356.85800, 0.00000, -2.25300);
	CreateDynamicObject(707, 1202.86719, -2153.54810, 2058.61792,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(713, 1151.36694, -2159.05396, 2064.82007,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(708, 1133.38196, -2104.45996, 2069.37500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(708, 1130.57800, -2139.54590, 2069.37500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4825, 1145.95300, -2037.00000, 2065.49487,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4851, 1182.00696, -1987.63196, 2039.99194,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4810, 1095.06201, -2214.21802, 2041.70374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4875, 1268.09900, -2196.10010, 2042.59534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4852, 1398.59900, -1994.50000, 2035.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4823, 1338.30005, -1976.69897, 2036.61243,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4824, 1224.42896, -2037.00696, 2062.92896,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1208.91394, -2012.85095, 2075.75708,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1208.91394, -2025.92896, 2075.75708,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1208.42896, -2045.24194, 2075.75708,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1208.70996, -2059.32007, 2075.75708,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1211.23401, -2019.67896, 2068.35107,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4986, 1179.14001, -2036.99194, 2065.82593,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1142.19495, -2034.04602, 2068.37500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 1159.43701, -2039.80396, 2068.37500,   356.85800, 0.00000, -90.00000);
	CreateDynamicObject(3475, 1140.30005, -2080.30005, 2069.10010,   0.96700, 0.00000, 90.19200);
	CreateDynamicObject(9131, 1136.80005, -2080.50000, 2069.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1136.80005, -2080.50000, 2071.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1128.80005, -2080.50000, 2069.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1128.79895, -2080.50000, 2071.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3475, 1124.80005, -2080.50000, 2069.10010,   0.96700, 0.00000, 90.19200);
	CreateDynamicObject(9131, 1128.09900, -2080.50000, 2069.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1128.09900, -2080.50000, 2071.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, 1132.59900, -2080.80005, 2068.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1128.59900, -2080.50000, 2070.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1210.09900, -2040.79895, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1210.09900, -2033.19897, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1210.19897, -2007.80005, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1180.19897, -2007.90002, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1169.59900, -2007.80005, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1169.50000, -2066.10010, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1180.39905, -2066.19897, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1137.69897, -2033.09900, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1137.69897, -2040.90002, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3920, 1123.09900, -2062.69897, 2073.89893,   0.00000, 0.00000, 270.25000);
	CreateDynamicObject(3920, 1123.19897, -2053.30005, 2073.89893,   0.00000, 0.00000, 269.74701);
	CreateDynamicObject(3920, 1123.09900, -2020.80005, 2073.89893,   0.00000, 0.00000, 269.99200);
	CreateDynamicObject(3920, 1123.09900, -2011.19897, 2073.89893,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(1223, 1122.09900, -2040.69897, 2071.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1170.09900, -2046.50000, 2070.19897,   0.00000, 0.00000, 13.49100);
	CreateDynamicObject(1232, 1180.00000, -2046.59900, 2070.30005,   0.00000, 0.00000, 13.48600);
	CreateDynamicObject(1232, 1179.90002, -2027.40002, 2070.00000,   0.00000, 0.00000, 13.48600);
	CreateDynamicObject(1232, 1169.90002, -2027.40002, 2070.10010,   0.00000, 0.00000, 13.48600);
	CreateDynamicObject(1232, 1136.79895, -2080.59912, 2070.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9915, 1165.00000, -2036.19897, 2065.39941,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11490, 1113.19995, -2037.00000, 2080.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6522, 1090.69995, -2036.69995, 2095.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10946, 1107.09900, -2035.79895, 2080.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3997, 1041.59900, -2047.79895, 2084.50000,   0.00000, 179.99400, 0.00000);
	CreateDynamicObject(10946, 1092.59900, -2051.89893, 2100.69897,   0.00000, 270.00000, 270.00000);
	CreateDynamicObject(10946, 1092.50000, -2022.00000, 2101.80005,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(1649, 1116.40002, -2022.50000, 2094.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1116.40002, -2026.90002, 2094.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1116.40002, -2031.30005, 2094.00000,   0.05000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1116.43506, -2042.59900, 2094.00000,   0.04300, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1116.42004, -2047.00000, 2094.00000,   0.04800, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1116.41895, -2051.39893, 2094.00000,   0.04300, 0.00000, 270.00000);
	CreateDynamicObject(3440, 1116.50000, -2033.69897, 2093.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1116.50000, -2040.19897, 2093.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4199, 1110.19897, -2037.00000, 2089.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5507, 1116.59900, -2023.79895, 2117.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(5507, 1116.59900, -2050.00000, 2117.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(7191, 1116.59399, -2035.79895, 2112.00000,   90.00000, 270.00000, 270.00000);
	CreateDynamicObject(7191, 1116.59900, -2038.04895, 2112.00000,   90.00000, 270.00000, 270.00000);
	CreateDynamicObject(7191, 1120.29895, -2037.00000, 2065.00000,   90.00000, 270.00000, 270.00000);
	CreateDynamicObject(1649, 1120.19897, -2040.30005, 2083.00000,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(1649, 1120.19897, -2033.90002, 2083.19897,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(1419, 1120.69897, -2039.59900, 2082.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1419, 1120.69897, -2033.80005, 2082.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1120.23901, -2038.52002, 2081.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1120.19897, -2035.50000, 2081.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1557, 1108.90002, -2038.40002, 2081.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1108.90002, -2035.40002, 2081.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1557, 1105.50000, -2038.50000, 2091.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1105.50000, -2035.50000, 2091.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1537, 1116.40002, -2037.80005, 2091.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2367, 1105.80005, -2052.00000, 2091.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2367, 1105.80005, -2049.89893, 2091.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2367, 1105.80005, -2047.80005, 2091.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2395, 1113.19897, -2050.80005, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2048.10010, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2045.40002, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2042.69897, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2040.00000, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19995, -2037.29895, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2034.59900, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2031.90002, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2029.19897, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2026.50000, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2023.80005, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2021.09900, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1113.19897, -2018.40002, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1109.50000, -2050.80005, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1109.50000, -2048.10010, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1109.50000, -2045.40002, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1105.80005, -2050.80005, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1105.80005, -2048.10010, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1105.80005, -2045.40002, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1109.50000, -2026.50000, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1105.80005, -2026.50000, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1109.50000, -2023.80005, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1105.80005, -2023.80005, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1109.50000, -2021.09900, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1109.50000, -2018.40002, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1105.80005, -2021.09900, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1105.80005, -2018.40002, 2095.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1517, 1105.69897, -2050.19897, 2092.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1509, 1105.69897, -2050.39893, 2092.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1455, 1105.69897, -2048.80005, 2092.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1105.69995, -2048.59912, 2092.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1105.69897, -2052.30005, 2092.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1105.69897, -2052.19897, 2092.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1105.69897, -2052.10010, 2092.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1106.09900, -2051.30005, 2092.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2601, 1105.59900, -2051.50000, 2092.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1548, 1105.50000, -2047.80005, 2092.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1105.69897, -2047.59900, 2092.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1105.80005, -2046.40002, 2092.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1716, 1106.90002, -2050.60010, 2091.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1716, 1106.90002, -2048.39893, 2091.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1109.50000, -2035.09900, 2082.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1109.50000, -2038.69897, 2082.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1106.19897, -2035.09900, 2092.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1106.09900, -2038.79895, 2092.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1107.59900, -2021.00000, 2091.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 1106.09900, -2022.69897, 2091.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1110.80005, -2021.00000, 2091.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 1106.09900, -2024.09900, 2091.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(643, 1113.30005, -2050.30005, 2092.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(643, 1109.80005, -2045.90002, 2092.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1114.30005, -2044.59900, 2092.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1114.30005, -2041.59900, 2092.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2800, 1106.00000, -2024.80005, 2091.35889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2311, 1107.90002, -2022.90002, 2091.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2311, 1111.00000, -2022.90002, 2091.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1121.40002, -2039.50000, 2083.60010,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(626, 1121.40002, -2040.90002, 2083.60010,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(626, 1121.69897, -2034.09900, 2083.60010,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(626, 1121.69897, -2032.90002, 2083.60010,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1642, 1119.40002, -2037.00000, 2081.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2572, 1116.59900, -2033.50000, 2081.50000,   0.00000, 0.00000, 330.00000);
	CreateDynamicObject(2617, 1119.00000, -2040.09900, 2082.10010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2283, 1119.00000, -2032.50000, 2083.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2282, 1110.09900, -2033.00000, 2082.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2276, 1117.50000, -2041.00000, 2083.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2270, 1106.00000, -2050.89893, 2093.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2270, 1106.00000, -2048.80005, 2093.19897,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2239, 1114.80005, -2032.80005, 2081.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2239, 1106.30005, -2020.90002, 2091.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2106, 1117.50000, -2040.90002, 2082.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2075, 1112.09900, -2035.00000, 2095.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2075, 1112.00000, -2039.09900, 2095.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 1120.00000, -2037.80005, 2084.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 1120.00000, -2036.30005, 2084.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 1109.40002, -2050.69897, 2095.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 1108.50000, -2022.90002, 2095.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2529, 1106.00000, -2033.40002, 2091.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1105.59900, -2027.50000, 2093.19897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1615, 1116.50000, -2038.90002, 2094.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1122.40002, -2037.00000, 2074.89893,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(1807, 1106.09900, -2043.90002, 2092.10010,   0.00000, 0.00000, 28.00000);
	CreateDynamicObject(2251, 1105.90002, -2053.10010, 2092.39893,   0.00000, 0.00000, 142.00000);
	CreateDynamicObject(2253, 1108.59900, -2022.90002, 2092.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 1111.69897, -2022.90002, 2092.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(632, 1115.69897, -2021.30005, 2092.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5507, 1121.09900, -2037.09900, 2055.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(11665, 1107.09900, -2041.19897, 2092.19897,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14758, 1105.40002, -2041.29895, 2075.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1105.46899, -2042.05005, 2073.63501,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1105.46399, -2039.02002, 2073.63501,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1557, 1089.00000, -2042.00000, 2078.14893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1089.00000, -2039.00000, 2078.14893,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2332, 1088.19897, -2034.00000, 2078.60010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1087.19897, -2034.00000, 2078.60010,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(2332, 1086.19897, -2034.00000, 2078.60010,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1829, 1085.11902, -2033.67004, 2078.60010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2971, 1094.40002, -2033.19897, 2078.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2971, 1096.59900, -2033.19897, 2078.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1087.00000, -2027.40002, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1088.40002, -2027.40002, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1084.59900, -2027.40002, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1084.00000, -2030.69897, 2073.60010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1091.19897, -2028.59900, 2073.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2297, 1087.00000, -2034.00000, 2073.60010,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2230, 1087.40002, -2034.40002, 2073.60010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2230, 1084.50000, -2034.30005, 2073.60010,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(2637, 1100.40002, -2030.40002, 2074.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1098.34900, -2030.40002, 2074.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 1100.50000, -2029.00000, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 1098.30005, -2029.00000, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 1099.40002, -2029.00000, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 1099.40002, -2031.80005, 2073.60010,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1720, 1100.50000, -2031.80005, 2073.60010,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1720, 1098.30005, -2031.80005, 2073.60010,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1739, 1102.51196, -2030.40002, 2074.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1739, 1096.32800, -2030.40002, 2074.50000,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1502, 1088.95898, -2031.16003, 2078.12012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1093.11902, -2031.15503, 2078.12012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1616, 1088.50000, -2034.00000, 2081.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1661, 1091.00000, -2030.40002, 2081.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1094.50000, -2026.40002, 2076.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 1094.59900, -2042.69897, 2073.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1091.90002, -2026.90002, 2078.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2136, 1089.00000, -2038.90002, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2136, 1091.00000, -2038.90002, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2135, 1091.00000, -2039.59900, 2073.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2135, 1088.00000, -2038.90002, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2100, 1094.30005, -2026.40002, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1208, 1090.80005, -2042.30005, 2073.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1101.50000, -2040.59900, 2073.61206,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2225, 1090.59900, -2026.40002, 2078.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2514, 1083.90002, -2041.80005, 2073.60010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1083.90002, -2041.00000, 2073.60010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2628, 1098.40002, -2033.30005, 2078.10010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2630, 1099.59900, -2033.40002, 2078.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2627, 1100.80005, -2033.30005, 2078.10010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2813, 1098.90002, -2030.30005, 2074.39893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 1111.09900, -2022.90002, 2092.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2829, 1088.80005, -2038.90002, 2074.62891,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14867, 1094.40002, -2035.00000, 2075.14893,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(630, 1089.59900, -2042.30005, 2079.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1089.59900, -2038.69897, 2079.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1105.00000, -2038.80005, 2074.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1105.00000, -2042.19897, 2074.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2851, 1091.00000, -2038.80005, 2074.65503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1083.90002, -2034.19897, 2078.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1083.90002, -2033.59900, 2078.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1636, 1097.90002, -2032.69897, 2078.30005,   0.00000, 6.00000, 0.00000);
	CreateDynamicObject(2037, 1094.69897, -2026.59900, 2078.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2036, 1094.19897, -2026.50000, 2078.19897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2057, 1093.59900, -2027.00000, 2078.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2064, 1099.00000, -2027.40002, 2078.80005,   0.00000, 0.00000, 325.00000);
	CreateDynamicObject(2690, 1094.40002, -2026.40002, 2079.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1087.00000, -2026.90002, 2078.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1087.69897, -2028.32703, 2078.69897,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1487, 1086.59900, -2026.90002, 2079.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, 1084.19897, -2026.59900, 2078.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1085.80005, -2026.90002, 2078.12012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10575, 1286.25000, -1989.84900, 2033.34900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4199, 1292.00000, -1989.90002, 2033.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4199, 1292.00000, -1989.90002, 2037.69897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4199, 1244.00000, -2074.10010, 2033.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(10575, 1240.75000, -2068.35010, 2033.34900,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8843, 1274.00000, -1990.00000, 2031.43896,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8843, 1240.90002, -2055.00000, 2031.44897,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(708, 1123.59900, -2085.69897, 2067.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10575, 1105.40002, -2027.94897, 70.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(10575, 1105.27600, -2046.36499, 70.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8843, 1106.19897, -2014.00000, 68.05000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8843, 1106.50000, -2060.00000, 68.05000,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(16326, 1206.00000, -2021.00000, 2068.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5360, 1164.98999, -2077.15088, 2071.42896,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1157.20972, -1923.02039, 2035.98059,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(709, 1105.55823, -1927.86707, 2024.50684,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4199, 1244.00000, -2074.10010, 2037.69897,   0.00000, 0.00000, 270.00000);

	// RESTAURANTE LCN - Propiedad de la facción.
	// Bar atrás del Ayuntamiento + Portón.

	CreateDynamicObject(2395, 1380.30005, -1892.30005, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1384.00000, -1884.90002, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1387.69922, -1884.89941, 16.58097,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1391.39941, -1884.89941, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1395.09998, -1884.90002, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1380.30005, -1889.59998, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1380.30005, -1884.90002, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1384.00000, -1892.29980, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1387.69922, -1892.29980, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1391.39941, -1892.29980, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1395.09961, -1892.29980, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1380.29980, -1886.89941, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1384.00000, -1889.59961, 16.59200,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1387.69922, -1889.59961, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1391.39941, -1889.59961, 16.59200,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1395.09961, -1889.59961, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1380.29980, -1884.89941, 16.60330,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1384.00000, -1886.89941, 16.59200,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1387.69922, -1886.89941, 16.59200,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1391.39941, -1886.89941, 16.59200,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1395.09961, -1886.89941, 16.60000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(10244, 1388.50000, -1894.40002, 13.11366,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1380.29980, -1892.89941, 16.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1380.29980, -1882.29980, 17.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1390.89941, -1892.89941, 16.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1397.30005, -1892.90002, 16.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1388.79980, -1882.29980, 16.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1397.29980, -1882.29980, 16.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1384.00000, -1882.00000, 13.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 1387.69995, -1882.00000, 13.80000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, 1387.69995, -1882.00000, 11.10000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, 1384.00000, -1882.00000, 11.10000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, 1392.59998, -1882.00000, 13.80000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, 1392.59998, -1882.00000, 11.10000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, 1396.30005, -1882.00000, 13.80000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, 1396.30005, -1882.00000, 11.10000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(3499, 1385.79980, -1882.29980, 17.10000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3499, 1391.90002, -1882.30005, 17.10000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3851, 1397.09998, -1882.19995, 19.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3499, 1392.50000, -1882.30005, 22.10000,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(3499, 1380.09961, -1887.50000, 22.10000,   0.00000, 270.00000, 90.00000);
	CreateDynamicObject(3851, 1385.79980, -1882.19922, 19.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3499, 1385.19922, -1882.29980, 22.10000,   0.00000, 269.98901, 0.00000);
	CreateDynamicObject(3851, 1382.59961, -1887.50000, 22.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3499, 1385.50000, -1892.79980, 22.10000,   0.00000, 269.98901, 0.00000);
	CreateDynamicObject(3499, 1396.39941, -1892.79980, 22.10000,   0.00000, 269.98901, 0.00000);
	CreateDynamicObject(3499, 1385.69922, -1892.59961, 17.06705,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3851, 1400.69995, -1892.80005, 19.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3499, 1395.00000, -1892.89941, 16.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1385.00000, -1887.50000, 22.10000,   0.00000, 270.00000, 90.00000);
	CreateDynamicObject(3499, 1388.69922, -1887.50000, 22.11976,   0.00000, 270.00000, 90.00000);
	CreateDynamicObject(3499, 1392.19922, -1887.50000, 22.10000,   0.00000, 270.00000, 90.00000);
	CreateDynamicObject(3499, 1396.00000, -1887.50000, 22.10000,   0.00000, 270.00000, 90.00000);
	CreateDynamicObject(3851, 1385.29980, -1892.79980, 19.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1387.19995, -1887.50000, 22.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3851, 1390.40002, -1887.50000, 22.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3851, 1394.19922, -1887.50000, 22.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3851, 1398.40002, -1887.69995, 22.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3499, 1400.40002, -1892.59998, 17.10000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2395, 1379.69995, -1883.00000, 13.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1379.69995, -1886.69995, 13.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1379.69995, -1889.80005, 13.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1379.69995, -1889.80005, 11.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1379.69995, -1886.09998, 11.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1379.69995, -1883.00000, 11.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1381.19995, -1893.09998, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1384.90002, -1893.09998, 11.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1388.59998, -1893.09998, 11.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1392.30005, -1893.09998, 11.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1396.00000, -1893.09998, 11.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1381.19995, -1893.09998, 11.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1384.89941, -1893.09961, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1388.59961, -1893.09961, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1392.29980, -1893.09961, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1396.00000, -1893.09961, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1385.29980, -1893.09961, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1374.59998, -1883.00000, 12.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3499, 1363.69922, -1883.00000, 12.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2395, 1394.30005, -1892.59998, 18.90000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, 1391.29980, -1893.09961, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18090, 1396.29980, -1887.79980, 19.09100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1397.69995, -1883.09998, 16.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1397.69995, -1883.09998, 19.40000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1397.69995, -1883.09998, 14.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1397.69995, -1886.80005, 14.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1397.69995, -1886.80005, 16.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1397.69995, -1886.80005, 19.40000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1397.69995, -1889.69995, 19.40000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1397.69995, -1889.69995, 16.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, 1397.69995, -1889.69995, 14.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1545, 1397.19995, -1886.00000, 18.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1545, 1397.19995, -1889.69995, 18.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1664, 1397.50000, -1886.69995, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1886.90002, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1887.09998, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1887.30005, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1887.50000, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1887.69995, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1887.90002, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1888.09998, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1888.30005, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1888.50000, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1888.69995, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1397.50000, -1889.00000, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1397.59998, -1887.00000, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1397.59998, -1887.50000, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1397.59998, -1887.90002, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1397.59998, -1888.19995, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1397.59998, -1889.00000, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1397.69995, -1888.80005, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1397.50000, -1888.80005, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1397.59998, -1885.50000, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1397.59998, -1885.00000, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1397.50000, -1885.19995, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1397.40002, -1886.90002, 17.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1397.50000, -1887.19995, 17.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1374.80005, -1882.30005, 20.90000,   0.00000, 76.00000, 0.00000);
	CreateDynamicObject(3499, 1364.40002, -1882.30005, 18.30000,   0.00000, 76.00000, 0.00000);
	CreateDynamicObject(3499, 1374.79980, -1892.59961, 20.90000,   0.00000, 76.00000, 0.00000);
	CreateDynamicObject(3499, 1364.40002, -1892.59998, 18.30000,   0.00000, 76.00000, 0.00000);
	CreateDynamicObject(3851, 1380.00000, -1887.59998, 19.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1380.09998, -1887.59998, 17.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1704, 1386.40002, -1884.50000, 16.60000,   0.00000, 0.00000, 56.00000);
	CreateDynamicObject(1704, 1389.19995, -1883.90002, 16.48563,   0.00000, 0.00000, 329.99731);
	CreateDynamicObject(1704, 1388.90002, -1886.90002, 16.60000,   0.00000, 0.00000, 181.74631);
	CreateDynamicObject(1704, 1382.29443, -1889.41321, 16.56913,   0.00000, 0.00000, 75.66100);
	CreateDynamicObject(1703, 1384.27454, -1887.30579, 16.60000,   0.00000, 0.00000, 334.13779);
	CreateDynamicObject(2635, 1388.30005, -1885.09998, 16.70000,   0.00000, 0.00000, 34.00000);
	CreateDynamicObject(1487, 1388.30005, -1885.09998, 17.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1388.30005, -1885.00000, 17.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1388.50000, -1885.40002, 17.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1388.59998, -1885.00000, 17.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1388.09998, -1884.90002, 17.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1388.19995, -1885.40002, 17.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1388.00000, -1885.09998, 17.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1388.19995, -1885.09998, 17.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1388.69995, -1885.09998, 17.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1388.50000, -1885.19995, 17.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1388.40002, -1884.80005, 17.20000,   0.00000, 0.00000, 78.00000);
	CreateDynamicObject(1491, 1391.50000, -1892.90002, 16.40000,   0.00000, 0.00000, 359.25000);
	CreateDynamicObject(1491, 1394.50000, -1892.90002, 16.40000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2778, 1381.09998, -1883.80005, 16.60000,   0.00000, 0.00000, 38.25000);
	CreateDynamicObject(2778, 1382.09998, -1883.40002, 16.60000,   0.00000, 0.00000, 358.24890);
	CreateDynamicObject(2779, 1383.09998, -1883.40002, 16.60000,   0.00000, 0.00000, 9.50000);
	CreateDynamicObject(2681, 1384.19995, -1883.40002, 16.60000,   0.00000, 0.00000, 356.00000);
	CreateDynamicObject(1485, 1388.30005, -1884.90002, 17.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1209, 1397.50000, -1891.40002, 16.50000,   0.00000, 0.00000, 268.50000);
	CreateDynamicObject(2690, 1388.80005, -1883.00000, 18.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2075, 1392.19995, -1887.50000, 21.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2075, 1388.69995, -1887.50000, 21.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2075, 1385.00000, -1887.50000, 21.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1383.90002, -1896.50000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1383.89941, -1893.59961, 12.80000,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1215, 1390.89941, -1896.50000, 18.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1394.90002, -1896.50000, 18.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 1388.80005, -1883.09998, 21.00000,   20.00000, 0.00000, 0.25000);
	CreateDynamicObject(2232, 1380.69995, -1882.80005, 21.00000,   19.99512, 0.00000, 46.24719);
	CreateDynamicObject(2232, 1380.69995, -1892.40002, 21.00000,   19.98962, 0.00000, 132.24695);
	CreateDynamicObject(2232, 1390.80005, -1892.30005, 21.00000,   19.98413, 0.00000, 195.99242);
	CreateDynamicObject(2104, 1389.90002, -1892.00000, 16.60000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1390.30005, -1891.80005, 16.60000,   0.00000, 0.00000, 148.00000);
	CreateDynamicObject(2229, 1389.30005, -1892.09998, 16.60000,   0.00000, 0.00000, 207.24683);
	CreateDynamicObject(3499, 1366.19995, -1882.30005, 13.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1366.19995, -1892.59998, 13.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1366.30005, -1887.50000, 18.49796,   0.00000, 270.00000, 90.00000);
	CreateDynamicObject(1215, 1381.00000, -1881.90002, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1381.00000, -1881.89941, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1388.00000, -1881.90002, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1388.00000, -1881.89941, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1389.59998, -1881.80005, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1389.59961, -1881.79980, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1396.59998, -1881.90002, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1396.59961, -1881.89941, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 1382.82471, -1891.21008, 16.56913,   0.00000, 0.00000, 131.74133);
	CreateDynamicObject(1704, 1385.13892, -1891.10962, 16.60000,   0.00000, 0.00000, 187.48462);
	CreateDynamicObject(1703, 1388.55249, -1891.25513, 16.60000,   0.00000, 0.00000, 180.00000);
	// Portón del bar LCN.
	CreateDynamicObject(980, 1362.48254, -1883.02039, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1363.90063, -1882.29651, 17.10000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3499, 1374.79358, -1882.29651, 17.10000,   0.00000, 90.00000, 0.00000);

	// INTERIOR YKZ (Mafia japonesa - Yakuzza):
	CreateDynamicObject(14390, 1249.41003, -775.22998, 5083.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14597, 1233.17004, -751.84003, 5081.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1246.35999, -755.39001, 5082.06982,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(5056, 1246.25000, -751.17999, 5079.64990,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1557, 1275.37000, -760.01001, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1278.39001, -760.02002, 5079.75000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14399, 1257.83997, -756.53998, 5079.72021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2051, 1239.18005, -738.26001, 5082.22021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2051, 1241.71997, -738.28003, 5082.22021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2050, 1240.46997, -738.27002, 5082.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18051, 1243.83997, -739.90997, 5081.25000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14397, 1252.43994, -743.41998, 5081.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 1238.19995, -747.90997, 5080.18994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2041, 1239.43994, -748.19000, 5080.85010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2041, 1239.21997, -748.19000, 5080.85010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(348, 1238.58997, -747.53998, 5080.66016,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(348, 1238.96997, -747.50000, 5080.66016,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(352, 1237.43994, -748.13000, 5080.66992,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2509, 1243.02002, -765.45001, 5081.58984,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(2509, 1241.14001, -765.44000, 5081.58984,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(2509, 1239.28003, -765.44000, 5081.58984,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(352, 1238.58997, -765.41998, 5081.91992,   0.00000, 5.00000, 1.00000);
	CreateDynamicObject(352, 1238.58997, -765.41998, 5081.43994,   0.00000, 5.00000, 1.00000);
	CreateDynamicObject(356, 1239.29004, -765.45001, 5081.83984,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(356, 1239.29004, -765.45001, 5081.37988,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(355, 1240.87000, -765.44000, 5081.91016,   0.00000, 5.00000, 5.00000);
	CreateDynamicObject(355, 1240.87000, -765.44000, 5081.45020,   0.00000, 5.00000, 5.00000);
	CreateDynamicObject(351, 1242.02002, -765.41998, 5081.89014,   0.00000, 10.00000, 3.00000);
	CreateDynamicObject(351, 1242.02002, -765.41998, 5081.41992,   0.00000, 10.00000, 3.00000);
	CreateDynamicObject(358, 1243.56006, -765.38000, 5081.29980,   -5.00000, -40.00000, 180.00000);
	CreateDynamicObject(3015, 1243.93005, -765.21002, 5079.83008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, 1243.46997, -765.21997, 5079.83008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 1243.81006, -762.82001, 5080.16016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(941, 1243.80005, -760.35999, 5080.16016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(363, 1243.85999, -758.95001, 5080.68994,   270.00000, 0.00000, 270.00000);
	CreateDynamicObject(363, 1243.87000, -759.22998, 5080.68994,   270.00000, 0.00000, 270.00000);
	CreateDynamicObject(363, 1243.89001, -759.53998, 5080.68994,   270.00000, 0.00000, 270.00000);
	CreateDynamicObject(363, 1243.89001, -759.84998, 5080.68994,   270.00000, 0.00000, 270.00000);
	CreateDynamicObject(364, 1243.28003, -759.34998, 5080.62012,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(342, 1244.01001, -760.71997, 5080.62988,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, 1243.82996, -760.71997, 5080.62988,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, 1243.68994, -760.72998, 5080.62988,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, 1243.55005, -760.73999, 5080.62988,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(347, 1243.43005, -761.88000, 5080.70020,   270.00000, 0.00000, 270.00000);
	CreateDynamicObject(347, 1243.42004, -762.59998, 5080.70020,   270.00000, 0.00000, 270.00000);
	CreateDynamicObject(2043, 1244.12000, -761.88000, 5080.72998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1244.10999, -762.62000, 5080.72998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2358, 1237.18005, -760.90002, 5079.87012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 1237.16003, -760.21997, 5079.87012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 1237.17004, -759.56000, 5079.87012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 1237.18005, -758.90002, 5079.87012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 1237.15002, -759.58002, 5080.04980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 1237.15002, -760.29999, 5080.04980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(942, 1232.92004, -764.59998, 5081.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3800, 1236.08997, -761.58002, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3800, 1236.15002, -760.42999, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3800, 1236.15002, -759.28003, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3800, 1236.18994, -759.65997, 5080.75977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3800, 1236.13000, -760.89001, 5080.75977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3793, 1229.77002, -760.39001, 5080.77002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3788, 1229.98999, -760.35999, 5080.24023,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(359, 1229.98999, -760.15002, 5080.22021,   270.00000, 0.00000, 90.00000);
	CreateDynamicObject(359, 1230.29004, -760.15997, 5080.22021,   270.00000, 0.00000, 90.00000);
	CreateDynamicObject(2207, 1231.97998, -742.15002, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1233.03003, -739.87000, 5079.72021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1232.14001, -743.12000, 5080.16992,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(1663, 1231.20996, -742.56000, 5080.16992,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(1663, 1233.38000, -743.17999, 5080.16992,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(1663, 1234.41003, -742.64001, 5080.16992,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(18044, 1226.94995, -762.62000, 5081.43994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18052, 1244.05005, -761.95001, 5082.20996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11353, 1233.07996, -737.75000, 5079.75000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1736, 1233.00000, -738.63000, 5082.97021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1234.31995, -737.90002, 5079.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1232.56006, -737.90997, 5079.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1230.80005, -737.90002, 5079.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1233.18005, -742.42999, 5080.54980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1232.06006, -742.17999, 5080.54980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1232.33997, -741.40997, 5080.54980,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(2894, 1233.51001, -741.72998, 5080.52002,   0.00000, 0.00000, 207.00000);
	CreateDynamicObject(14455, 1236.64001, -743.26001, 5081.37012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1236.65002, -747.57001, 5081.37012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1229.35999, -739.01001, 5081.41016,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14455, 1229.35999, -743.34003, 5081.41016,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2737, 1223.06006, -748.97998, 5082.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2737, 1222.65002, -754.67999, 5082.14990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2737, 1226.06006, -754.66998, 5082.14990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7294, 1226.07996, -749.01001, 5076.87988,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7294, 1220.07996, -751.90997, 5076.60010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2953, 1233.43005, -741.35999, 5080.54004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1269.48999, -754.54999, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1271.46997, -754.57001, 5079.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1265.93994, -757.02002, 5079.87988,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1266.67004, -754.60999, 5079.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1651, 1270.53003, -757.70001, 5082.56006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2229, 1271.94995, -758.15997, 5080.95996,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(2229, 1269.05005, -758.13000, 5081.58008,   0.00000, 270.00000, 180.00000);
	CreateDynamicObject(2233, 1265.93005, -758.22998, 5079.89990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2233, 1266.68005, -753.85999, 5079.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2233, 1269.53003, -753.78998, 5079.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2233, 1271.39001, -753.78998, 5079.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2233, 1274.44995, -753.90002, 5079.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(335, 1243.37000, -763.38000, 5080.62012,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(335, 1243.56006, -763.38000, 5080.62012,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(335, 1243.72998, -763.38000, 5080.62012,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(335, 1243.94995, -763.39001, 5080.62012,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1263.06006, -749.78003, 5079.72998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1263.07996, -755.89001, 5079.72998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1273.09998, -757.39001, 5079.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1246.76001, -749.64001, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1246.67004, -753.53003, 5079.68994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 1257.67004, -754.83002, 5081.39014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 1258.00000, -758.88000, 5081.39014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 1252.35999, -754.62000, 5081.39014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 1267.85999, -748.62000, 5082.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3806, 1262.76001, -753.09003, 5083.83984,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1249.39001, -759.21002, 5082.37012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1248.43005, -759.25000, 5082.37012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1247.08997, -759.28003, 5082.37012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1246.50000, -758.10999, 5082.37012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1246.50000, -758.10999, 5081.77979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1247.71997, -759.29999, 5081.77979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1249.19995, -759.27002, 5081.77979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1249.19995, -759.27002, 5081.18018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1248.32996, -759.27002, 5081.18018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1247.04004, -759.32001, 5081.18018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1246.54004, -757.67999, 5081.18018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1248.93994, -759.27002, 5082.24023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1247.92004, -759.23999, 5082.24023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1246.54004, -758.35999, 5082.24023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1246.54004, -758.35999, 5081.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1248.01001, -759.28003, 5081.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1248.01001, -759.28003, 5081.12012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1246.57996, -758.47998, 5081.06006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1248.66003, -759.22998, 5082.41016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1247.43994, -759.27002, 5082.41016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1246.47998, -757.92999, 5082.41016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1246.47998, -757.92999, 5081.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1246.47998, -757.92999, 5081.20020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1247.50000, -759.34998, 5081.20020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1247.29004, -759.32001, 5081.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1246.82996, -759.22998, 5081.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1250.68005, -754.33002, 5081.10986,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1665, 1251.70996, -754.34998, 5081.10986,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1665, 1253.46997, -754.34003, 5081.10986,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1665, 1254.48999, -754.26001, 5081.10986,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1665, 1255.59998, -754.29999, 5081.10986,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1665, 1256.72998, -754.28003, 5081.10986,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1541, 1247.90002, -755.22998, 5081.29004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1541, 1248.80005, -755.22998, 5081.29004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1548, 1248.31006, -754.75000, 5081.08984,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1547, 1249.64001, -754.71997, 5081.08984,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2125, 1256.22998, -753.59003, 5080.06006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 1254.90002, -753.63000, 5080.06006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 1253.67004, -753.62000, 5080.06006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 1251.27002, -753.63000, 5080.06006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 1250.37000, -753.54999, 5080.06006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2271, 1251.02002, -749.09003, 5082.93018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2270, 1254.56006, -749.09003, 5082.93994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1246.53003, -758.91998, 5082.20996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1246.52002, -757.54999, 5081.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1248.93005, -759.31000, 5081.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1248.71997, -759.28998, 5081.60010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1248.71997, -759.28998, 5081.02979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1249.02002, -759.28003, 5081.02979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1246.56006, -758.95001, 5081.02979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3806, 1261.98999, -753.12000, 5083.83984,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2051, 1243.19995, -738.25000, 5082.22021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2050, 1238.27002, -738.28003, 5082.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 1223.32996, -751.85999, 5079.75977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 1226.13000, -751.96002, 5080.62012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(367, 1225.75000, -751.96002, 5080.62012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(367, 1225.35999, -751.96002, 5080.62012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(369, 1224.43005, -751.84998, 5080.62012,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(369, 1224.22998, -751.84998, 5080.62012,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(369, 1224.01001, -751.83002, 5080.62012,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 1223.42004, -751.96002, 5080.62012,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18766, 1279.89001, -760.48999, 5081.79004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2847, 1276.39001, -759.67999, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3462, 1278.68005, -750.33002, 5081.25977,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(18652, 1279.88000, -750.03998, 5079.77979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18652, 1278.82996, -749.02002, 5079.77979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2258, 1274.96997, -755.53003, 5081.91016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1892, 1278.68005, -759.08002, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1892, 1274.08997, -759.06000, 5079.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1273.93994, -749.59998, 5079.91016,   0.00000, 0.00000, 0.00000);

	// EXTERIOR YKZ:
	CreateDynamicObject(3749, 320.04999, -1186.60999, 81.12000,   0.00000, 0.00000, 38.58000);
	CreateDynamicObject(987, 303.70001, -1201.50000, 79.90000,   0.00000, 0.00000, 35.99997);
	CreateDynamicObject(987, 294.00000, -1208.59998, 79.90000,   0.00000, 0.00000, 35.99670);
	CreateDynamicObject(987, 284.29999, -1215.69995, 79.90000,   0.00000, 0.00000, 35.99670);
	CreateDynamicObject(987, 276.39999, -1207.00000, 79.90000,   0.00000, 358.00000, 309.99670);
	CreateDynamicObject(987, 268.89999, -1197.90002, 79.90000,   0.00000, 359.99951, 309.99573);
	CreateDynamicObject(987, 261.20001, -1188.69995, 79.90000,   0.00000, 359.99451, 309.99573);
	CreateDynamicObject(987, 253.89999, -1179.19995, 79.40000,   0.00000, 357.99451, 307.99573);
	CreateDynamicObject(987, 246.30000, -1170.50000, 78.70000,   0.00000, 355.98901, 309.99072);
	CreateDynamicObject(987, 238.60001, -1161.30005, 77.90000,   0.00000, 355.98450, 309.99023);
	CreateDynamicObject(987, 234.50000, -1156.30005, 77.40000,   0.00000, 355.98450, 309.99023);
	CreateDynamicObject(987, 245.89999, -1153.09998, 77.70000,   0.00000, 1.98450, 193.99028);
	CreateDynamicObject(987, 257.50000, -1150.19995, 77.90000,   0.00000, 1.98303, 193.98561);
	CreateDynamicObject(987, 269.20001, -1147.19995, 78.20000,   0.00000, 1.98303, 193.98561);
	CreateDynamicObject(987, 278.20001, -1138.80005, 78.70000,   0.00000, 1.98303, 223.98560);
	CreateDynamicObject(987, 281.50000, -1135.40002, 78.70000,   0.00000, 1.97754, 223.98376);
	CreateDynamicObject(987, 288.20001, -1125.40002, 79.20000,   0.00000, 1.97754, 235.98376);
	CreateDynamicObject(987, 291.89999, -1111.50000, 80.70000,   0.00000, 3.97205, 257.98083);
	CreateDynamicObject(988, 288.39999, -1124.09998, 80.80000,   0.00000, 2.00000, 243.99994);
	CreateDynamicObject(987, 291.70001, -1103.19995, 81.20000,   0.00000, 3.97156, 269.97546);
	CreateDynamicObject(987, 302.50000, -1108.40002, 81.20000,   0.00000, 357.97156, 155.97253);
	CreateDynamicObject(987, 311.29999, -1112.50000, 80.20000,   0.00000, 353.96753, 155.96741);
	CreateDynamicObject(987, 319.00000, -1121.59998, 79.20000,   0.00000, 355.96301, 127.96689);
	CreateDynamicObject(987, 326.20001, -1131.59998, 79.20000,   0.00000, 359.96252, 125.96326);
	CreateDynamicObject(987, 333.20001, -1141.30005, 79.20000,   0.00000, 359.96155, 125.95828);
	CreateDynamicObject(987, 340.50000, -1150.80005, 79.20000,   0.00000, 359.96155, 127.95825);
	CreateDynamicObject(987, 347.89999, -1160.09998, 79.20000,   0.00000, 359.95605, 127.95776);
	CreateDynamicObject(987, 350.00000, -1162.90002, 79.20000,   0.00000, 359.95605, 127.95776);
	CreateDynamicObject(987, 341.60001, -1171.30005, 79.20000,   0.00000, 359.95605, 43.95776);
	CreateDynamicObject(987, 332.50000, -1179.09998, 79.20000,   0.00000, 359.95605, 39.95630);
	CreateDynamicObject(987, 330.10001, -1180.90002, 79.20000,   0.00000, 359.95605, 37.95178);
	CreateDynamicObject(5816, 317.70001, -1139.90002, 85.30000,   0.00000, 0.00000, 312.00000);
	CreateDynamicObject(8947, 308.79999, -1147.00000, 88.60000,   0.00000, 0.00000, 223.99994);
	CreateDynamicObject(983, 313.50000, -1140.80005, 91.30000,   0.00000, 314.00000, 44.00000);
	CreateDynamicObject(983, 314.20001, -1140.09998, 90.40000,   0.00000, 314.00000, 44.00000);
	CreateDynamicObject(983, 314.70001, -1139.59998, 89.70000,   0.00000, 309.99475, 43.99475);
	CreateDynamicObject(983, 314.89999, -1139.40002, 89.40000,   0.00000, 309.99023, 43.98926);
	CreateDynamicObject(3934, 308.39999, -1146.90002, 91.70000,   0.00000, 0.00000, 314.00000);

	// INTERIOR SANTANA (EEUU Mafia):
	new Santana; // HQ Ext Santana.
	CreateDynamicObject(14476, 1113.00000, 244.88000, 9000.65039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1710, 1116.81006, 249.25000, 9000.73047,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1712, 1110.93994, 249.73000, 9000.66016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1820, 1109.96997, 246.56000, 9000.66992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1750, 1109.95996, 247.17000, 9001.17969,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(2344, 1110.82996, 246.97000, 9001.19043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 1112.18005, 239.64000, 9001.30957,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2100, 1110.07996, 239.69000, 9000.73047,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(2232, 1109.85999, 241.92999, 9001.30957,   0.00000, 0.00000, 99.99000);
	CreateDynamicObject(16779, 1112.28003, 247.42999, 9004.19043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1116.94995, 250.02000, 9000.99023,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(644, 1116.89001, 244.89999, 9000.94043,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(644, 1109.98999, 249.91000, 9000.87988,   0.00000, 0.00000, 290.00000);
	CreateDynamicObject(2234, 1112.18994, 246.66000, 9000.66016,   0.00000, 0.00000, 320.00000);
	CreateDynamicObject(1520, 1112.78003, 246.74001, 9001.21973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1113.22998, 246.57001, 9001.37012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2840, 1113.29004, 247.19000, 9000.66016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1501, 1109.29004, 244.98000, 9000.66992,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2673, 1111.33997, 241.20000, 9000.74023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3044, 1110.96997, 241.49001, 9000.70020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2452, 1116.82996, 241.07001, 9000.66016,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1520, 1116.92004, 241.11000, 9001.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1116.79004, 240.78999, 9001.75000,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1520, 1116.79004, 240.32001, 9001.75000,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1520, 1116.79004, 240.32001, 9001.29004,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1512, 1116.68005, 241.06000, 9001.42969,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1512, 1116.81995, 240.57001, 9001.42969,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1512, 1116.68005, 240.72000, 9001.01953,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1543, 1116.70996, 241.20000, 9002.20996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1116.57996, 240.95000, 9002.20996,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(1543, 1116.85999, 240.47000, 9002.20996,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(1543, 1116.85999, 240.47000, 9001.70020,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(1543, 1116.78003, 240.47000, 9000.83984,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(1544, 1116.68005, 240.63000, 9002.20020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1116.83997, 240.89000, 9002.20020,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(1544, 1116.60999, 240.88000, 9001.20996,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(2121, 1112.93994, 240.52000, 9000.99023,   7.84000, 88.38000, 140.11000);
	CreateDynamicObject(1725, 1112.21997, 241.92000, 9004.25977,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1738, 1113.78003, 238.47000, 9004.91016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2103, 1112.67004, 243.85001, 9004.25977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 1109.92004, 242.91000, 9004.25977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2845, 1110.91003, 240.36000, 9004.25977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 1111.43005, 243.05000, 9004.40039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2069, 1115.18005, 243.67999, 9004.30957,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1766, 1110.14001, 238.97000, 9004.25977,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1791, 1110.03003, 240.75000, 9004.75977,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(1567, 1110.56995, 235.14999, 9004.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2281, 1109.46997, 236.72000, 9006.04980,   0.00000, 10.00000, 90.00000);
	CreateDynamicObject(1487, 1110.34998, 242.30000, 9004.45996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1109.76001, 237.46001, 9004.25977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3586, 1114.84998, 229.37000, 8997.30957,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1498, 1114.18994, 252.47000, 9000.71973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1113.31006, 248.60001, 9000.69043,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1113.31006, 239.59000, 9000.69043,   0.01000, 180.00000, 180.00000);
	CreateDynamicObject(3095, 1116.80005, 234.53999, 8999.04004,   179.99001, 90.00000, 0.00000);
	CreateDynamicObject(3095, 1120.50000, 238.58000, 8999.04004,   179.99001, 90.00000, 90.00000);
	CreateDynamicObject(3095, 1109.35999, 238.59000, 8999.04004,   179.99001, 90.00000, 90.00000);
	CreateDynamicObject(3095, 1112.95996, 234.24001, 8999.04004,   179.99001, 90.00000, 180.00000);
	CreateDynamicObject(8565, 1094.68994, 213.33000, 8998.55957,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8565, 1136.76001, 214.75999, 8998.55957,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8565, 1133.84998, 153.53999, 8998.55957,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(8565, 1093.31995, 188.72000, 8998.55957,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(8565, 1132.15002, 149.55000, 8998.55957,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(8565, 1138.56995, 216.45000, 8998.55957,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8565, 1187.87000, 203.62000, 8998.55957,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8565, 1170.90002, 240.64000, 8998.55957,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8565, 1160.85999, 175.10001, 8998.55957,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3984, 1116.52002, 178.27000, 9003.70020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8565, 1102.06995, 138.03999, 8998.55957,   0.00000, 0.00000, 179.98000);
	CreateDynamicObject(8565, 1071.25000, 153.19000, 8998.55957,   0.00000, 0.00000, 89.98000);
	CreateDynamicObject(3984, 1178.06995, 201.62000, 9003.08984,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3984, 1109.45996, 232.67000, 9003.62988,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3984, 1180.08997, 201.69000, 9003.41992,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3984, 1179.27002, 168.13000, 9003.73047,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3850, 1131.93005, 177.91000, 8994.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3850, 1131.92004, 181.42999, 8994.50000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3850, 1131.93005, 184.95000, 8994.50000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3850, 1131.92004, 191.98000, 8994.50000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3850, 1131.91003, 188.48000, 8994.50000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3850, 1131.90002, 195.53000, 8994.50000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3515, 1126.19995, 184.60001, 8993.42969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1126.17004, 185.62000, 8993.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1126.20996, 183.57001, 8993.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3997, 1127.07996, 179.00999, 9003.24023,   179.99001, 0.00000, 179.99001);
	CreateDynamicObject(17513, 1173.83997, 213.84000, 8985.91992,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(947, 1157.67004, 212.17999, 8996.09961,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16101, 1159.00000, 231.92999, 8996.84961,   89.75000, 180.00000, 178.00000);
	CreateDynamicObject(1985, 1158.64001, 221.07001, 8996.84961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1168.50000, 231.78000, 8996.84961,   89.75000, 179.99001, 177.99001);
	CreateDynamicObject(1985, 1168.14001, 220.86000, 8996.84961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1170.28003, 220.34000, 9000.25000,   179.99001, 0.00000, 0.00000);
	CreateDynamicObject(3858, 1161.16003, 215.95000, 9003.03027,   0.00000, 0.00000, 225.00000);
	CreateDynamicObject(12839, 1169.05005, 213.09000, 8997.45996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3858, 1161.16003, 215.95000, 9003.03027,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3858, 1161.16003, 215.95000, 9003.03027,   0.00000, 0.00000, 44.99000);
	CreateDynamicObject(16101, 1163.71997, 231.73000, 8996.84961,   89.75000, 179.99001, 177.99001);
	CreateDynamicObject(1985, 1163.35999, 220.89999, 8996.84961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3858, 1175.75000, 215.97000, 9005.45020,   0.00000, 0.00000, 224.99001);
	CreateDynamicObject(3858, 1175.75000, 215.97000, 9005.45020,   0.00000, 0.00000, 224.99001);
	CreateDynamicObject(3858, 1175.75000, 215.97000, 9005.45020,   0.00000, 0.00000, 44.98000);
	CreateDynamicObject(2627, 1158.93005, 217.28000, 9000.25000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2627, 1160.38000, 217.30000, 9000.25000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2627, 1161.78003, 217.31000, 9000.25000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2630, 1163.83997, 217.16000, 9000.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1165.48999, 217.14999, 9000.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1157.59998, 217.38000, 9000.45020,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(644, 1168.93005, 218.09000, 9000.45020,   0.00000, 0.00000, 170.00000);
	CreateDynamicObject(2628, 1158.95996, 221.25999, 9000.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1165.56006, 221.14000, 9000.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2629, 1162.20996, 221.31000, 9000.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2913, 1161.77002, 221.80000, 9001.13965,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(2915, 1162.43994, 220.34000, 9000.37012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1168.10999, 222.11000, 9000.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1157.10999, 219.75000, 9000.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8565, 1159.15002, 173.34000, 8998.55957,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2114, 1159.55005, 209.64000, 8994.04004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 1157.82996, 217.21001, 8994.04004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 1163.03003, 213.23000, 8994.04004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 1167.48999, 216.99001, 8994.04004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 1167.65002, 216.00000, 8994.04004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 1166.39001, 209.31000, 8994.04004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 1168.69995, 210.99001, 8996.04004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3920, 1163.25000, 222.45000, 8998.70996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3660, 1170.12000, 194.06000, 8995.54004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3660, 1169.15002, 193.32001, 8995.54004,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(1726, 1167.22998, 202.39999, 8993.95020,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1726, 1167.25000, 200.02000, 8993.95020,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1726, 1167.25000, 197.62000, 8993.95020,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1726, 1134.43005, 181.75999, 8992.95996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(16151, 1090.53003, 161.67000, 8993.33008,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18102, 1093.22998, 170.09000, 8998.45020,   42.00000, 0.00000, 180.00000);
	CreateDynamicObject(18102, 1103.15002, 154.52000, 8998.45020,   42.00000, 0.00000, 359.98999);
	CreateDynamicObject(16101, 1099.89001, 159.96001, 8993.87012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1099.87000, 158.10001, 8994.40039,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3850, 1099.91003, 167.00000, 8994.40039,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(16101, 1099.93005, 165.16000, 8993.87012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7314, 1087.16003, 162.47000, 9000.37988,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1723, 1096.12000, 168.06000, 8993.54004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1093.19995, 168.08000, 8993.54004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1090.21997, 168.10001, 8993.54004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1099.18005, 167.97000, 8993.88965,   0.00000, 0.00000, 250.00000);
	CreateDynamicObject(1723, 1099.13000, 167.05000, 8993.50977,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1723, 1099.15002, 158.92999, 8993.50977,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(644, 1100.96997, 168.24001, 8994.15039,   0.00000, 0.00000, 290.00000);
	CreateDynamicObject(1517, 1091.32996, 163.28999, 8994.13965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1091.47998, 162.24001, 8994.12988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1091.51001, 161.11000, 8993.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1091.31006, 161.02000, 8993.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1091.50000, 159.83000, 8993.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1541, 1091.04004, 161.67999, 8994.12988,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2780, 1092.22998, 158.72000, 9006.48047,   88.00000, 180.00000, 270.00000);
	CreateDynamicObject(2780, 1097.06006, 165.12000, 9005.73047,   87.99000, 179.99001, 270.00000);
	CreateDynamicObject(2435, 1107.83997, 158.48000, 8994.20996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11426, 1107.20996, 155.38000, 8991.29004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, 1109.88000, 157.02000, 8994.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, 1109.88000, 157.02000, 8994.21973,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, 1109.88000, 157.02000, 8994.45020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, 1110.28003, 157.03000, 8994.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, 1110.28003, 157.03000, 8994.20020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, 1110.68005, 157.03000, 8994.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, 1109.06995, 157.00999, 8994.33008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 1106.93994, 158.48000, 8994.20996,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2434, 1106.03003, 158.48000, 8994.20996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2434, 1108.97998, 158.31000, 8994.20996,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(14820, 1107.37000, 158.48000, 8995.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1958, 1108.69995, 158.38000, 8995.32031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1958, 1106.07996, 158.34000, 8995.32031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1113.19995, 157.05000, 8995.57031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1100.42004, 157.00000, 8995.57031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3920, 1113.98999, 162.67999, 8996.08008,   0.00000, 0.00000, 89.99000);
	CreateDynamicObject(3920, 1106.91003, 156.27000, 8996.08008,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(2179, 1113.19995, 157.05000, 8999.78027,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1113.19995, 157.05000, 9004.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1100.42004, 157.00000, 8999.90039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2179, 1100.42004, 157.00000, 9004.17969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1099.02002, 159.84000, 8993.88965,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(644, 1111.02002, 168.31000, 8994.15039,   0.00000, 0.00000, 230.00000);
	CreateDynamicObject(1723, 1101.94995, 168.03999, 8993.82031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1105.00000, 168.06000, 8993.82031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1108.06995, 168.06000, 8993.82031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2745, 1114.56995, 167.88000, 8997.71973,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16732, 1113.78003, 170.33000, 8995.16992,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16732, 1113.78003, 170.33000, 8995.26953,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2463, 1117.56006, 170.83000, 8994.00977,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2463, 1117.59998, 169.48000, 8994.00977,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2035, 1117.37000, 170.59000, 8994.82031,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(2035, 1117.10999, 169.71001, 8994.82031,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2035, 1117.10999, 169.71001, 8995.15039,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2035, 1117.10999, 169.71001, 8995.53027,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2035, 1117.10999, 169.71001, 8995.88965,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2036, 1117.37000, 170.50999, 8995.51953,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2036, 1117.37000, 170.50999, 8995.87988,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2036, 1117.37000, 170.50999, 8995.16992,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1672, 1117.41003, 171.08000, 8994.54980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1117.31006, 170.94000, 8994.54980,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1672, 1117.43005, 170.81000, 8994.54980,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(1672, 1117.39001, 170.58000, 8994.54980,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(1672, 1117.45996, 170.41000, 8994.54980,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(1654, 1117.42004, 170.06000, 8994.53027,   0.00000, 90.00000, 278.00000);
	CreateDynamicObject(1654, 1117.18005, 169.67999, 8994.53027,   0.00000, 90.00000, 208.00000);
	CreateDynamicObject(3265, 1115.84998, 171.27000, 8993.88965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1140.06006, 172.53000, 8994.45020,   0.00000, 0.00000, 119.99000);
	CreateDynamicObject(644, 1130.93994, 195.71001, 8994.25000,   0.00000, 0.00000, 219.99001);
	CreateDynamicObject(644, 1112.26001, 192.73000, 8994.25000,   0.00000, 0.00000, 309.98999);
	CreateDynamicObject(1649, 1111.68005, 185.50000, 8998.92969,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1122.17004, 185.12000, 8993.92969,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2104, 1111.68994, 183.75999, 8993.88965,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2225, 1111.70996, 185.71001, 8993.88965,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2227, 1111.56006, 185.82001, 8994.45020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 1111.43994, 188.07001, 8997.71973,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3095, 1161.28003, 220.34000, 9000.25000,   179.99001, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1118.39001, 174.46001, 8998.28027,   179.99001, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1127.39001, 174.46001, 8998.28027,   179.99001, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1136.39001, 174.46001, 8998.28027,   179.99001, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1113.95996, 178.78999, 8998.44043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1131.55005, 178.61000, 8998.45020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7096, 1128.14001, 184.67000, 8996.28027,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1111.63000, 185.50000, 8998.92969,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 1111.43994, 188.07001, 8998.87988,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 1111.43994, 188.07001, 9000.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 1111.48999, 182.92000, 8997.71973,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 1111.48999, 182.92000, 8998.87988,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 1111.48999, 182.92000, 9000.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2104, 1111.73999, 187.86000, 8993.88965,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1122.16003, 187.64999, 8993.92969,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(1726, 1121.89001, 182.31000, 8993.92969,   0.00000, 0.00000, 219.99001);
	CreateDynamicObject(1726, 1120.31006, 189.67000, 8993.92969,   0.00000, 0.00000, 319.98999);
	CreateDynamicObject(3498, 1140.63000, 178.94000, 9006.41992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1113.95996, 178.78999, 9007.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3858, 1121.55005, 178.74001, 9001.19043,   0.00000, 0.00000, 44.50000);
	CreateDynamicObject(3858, 1138.97998, 178.75999, 9001.19043,   0.00000, 0.00000, 44.49000);
	CreateDynamicObject(3858, 1138.88000, 178.75999, 9001.19043,   0.00000, 0.00000, 224.49001);
	CreateDynamicObject(3858, 1121.55005, 178.74001, 9001.19043,   0.00000, 0.00000, 224.49001);
	CreateDynamicObject(3498, 1140.63000, 178.94000, 8997.40039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1129.06995, 178.63000, 8998.45020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3858, 1114.01001, 171.25000, 9001.19043,   0.00000, 0.00000, 134.99001);
	CreateDynamicObject(3858, 1114.01001, 171.25000, 9001.19043,   0.00000, 0.00000, 314.98999);
	CreateDynamicObject(2118, 1118.70996, 185.85001, 8993.65039,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2853, 1118.56006, 185.05000, 8994.45020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2358, 1116.64001, 173.24001, 8998.40039,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(1431, 1114.98999, 177.13000, 8998.83008,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1431, 1115.03003, 173.50000, 8998.83008,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(1431, 1115.93994, 175.08000, 8998.83008,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(2358, 1117.08997, 174.34000, 8998.40039,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(2358, 1116.94995, 175.38000, 8998.40039,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(2358, 1116.28003, 177.00000, 8998.40039,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(2358, 1116.25000, 176.96001, 8998.63965,   0.00000, 0.00000, 59.99000);
	CreateDynamicObject(1517, 1116.06006, 174.77000, 8999.58008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1517, 1116.32996, 176.72000, 8998.71973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1117.00000, 174.33000, 8998.71973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1115.01001, 173.84000, 8999.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1115.12000, 173.30000, 8999.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1116.63000, 173.27000, 8998.51953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1115.80005, 175.42999, 8999.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1115.20996, 177.45000, 8999.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1114.94995, 176.85001, 8999.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1129.06006, 173.07001, 8998.55957,   89.50000, 180.00000, 0.00000);
	CreateDynamicObject(3499, 1129.06006, 173.07001, 9003.09961,   89.49000, 179.99001, 0.00000);
	CreateDynamicObject(3499, 1129.06006, 173.07001, 9002.29004,   89.49000, 179.99001, 0.00000);
	CreateDynamicObject(2985, 1129.90002, 173.72000, 8998.28027,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2985, 1129.89001, 176.49001, 8998.28027,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3498, 1129.06995, 178.63000, 9007.36035,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1140.09998, 177.50000, 8998.28027,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(1726, 1140.15002, 175.10001, 8998.28027,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(644, 1140.21997, 172.34000, 8998.53027,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(644, 1140.19995, 178.09000, 8998.53027,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(2051, 1140.69995, 176.46001, 9000.90039,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2051, 1140.77002, 174.20000, 9000.90039,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1726, 1132.40002, 185.47000, 8992.95996,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(2236, 1132.88000, 183.03000, 8992.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1134.40002, 189.28999, 8992.95996,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2236, 1132.79004, 190.33000, 8992.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1132.50000, 192.64000, 8992.95996,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(644, 1133.06995, 195.75000, 8993.25977,   0.00000, 0.00000, 279.98999);
	CreateDynamicObject(1726, 1140.41003, 181.75000, 8992.95996,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2236, 1138.80005, 183.02000, 8992.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1138.37000, 185.56000, 8992.95996,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(1726, 1140.46997, 189.22000, 8992.95996,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2236, 1138.98999, 190.31000, 8992.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1138.32996, 192.63000, 8992.95996,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(3920, 1120.19995, 171.71001, 8996.08008,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(3920, 1132.81006, 171.67000, 8996.08008,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(3920, 1145.27002, 171.64000, 8996.08008,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(3660, 1123.75000, 172.33000, 8995.57031,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3660, 1143.35999, 172.33000, 8995.57031,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(644, 1115.18005, 173.09000, 8994.45020,   0.00000, 0.00000, 119.99000);
	CreateDynamicObject(1726, 1127.42004, 195.80000, 8993.95020,   0.00000, 0.00000, 359.98999);
	CreateDynamicObject(1726, 1124.26001, 195.75999, 8993.95020,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(1726, 1121.26001, 195.74001, 8993.95020,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(1726, 1118.01001, 195.72000, 8993.95020,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(644, 1117.29004, 195.73000, 8994.25000,   0.00000, 0.00000, 239.99001);

	// EXTERIOR SANTANA:
	Santana = CreateObject(13724, 1254.39844, -803.17188, 85.96090,   0.00000, 0.00000, 0.00000, 800);
	SetObjectMaterial(Santana, 1, 18202, "w_towncs_t", "hatwall256hi", 0);
	//SetObjectMaterial(Santana, 1, 18752, "Volcano", "rocktb128", 0);
	SetObjectMaterial(Santana, 2, 6295, "lawland2", "boardwalk2_la", 0);
	SetObjectMaterial(Santana, 4, 16005, "des_stownmain2", "des_ghotwood1", 0);
	SetObjectMaterial(Santana, 9, 18752, "Volcano", "rocktb128", 0);
	SetObjectMaterial(Santana, 10, 3942, "bistro", "ahoodfence2", 0);
	SetObjectMaterial(Santana, 11, 13734, "hillcliff_lahills", "cobbles_kb_256", 0);
	SetObjectMaterial(Santana, 12, 16005, "des_stownmain2", "newall4-4", 0);
	SetObjectMaterial(Santana, 14, 13734, "hillcliff_lahills", "cobbles_kb_256", 0);
	CreateDynamicObject(3749, 1245.69995, -768.20001, 96.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7921, 1237.90002, -767.20001, 89.90000,   0.00000, 0.00000, 91.99994);
	CreateDynamicObject(991,  1239.19995, -773.79999, 92.90000,   0.00000, 6.00000, 270.00000);
	CreateDynamicObject(991,  1239.19995, -780.20001, 92.20000,   0.00000, 5.99854, 269.99451);
	CreateDynamicObject(3475, 1258.40002, -767.70001, 93.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3475, 1264.30005, -767.79999, 93.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3475, 1270.00000, -767.79999, 93.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3475, 1275.80005, -767.79999, 93.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3475, 1281.59998, -767.90002, 93.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3475, 1305.80005, -787.29999, 92.70000,   0.00000, 0.00000, 290.00000);
	CreateDynamicObject(3475, 1305.50000, -795.59998, 85.50000,   0.00000, 0.00000, 216.00000);
	CreateDynamicObject(3475, 1305.40002, -800.40002, 85.50000,   0.00000, 0.00000, 145.99667);
	CreateDynamicObject(3475, 1303.59998, -805.79999, 85.50000,   0.00000, 0.00000, 177.99182);

	// EXTERIOR CDG:
	new CDG; // HQ Ext de Cartel del Golfo.
	// Exterior del Cartel del Golfo, delante de Vinewood y la zona Centro. (Matias_Lalli).
	// Textura externa de CDG:
	CDG = CreateObject(4600, 1453.60156, -989.48438, 34.43750,   0.00000, 0.00000, 0.00000, 800);
	SetObjectMaterial(CDG, 0, 13734, "hillcliff_lahills", "cobbles_kb_256", 0);
	SetObjectMaterial(CDG, 1, 13734, "hillcliff_lahills", "cobbles_kb_256", 0);
	SetObjectMaterial(CDG, 2, 3942, "bistro", "ahoodfence2", 0);
	SetObjectMaterial(CDG, 3, 7980, "vegasairprtland", "gridchev_64HV", 0);
	SetObjectMaterial(CDG, 8, 16021, "des_geyser", "shingles1", 0);
	SetObjectMaterial(CDG, 9, 16021, "des_geyser", "shingles1", 0);
	// Map Exterior:
	CreateDynamicObject(626, 1452.34998, -1011.59998, 27.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1472.44995, -1011.91998, 27.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1490.97998, -1011.39001, 27.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1433.73999, -1012.17999, 27.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1451.58997, -1021.01001, 25.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1472.95996, -1020.87000, 25.58000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1450.88000, -1021.77002, 23.38000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1473.09998, -1021.62000, 23.44000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1452.83997, -1011.56000, 26.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1461.57996, -1011.90997, 26.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1463.28003, -1012.02002, 26.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1471.58997, -1011.52002, 26.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1468.92004, -1024.32996, 23.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1454.93994, -1024.27002, 23.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1442.88416, -1023.97638, 26.00604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1431.90869, -1024.03870, 26.00604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1482.09570, -1023.96777, 26.00604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1492.09875, -1023.94275, 26.00604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1460.34082, -1023.87256, 26.08949,   0.00000, 0.00000, 0.76328);
	CreateDynamicObject(3498, 1463.39417, -1024.00098, 26.08949,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 1472.74414, -1021.21429, 23.94337,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 1451.24609, -1021.23193, 23.94850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 1447.43945, -1023.66174, 26.51623,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 1464.47205, -1023.66113, 26.51623,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 1481.42578, -1023.66113, 26.51623,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 1490.84436, -1023.66113, 26.51623,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1433.50854, -1024.65491, 23.52516,   0.00000, 0.00000, 269.93445);
	CreateDynamicObject(638, 1441.27771, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1444.57397, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1447.16345, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1452.65674, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1455.32544, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(646, 1442.85046, -1024.74780, 24.24465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1467.41260, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1470.00195, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1473.37634, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1479.10583, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1480.43982, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1483.81458, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(638, 1490.79944, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(646, 1482.02014, -1024.59668, 24.22941,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1437.36572, -1024.68591, 23.22948,   0.00000, 0.00000, 90.82874);
	CreateDynamicObject(1280, 1449.95520, -1024.77124, 23.22948,   0.00000, 0.00000, 89.29742);
	CreateDynamicObject(1280, 1476.19092, -1024.70898, 23.22420,   0.00000, 0.00000, 89.29688);
	CreateDynamicObject(1280, 1487.29626, -1024.88074, 23.20522,   0.00000, 0.00000, 90.06015);
	CreateDynamicObject(949, 1439.34546, -1024.76929, 23.46441,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1435.34167, -1024.69006, 23.46441,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1485.57251, -1024.63379, 23.44309,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1489.02588, -1024.63379, 23.44309,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1471.02124, -1024.65430, 23.52516,   0.00000, 0.00000, 269.93408);
	CreateDynamicObject(3858, 1484.76855, -1023.69385, 27.52969,   0.00000, 0.00000, 225.66516);
	CreateDynamicObject(3858, 1484.76855, -1023.69336, 21.87984,   0.00000, 0.00000, 225.66467);
	CreateDynamicObject(3858, 1470.48315, -1023.69336, 27.52969,   0.00000, 0.00000, 225.66516);
	CreateDynamicObject(3858, 1439.08667, -1024.00732, 21.95831,   0.00000, 0.00000, 225.66467);
	CreateDynamicObject(3858, 1439.08594, -1024.00684, 27.52969,   0.00000, 0.00000, 225.66467);
	CreateDynamicObject(3858, 1453.29285, -1024.00684, 27.52969,   0.00000, 0.00000, 225.66467);
	CreateDynamicObject(3858, 1453.37061, -1024.00684, 21.87984,   0.00000, 0.00000, 225.66467);
	CreateDynamicObject(3858, 1470.48242, -1023.69336, 21.87984,   0.00000, 0.00000, 225.66467);
	CreateDynamicObject(1300, 1434.72083, -1027.64709, 23.19804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, 1487.88477, -1027.54846, 23.18832,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1460.29443, -1024.08728, 22.75524,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1463.27661, -1024.00842, 22.75524,   0.00000, 0.00000, 180.63281);
	CreateDynamicObject(1231, 1479.05774, -1027.71948, 25.54754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1468.09888, -1027.77539, 25.54754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1455.06799, -1027.73096, 25.54754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1444.83044, -1027.73511, 25.54754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3857, 1431.79138, -1020.32178, 21.87983,   0.00000, 0.00000, 134.83719);
	CreateDynamicObject(3857, 1431.79102, -1020.32129, 27.45122,   0.00000, 0.00000, 134.83521);
	CreateDynamicObject(3857, 1492.07227, -1019.85034, 27.45122,   0.00000, 0.00000, 134.83521);
	CreateDynamicObject(3857, 1492.07227, -1019.84961, 21.87983,   0.00000, 0.00000, 134.83521);
	CreateDynamicObject(3051, 1461.82312, -1024.02136, 25.83820,   44.19974, 270.67834, 0.48795);
	CreateDynamicObject(3051, 1461.82227, -1024.02051, 27.01526,   44.19800, 270.67566, 0.48340);
	CreateDynamicObject(3051, 1461.82227, -1024.02051, 28.19231,   44.19800, 270.67566, 0.48340);
	CreateDynamicObject(3051, 1461.82227, -1024.02051, 29.36936,   44.19800, 270.67566, 0.48340);
	CreateDynamicObject(3051, 1461.82227, -1024.02051, 29.91866,   44.19800, 270.67566, 0.48340);
	CreateDynamicObject(3458, 1472.01379, -1021.77570, 31.97345,   351.47339, 180.00000, 179.99994);
	CreateDynamicObject(3458, 1451.68372, -1021.93237, 31.97345,   351.46912, 179.99451, 180.75793);
	CreateDynamicObject(1533, 1486.76965, -1010.69922, 45.86850,   0.00000, 0.00000, 90.00000);
	// ((Objetos Extra Mapeo de CDG))
	CreateDynamicObject(626, 1452.34998, -1011.59998, 27.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1472.44995, -1011.91998, 27.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1490.97998, -1011.39001, 27.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1433.73999, -1012.17999, 27.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1451.58997, -1021.01001, 25.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1472.95996, -1020.87000, 25.58000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1433.66003, -1021.71997, 23.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1437.06995, -1021.71002, 23.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1440.55005, -1021.72998, 23.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1443.97998, -1021.72998, 23.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1447.44995, -1021.73999, 23.39000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1450.88000, -1021.77002, 23.38000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1490.31995, -1021.66998, 23.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1486.83997, -1021.67999, 23.41000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1483.41003, -1021.67999, 23.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1479.93005, -1021.66998, 23.42000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1476.52002, -1021.60999, 23.44000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1473.09998, -1021.62000, 23.44000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1452.83997, -1011.56000, 26.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1461.57996, -1011.90997, 26.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1463.28003, -1012.02002, 26.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1471.58997, -1011.52002, 26.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1468.92004, -1024.32996, 23.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1454.93994, -1024.27002, 23.12000,   0.00000, 0.00000, 0.00000);

	// INTERIOR CDG:
	CreateDynamicObject(19599, 1003.46063, -599.29919, 1083.02856,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1002.22772, -600.78082, 1087.58459,   85.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1007.20581, -607.79950, 1087.58459,   91.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1003.15472, -607.71271, 1087.58459,   91.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1011.25238, -607.76660, 1087.58459,   91.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1015.36218, -607.79749, 1087.58459,   91.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1020.16217, -607.74506, 1087.58459,   91.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1012.54358, -594.62128, 1087.58459,   91.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1005.54773, -594.14240, 1087.58459,   91.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1010.81177, -606.40833, 1090.26465,   181.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1006.46649, -606.49030, 1090.26465,   181.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1021.75281, -604.16663, 1081.54956,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1021.75305, -597.54730, 1081.54956,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1021.94928, -606.94897, 1080.32959,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19325, 1020.06531, -606.91888, 1080.32959,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19325, 1004.02417, -606.87415, 1080.32959,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19325, 1004.88959, -606.85925, 1080.32959,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19325, 1002.20673, -606.70514, 1080.32959,   0.00000, 0.00000, -181.00000);
	CreateDynamicObject(19325, 1002.15802, -603.17456, 1080.32959,   0.00000, 0.00000, -181.00000);
	CreateDynamicObject(1557, 1008.42969, -606.90631, 1080.39355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1011.42053, -606.90216, 1080.39355,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1557, 1015.11249, -606.88745, 1080.39355,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1557, 1012.12372, -606.89301, 1080.39355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 1015.10028, -596.40302, 1080.61145,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 1015.10028, -596.40302, 1078.13147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2957, 1005.75537, -595.27545, 1082.12305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2957, 1011.15057, -595.31427, 1082.12305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1709, 1008.22913, -605.26880, 1080.56982,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2313, 1003.73529, -602.51440, 1080.57263,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19786, 1004.43658, -602.09448, 1082.37378,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1006.22961, -601.91449, 1081.46216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1003.25702, -601.89801, 1081.46216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2135, 1018.39111, -594.35315, 1080.57031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2137, 1017.38684, -594.33398, 1080.55261,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2136, 1021.20471, -595.36884, 1080.57104,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2305, 1021.14374, -594.36560, 1080.57288,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2140, 1019.70398, -594.25049, 1080.57153,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2029, 1018.86169, -600.99402, 1080.57153,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2029, 1018.86920, -602.95569, 1080.57153,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2124, 1017.50000, -600.04169, 1081.39185,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2124, 1017.50000, -600.76947, 1081.39185,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2124, 1017.50000, -602.20569, 1081.39185,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2124, 1017.50000, -602.90582, 1081.39185,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2124, 1017.50000, -601.52258, 1081.39185,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2124, 1020.20001, -602.78381, 1081.39185,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 1020.20001, -602.06378, 1081.39185,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 1020.20001, -601.38379, 1081.39185,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 1020.20001, -600.68378, 1081.39185,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2124, 1020.20001, -600.00378, 1081.39185,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1433, 1014.40649, -602.95490, 1080.75183,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2245, 1014.40723, -602.94952, 1081.51733,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11392, 1005.29706, -595.62292, 1080.57166,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19815, 1002.38586, -597.33423, 1082.79810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(936, 1002.90466, -597.24408, 1080.95142,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19631, 1002.98474, -597.82343, 1081.48474,   0.00000, 86.00000, -18.00000);
	CreateDynamicObject(19899, 1014.19983, -598.39648, 1080.57166,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19787, 1009.37347, -601.92548, 1082.55640,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1518, 1014.83423, -595.27887, 1082.35889,   0.00000, 0.00000, -56.00000);
	CreateDynamicObject(19621, 1013.88605, -597.45605, 1081.90125,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1644, 1014.82837, -595.76294, 1081.43738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1025, 1014.23462, -599.05908, 1082.12366,   0.00000, -20.00000, -185.00000);
	CreateDynamicObject(11289, 1005.07562, -601.50269, 1080.95068,   -14.00000, 0.00000, 179.00000);
	CreateDynamicObject(2062, 1009.96118, -601.57233, 1081.17212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2062, 1008.30060, -601.57013, 1081.17212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2062, 1009.10046, -601.55206, 1081.17212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18634, 1003.18817, -597.01532, 1081.44556,   0.00000, -88.00000, 55.00000);
	CreateDynamicObject(18644, 1002.94128, -597.09949, 1081.42542,   0.00000, 91.00000, 0.00000);
	CreateDynamicObject(18635, 1003.24249, -597.50427, 1081.40491,   90.00000, 0.00000, 18.00000);
	CreateDynamicObject(330, 1014.73602, -595.39392, 1082.77722,   89.00000, 0.00000, 2.00000);
	CreateDynamicObject(2650, 1011.72772, -601.79602, 1082.24988,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2406, 1002.43347, -599.55212, 1081.84021,   -6.00000, 0.00000, 88.00000);
	CreateDynamicObject(19806, 1018.90112, -601.38751, 1083.05933,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14446, 1018.83618, -601.79865, 1084.56665,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11724, 1008.65039, -595.07172, 1084.51050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11725, 1008.64160, -595.16278, 1084.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1705, 1008.12665, -597.43420, 1083.99146,   0.00000, 0.00000, 142.00000);
	CreateDynamicObject(1705, 1010.01971, -596.80670, 1083.99146,   0.00000, 0.00000, 216.00000);
	CreateDynamicObject(19787, 1008.61578, -594.68561, 1086.09265,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2286, 1012.23761, -602.12061, 1082.87683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2491, 1020.52417, -599.41003, 1083.99146,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2491, 1020.69818, -603.76843, 1083.99146,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2276, 1003.14490, -595.24603, 1086.16272,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 1002.34412, -604.25452, 1086.88013,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2169, 1002.86371, -598.12042, 1083.99060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19893, 1002.85199, -597.50958, 1084.77856,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(1714, 1003.93823, -597.54419, 1083.99280,   0.00000, 0.00000, -82.00000);
	CreateDynamicObject(2953, 1002.95331, -598.10901, 1084.80115,   0.00000, 0.00000, 52.00000);
	CreateDynamicObject(2201, 1002.53754, -596.65057, 1084.78015,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(14867, 1011.22107, -607.26917, 1085.37170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19805, 1002.38348, -597.51630, 1086.17944,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19619, 1020.61420, -605.46222, 1085.75110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2255, 1005.34601, -607.19397, 1085.37744,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2267, 1020.58948, -597.36560, 1086.24390,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2259, 1015.31140, -598.51001, 1082.02222,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1014.76886, -601.78986, 1080.57178,   0.00000, 0.00000, 90.00000);

	// Gasolinera grotti exterior
	CreateDynamicObject(11547, 203.04, -1440.76, 14.98,   0.00, 0.00, 318.29);
	CreateDynamicObject(11546, 215.48, -1427.27, 12.16,   0.00, 0.00, 44.42);
	CreateDynamicObject(1676, 197.51, -1446.97, 13.71,   0.00, 0.00, 317.45);
	CreateDynamicObject(1676, 201.41, -1442.92, 13.71,   0.00, 0.00, 317.45);
	CreateDynamicObject(1676, 205.09, -1438.94, 13.71,   0.00, 0.00, 317.45);
	CreateDynamicObject(1676, 208.77, -1434.72, 13.71,   0.00, 0.00, 317.45);
	CreateDynamicObject(970, 198.17, -1446.31, 12.62,   0.00, 0.00, 317.76);
	CreateDynamicObject(970, 197.01, -1447.59, 12.58,   0.00, 0.00, 317.76);
	CreateDynamicObject(970, 201.75, -1442.23, 12.62,   0.00, 0.00, 317.76);
	CreateDynamicObject(970, 200.69, -1443.41, 12.62,   0.00, 0.00, 317.76);
	CreateDynamicObject(970, 204.44, -1439.43, 12.62,   0.00, 0.00, 318.28);
	CreateDynamicObject(970, 205.56, -1438.25, 12.62,   0.00, 0.00, 318.28);
	CreateDynamicObject(970, 208.06, -1435.31, 12.62,   0.00, 0.00, 318.28);
	CreateDynamicObject(970, 209.30, -1434.20, 12.62,   0.00, 0.00, 318.28);

	// Gasolinera ganton exterior
	CreateDynamicObject(4100, 2387.15, -1930.65, 14.00,   0.00, 0.00, 140.00);
	CreateDynamicObject(4100, 2373.46, -1930.63, 14.00,   0.00, 0.00, 140.00);
	CreateDynamicObject(10789, 2381.59, -1905.21, 15.04,   0.00, 0.00, 90.00);
	CreateDynamicObject(970, 2393.99, -1913.74, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2394.00, -1909.59, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2394.00, -1905.45, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2394.01, -1901.29, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2394.01, -1897.12, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2392.00, -1913.58, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2392.00, -1909.44, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2391.99, -1905.27, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2391.92, -1901.12, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(8661, 2383.91, -1912.12, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(8661, 2383.76, -1932.07, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(8661, 2383.93, -1892.24, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, 2403.67, -1921.30, 11.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(3578, 2403.67, -1892.30, 11.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(3578, 2403.65, -1902.60, 11.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(3578, 2403.65, -1912.36, 11.78,   0.00, 0.00, 90.00);
	CreateDynamicObject(3578, 2403.65, -1925.49, 11.78,   0.00, 0.00, 90.00);
	CreateDynamicObject(970, 2391.91, -1896.96, 13.00,   0.00, 0.00, 269.96);
	CreateDynamicObject(970, 2384.65, -1896.55, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2384.67, -1900.72, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2384.69, -1904.89, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2384.70, -1909.05, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2384.72, -1913.20, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2382.62, -1913.16, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2382.60, -1909.00, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2382.60, -1904.86, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2382.59, -1900.70, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(970, 2382.57, -1896.56, 13.00,   0.00, 0.00, 270.16);
	CreateDynamicObject(1676, 2393.01, -1910.96, 14.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1676, 2392.98, -1907.29, 14.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1676, 2393.04, -1902.87, 14.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1676, 2393.04, -1899.83, 14.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1676, 2383.69, -1899.44, 14.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1676, 2383.69, -1902.95, 14.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1676, 2383.70, -1907.62, 14.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1676, 2383.66, -1910.96, 14.10,   0.00, 0.00, 90.00);

	// Estacionamientos públicos de /entrar-/salir
	CreateObject(4232, 2257.50000, -1727.50000, 2030.59998,   0.0, 0.0, 176.0000); // Desbug Suelo.
	CreateObject(10010, 1170.80005, -1622.09998, 6601.50000,   0.0, 0.0, 0.00000); // Desbug Suelo.
	CreateDynamicObject(16773, 1136.09998, -1588.90002, 6605.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7891, 1242.09998, -1736.09998, 14.90000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1215, 1246.19995, -1735.59998, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1238.09998, -1735.40002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4642, 1236.59998, -1737.30005, 14.30000,   0.00000, 0.00000, 90.75000);
	CreateDynamicObject(7891, 2281.19995, -1721.59998, 14.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(4642, 2285.00000, -1720.80005, 14.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16773, 2246.00000, -1707.50000, 2028.69995,   0.00000, 0.00000, 266.00000);
	CreateDynamicObject(16773, 2247.00000, -1692.90002, 2028.69995,   0.00000, 0.00000, 265.99548);
	CreateDynamicObject(16773, 2248.00000, -1678.40002, 2028.69995,   0.00000, 0.00000, 265.99548);
	CreateDynamicObject(16773, 2235.89990, -1765.80005, 2034.09998,   0.00000, 0.00000, 175.99548);

	// Bar ext-int.
	CreateDynamicObject(1569, 1647.90002, -1460.25000, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1647.97998, -1457.45996, 12.50000,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(13007, 1638.67004, -1459.50000, 10.39000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1637.43994, -1459.56006, 12.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2964, 1641.40002, -1455.19995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1645.50000, -1455.19995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2289, 1643.29004, -1452.34998, 14.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2287, 1636.84998, -1457.59998, 13.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2280, 1642.51001, -1463.37000, 13.85000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3859, 1647.94995, -1454.80005, 12.14000,   0.00000, 0.00000, 17.06000);
	CreateDynamicObject(3859, 1647.94995, -1462.84998, 12.14000,   0.00000, 0.00000, 17.06000);
	CreateDynamicObject(2357, 1643.82996, -1461.69995, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1646.16003, -1463.35999, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1643.60999, -1463.35999, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1640.83997, -1462.68994, 12.55000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2011, 1647.08997, -1463.37000, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2241, 1647.46997, -1452.71997, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2251, 1636.65002, -1463.57996, 13.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1644.66003, -1452.37000, 13.50000,   355.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1645.52002, -1452.37000, 13.50000,   355.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1642.29004, -1452.37000, 13.50000,   355.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1641.45996, -1452.37000, 13.50000,   355.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1636.94995, -1452.80005, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1638.54004, -1452.62000, 14.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1936, 1646.34998, -1452.09998, 13.71000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1452.22998, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1452.22998, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1452.22998, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1452.22998, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1636.30005, -1453.91003, 13.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1636.30005, -1457.10999, 13.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1636.30005, -1460.31995, 13.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1636.30005, -1463.53003, 13.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1646.34998, -1463.96997, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1463.96997, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1463.96997, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1636.73999, -1463.96997, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1457.56995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1454.06995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1461.06006, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1464.56006, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1454.06995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1457.56995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1461.06006, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1464.56006, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1464.56006, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1461.06006, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1457.56995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1454.06995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1464.56006, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1461.06006, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1457.56995, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1569, 1647.90002, -1460.25000, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1647.97998, -1457.45996, 12.50000,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(13007, 1638.67004, -1459.50000, 10.39000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1637.43994, -1459.56006, 12.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2964, 1641.40002, -1455.19995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1645.50000, -1455.19995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2289, 1643.29004, -1452.34998, 14.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2287, 1636.84998, -1457.59998, 13.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2280, 1642.51001, -1463.37000, 13.85000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3859, 1647.94995, -1454.80005, 12.14000,   0.00000, 0.00000, 17.06000);
	CreateDynamicObject(3859, 1647.94995, -1462.84998, 12.14000,   0.00000, 0.00000, 17.06000);
	CreateDynamicObject(2357, 1643.82996, -1461.69995, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1646.16003, -1463.35999, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1643.60999, -1463.35999, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1640.83997, -1462.68994, 12.55000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2011, 1647.08997, -1463.37000, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2241, 1647.46997, -1452.71997, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2251, 1636.65002, -1463.57996, 13.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1644.66003, -1452.37000, 13.50000,   355.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1645.52002, -1452.37000, 13.50000,   355.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1642.29004, -1452.37000, 13.50000,   355.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1641.45996, -1452.37000, 13.50000,   355.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1636.94995, -1452.80005, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1638.54004, -1452.62000, 14.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1936, 1646.34998, -1452.09998, 13.71000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1452.22998, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1452.22998, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1452.22998, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1452.22998, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1636.30005, -1453.91003, 13.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1636.30005, -1457.10999, 13.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1636.30005, -1460.31995, 13.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1636.30005, -1463.53003, 13.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1646.34998, -1463.96997, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1463.96997, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1463.96997, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1636.73999, -1463.96997, 13.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1457.56995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1454.06995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1461.06006, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1646.34998, -1464.56006, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1454.06995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1457.56995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1461.06006, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1643.14001, -1464.56006, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1464.56006, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1461.06006, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1457.56995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1639.93005, -1454.06995, 15.09000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1464.56006, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1461.06006, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1457.56995, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1636.72998, -1454.06995, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1704, 1646.78003, -1461.87000, 12.55000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1704, 1646.78003, -1460.68994, 12.55000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16780, 1643.93005, -1461.43994, 15.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 1643.93005, -1455.18994, 15.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, 1636.72998, -1454.06995, 15.10000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1704, 1646.78003, -1461.87000, 12.55000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1704, 1646.78003, -1460.68994, 12.55000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16780, 1643.93005, -1461.43994, 15.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 1643.93005, -1455.18994, 15.17000,   0.00000, 0.00000, 0.00000);

	// Alhambre exterior
	CreateDynamicObject(3850, 1827.01001, -1677.19995, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1827.01001, -1673.81006, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1827.07996, -1687.81006, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1827.08997, -1691.29004, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1826.98999, -1682.41003, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1831.50000, -1672.04004, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1831.64001, -1689.21997, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1831.46997, -1675.45996, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1831.47998, -1678.85999, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1831.59998, -1685.65002, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1834.52002, -1738.15002, 12.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1834.06995, -1720.87000, 12.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1833.93994, -1705.78003, 12.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1835.47241, -1654.66443, 12.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1834.34998, -1638.26001, 12.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1834.51001, -1624.81006, 12.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1836.79004, -1684.00000, 13.09000,   0.00000, 0.00000, 88.56000);
	CreateDynamicObject(3850, 1833.22998, -1680.60999, 13.09000,   0.00000, 0.00000, 88.56000);
	CreateDynamicObject(3850, 1836.62000, -1680.68005, 13.09000,   0.00000, 0.00000, 88.56000);
	CreateDynamicObject(1536, 1837.46997, -1684.00000, 12.30000,   0.00000, 0.00000, 88.68000);
	CreateDynamicObject(1536, 1837.47998, -1681.00000, 12.30000,   0.00000, 0.00000, 269.82001);
	CreateDynamicObject(3850, 1836.90002, -1691.17004, 13.09000,   0.00000, 0.00000, 268.62000);
	CreateDynamicObject(3850, 1833.35999, -1683.97998, 13.09000,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(3850, 1833.42004, -1691.09998, 13.09000,   0.00000, 0.00000, 88.32000);

	// Zonas públicas de Los Santos y alrededores.
	// EXTERIOR AEROPUERTO:

	// Nuevo Aeropuerto de los Santos. IBERIA. ((Desbug del suelo y edificio))
	CreateObject(7978, 1979.72693, -2283.27148, 30.68200,   0.00000, 0.00000, 100.00000, 800); // Desbug map.
	CreateObject(8281, 1982.19897, -2300.34033, 22.15000,   0.00000, 0.00000, 100.00000, 800); // Desbug map.
	CreateObject(5009, 1912.75500, -2264.49561, 15.23930,   0.00000, 0.00000, 180.00000, 800); // Desbug Map.
	// ((Resto del mapeado))
	CreateDynamicObject(5004, 1900.70337, -2326.38135, 12.22000,   0.00000, 0.00000, 88.66350);
	CreateDynamicObject(3574, 1959.16113, -2362.89844, 15.12379,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3574, 1974.58423, -2362.87646, 15.12379,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16400, 1813.13818, -2180.18237, 12.29730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(10969, 1837.38086, -2170.64478, 12.18094,   0.00000, 0.00000, 57.70904);
	CreateDynamicObject(712, 1887.88220, -2201.69800, 21.50650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1883.17078, 15.11050, 15.11050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1942.08215, -2177.23730, 15.11055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1922.44385, -2177.23730, 15.11050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1843.89990, -2177.23730, 15.11050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1902.80652, -2177.23730, 15.11050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1883.17395, -2177.23730, 15.11050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1863.53699, -2177.23730, 15.11050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1824.26318, -2177.23730, 15.11050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1843.66931, -2198.58618, 13.10100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1824.93018, -2181.31030, 13.10100,   0.00000, 0.00000, 52.00000);
	CreateDynamicObject(640, 1829.13086, -2184.58911, 13.10100,   0.00000, 0.00000, 52.00000);
	CreateDynamicObject(640, 1833.35156, -2187.87866, 13.10100,   0.00000, 0.00000, 52.00000);
	CreateDynamicObject(640, 1837.51965, -2191.13281, 13.10100,   0.00000, 0.00000, 52.00000);
	CreateDynamicObject(640, 1841.67224, -2194.37598, 13.10100,   0.00000, 0.00000, 52.00000);
	CreateDynamicObject(640, 1843.67090, -2206.52368, 13.10100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1843.67261, -2201.15405, 13.10100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1364, 1835.66418, -2188.37939, 13.21580,   0.00000, 0.00000, 143.00000);
	CreateDynamicObject(1364, 1842.90454, -2193.94873, 13.21580,   0.00000, 0.00000, 143.00000);
	CreateDynamicObject(1364, 1828.03589, -2182.47705, 13.21580,   0.00000, 0.00000, 143.00000);
	CreateDynamicObject(3520, 1824.67029, -2183.34814, 12.41396,   0.00000, 0.00000, 9.44827);
	CreateDynamicObject(3532, 1834.03064, -2191.53101, 13.34129,   0.00000, 0.00000, 38.17005);
	CreateDynamicObject(3520, 1842.25562, -2200.04932, 12.41396,   0.00000, 0.00000, 9.44827);
	CreateDynamicObject(3520, 1836.94397, -2194.64404, 12.41396,   0.00000, 0.00000, 9.44827);
	CreateDynamicObject(3532, 1838.85645, -2198.71338, 13.34129,   0.00000, 0.00000, 38.17005);
	CreateDynamicObject(3532, 1839.35828, -2196.57251, 13.34129,   0.00000, 0.00000, 38.17005);
	CreateDynamicObject(3532, 1824.36169, -2186.78198, 13.34129,   0.00000, 0.00000, 38.17005);
	CreateDynamicObject(3532, 1834.11292, -2194.17236, 13.34129,   0.00000, 0.00000, 38.17005);
	CreateDynamicObject(3532, 1829.00757, -2187.44458, 13.34129,   0.00000, 0.00000, 38.17005);
	CreateDynamicObject(3520, 1831.78491, -2190.51904, 12.41396,   0.00000, 0.00000, 9.44827);
	CreateDynamicObject(3532, 1828.97913, -2190.34082, 13.34129,   0.00000, 0.00000, 38.17005);
	CreateDynamicObject(3520, 1826.30432, -2185.05298, 12.41396,   0.00000, 0.00000, 9.44827);
	CreateDynamicObject(822, 1825.81299, -2185.28711, 12.84475,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(822, 1840.41309, -2197.13672, 12.84475,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(822, 1836.84094, -2194.19019, 12.84475,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(822, 1833.40991, -2191.40991, 12.84475,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(822, 1830.16943, -2188.63257, 12.84475,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1831.31555, -2185.82056, 14.90663,   0.00000, 0.00000, 0.93685);
	CreateDynamicObject(10183, 1879.33777, -2182.73633, 12.49000,   0.00000, 0.00000, 45.50000);
	CreateDynamicObject(10832, 1948.45374, -2183.32788, 14.28370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1961.47900, -2186.95996, 15.20620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1961.49219, -2179.55249, 15.21419,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1844.01489, -2195.86792, 14.90663,   0.00000, 0.00000, 0.93685);
	CreateDynamicObject(1232, 1838.76306, -2191.53101, 14.90663,   0.00000, 0.00000, 0.93685);
	CreateDynamicObject(637, 1942.66565, -2182.52808, 12.64150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(637, 1942.68469, -2179.84912, 12.64150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10183, 2007.95605, -2220.38135, 12.58100,   0.00000, 0.00000, 250.89555);
	CreateDynamicObject(13640, 1964.55957, -2182.57666, 11.50000,   0.00000, -0.22000, 90.00000);
	CreateDynamicObject(13640, 1958.84045, -2182.57642, 11.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8322, 1915.80212, -2255.48047, 22.13749,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(7911, 2025.48145, -2241.19653, 19.83490,   0.00000, 0.00000, 220.45000);
	CreateDynamicObject(7914, 2038.30713, -2230.21289, 19.81970,   0.00000, 0.00000, 220.45000);
	CreateDynamicObject(5811, 1967.88550, -2326.33643, 15.86425,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(4726, 1887.11877, -2310.83154, 11.95405,   0.00000, 0.00000, 226.14355);
	CreateDynamicObject(1683, 1981.53748, -2304.82715, 38.11526,   1.00000, 2.50000, 100.72480);
	CreateDynamicObject(5507, 1961.60901, -2206.32080, 12.32180,   0.00000, -0.25000, 90.00000);
	CreateDynamicObject(717, 1841.20654, -2200.15234, 10.29133,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, 1821.71362, -2185.53320, 10.36602,   0.00000, 0.00000, 329.31479);
	CreateDynamicObject(1283, 1966.20996, -2176.98975, 15.39923,   0.00000, 0.00000, 358.88177);
	CreateDynamicObject(5811, 2009.97095, -2207.65210, 15.80806,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3578, 2056.48828, -2184.58252, 11.79600,   0.00000, 0.00000, 353.02359);
	CreateDynamicObject(3578, 2046.26196, -2183.94946, 11.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2098.16113, -2209.54492, 11.79600,   0.00000, 0.00000, 294.49301);
	CreateDynamicObject(3578, 2066.56738, -2186.41284, 11.79596,   0.00000, 0.00000, 346.53864);
	CreateDynamicObject(3578, 2035.97070, -2183.93652, 11.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2076.05981, -2189.55786, 11.79596,   0.00000, 0.00000, 337.07208);
	CreateDynamicObject(3578, 2084.92529, -2194.48608, 11.79600,   0.00000, 0.00000, 324.90970);
	CreateDynamicObject(3578, 2092.57544, -2201.16577, 11.79600,   0.00000, 0.00000, 312.98969);
	CreateDynamicObject(3754, 2075.58252, -2318.87183, 16.64100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3666, 2100.19629, -2214.01904, 12.56620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2031.06543, -2183.93652, 12.56621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2041.12549, -2183.93799, 12.56620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2051.41357, -2183.96118, 12.56620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2061.56689, -2185.21851, 12.56620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2071.37695, -2187.58081, 12.56620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2080.82153, -2191.61108, 12.56620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2089.07495, -2197.42993, 12.56620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 2096.01245, -2204.88013, 12.56620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(709, 2114.63232, -2221.49512, 12.21253,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3255, 1872.68457, -2276.63940, 12.07346,   0.00000, 0.00000, 281.90231);
	CreateDynamicObject(1257, 1824.40784, -2173.13989, 13.72469,   0.00000, 0.00000, 270.54678);
	CreateDynamicObject(967, 2088.49048, -2314.32104, 12.67020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9245, 2058.42407, -2292.58154, 24.65676,   0.00000, 0.00000, 146.78136);
	CreateDynamicObject(4003, 1916.90063, -2252.48462, 30.25688,   0.00000, 0.00000, 336.19284);
	CreateDynamicObject(1412, 1884.76526, -2271.31494, 15.83638,   0.00000, 0.00000, 67.22463);
	CreateDynamicObject(1412, 1882.72351, -2276.18652, 15.83640,   0.00000, 0.00000, 67.22460);
	CreateDynamicObject(1412, 1878.66138, -2283.78760, 15.83640,   0.00000, 0.00000, 49.25700);
	CreateDynamicObject(1412, 1881.35754, -2279.43726, 15.83640,   0.00000, 0.00000, 67.22460);
	CreateDynamicObject(1412, 1871.35742, -2291.27148, 15.83640,   0.00000, 0.00000, 44.45350);
	CreateDynamicObject(1412, 1875.05933, -2287.64136, 15.83640,   0.00000, 0.00000, 44.45350);
	CreateDynamicObject(1412, 1867.67896, -2294.88770, 15.83640,   0.00000, 0.00000, 44.45350);
	CreateDynamicObject(1412, 1863.98438, -2298.52148, 15.83640,   0.00000, 0.00000, 44.45350);
	CreateDynamicObject(1412, 1856.50452, -2305.93433, 15.83640,   0.00000, 0.00000, 45.47270);
	CreateDynamicObject(1412, 1860.23657, -2302.20264, 15.83640,   0.00000, 0.00000, 44.45350);
	CreateDynamicObject(1412, 1852.87415, -2309.61182, 15.83640,   0.00000, 0.00000, 45.47270);
	CreateDynamicObject(8308, 1971.29797, -2233.29907, 13.17180,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(10183, 1920.48059, -2182.66455, 12.49000,   0.00000, 0.00000, 45.50000);
	CreateDynamicObject(10183, 1932.30823, -2233.59741, 12.58100,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(1278, 2021.62976, -2220.89453, 24.73208,   0.00000, 0.00000, 33.67986);
	CreateDynamicObject(1278, 1918.82788, -2237.35840, 25.13812,   0.00000, 0.00000, 348.57199);
	CreateDynamicObject(1278, 1996.40625, -2233.78540, 24.73208,   0.00000, 0.00000, 20.53882);
	CreateDynamicObject(1278, 1944.05652, -2241.93652, 25.13812,   0.00000, 0.00000, 359.45453);
	CreateDynamicObject(1290, 1934.66626, -2207.23657, 18.04207,   0.00000, 0.00000, 86.63464);
	CreateDynamicObject(1290, 1917.84863, -2207.56470, 18.04207,   0.00000, 0.00000, 86.63464);
	CreateDynamicObject(1290, 1874.85400, -2208.01440, 18.04207,   0.00000, 0.00000, 86.63464);
	CreateDynamicObject(1290, 1900.01270, -2207.91284, 18.04207,   0.00000, 0.00000, 86.63464);
	CreateDynamicObject(1290, 1983.90857, -2185.01196, 18.50930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1983.79529, -2212.80615, 18.50930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1984.10901, -2198.11865, 18.50930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 2088.88281, -2299.97583, 18.38281,   356.85840, 0.00000, -1.55435);
	CreateDynamicObject(620, 1939.47253, -2239.75684, 7.15123,   0.00000, 0.00000, 304.86282);
	CreateDynamicObject(634, 1936.62939, -2240.23511, 13.25918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(716, 1997.70776, -2230.09937, 8.20851,   0.00000, 0.00000, 1.67009);
	CreateDynamicObject(710, 2006.69849, -2230.93896, 28.20736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3508, 1949.98633, -2242.04150, 13.74896,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3508, 2016.88977, -2221.50928, 11.62603,   0.00000, 0.00000, 303.85794);
	CreateDynamicObject(824, 2009.61987, -2227.14722, 13.43247,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3409, 1927.87952, -2240.10547, 14.03708,   0.00000, 0.00000, 348.93839);
	CreateDynamicObject(891, 1921.64917, -2238.98462, 13.63727,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10183, 1943.88000, -2334.40698, 12.50000,   0.00000, 0.00000, 99.28910);
	CreateDynamicObject(10183, 2030.91711, -2319.57227, 12.58230,   0.00000, 0.00000, 11.65570);
	CreateDynamicObject(1597, 2077.15356, -2312.71558, 15.26432,   0.00000, 0.00000, 358.02927);
	CreateDynamicObject(620, 1885.01306, -2348.64966, 11.65848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1861.41394, -2329.65967, 11.65848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1913.30811, -2358.78442, 11.65848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3517, 2045.96912, -2287.88257, 23.45864,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10810, 1885.36304, -2310.88354, 8.11907,   0.00000, 0.00000, 337.78741);
	CreateDynamicObject(643, 1851.13953, -2182.86255, 12.92280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(643, 1849.98901, -2191.27954, 12.93380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(643, 1842.25317, -2184.04199, 12.92280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7666, 1971.73828, -2240.91431, 16.05750,   0.00000, 0.00000, 135.80823);
	CreateDynamicObject(970, 1966.87268, -2246.97485, 12.96494,   0.00000, 0.00000, 46.36699);
	CreateDynamicObject(970, 1980.16272, -2244.89795, 12.95783,   0.00000, 0.00000, 335.31253);
	CreateDynamicObject(1232, 2005.65112, -2356.98315, 13.83300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1996.44678, -2355.74927, 13.06250,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1215, 1963.56836, -2355.31201, 13.06250,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(8548, 2041.93982, -2207.68652, 13.49450,   0.00000, 0.00000, 224.94916);

	// INTERIOR AEROPUERTO:
	CreateDynamicObject(8378, -1860.23962, 45.58924, 1053.52039,   270.00000, 180.00000, 180.00000);
	CreateDynamicObject(8378, -1860.36951, 62.81289, 1053.52039,   270.00000, 179.99451, 179.99451);
	CreateDynamicObject(2773, -1868.43530, 47.45007, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1858.77563, 47.44922, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1860.69922, 47.44922, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1862.63477, 47.44922, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1864.56470, 47.44922, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1866.50061, 47.45007, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1865.01013, 45.04760, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1859.20410, 45.05176, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1857.27515, 45.05176, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1861.13965, 45.04688, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, -1863.06934, 45.04688, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(7022, -1844.88525, 21.26481, 1055.70972,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1538, -1855.70337, 43.65234, 1054.18909,   180.00000, 180.00000, 0.00000);
	CreateDynamicObject(1538, -1854.20715, 43.65234, 1054.18909,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7022, -1926.37048, 23.84698, 1055.70972,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(7022, -1878.65967, 49.94800, 1056.84143,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2773, -1855.34534, 45.05176, 1054.70630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(5779, -1876.73547, 49.41286, 1053.75879,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(5779, -1871.21875, 49.44666, 1056.50879,   90.00000, 0.00000, 270.00000);
	CreateDynamicObject(5779, -1869.74182, 46.25666, 1053.75879,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7022, -1801.67505, 27.10329, 1055.70972,   180.00000, 0.00000, 359.99451);
	CreateDynamicObject(1533, -1837.44043, 49.54732, 1054.18909,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1533, -1839.94043, 49.54688, 1054.18909,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1616, -1835.69189, 49.68079, 1058.61841,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1616, -1835.55847, 71.63763, 1058.61841,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1616, -1888.32629, 71.23299, 1058.61841,   0.00000, 0.00000, 176.00000);
	CreateDynamicObject(1616, -1888.21936, 49.70156, 1058.61841,   0.00000, 0.00000, 219.99548);
	CreateDynamicObject(1569, -1874.06140, 49.43497, 1054.18909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(986, -1878.03381, 49.39949, 1054.00879,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(986, -1869.76611, 44.86858, 1054.00879,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2165, -1870.32202, 46.70485, 1054.18909,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, -1871.24084, 46.33495, 1054.64929,   0.00000, 0.00000, 86.00000);
	CreateDynamicObject(2165, -1876.70276, 48.83730, 1054.18909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, -1876.21899, 47.86143, 1054.64929,   0.00000, 0.00000, 169.99548);
	CreateDynamicObject(5779, -1878.21497, 47.68432, 1056.50879,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(986, -1885.03320, 49.40027, 1054.00879,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(5779, -1891.74500, 53.75197, 1055.75879,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(7022, -1871.71838, 49.00198, 1056.40088,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(5779, -1891.40857, 65.80489, 1055.75879,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(986, -1835.12598, 52.12500, 1054.00879,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(986, -1835.16113, 66.87500, 1054.00879,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(986, -1835.06909, 68.09167, 1054.00879,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(986, -1831.06250, 53.76758, 1054.00879,   0.00000, 0.00000, 359.98352);
	CreateDynamicObject(986, -1888.81665, 52.20916, 1054.00879,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(986, -1888.85669, 66.76373, 1054.00879,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(986, -1888.85339, 68.01367, 1054.00879,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2774, -1853.19958, 75.15379, 1053.94971,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(2774, -1854.37305, 75.09274, 1054.42969,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1855.87305, 75.09180, 1054.42969,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1856.99927, 75.15332, 1053.94971,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1870.15002, 75.15332, 1053.94971,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1866.30945, 75.15332, 1053.94971,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1867.48999, 75.14046, 1054.42969,   90.00000, 180.00000, 359.99451);
	CreateDynamicObject(2774, -1869.00000, 75.13965, 1054.42969,   90.00000, 179.99451, 359.98901);
	CreateDynamicObject(2774, -1876.83337, 74.83755, 1053.94971,   90.00000, 180.00000, 359.99451);
	CreateDynamicObject(2774, -1880.57935, 74.98946, 1053.94971,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1879.48926, 74.98633, 1054.42065,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1846.56958, 75.06278, 1053.94971,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1842.72620, 75.07282, 1053.94971,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1843.88464, 75.11295, 1054.42969,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1845.38379, 75.11230, 1054.42969,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2774, -1873.48950, 66.17168, 1066.26965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, -1861.73474, 65.83524, 1066.26965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, -1849.98438, 66.04868, 1066.26965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, -1849.83569, 55.54894, 1066.26965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, -1861.83496, 55.37793, 1066.26965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, -1873.33850, 55.46418, 1066.26965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, -1881.11462, 61.93391, 1054.93665,   90.00000, 0.00000, 18.00000);
	CreateDynamicObject(1575, -1880.71887, 61.27405, 1054.74146,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1578, -1879.93921, 60.90861, 1054.79150,   0.00000, 0.00000, 324.00000);
	CreateDynamicObject(2060, -1878.80469, 60.99805, 1054.89905,   0.00000, 0.00000, 11.99707);
	CreateDynamicObject(2060, -1877.33044, 60.95769, 1054.89905,   0.00000, 0.00000, 349.99707);
	CreateDynamicObject(1575, -1876.60889, 61.59282, 1054.74146,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(1577, -1876.36340, 62.39925, 1054.78113,   0.00000, 0.00000, 22.00000);
	CreateDynamicObject(2060, -1878.07971, 60.98497, 1055.10901,   0.00000, 0.00000, 25.99695);
	CreateDynamicObject(2060, -1866.58081, 61.35898, 1054.89905,   0.00000, 0.00000, 11.99707);
	CreateDynamicObject(1577, -1869.44092, 61.01148, 1054.81128,   20.00000, 32.00000, 21.99463);
	CreateDynamicObject(1575, -1869.72241, 60.97343, 1054.74146,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, -1868.81116, 61.09062, 1054.93665,   90.00000, 0.00000, 55.99561);
	CreateDynamicObject(2060, -1870.57153, 61.60455, 1054.89905,   0.00000, 0.00000, 307.99695);
	CreateDynamicObject(2060, -1865.82178, 62.10906, 1054.89905,   0.00000, 0.00000, 255.99622);
	CreateDynamicObject(1577, -1868.23145, 60.81954, 1054.78113,   0.00000, 0.00000, 21.99463);
	CreateDynamicObject(2694, -1867.43640, 61.04297, 1054.79761,   0.00000, 0.00000, 348.00000);
	CreateDynamicObject(2694, -1870.60400, 62.59955, 1054.79761,   0.00000, 0.00000, 355.99744);
	CreateDynamicObject(2855, -1857.71484, 62.21533, 1054.83911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2028, -1856.48547, 60.79243, 1055.02246,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3070, -1854.84717, 60.65189, 1054.18909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1242, -1853.75659, 61.07729, 1055.00647,   0.00000, 0.00000, 294.00000);
	CreateDynamicObject(1579, -1853.11523, 61.09213, 1054.79150,   0.00000, 0.00000, 36.00000);
	CreateDynamicObject(1650, -1855.30811, 61.14089, 1055.10059,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, -1852.80444, 62.09721, 1054.84570,   0.00000, 0.00000, 266.00000);
	CreateDynamicObject(2057, -1855.68347, 60.80422, 1055.00952,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, -1854.50586, 60.86756, 1054.84570,   0.00000, 0.00000, 352.00000);
	CreateDynamicObject(2060, -1847.00391, 61.85345, 1054.84570,   0.00000, 0.00000, 295.99646);
	CreateDynamicObject(2060, -1846.25488, 61.35117, 1054.84570,   0.00000, 0.00000, 343.99365);
	CreateDynamicObject(2060, -1845.25586, 60.84875, 1054.84570,   0.00000, 0.00000, 1.99292);
	CreateDynamicObject(2060, -1844.27087, 61.08041, 1054.84570,   0.00000, 0.00000, 345.98853);
	CreateDynamicObject(2694, -1843.35645, 61.04874, 1054.79761,   0.00000, 0.00000, 355.99548);
	CreateDynamicObject(2694, -1846.08813, 60.88633, 1054.79761,   0.00000, 0.00000, 255.99548);
	CreateDynamicObject(2060, -1842.36963, 61.75051, 1054.84570,   0.00000, 0.00000, 53.98694);
	CreateDynamicObject(2694, -1842.88989, 61.22753, 1054.79761,   0.00000, 0.00000, 259.99548);
	CreateDynamicObject(2774, -1877.98926, 74.98166, 1054.42065,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(1843, -1827.97729, 65.11327, 1054.18909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1843, -1831.97620, 65.10898, 1054.18909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1885, -1829.98047, 65.10531, 1054.18909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1885, -1829.98047, 65.10449, 1054.43909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1885, -1829.98047, 65.10449, 1054.68909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1984, -1832.54504, 63.24364, 1054.18909,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2362, -1832.17969, 63.32153, 1055.13525,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2443, -1834.52588, 65.46513, 1054.18909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2698, -1827.17432, 56.79929, 1055.13428,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2967, -1834.12781, 63.05489, 1055.13525,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2967, -1834.00134, 63.05997, 1055.13525,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2967, -1833.85083, 63.06591, 1055.13525,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2967, -1833.70044, 63.07177, 1055.13525,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1842, -1827.51831, 62.15694, 1054.65637,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1884, -1831.36719, 59.99618, 1054.18909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2385, -1826.51563, 59.60868, 1054.18909,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2714, -1835.27478, 59.50050, 1056.20203,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2729, -1835.45264, 60.80335, 1057.63281,   0.00000, 0.00000, 260.00000);
	CreateDynamicObject(2730, -1835.57739, 59.61296, 1057.65198,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2731, -1835.49854, 58.42657, 1057.66077,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(986, -1830.72778, 65.81305, 1054.00879,   0.00000, 0.00000, 359.98352);

	// INTERIOR BANCO:
	new Bankito = CreateObject(5720, 982.34, -1169.66, 32.82,   0.00, 0.00, 0.00);
	SetObjectMaterial(Bankito, 2, 3942, "bistro", "ahoodfence2", 0);
	SetObjectMaterial(Bankito, 4, 16016, "des_n", "ranchwall1", 0);
	SetObjectMaterial(Bankito, 5, 16005, "des_stownmain2", "des_redslats", 0);
	SetObjectMaterial(Bankito, 6, 964, "cj_crate_will", "CJ_FLIGHT_CASE", 0);
	SetObjectMaterial(Bankito, 7, 16021, "des_geyser", "shingles1", 0);
	SetObjectMaterial(Bankito, 8, 16005, "des_stownmain2", "sanruf", 0);
	SetObjectMaterial(Bankito, 9, 6295, "lawland2", "lightglass", 0);
	CreateObject(19376, 981.91815, -1170.90808, 24.08724,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 978.84003, -1167.62000, 24.08035,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 968.68475, -1167.38965, 24.11000,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 986.15997, -1167.60999, 24.08000,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 986.09998, -1170.25000, 24.06000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 972.07001, -1162.51001, 25.72000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 978.71997, -1162.90002, 25.78000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 990.76001, -1163.68994, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 990.75000, -1166.89001, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 990.75000, -1170.08997, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 990.75000, -1172.70996, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 834.34998, -998.25000, 25.29000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 970.40002, -1163.89001, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 970.40961, -1167.03894, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 970.28998, -1170.30005, 27.79000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 970.28003, -1173.47998, 27.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 971.79999, -1175.09998, 29.33000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 975.01001, -1175.08997, 29.17000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 978.21997, -1175.09998, 25.72000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 981.39001, -1175.07996, 25.72000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 984.57001, -1175.06995, 25.72000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 987.69000, -1175.03003, 25.72000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 990.23999, -1175.04004, 25.72000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 990.73999, -1174.59998, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 976.18451, -1167.34595, 27.38000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 985.71997, -1167.64001, 27.40000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 985.58002, -1170.30005, 27.42000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 975.40002, -1170.27002, 27.44000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 991.94000, -1162.70996, 25.70000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 984.42999, -1162.88000, 25.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 985.71997, -1162.66003, 25.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 971.90808, -1168.55334, 25.73000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 975.03998, -1168.56995, 25.72000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 976.64001, -1170.09998, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 976.65002, -1173.83997, 25.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 976.63995, -1170.68152, 25.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2946, 983.40997, -1162.76001, 24.08000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2946, 980.25000, -1162.73999, 24.08000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19437, 980.90002, -1162.87000, 25.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19437, 982.47998, -1162.92004, 25.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19437, 982.85999, -1162.89001, 25.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2946, 980.25000, -1162.95996, 24.08000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2946, 983.40997, -1162.97998, 24.08000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19437, 982.47998, -1162.87000, 25.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19437, 982.84003, -1162.84998, 25.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 987.63000, -1171.89001, 24.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 984.23999, -1171.92004, 24.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 984.20001, -1176.35999, 24.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 986.17999, -1172.01001, 26.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 990.53998, -1172.01001, 26.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 986.15002, -1172.01001, 26.52000,   0.00000, 0.00000, 900.00000);
	CreateDynamicObject(1649, 990.53998, -1172.01001, 26.52000,   0.00000, 0.00000, 900.00000);
	CreateDynamicObject(1808, 983.84998, -1163.16553, 24.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 979.85913, -1163.16553, 24.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1892, 981.32001, -1163.52002, 24.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2191, 990.19000, -1174.43005, 24.13000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2123, 986.15997, -1173.33997, 24.83000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2123, 988.57001, -1173.37000, 24.83000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2284, 990.19000, -1169.39001, 25.76000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2266, 982.22998, -1174.48999, 25.65000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2267, 979.96997, -1174.96997, 25.83000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1736, 977.03998, -1173.91003, 27.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1736, 981.81000, -1163.29004, 26.93000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 990.64001, -1165.75000, 26.17000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1616, 990.58002, -1163.20996, 27.14000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1616, 977.15002, -1169.78003, 27.14000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2961, 979.02002, -1163.00000, 25.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2961, 986.20001, -1172.41003, 24.68000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2961, 988.35999, -1172.39001, 24.68000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 986.33002, -1175.06006, 26.13000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1828, 981.73999, -1166.75000, 24.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18643, 992.37000, -1184.85999, 12.71000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18643, 992.37000, -1155.45996, 12.71000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18643, 988.91998, -1155.51001, 13.32000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18643, 988.91998, -1184.83997, 13.32000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18643, 982.40002, -1155.55005, 13.74000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18643, 982.40002, -1184.78003, 13.74000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 990.04999, -1163.09998, 24.17000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1726, 990.04999, -1166.84998, 24.17000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1822, 989.57001, -1166.52002, 24.14000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 990.07001, -1165.97998, 24.65000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 988.26001, -1162.69995, 25.74000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 975.86688, -1162.59875, 25.78000,   0.00000, 0.00000, 359.79999);
	CreateDynamicObject(19375, 985.71997, -1167.64001, 27.70000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 975.62000, -1167.64001, 27.68000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 985.71997, -1167.64001, 27.88000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 988.34003, -1162.66003, 26.06000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 975.82001, -1162.43005, 26.06000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19375, 975.62000, -1167.64001, 27.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 988.34003, -1162.66003, 22.92000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 975.82001, -1162.43005, 22.83000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19357, 995.79999, -1159.25000, 23.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 976.68573, -1174.57483, 24.08000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 972.80402, -1167.52673, 24.17000,   0.00000, 0.00000, -214.73996);
	CreateDynamicObject(1726, 972.87555, -1163.80298, 24.17000,   0.00000, 0.00000, -361.07996);
	CreateDynamicObject(2283, 973.37872, -1168.43579, 26.17708,   0.00000, 0.00000, -180.00000);

	// Parte trasera de ammunation
	CreateDynamicObject(850, 1425.00000, -1337.30005, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(850, 1422.08960, -1306.65503, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 1424.69995, -1315.00000, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3119, 1425.19995, -1341.00000, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3035, 1436.59998, -1323.69995, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(853, 1433.30005, -1324.50000, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(924, 1426.80005, -1323.40002, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(851, 1424.30005, -1355.40002, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3119, 1419.40002, -1354.80005, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1439, 1406.50000, -1364.09998, 7.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1358, 1406.59998, -1369.69995, 8.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3594, 1436.09998, -1333.59998, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18451, 1424.72021, -1301.10132, 12.85700,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(851, 1413.80005, -1321.80005, 8.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12954, 1406.90002, -1306.30005, 8.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(910, 1409.69995, -1299.30005, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(952, 1406.19995, -1299.09998, 13.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2837, 1422.50000, -1355.69995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1358, 1442.19995, -1333.30005, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1424, 1409.69995, -1370.09998, 8.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1422, 1413.30005, -1370.09998, 8.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1335, 1406.50000, -1311.00000, 8.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(923, 1418.40002, -1351.90002, 13.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(939, 1425.00000, -1307.80005, 15.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(853, 1412.40002, -1299.69995, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3005, 1429.19995, -1323.80005, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 1430.40002, -1333.59998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1635, 1426.59998, -1337.44995, 17.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1299, 1425.40002, -1348.69995, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1357, 1426.00000, -1352.00000, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 1406.80005, -1360.30005, 8.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1441, 1422.80005, -1347.59998, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1450, 1426.59998, -1350.19995, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1264, 1424.19995, -1348.59998, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(926, 1426.30005, -1353.40002, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(927, 1403.30005, -1300.69995, 14.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1353, 1404.00000, -1301.30005, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2976, 1425.40002, -1350.19995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 1426.09998, -1355.19995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3787, 1424.80005, -1345.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1654, 1423.19995, -1345.50000, 13.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2060, 1424.50000, -1349.90002, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1424.50000, -1350.50000, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1424.50000, -1351.09998, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1424.40002, -1350.19995, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1424.40002, -1350.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1424.30005, -1350.50000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2064, 1423.80005, -1352.90002, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2061, 1424.40002, -1353.59998, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1419.69995, -1351.90002, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2315, 1422.59998, -1352.00000, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1550, 1422.59998, -1350.59998, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1581, 1422.50000, -1351.40002, 13.10000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1422.80005, -1351.90002, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1422.50000, -1351.90002, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1672, 1422.19995, -1351.90002, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 1422.50000, -1352.30005, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 1419.69995, -1352.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2057, 1419.69995, -1351.59998, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2061, 1419.69995, -1350.19995, 13.40000,   0.00000, 0.00000, 0.00000);

	// MERCADO NEGRO - BLACKMARKET:
	CreateDynamicObject(2567, 1294.81750, -978.98456, 33.62291,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18092, 1296.00244, -990.46082, 32.21000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2422, 1296.52600, -990.35791, 32.71052,   0.00000, 0.00000, 160.78455);
	CreateDynamicObject(3461, 1292.31812, -994.84705, 33.27032,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3267, 1286.42676, -985.30664, 31.15000,   0.00000, 0.00000, 330.22156);
	CreateDynamicObject(2044, 1295.48877, -990.27124, 32.73805,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2045, 1293.91699, -990.37402, 32.75000,   0.00000, 0.00000, 354.03992);
	CreateDynamicObject(2036, 1294.88965, -990.03064, 32.74444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1654, 1293.51074, -990.80664, 32.91500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1298.07629, -992.53210, 32.08865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(939, 1295.61182, -984.74457, 34.13854,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2062, 1286.66577, -980.18433, 32.26395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2062, 1286.01990, -979.52478, 32.26395,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 1291.07080, -978.88385, 32.31023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1429, 1291.29919, -979.00555, 33.17756,   0.00000, 0.00000, 342.13513);
	CreateDynamicObject(2619, 1297.24609, -992.90002, 34.41532,   0.00000, 0.00000, 272.66064);
	CreateDynamicObject(8229, 1290.59998, -966.26642, 35.60000,   0.00000, 0.00000, 181.35132);
	CreateDynamicObject(16637, 1286.84692, -1005.00000, 32.87000,   0.00000, 70.00000, 90.00000);
	CreateDynamicObject(1499, 1286.50891, -1006.00000, 29.84203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1289.51453, -1006.00000, 29.84203,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(16637, 1290.50000, -1005.00000, 32.87000,   0.00000, 69.99939, 90.00000);
	CreateDynamicObject(16637, 1284.65002, -1005.97998, 31.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16637, 1291.40002, -1005.97998, 31.00000,   0.00000, 0.00000, 90.00000);

	// Estación Market Station:
	CreateDynamicObject(970, 825.40002, -1337.38000, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 821.20001, -1337.38000, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 809.59998, -1337.38000, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 813.79999, -1337.38000, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 807.47998, -1339.50000, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 807.47998, -1343.69995, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 807.47998, -1354.69995, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 807.47998, -1350.50000, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 809.54999, -1356.91003, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 827.00000, -1346.59998, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 812.00000, -1356.50000, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 827.09998, -1351.80005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 817.29999, -1356.50000, 13.15000,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1216, 809.72998, -1338.00000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 811.53003, -1338.00000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 813.29999, -1338.00000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 835.00000, -1334.00000, 13.75000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1209, 820.09998, -1356.59998, 12.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1776, 821.40002, -1356.69995, 13.60000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1359, 814.59003, -1356.46997, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 827.00000, -1349.19995, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(962, 841.20001, -1340.40002, 7.14000,   90.00000, 0.00000, 295.00000);
	CreateDynamicObject(962, 842.40002, -1343.00000, 7.14000,   90.00000, 0.00000, 294.99899);
	CreateDynamicObject(962, 827.50800, -1354.66602, 13.60000,   90.00000, 0.00000, 270.00000);
	CreateDynamicObject(962, 824.11902, -1356.88306, 13.60100,   90.00000, 0.00000, 180.00000);

	// Estacionamiento Idelwood, detrás de la pizzeria. HOTEL/MOTEL:
	CreateDynamicObject(1215, 2178.82324, -1815.39954, 13.14550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2150.78125, -1799.54663, 13.16584,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2159.12988, -1791.02686, 12.45820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 2165.97754, -1791.03333, 12.46144,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 2170.18359, -1791.02856, 12.46485,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 2155.71289, -1794.54248, 12.41324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2160.16919, -1794.50330, 12.46514,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2164.65503, -1794.51892, 12.46761,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2169.07080, -1794.53577, 12.46970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2173.55420, -1794.61511, 12.46513,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2183.35400, -1813.85205, 15.71276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2177.07910, -1813.87268, 15.70495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2152.32837, -1801.69861, 15.71384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 2150.97754, -1796.05579, 13.22760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 2158.31079, -1811.30969, 12.91891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 2187.64502, -1811.32507, 12.94391,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 2172.40869, -1811.35645, 12.91891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 2186.70532, -1806.09705, 12.47630,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1251, 2190.13037, -1809.49146, 12.43237,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2186.68018, -1810.63123, 12.48070,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1251, 2174.72876, -1791.03931, 12.46163,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 2178.08789, -1794.48535, 12.46500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(966, 2188.56274, -1779.08276, 12.37319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 2188.53418, -1779.07996, 13.18240,   0.00000, -25.00000, 0.00000);
	CreateDynamicObject(983, 2155.63135, -1794.24829, 13.21205,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2158.93286, -1791.04968, 13.24612,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 2168.53955, -1791.05176, 13.20590,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 2174.94092, -1791.04871, 13.24956,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 2178.14551, -1794.22131, 13.19342,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, 2181.78540, -1814.88257, 13.26156,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1215, 2167.81592, -1811.13232, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2163.60767, -1811.10632, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2165.71802, -1811.17419, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2184.55664, -1811.17212, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2155.32178, -1810.96912, 13.11424,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2155.50415, -1808.83691, 13.11511,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2155.44238, -1806.85986, 13.11312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2155.42798, -1804.88428, 13.11160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2155.47559, -1802.83862, 13.10883,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 2152.91943, -1801.39563, 13.11523,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3850, 2176.86035, -1813.65063, 13.09278,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(983, 2192.04199, -1778.77722, 13.23664,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 2176.46167, -1778.84412, 13.23664,   0.00000, 0.00000, 270.00000);

	// Entorno en Palomino:
	CreateDynamicObject(1215, 2215.10010, -9.70000, 25.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2201.19995, -3.00000, 24.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2189.39990, 1.50000, 22.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2178.30005, 4.40000, 19.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2169.60010, 4.10000, 17.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2159.39990, 0.00000, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2152.79980, -7.70020, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2149.69995, -16.80000, 11.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2149.80005, -25.60000, 9.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2151.30005, -34.80000, 8.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2153.19995, -44.10000, 7.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2155.10010, -52.00000, 6.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16364, 1963.09998, -247.70000, 1.80000,   0.00000, 359.00000, 272.00000);
	CreateDynamicObject(3660, 1958.69995, -276.79999, 3.65000,   0.00000, 1.00000, 94.00000);
	CreateDynamicObject(1597, 2343.69995, -43.10000, 28.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 2343.69995, -13.50000, 28.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(886, 2164.60010, -105.20000, 1.80000,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1280, 2162.89990, -105.70000, 2.15000,   0.00000, 0.00000, 122.00000);
	CreateDynamicObject(1597, 2343.78003, 105.80000, 28.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 2343.69995, 77.60000, 28.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 2329.69995, -28.50000, 28.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 2358.00000, -28.50000, 28.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 2329.10010, 91.50000, 28.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 2358.69995, 91.50000, 28.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 2303.60010, 2.10000, 26.14000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1234, 2303.69995, 2.90000, 26.98000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1367, 2284.60010, -47.60000, 26.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1258, 2284.60010, -48.50000, 26.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1359, 2286.00000, -53.20000, 26.20000,   0.00000, 0.00000, 6.00000);
	CreateDynamicObject(1344, 2332.69995, 10.00000, 26.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 2334.30005, 65.60000, 25.90000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 2334.60010, -79.80000, 25.90000,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1228, 2214.39990, 84.70000, 25.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1228, 2214.39990, 88.60000, 25.80000,   0.00000, 0.00000, 0.00000);

	// ((Embarcadero delante del Faro.))
	CreateDynamicObject(11495, 124.34350, -1835.81824, 0.44650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11495, 136.19760, -1856.41553, 1.40570,   -5.00000, 0.00000, 90.00000);
	CreateDynamicObject(11495, 136.19389, -1858.17725, 1.40570,   5.00000, 0.00000, -90.00000);
	CreateDynamicObject(11495, 124.35620, -1857.82166, 0.45450,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11495, 124.35730, -1879.78455, 0.44650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19429, 148.02409, -1857.29956, 2.83940,   -35.00000, 90.00000, -90.00000);
	CreateDynamicObject(19429, 146.51961, -1857.29395, 2.81540,   -35.00000, 90.00000, 90.00000);
	CreateDynamicObject(1461, 147.39999, -1857.32153, 4.16110,   0.00000, 0.00000, 90.00000);

	// ((Embarcadero delante de LCN - Isla))
	CreateDynamicObject(4857, 848.00000, -2017.90002, 14.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4857, 826.29999, -2016.69995, 14.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12814, 835.90002, -2080.39990, 0.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6976, 853.50000, -2068.69995, 3.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(982, 848.09998, -2065.50000, 1.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 824.40002, -2065.50000, 1.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(996, 811.79999, -2072.89990, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(996, 811.79999, -2080.89990, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(996, 811.59998, -2094.69995, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12814, 835.90002, -2051.30005, 0.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6976, 854.40002, -2041.09998, 3.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1425, 852.20001, -2057.60010, 12.70000,   356.00000, 1.00000, 270.00000);
	CreateDynamicObject(12814, 835.79999, -2023.00000, 0.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12814, 835.70001, -1994.69995, 0.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 860.70001, -2062.30005, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 860.79999, -2045.50000, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 860.70001, -2039.50000, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 860.70001, -2035.30005, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 860.79999, -2013.00000, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 860.70001, -2007.00000, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 860.70001, -2003.00000, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 860.70001, -1998.80005, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 847.40002, -1979.50000, 1.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 833.40002, -1979.69995, 1.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 824.09998, -1979.80005, 1.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 810.79999, -2007.30005, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 810.79999, -2013.80005, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 810.90002, -2029.59998, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 810.90002, -2035.90002, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 810.90002, -2042.19995, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 811.09998, -2048.69995, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 811.00000, -2062.50000, 1.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 812.00000, -2095.00000, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 824.50000, -2095.00000, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 831.29999, -2094.89990, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 838.09998, -2094.80005, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 853.09998, -2094.80005, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 860.40002, -2094.19995, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(996, 860.50000, -2086.39990, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(996, 860.50000, -2071.10010, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 819.09998, -2094.39990, 1.60000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1461, 818.40002, -2094.30005, 1.60000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1461, 824.20001, -2094.30005, 1.60000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1461, 825.20001, -2094.39990, 1.60000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1461, 845.29999, -2094.10010, 1.60000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1461, 844.79999, -2094.10010, 1.60000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1461, 852.79999, -2094.00000, 1.60000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1461, 853.50000, -2094.10010, 1.60000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1461, 859.50000, -2079.19995, 1.60000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1461, 859.70001, -2071.60010, 1.60000,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(1461, 860.00000, -2059.60010, 1.60000,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(1461, 860.20001, -2048.30005, 1.60000,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(1461, 860.00000, -2032.30005, 1.60000,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(1461, 860.00000, -2016.00000, 1.60000,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(1461, 860.00000, -1995.69995, 1.60000,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(1461, 860.20001, -1980.19995, 1.60000,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(1461, 811.70001, -2004.19995, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.29999, -2005.19995, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.40002, -2006.40002, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.59998, -2007.90002, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.20001, -2016.50000, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.70001, -2026.80005, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.70001, -2051.19995, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.79999, -2059.19995, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.90002, -2081.50000, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1461, 811.79999, -2087.50000, 1.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18233, 846.50000, -2029.09998, 11.90000,   0.00000, 0.00000, 309.00000);
	CreateDynamicObject(14582, 835.70001, -2082.60010, 4.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 823.59998, -1994.40002, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 823.00000, -1981.69995, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 824.70001, -1989.00000, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 841.59998, -1998.40002, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 841.20001, -1993.50000, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 840.59998, -1988.80005, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 840.90002, -1983.90002, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 830.29999, -1983.50000, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 830.59998, -1988.80005, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 830.90002, -1994.09998, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 831.29999, -1998.90002, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 831.29999, -2003.59998, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 841.29999, -2003.80005, 11.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 847.50000, -2004.00000, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 847.20001, -1996.30005, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 824.79999, -2002.90002, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 824.70001, -1998.00000, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 850.70001, -2086.80005, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 849.79999, -2074.89990, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 822.29999, -2074.39990, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 822.20001, -2086.69995, 1.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 832.43359, -2090.66797, -9.89552,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(280, 812.79999, -2092.00000, 1.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 813.20001, -2079.69995, 1.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 813.40002, -2075.50000, 1.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 813.40002, -2070.19995, 1.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 859.29999, -2081.30005, 1.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 858.90002, -2085.30005, 1.20000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1280, 858.50000, -2090.10010, 1.20000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1280, 855.59998, -2093.30005, 1.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 841.40002, -2093.80005, 1.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 835.90002, -2094.00000, 1.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 829.29999, -2093.69995, 1.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 815.70001, -2093.60010, 1.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8551, 840.50000, -1794.90002, 17.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1445, 842.29999, -1794.80005, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1445, 838.50000, -1794.80005, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8551, 821.59998, -1795.19995, 17.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1445, 823.79999, -1794.90002, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1445, 819.40002, -1795.00000, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 850.79999, -1948.40002, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 846.79999, -1948.40002, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 843.00000, -1948.40002, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 830.79999, -1948.40002, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 826.79999, -1948.40002, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 823.79999, -1948.40002, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 821.50000, -1948.40002, 12.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1445, 842.20001, -1947.09998, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1445, 830.40002, -1947.19995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 820.00000, -2066.80005, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 846.00000, -2066.60010, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 826.79999, -2066.80005, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 838.09998, -2066.60010, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 836.50000, -1848.00000, 11.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 836.79999, -1877.50000, 11.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 836.70001, -1916.00000, 11.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3504, 828.00000, -2067.10010, 2.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3504, 826.50000, -2067.19995, 2.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3504, 825.00000, -2067.30005, 2.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3504, 832.00000, -2067.19995, 2.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3504, 833.50000, -2067.30005, 2.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5837, 825.70001, -2059.30005, 13.60000,   0.00000, 0.00000, 180.00000);

	// PEAJE (LS dirección SF):
	CreateDynamicObject(7033, 65.63000, -1533.56006, 8.27000,   0.00000, 0.00000, 81.96000);
	CreateDynamicObject(7033, 40.16000, -1530.50000, 8.27000,   0.00000, 0.00000, 81.96000);
	CreateDynamicObject(10829, 38.40000, -1529.05005, 4.36000,   0.00000, 0.00000, -97.02000);
	CreateDynamicObject(10829, 67.40000, -1534.84998, 4.36000,   0.00000, 0.00000, 83.00000);
	CreateDynamicObject(1237, 82.34000, -1535.66003, 4.26000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 37.73000, -1525.54004, 4.19000,   0.00000, 0.00000, -95.58000);
	CreateDynamicObject(966, 66.33000, -1537.72998, 3.97000,   0.00000, 0.00000, -275.22000);
	CreateDynamicObject(978, 77.57000, -1534.16003, 5.14000,   0.00000, 0.00000, -13.20000);
	CreateDynamicObject(978, 77.30000, -1536.00000, 5.14000,   0.00000, 0.00000, 180.36000);
	CreateDynamicObject(1238, 82.37000, -1535.66003, 5.75000,   0.00000, 0.00000, 5.40000);
	CreateDynamicObject(978, 28.28000, -1529.68994, 4.78000,   1.56000, 3.72000, 163.67999);
	CreateDynamicObject(978, 28.62000, -1527.70996, 4.78000,   1.56000, -3.72000, 356.82001);
	CreateDynamicObject(1237, 23.52000, -1527.85999, 3.64000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1238, 23.52000, -1527.85999, 5.17000,   0.00000, 0.00000, -4.68000);
	CreateDynamicObject(978, 53.07000, -1530.59998, 5.13000,   0.00000, 0.00000, -5.10000);
	CreateDynamicObject(978, 52.74000, -1533.43005, 5.13000,   0.00000, 0.00000, -185.10001);

	// ANTICIPO PEAJE (LS dirección LV):
	CreateDynamicObject(7033, 1647.19995, -34.90000, 40.00000,   0.00000, 0.00000, 24.00000);
	CreateDynamicObject(2921, 1656.80005, -26.30000, 38.70000,   0.00000, 0.00000, 118.00000);
	CreateDynamicObject(2921, 1637.80005, -43.50000, 39.10000,   0.00000, 0.00000, 322.00000);
	CreateDynamicObject(1215, 1653.50000, -43.10000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1663.19995, -71.20000, 35.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1662.50000, -68.50000, 35.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1661.80005, -66.10000, 35.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1661.19995, -64.00000, 35.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1660.40002, -61.50000, 35.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1659.69995, -59.00000, 35.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1658.69995, -56.50000, 35.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1657.69995, -53.80000, 35.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1656.59998, -51.20000, 35.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1655.59998, -48.50000, 35.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1654.40002, -45.70000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1639.50000, -46.10000, 36.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1319, 1661.50000, -75.60000, 35.40000,   0.00000, 0.00000, 196.00000);
	CreateDynamicObject(1319, 1620.80005, 33.30000, 36.50000,   0.00000, 0.00000, 18.00000);
	CreateDynamicObject(1215, 1658.09998, -72.90000, 35.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1657.40002, -70.70000, 35.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1656.09998, -66.10000, 35.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1656.80005, -68.60000, 35.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1655.40002, -63.80000, 35.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1653.80005, -58.90000, 35.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1654.50000, -61.20000, 35.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1652.90002, -56.40000, 35.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1651.90002, -53.80000, 35.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1650.69995, -51.00000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1649.69995, -48.50000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1648.69995, -45.60000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1642.69995, -29.20000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1651.69995, -40.70000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1660.69995, -36.70000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1648.40002, -42.20000, 36.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1640.69995, -26.90000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1639.50000, -24.10000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1638.19995, -21.10000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1636.69995, -17.90000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1635.19995, -14.50000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1633.59998, -10.70000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1631.80005, -6.90000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1630.30005, -3.50000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1628.80005, 0.00000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1627.09998, 3.80000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1635.00000, -0.50000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1631.80005, 6.40000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1633.50000, 3.10000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1639.69995, -11.20000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1636.40002, -3.80000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1638.09998, -7.60000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1641.50000, -15.20000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1643.00000, -18.70000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1645.40002, -24.20000, 36.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1644.40002, -21.80000, 36.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1646.00000, -27.70000, 36.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1633.69995, -33.20000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1654.90002, -23.70000, 36.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1625.59998, 7.40000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1623.59998, 11.90000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1621.69995, 16.00000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1620.09998, 19.80000, 36.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1618.80005, 23.20000, 36.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1617.69995, 25.90000, 36.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1616.19995, 30.00000, 36.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1630.40002, 10.00000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1621.19995, 32.20000, 36.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1622.80005, 28.10000, 36.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1624.19995, 24.70000, 36.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1625.69995, 20.90000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1627.30005, 17.10000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1628.69995, 13.70000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1319, 1664.00000, -73.80000, 35.40000,   0.00000, 0.00000, 18.00000);
	CreateDynamicObject(1319, 1618.19995, 33.40000, 36.50000,   0.00000, 0.00000, 18.00000);
	CreateDynamicObject(1319, 1615.90002, 31.00000, 36.50000,   0.00000, 0.00000, 18.00000);
	CreateDynamicObject(1319, 1658.80005, -75.00000, 35.50000,   0.00000, 0.00000, 196.00000);
	CreateDynamicObject(1238, 1609.69995, 33.40000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1611.59998, 27.90000, 36.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1613.90002, 22.10000, 36.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1624.30005, -2.10000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1617.09998, 14.40000, 36.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1621.00000, 5.30000, 36.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1627.30005, -9.10000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1631.59998, -18.60000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1634.69995, -25.70000, 36.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1639.50000, -36.50000, 35.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1669.80005, -76.50000, 35.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1651.90002, -26.10000, 35.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1669.50000, -75.20000, 34.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1669.19995, -73.90000, 34.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1662.90002, -52.50000, 34.60000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(3578, 1663.30005, -53.40000, 34.60000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(3578, 1656.09998, -38.30000, 34.80000,   0.00000, 0.00000, 24.00000);
	CreateDynamicObject(3578, 1655.80005, -37.60000, 34.80000,   0.00000, 0.00000, 23.99000);
	CreateDynamicObject(3578, 1610.90002, 29.60000, 35.30000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(3578, 1611.30005, 28.70000, 35.30000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(3578, 1621.19995, 4.60000, 35.10000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(3578, 1621.59998, 3.70000, 35.10000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(3578, 1638.19995, -31.70000, 34.90000,   0.00000, 0.00000, 24.00000);
	CreateDynamicObject(3578, 1638.50000, -32.40000, 34.90000,   0.00000, 0.00000, 23.99000);
	CreateDynamicObject(1238, 1655.09998, -33.60000, 35.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 1641.69995, -42.00000, 35.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16061, 1630.30005, 3.20000, 35.70000,   0.00000, 0.00000, 22.00000);

	// SISTEMA DE GARAGES - MEDIADOS y GRANDE.
	// Mapeado para colocar los Garages según su interior.
	CreateObject(4113, 1344.63000, -1553.58997, 10000.30957,   360.00000, 0.00000, 3.00000, 800);
	CreateObject(4113, 1332.79004, -1591.63000, 10000.30957,   360.00000, 0.00000, 3.00000, 800);
	// ((CMD para ir al lugar, /goto)).
	CreateDynamicObject(19449, 1327.76001, -1556.41003, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1331.43005, -1561.26001, 10038.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1341.81006, -1558.06006, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17951, 1346.65002, -1562.69995, 10038.04004,   0.00000, 0.00000, 89.50000);
	CreateDynamicObject(2063, 1342.23999, -1552.01001, 10037.20020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14699, 1333.02002, -1557.42004, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2062, 1342.29004, -1556.52002, 10036.87988,   0.00000, 0.00000, -145.92000);
	CreateDynamicObject(1230, 1350.92004, -1562.33997, 10036.70996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1346.68005, -1544.81995, 10038.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1331.64001, -1551.56006, 10038.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19173, 1344.68005, -1544.91003, 10038.54980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1351.35999, -1558.02002, 10036.33008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(941, 1345.56995, -1545.50000, 10036.82031,   0.00000, 0.00000, 357.13000);
	CreateDynamicObject(2627, 1342.59998, -1561.31995, 10036.32031,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2587, 1349.08997, -1545.00000, 10038.44043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1334.78003, -1556.41003, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1333.02002, -1561.80005, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17951, 1331.28003, -1561.16003, 10038.04004,   0.00000, 0.00000, 89.50000);
	CreateDynamicObject(1569, 1334.72998, -1558.96997, 10036.33008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(941, 1334.00000, -1553.31006, 10036.82031,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1230, 1334.02002, -1554.93994, 10036.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1230, 1333.98999, -1555.78003, 10036.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1230, 1334.01001, -1555.31006, 10037.38965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2062, 1334.18994, -1556.72998, 10036.87988,   0.00000, 0.00000, -145.92000);
	CreateDynamicObject(2063, 1328.19995, -1552.94995, 10037.20020,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2587, 1332.43005, -1551.72998, 10038.44043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1330.84998, -1556.35999, 10039.90039,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19449, 1341.81006, -1548.45996, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1351.44995, -1558.06006, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1351.44995, -1548.45996, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1346.68005, -1562.77002, 10038.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2063, 1342.23999, -1554.64001, 10037.20020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2062, 1342.31006, -1557.43994, 10036.87988,   0.00000, 0.00000, -145.92000);
	CreateDynamicObject(2062, 1342.27002, -1556.93994, 10038.03027,   0.00000, 0.00000, -145.92000);
	CreateDynamicObject(941, 1348.96997, -1545.85999, 10036.82031,   0.00000, 0.00000, 338.42001);
	CreateDynamicObject(1230, 1350.15002, -1562.31995, 10036.70996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1230, 1350.93994, -1561.58997, 10036.70996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1348.52002, -1561.64001, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1348.52002, -1559.52002, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1348.52002, -1557.39001, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1348.52002, -1555.26001, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1346.56006, -1558.26001, 10039.90039,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1346.56006, -1548.67004, 10039.90039,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19449, 1324.60999, -1595.75000, 10038.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1334.14001, -1595.72998, 10038.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1336.68005, -1590.98999, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1336.68005, -1581.37000, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1334.14001, -1582.12000, 10038.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1324.55005, -1582.12000, 10038.08008,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1319.96997, -1590.98999, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1319.96997, -1581.37000, 10038.08008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17951, 1324.18005, -1595.68994, 10038.04004,   0.00000, 0.00000, 89.50000);
	CreateDynamicObject(17951, 1332.69995, -1595.67004, 10038.04004,   0.00000, 0.00000, 89.50000);
	CreateDynamicObject(941, 1333.85999, -1582.85999, 10036.82031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 1335.92004, -1584.91003, 10036.82031,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(941, 1331.38000, -1582.85999, 10036.82031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(958, 1336.01001, -1589.20996, 10037.16016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(959, 1336.01001, -1589.20996, 10037.16016,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3761, 1327.03003, -1583.06006, 10037.54980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2062, 1323.12000, -1582.68994, 10036.91992,   0.00000, 0.00000, -145.92000);
	CreateDynamicObject(2063, 1336.31006, -1593.16003, 10037.20020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2062, 1322.18005, -1582.56006, 10036.91992,   0.00000, 0.00000, -145.92000);
	CreateDynamicObject(2062, 1322.52002, -1583.29004, 10036.91992,   0.00000, 0.00000, -145.92000);
	CreateDynamicObject(19379, 1325.18005, -1586.89001, 10039.90039,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1335.59998, -1586.89001, 10039.90039,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1335.59998, -1596.46997, 10039.90039,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1325.18005, -1596.46997, 10039.90039,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14699, 1334.62000, -1595.65002, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1334.62000, -1593.52002, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1334.62000, -1591.38000, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1326.01001, -1591.38000, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1326.01001, -1591.38000, 10038.16992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1326.01001, -1595.65002, 10038.16992,   0.00000, 0.00000, 0.00000);

	// Garage Custom. (Legendary Motors).
	CreateObject(4199, 2487.69385, -2565.10840, 2497.95190,   0.00000, 0.00000, 0.00000, 800);
	CreateDynamicObject(19379, 2486.44189, -2560.48804, 2500.00000,   0.00000, 90.00000, 89.99400);
	CreateDynamicObject(19453, 2486.44507, -2555.35010, 2500.01611,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19458, 2486.44312, -2555.34912, 2503.51294,   0.00000, 179.99400, 90.00000);
	CreateDynamicObject(19458, 2481.92505, -2560.11792, 2503.51294,   0.00000, 179.99400, 179.99400);
	CreateDynamicObject(19453, 2491.32690, -2560.04199, 2500.01611,   0.00000, 179.99400, 179.99400);
	CreateDynamicObject(19458, 2481.92505, -2569.75098, 2503.51294,   0.00000, 179.99400, 179.99400);
	CreateDynamicObject(19379, 2486.44312, -2570.98804, 2500.00000,   0.00000, 90.00000, 89.99900);
	CreateDynamicObject(19379, 2496.07495, -2569.53198, 2500.00000,   0.00000, 90.00000, 89.99900);
	CreateDynamicObject(19458, 2496.05591, -2564.77197, 2503.51294,   0.00000, 179.99400, 89.99400);
	CreateDynamicObject(19453, 2485.99292, -2569.20093, 2500.01611,   0.00000, 179.99400, 89.99400);
	CreateDynamicObject(19458, 2495.62695, -2569.20190, 2503.51294,   0.00000, 179.99400, 89.99400);
	CreateDynamicObject(19453, 2495.99097, -2567.52100, 2500.01611,   0.00000, 179.99400, 179.99400);
	CreateDynamicObject(19458, 2491.32690, -2560.04199, 2503.51294,   0.00000, 179.99400, 179.99400);
	CreateDynamicObject(19453, 2496.05591, -2564.77197, 2500.01611,   0.00000, 179.99400, 89.99400);
	CreateDynamicObject(19458, 2495.99097, -2567.52100, 2503.51294,   0.00000, 179.99400, 179.99400);
	CreateDynamicObject(19458, 2485.99292, -2569.20093, 2503.51294,   0.00000, 179.99400, 89.99400);
	CreateDynamicObject(19453, 2495.62695, -2569.20190, 2500.01611,   0.00000, 179.99400, 89.99400);
	CreateDynamicObject(19453, 2481.92407, -2569.75098, 2500.01611,   0.00000, 179.99400, 179.99400);
	CreateDynamicObject(19453, 2481.92505, -2560.11792, 2500.01611,   0.00000, 179.99400, 179.99400);
	CreateDynamicObject(1704, 2495.37207, -2566.94995, 2500.08496,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2161, 2488.83594, -2569.11499, 2502.24512,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2162, 2485.30908, -2569.11401, 2502.31201,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19380, 2486.44312, -2560.48804, 2504.58008,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19380, 2486.44189, -2570.98706, 2504.58008,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19380, 2496.07495, -2569.24097, 2504.58008,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3354, 2485.76099, -2555.40601, 2501.38403,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2484.95508, -2553.73706, 2502.66602,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(19369, 2486.57202, -2553.72192, 2502.66602,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(19461, 2488.26392, -2553.73706, 2497.93701,   90.00000, 180.00000, 180.00000);
	CreateDynamicObject(19461, 2483.26099, -2553.73706, 2497.93701,   90.00000, 179.99400, 179.99400);
	CreateDynamicObject(1506, 2488.34302, -2555.41895, 2500.08105,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 2489.93994, -2553.75708, 2497.93701,   90.00000, 179.99400, 179.99400);
	CreateDynamicObject(19442, 2489.13989, -2553.73608, 2502.66602,   0.00000, 90.00000, 269.98901);
	CreateDynamicObject(1506, 2495.91992, -2565.00293, 2500.08105,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19461, 2497.60303, -2566.59912, 2497.93701,   90.00000, 180.00500, 89.98300);
	CreateDynamicObject(19461, 2497.60303, -2564.94800, 2497.93701,   90.00000, 180.00500, 89.98300);
	CreateDynamicObject(19442, 2497.61499, -2565.76709, 2502.66602,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(14782, 2482.35791, -2561.16797, 2501.10205,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1078, 2491.08691, -2564.33691, 2500.97095,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1078, 2491.08691, -2563.27393, 2500.97095,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1078, 2491.08691, -2561.06689, 2500.97095,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1078, 2491.08691, -2562.15601, 2500.97095,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(19319, 2491.23999, -2561.75488, 2502.72510,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19318, 2491.23999, -2562.59204, 2502.79199,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19317, 2491.22412, -2563.36011, 2502.77905,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(927, 2495.85107, -2567.54297, 2502.44312,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1428, 2482.42700, -2560.20703, 2501.65405,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 2494.49292, -2568.60791, 2500.08496,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(949, 2495.46802, -2568.63892, 2500.72095,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(936, 2486.86401, -2568.53198, 2500.56104,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(937, 2484.95508, -2568.55200, 2500.56104,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(937, 2488.72998, -2568.54810, 2500.56104,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2103, 2484.42896, -2568.51001, 2501.03711,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(2028, 2485.00391, -2568.38501, 2501.12012,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(1791, 2485.46997, -2568.94409, 2501.03711,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(1738, 2483.02002, -2568.87891, 2500.73999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 2490.84692, -2568.87891, 2500.73999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2149, 2489.22900, -2568.67993, 2501.18701,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(2838, 2488.35303, -2568.56201, 2501.03711,   0.00000, 0.00000, 176.00000);
	CreateDynamicObject(2858, 2488.87402, -2568.27808, 2501.03711,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, 2490.94995, -2558.55908, 2500.99512,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19273, 2490.27100, -2555.41602, 2502.00391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18644, 2490.83398, -2557.67212, 2501.78491,   0.00000, 90.00000, 219.99899);
	CreateDynamicObject(18645, 2487.51904, -2568.79102, 2501.17700,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(18641, 2487.18604, -2568.84595, 2501.12305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18641, 2487.06104, -2568.87305, 2501.12305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18641, 2487.11401, -2568.76099, 2501.12305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18644, 2490.80493, -2558.15991, 2501.78491,   0.00000, 90.00000, 219.99500);
	CreateDynamicObject(18644, 2490.77490, -2558.64893, 2501.78491,   0.00000, 90.00000, 219.99500);
	CreateDynamicObject(18644, 2490.76807, -2559.30200, 2501.78491,   0.00000, 90.00000, 219.99500);
	CreateDynamicObject(18645, 2490.95801, -2559.58911, 2501.90503,   0.00000, 0.00000, 141.99500);
	CreateDynamicObject(1723, 2482.54297, -2567.25000, 2500.08496,   0.00000, 0.00000, 89.99400);
	CreateDynamicObject(927, 2490.77393, -2555.52490, 2502.72412,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 2486.57300, -2560.99609, 2504.51807,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 2496.29102, -2565.08105, 2502.89502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1348, 2482.52490, -2556.40210, 2500.78906,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1076, 2491.02100, -2556.32104, 2500.97095,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1076, 2491.02100, -2556.32007, 2502.05908,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1076, 2491.02100, -2556.31909, 2503.15601,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(1115, 2491.24097, -2558.56006, 2502.41406,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1117, 2491.22607, -2558.57690, 2502.21802,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1138, 2490.73804, -2559.85596, 2500.99707,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(1186, 2491.23291, -2557.64697, 2503.26904,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2700, 2486.93799, -2568.84595, 2502.64697,   0.00000, 0.00000, 90.00000);

	// PARADAS DE AUTOBÚS DE LOS SANTOS (CMD: /rutabus):
	// ((Ruta Cercanías)).
	CreateDynamicObject(1257, 2472.39990, -1741.00000, 13.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1229, 2837.69995, -307.10001, 8.20000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1257, 672.70001, -619.20001, 16.60000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1229, 790.79999, -1374.40002, 14.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1257, 1268.50000, -1414.50000, 13.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1257, 2564.60010, 50.10000, 26.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1257, 1420.50000, -1665.40002, 13.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1229, 1811.80005, -1877.00000, 14.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1257, 2001.09998, -1943.59998, 13.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1257, 2010.40002, -1943.59998, 13.80000,   0.00000, 0.00000, 269.99500);
	// ((Ruta Centro)).
	CreateDynamicObject(1257, 2050.44434, -1943.59998, 13.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1257, 2058.82104, -1943.59998, 13.80000,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1229, 2094.90820, -1767.68762, 14.09680,   0.00000, 0.00000, 346.29459);
	CreateDynamicObject(1257, 1919.91919, -1743.84277, 13.78120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1257, 1706.34753, -1721.31604, 13.77150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1229, 1318.34204, -1588.58093, 14.08300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 1279.38708, -1387.62183, 13.64360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1257, 659.10669, -1387.59265, 13.90870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1229, 1007.14093, -1813.78406, 14.75490,   0.00000, 0.00000, 248.88589);
	CreateDynamicObject(1229, 1575.59058, -2200.86206, 14.07330,   0.00000, 0.00000, -90.00000);

	// Interior Limusina.
	CreateDynamicObject(3980, 325.70001, -95.60000, 973.40002,   0.00000, 0.00000, 1.47958);
	CreateDynamicObject(3084, 330.29999, -107.60000, 984.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3084, 330.10001, -104.40000, 984.50000,   0.00000, 0.00000, 0.17599);
	CreateDynamicObject(3084, 330.10001, -106.10000, 986.09998,   89.61386, 180.00000, 180.00000);
	CreateDynamicObject(3084, 334.10001, -106.00000, 985.00000,   0.00000, 0.00000, 88.88129);
	CreateDynamicObject(1649, 326.10001, -104.60000, 986.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 330.29999, -104.60000, 986.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 332.19922, -104.59961, 986.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 325.70001, -107.50000, 986.20001,   0.00000, 0.00000, 180.10187);
	CreateDynamicObject(1649, 329.50000, -107.50000, 986.20001,   0.00000, 0.00000, 180.02733);
	CreateDynamicObject(1649, 332.60001, -107.50000, 986.20001,   0.00000, 0.00000, 180.02197);
	CreateDynamicObject(2290, 333.50000, -105.10000, 983.40002,   0.00000, 0.00000, 269.34692);
	CreateDynamicObject(1649, 334.00000, -105.60000, 986.20001,   0.00000, 0.00000, 270.40308);
	CreateDynamicObject(2774, 329.89999, -108.40000, 985.40002,   89.93439, 0.00000, 89.68967);
	CreateDynamicObject(2774, 331.20001, -103.70000, 985.40002,   89.93439, 0.00000, 90.21490);
	CreateDynamicObject(8354, -106.00000, -106.00000, -106.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8356, 319.50000, -58.40000, 983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 329.00000, -104.80000, 983.50000,   0.00000, 0.00000, 1.31860);
	CreateDynamicObject(2290, 326.39999, -104.90000, 983.50000,   0.00000, 0.00000, 1.31836);
	CreateDynamicObject(2413, 328.60001, -107.10000, 983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2413, 327.00000, -107.10000, 983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2445, 326.20001, -107.20000, 983.40002,   0.00000, 0.00000, 273.43878);
	CreateDynamicObject(2445, 329.79999, -107.20000, 983.40002,   0.00000, 0.00000, 88.82654);
	CreateDynamicObject(1533, 323.89999, -104.60000, 983.40002,   0.00000, 0.00000, 0.18781);
	CreateDynamicObject(1533, 325.60001, -107.50000, 983.40002,   0.00000, 0.00000, 181.11768);
	CreateDynamicObject(3084, 324.00000, -106.40000, 985.09998,   0.00000, 0.00000, 91.83856);
	CreateDynamicObject(1509, 326.29999, -106.80000, 984.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1509, 326.20001, -107.20000, 984.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1509, 326.10001, -106.90000, 984.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 329.79999, -107.00000, 984.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 328.89999, -107.20000, 984.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 329.20001, -107.30000, 984.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 327.39999, -107.10000, 984.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1547, 327.60001, -107.30000, 984.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1545, 327.39999, -107.50000, 985.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1541, 328.00000, -106.70000, 984.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 329.39999, -107.00000, 984.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 328.70001, -107.00000, 984.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 329.50000, -107.40000, 984.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 327.60001, -107.30000, 984.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 327.79999, -107.00000, 984.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 324.10001, -106.10000, 984.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 333.00000, -107.40000, 984.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 333.10001, -104.70000, 983.90002,   0.00000, 0.00000, 0.00000);

	// Interior SWAT.
	CreateDynamicObject(1698, -25.00000, 40.00000, 1000.00000,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1698, -26.37000, 38.31000, 999.40002,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(964, -25.68000, 41.77000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -25.68000, 40.89000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -25.68000, 39.99000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -25.68000, 39.11000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -26.92000, 41.77000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -26.92000, 40.89000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -26.92000, 39.99000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -26.92000, 39.11000, 998.67200,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, -28.00000, 40.00000, 1000.00000,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(1698, -28.00000, 40.00000, 1001.29999,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(1698, -25.00000, 40.00000, 1001.27002,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(964, -27.28000, 39.11000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -27.30000, 40.89000, 998.67200,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -27.30000, 41.77000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, -26.37000, 38.31000, 999.98999,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1698, -26.37000, 38.31000, 1001.73999,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1698, -28.77000, 38.31000, 1001.12000,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1698, -24.35000, 38.31000, 1001.12000,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1698, -28.00000, 41.82000, 1000.00000,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(1698, -28.00000, 41.82000, 1001.29999,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(1698, -25.00000, 41.82000, 1000.00000,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1698, -25.00000, 41.82000, 1001.27002,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1698, -25.72000, 39.96000, 1001.56000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1698, -27.02000, 39.96000, 1001.56000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1698, -27.24000, 39.96000, 1001.56000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(964, -25.68000, 42.63000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -25.68000, 43.49000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -26.92000, 42.63000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -26.92000, 43.49000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -27.30000, 42.63000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, -27.30000, 43.49000, 998.67999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, -27.24000, 41.88000, 1001.56000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1698, -25.72000, 41.86000, 1001.56000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1698, -27.02000, 41.86000, 1001.56000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2930, -27.30000, 38.42000, 1001.92999,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(2986, -17.64000, 45.50000, 1000.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, -23.82000, 43.30000, 1001.29999,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(1698, -23.82000, 43.30000, 999.95001,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(1698, -28.92000, 43.32000, 999.95001,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(1497, -24.95000, 43.28000, 999.19000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1698, -28.92000, 43.32000, 1001.31000,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(1698, -26.14000, 43.29000, 998.78003,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(1698, -26.14000, 43.29000, 1002.03998,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(1698, -26.20000, 43.36000, 1000.08002,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(1698, -26.20000, 43.36000, 1001.28003,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(1497, -27.93000, 43.27000, 999.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3969, -1873.03003, 60.19000, 1055.08997,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(3969, -28.24000, 37.77000, 1000.09998,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3969, -1.18000, 37.77000, 1000.09998,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1656, -25.59000, 39.12000, 999.65997,   0.00000, -0.60000, -90.00000);
	CreateDynamicObject(1656, -25.59000, 40.44000, 999.65997,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1656, -25.56000, 41.07000, 999.65997,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1656, -27.44000, 39.16000, 999.63000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, -27.47000, 40.48000, 999.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, -27.52000, 41.31000, 999.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1812, -28.45000, 42.72000, 1003.16998,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(356, -27.71000, 42.81000, 1000.65997,   0.00000, -75.00000, 180.00000);
	CreateDynamicObject(356, -27.70000, 42.71000, 1000.65997,   0.00000, -75.00000, 180.00000);
	CreateDynamicObject(356, -27.70000, 42.59000, 1000.65997,   0.00000, -75.00000, 180.00000);
	CreateDynamicObject(356, -27.70000, 42.49000, 1000.65997,   0.00000, -75.00000, 180.00000);
	CreateDynamicObject(356, -27.70000, 42.39000, 1000.65997,   0.00000, -75.00000, 180.00000);
	CreateDynamicObject(356, -27.71000, 42.93000, 1000.65997,   0.00000, -75.00000, 180.00000);
	CreateDynamicObject(356, -27.71000, 43.07000, 1000.65997,   0.00000, -75.00000, 180.00000);
	CreateDynamicObject(1812, -28.39000, 42.72000, 1003.44000,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1812, -28.49000, 41.72000, 1003.69000,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(353, -27.82000, 41.35000, 1001.15002,   7.00000, 70.00000, 0.00000);
	CreateDynamicObject(353, -27.82000, 41.49000, 1001.15002,   7.00000, 70.00000, 0.00000);
	CreateDynamicObject(353, -27.82000, 41.63000, 1001.15002,   7.00000, 70.00000, 0.00000);
	CreateDynamicObject(353, -27.82000, 41.77000, 1001.15002,   7.00000, 70.00000, 0.00000);
	CreateDynamicObject(353, -27.82000, 41.91000, 1001.15002,   7.00000, 70.00000, 0.00000);
	CreateDynamicObject(353, -27.82000, 42.07000, 1001.15002,   7.00000, 70.00000, 0.00000);
	CreateDynamicObject(1812, -28.40000, 41.74000, 1003.45001,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1812, -28.47000, 40.73000, 1003.78998,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1812, -28.47000, 39.69000, 1003.78998,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(334, -27.92000, 42.80000, 999.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, -25.29000, 39.64000, 1001.57001,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2063, -26.84000, 38.60000, 1001.69000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19142, -27.70000, 40.96000, 1001.12000,   -5.58000, -91.86000, -100.14000);
	CreateDynamicObject(19142, -27.70000, 40.52000, 1001.12000,   -5.58000, -91.86000, -100.14000);
	CreateDynamicObject(19142, -27.70000, 39.90000, 1001.12000,   -5.58000, -91.86000, -100.14000);
	CreateDynamicObject(19142, -27.70000, 39.48000, 1001.12000,   -5.58000, -91.86000, -100.14000);
	CreateDynamicObject(19141, -27.73000, 38.64000, 1001.20001,   -35.76000, -88.62000, 5.22000);
	CreateDynamicObject(19141, -27.43000, 38.64000, 1001.20001,   -35.76000, -88.62000, 5.22000);
	CreateDynamicObject(19141, -27.11000, 38.64000, 1001.20001,   -35.76000, -88.62000, 5.22000);
	CreateDynamicObject(19141, -26.79000, 38.64000, 1001.20001,   -35.76000, -88.62000, 5.22000);
	CreateDynamicObject(19141, -26.45000, 38.64000, 1001.20001,   -35.76000, -88.62000, 5.22000);
	CreateDynamicObject(19141, -26.09000, 38.64000, 1001.20001,   -35.76000, -88.62000, 5.22000);
	CreateDynamicObject(19141, -25.77000, 38.64000, 1001.20001,   -35.76000, -88.62000, 5.22000);
	CreateDynamicObject(18637, -25.12000, 43.00000, 1000.76001,   95.00000, 0.00000, -90.00000);
	CreateDynamicObject(18637, -25.12000, 42.44000, 1000.76001,   95.00000, 0.00000, -90.00000);
	CreateDynamicObject(18637, -25.12000, 41.88000, 1000.76001,   95.00000, 0.00000, -90.00000);
	CreateDynamicObject(2358, -25.32000, 40.50000, 1001.14001,   0.00000, 0.00000, -91.14000);
	CreateDynamicObject(2358, -25.28000, 39.76000, 1001.14001,   0.00000, 0.00000, -99.84000);
	CreateDynamicObject(2358, -25.33000, 39.04000, 1001.14001,   0.00000, 0.00000, -85.02000);
	CreateDynamicObject(18642, -25.35000, 38.75000, 1000.58002,   90.12000, 10.80000, 55.56000);
	CreateDynamicObject(1846, -26.51000, 37.89000, 999.58002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18642, -26.18000, 38.62000, 1000.58002,   90.12000, 10.80000, 17.88000);
	CreateDynamicObject(18642, -25.87000, 38.74000, 1000.58002,   90.12000, 10.80000, -83.88000);
	CreateDynamicObject(343, -27.43000, 38.68000, 1000.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -27.65000, 38.59000, 1000.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -27.78000, 38.70000, 1000.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -27.34000, 38.52000, 1000.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -27.09000, 38.62000, 1000.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -26.95000, 38.70000, 1000.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -26.56000, 38.64000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.73000, 38.79000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.83000, 38.60000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.73000, 38.65000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.85000, 38.82000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.48000, 38.74000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.45000, 38.59000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.37000, 38.77000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.31000, 38.59000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(342, -26.65000, 38.75000, 1000.62000,   0.00000, 0.00000, -97.50000);
	CreateDynamicObject(18642, -26.00000, 38.72000, 1000.58002,   100.92000, 3.84000, -83.88000);
	CreateDynamicObject(18642, -25.76000, 38.67000, 1000.58002,   100.92000, 3.84000, 14.88000);
	CreateDynamicObject(18642, -25.58000, 38.59000, 1000.58002,   90.12000, 10.80000, 23.34000);
	CreateDynamicObject(369, -26.58000, 38.58000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(369, -27.39000, 38.81000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(369, -26.75000, 38.61000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(369, -26.24000, 38.79000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(369, -27.07000, 38.55000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(369, -27.58000, 38.64000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(369, -26.42000, 38.58000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(369, -26.45000, 38.80000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(369, -27.31000, 38.60000, 1000.07001,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(348, -26.60000, 38.44000, 1000.26001,   6.68000, 22.40000, 88.26000);
	CreateDynamicObject(348, -26.70000, 38.44000, 1000.26001,   6.68000, 22.40000, 88.26000);
	CreateDynamicObject(348, -26.81000, 38.41000, 1000.26001,   6.68000, 22.40000, 88.26000);
	CreateDynamicObject(348, -26.92000, 38.41000, 1000.26001,   6.68000, 22.40000, 88.26000);
	CreateDynamicObject(348, -27.03000, 38.41000, 1000.26001,   6.68000, 22.40000, 88.26000);
	CreateDynamicObject(348, -27.14000, 38.41000, 1000.26001,   6.68000, 22.40000, 88.26000);
	CreateDynamicObject(1812, -26.91000, 37.82000, 1002.70001,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1846, -26.51000, 38.04000, 999.14001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(358, -25.85000, 38.88000, 1000.09003,   79.20000, -18.24000, 28.46000);
	CreateDynamicObject(358, -25.82000, 38.63000, 1000.09003,   79.20000, -18.24000, 28.46000);
	CreateDynamicObject(1698, -26.45000, 38.20000, 1000.38000,   90.00000, -90.00000, -90.00000);
	CreateDynamicObject(2986, -25.89000, 40.01000, 1001.41998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2986, -25.89000, 41.81000, 1001.41998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(334, -27.92000, 42.95000, 999.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(334, -27.92000, 42.86000, 999.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(334, -27.92000, 42.90000, 999.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(334, -27.92000, 43.00000, 999.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(334, -27.92000, 43.04000, 999.56000,   0.00000, 0.00000, 0.00000);

	// Interior Caravana.
	CreateDynamicObject(2528, 2391.00000, -1711.31995, -47.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2518, 2391.35010, -1711.38000, -47.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14762, 2393.52002, -1715.90002, -45.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2948, 2393.59644, -1713.43604, -47.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2313, 2393.19995, -1716.92004, -47.70000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1786, 2393.49268, -1717.50281, -47.20000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2818, 2390.58008, -1718.77002, -45.06000,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, 2392.38989, -1714.33997, -47.80000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 2390.75000, -1714.33997, -47.80800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1761, 2389.57007, -1718.35999, -47.71000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1794, 2389.70996, -1716.56006, -47.71000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 2391.69995, -1718.84998, -46.08000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 2393.62988, -1714.32996, -46.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 2389.12988, -1713.95996, -46.08000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19453, 2387.33008, -1713.03003, -46.08000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19453, 2389.23999, -1710.78003, -46.08000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, 2393.61011, -1713.05005, -47.71000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19453, 2389.18994, -1713.02002, -43.45000,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(8417, 2393.68994, -1715.81995, -44.66000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 2391.21582, -1718.30005, -47.70000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2526, 2389.67993, -1712.56995, -47.71000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10444, 2382.83008, -1698.33997, -47.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2282, 2390.22998, -1713.58997, -45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2279, 2389.70996, -1711.89001, -45.74000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2740, 2391.40991, -1716.17004, -44.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18652, 2391.40991, -1716.18005, -43.86000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(14762, 2393.52002, -1717.90002, -45.74000,   0.00000, 0.00000, 180.00000);

	// Interior Shamal.
	CreateDynamicObject(1848, 74.73800, -99.72400, 999.68298,   90.00000, 179.59650, 270.40350);
	CreateDynamicObject(1848, 75.08789, -99.72852, 999.68298,   90.00000, 179.59351, 90.39551);
	CreateDynamicObject(1847, 75.08500, -94.73100, 999.68298,   90.00000, 180.59326, 89.40674);
	CreateDynamicObject(1847, 74.75100, -94.75400, 999.68298,   90.00000, 180.58777, 269.40125);
	CreateDynamicObject(1562, 73.94200, -97.53000, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 73.21500, -97.54100, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1848, 72.49300, -99.74100, 999.70801,   90.00000, 179.59351, 270.39551);
	CreateDynamicObject(1848, 72.48900, -94.76100, 999.70801,   90.00000, 179.59351, 270.39551);
	CreateDynamicObject(1848, 77.29980, -99.70703, 999.70801,   90.00000, 179.59351, 90.39001);
	CreateDynamicObject(1848, 77.30664, -94.72656, 999.70801,   90.00000, 179.59351, 90.38452);
	CreateDynamicObject(2747, 73.61500, -98.85300, 1000.64899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 73.92871, -100.20215, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1562, 73.16300, -100.20200, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1847, 74.75293, -89.75879, 999.68298,   90.00000, 180.58228, 269.40125);
	CreateDynamicObject(1847, 75.08398, -89.75391, 999.68298,   90.00000, 180.58228, 89.39575);
	CreateDynamicObject(1848, 72.48730, -89.75879, 999.70801,   90.00000, 179.59351, 270.39551);
	CreateDynamicObject(1848, 77.30300, -89.74300, 999.70801,   90.00000, 179.59351, 90.39001);
	CreateDynamicObject(1562, 73.22900, -96.73800, 1000.86700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1562, 73.94500, -96.73200, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1562, 73.93300, -94.17700, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 73.22500, -94.16500, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 73.22000, -93.33700, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1562, 73.94400, -93.34900, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1847, 72.24600, -99.75300, 999.16101,   2.00000, 0.00000, 270.00000);
	CreateDynamicObject(1847, 72.24200, -94.76400, 999.16101,   1.99951, 0.00000, 270.00000);
	CreateDynamicObject(1847, 72.24400, -89.78900, 999.16101,   1.99951, 0.00000, 270.00000);
	CreateDynamicObject(1847, 75.08500, -84.77100, 999.68298,   90.00000, 180.58777, 89.40125);
	CreateDynamicObject(1847, 74.75500, -84.77800, 999.68298,   90.00000, 180.58228, 269.40125);
	CreateDynamicObject(2747, 73.60000, -92.08000, 1000.64899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 73.94100, -90.81600, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 73.13700, -90.82100, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 73.13300, -90.12200, 1000.86700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1562, 73.93300, -90.13200, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1848, 72.48300, -84.75800, 999.70801,   90.00000, 179.59351, 270.39551);
	CreateDynamicObject(1848, 77.30400, -84.74900, 999.70801,   90.00000, 179.59351, 90.39001);
	CreateDynamicObject(1562, 75.86816, -100.16406, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1562, 76.63100, -100.12900, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2747, 76.14800, -98.84900, 1000.64899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 75.84600, -97.51700, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 76.64500, -97.50900, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 75.85400, -96.72300, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1562, 76.62900, -96.73900, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1562, 75.87305, -94.30273, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 76.65000, -94.31000, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1847, 77.59500, -99.72800, 999.16101,   1.99951, 0.00000, 90.00000);
	CreateDynamicObject(1562, 75.87900, -93.45500, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1562, 76.65400, -93.45000, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2747, 76.17800, -92.24500, 1000.64899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 76.62600, -90.99600, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 75.86133, -91.02734, 1000.86700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1562, 75.86000, -90.15900, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1562, 76.65800, -90.17500, 1000.86700,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1847, 77.60100, -94.76200, 999.16101,   1.99951, 0.00000, 90.00000);
	CreateDynamicObject(1847, 77.60200, -89.76700, 999.16101,   1.99951, 0.00000, 90.00000);
	CreateDynamicObject(2325, 72.40400, -91.95400, 1001.95001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2325, 72.41900, -93.67800, 1001.95001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2325, 72.41800, -90.25300, 1001.95001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1847, 72.79200, -92.33200, 1004.23602,   342.00964, 180.00000, 270.00970);
	CreateDynamicObject(1847, 72.79700, -97.29200, 1004.23602,   342.00439, 179.99451, 270.00549);
	CreateDynamicObject(2325, 72.42400, -95.41100, 1001.95001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2325, 72.40900, -97.16200, 1001.95001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2325, 72.42100, -98.83700, 1001.95001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2325, 72.43200, -100.51100, 1001.95001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1847, 72.79600, -102.29100, 1004.23602,   342.00439, 179.99451, 270.00549);
	CreateDynamicObject(1649, 72.64800, -91.84200, 1000.62402,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 72.64900, -95.35700, 1000.62402,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 72.66500, -98.97300, 1000.62402,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2325, 77.40800, -100.53200, 1001.95001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14643, 70.78600, -88.12400, 1001.39697,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14643, 85.98200, -94.17000, 1001.39697,   0.00000, 0.00000, 269.75000);
	CreateDynamicObject(1847, 72.78300, -87.34200, 1004.23602,   342.00439, 179.99451, 270.00549);
	CreateDynamicObject(1847, 71.81600, -87.51600, 1002.86102,   358.00439, 179.99475, 178.00696);
	CreateDynamicObject(3051, 52.18800, -9.36000, 961.15399,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1847, 77.99800, -88.10200, 999.15900,   359.99951, 0.00000, 180.25000);
	CreateDynamicObject(1847, 76.00600, -86.09300, 999.15900,   359.99451, 0.00000, 90.24719);
	CreateDynamicObject(1847, 71.78100, -88.13800, 999.15900,   359.98901, 0.00000, 180.24170);
	CreateDynamicObject(1847, 73.84400, -86.11200, 999.15900,   359.99451, 0.00000, 268.99719);
	CreateDynamicObject(3051, 74.31300, -88.04400, 1001.57098,   0.00000, 0.00000, 45.50000);
	CreateDynamicObject(3051, 75.49600, -88.01900, 1001.57098,   0.00000, 0.00000, 45.50000);
	CreateDynamicObject(1847, 76.20000, -88.23200, 1005.16199,   0.00000, 90.00000, 178.01202);
	CreateDynamicObject(1847, 72.17400, -87.39600, 1000.38702,   1.99951, 0.00000, 270.00000);
	CreateDynamicObject(3051, 74.32400, -87.99100, 1001.49597,   0.00000, 0.00000, 225.49988);
	CreateDynamicObject(3051, 75.46700, -87.99300, 1001.49597,   0.00000, 0.00000, 225.49438);
	CreateDynamicObject(3051, 74.67200, -88.00900, 1002.69702,   314.00000, 270.00000, 177.49426);
	CreateDynamicObject(1847, 75.98926, -85.51563, 1000.68402,   359.98901, 0.00000, 90.24719);
	CreateDynamicObject(1847, 73.85100, -84.92200, 1000.68500,   359.99451, 0.00000, 268.99719);
	CreateDynamicObject(1847, 75.97600, -86.14000, 999.15900,   359.98901, 0.00000, 90.24719);
	CreateDynamicObject(1847, 76.19100, -86.11800, 1003.20898,   270.00000, 179.93665, 269.92017);
	CreateDynamicObject(1847, 76.18200, -81.16700, 1003.20898,   270.00000, 179.93408, 269.91760);
	CreateDynamicObject(1847, 76.10400, -83.12900, 999.15900,   359.98901, 0.00000, 182.24719);
	CreateDynamicObject(1847, 76.10352, -83.12891, 1000.68402,   359.98352, 0.00000, 182.24670);
	CreateDynamicObject(1847, 78.04000, -87.49400, 1000.30902,   359.98901, 0.00000, 180.24719);
	CreateDynamicObject(2847, 74.79199, -93.05273, 1000.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2836, 82.04800, -36.99700, 942.36603,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1847, 72.16600, -103.35600, 1000.35797,   359.99451, 0.00000, 270.24719);
	CreateDynamicObject(2325, 77.40000, -98.83200, 1001.95001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2325, 77.41600, -97.20700, 1001.95001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2325, 77.42300, -95.45700, 1001.95001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2325, 77.41600, -93.87900, 1001.95001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2325, 77.41700, -92.12500, 1001.95001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2325, 77.40400, -90.47700, 1001.95001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 77.18900, -92.18700, 1000.62402,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(1649, 77.16700, -95.79300, 1000.62402,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(1649, 77.17100, -98.71200, 1000.62402,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(1847, 77.65600, -87.58700, 1000.41199,   1.99951, 0.00000, 90.00000);
	CreateDynamicObject(1847, 77.03400, -91.21800, 1004.23602,   342.00439, 179.99451, 90.00549);
	CreateDynamicObject(1847, 77.03400, -96.19300, 1004.23602,   342.00439, 179.99451, 90.00549);
	CreateDynamicObject(1847, 77.03400, -101.19200, 1004.23602,   342.00439, 179.99451, 90.00549);
	CreateDynamicObject(1847, 71.77600, -88.18800, 1004.15900,   0.00546, 180.00000, 180.24719);
	CreateDynamicObject(1847, 77.97500, -88.26300, 1004.15900,   0.00546, 180.00000, 180.24719);
	CreateDynamicObject(1847, 74.74400, -91.21300, 1003.95898,   270.00000, 179.95605, 89.94507);
	CreateDynamicObject(1847, 74.73800, -96.16800, 1003.95898,   270.00000, 179.95056, 89.93958);
	CreateDynamicObject(1599, 73.94824, -88.08789, 1002.00598,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1600, 73.52000, -88.57300, 1001.49799,   0.00000, 18.00000, 270.00000);
	CreateDynamicObject(1847, 75.07400, -91.20900, 1003.95898,   270.00000, 179.95056, 269.93958);
	CreateDynamicObject(1847, 75.07200, -96.19800, 1003.95898,   270.00000, 179.94507, 269.93958);
	CreateDynamicObject(1847, 74.73700, -101.16800, 1003.95898,   270.00000, 179.95056, 89.93958);
	CreateDynamicObject(1847, 75.07900, -101.17600, 1003.95898,   270.00000, 179.95056, 269.93958);
	CreateDynamicObject(1847, 77.66800, -103.38700, 1000.43298,   359.98901, 0.00000, 89.99719);
	CreateDynamicObject(1847, 71.85900, -102.60800, 999.18298,   359.98352, 0.00000, 0.24719);
	CreateDynamicObject(1847, 74.84600, -102.59400, 1004.15900,   0.00000, 179.99451, 0.24170);
	CreateDynamicObject(1847, 71.86500, -102.62800, 1002.95898,   0.00000, 179.99451, 0.24170);
	CreateDynamicObject(1599, 76.36400, -88.67300, 1001.59802,   0.00000, 12.00000, 88.00000);
	CreateDynamicObject(2817, 95.68800, -53.27500, 938.05499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2817, 71.27600, -149.17400, 943.49103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2817, 75.37500, -101.72200, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2817, 75.38900, -99.74700, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2817, 75.44400, -97.77200, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2817, 75.43700, -95.81500, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2817, 75.46600, -93.84000, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2817, 74.42900, -90.85400, 1000.20801,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2817, 75.38000, -89.89400, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2817, 75.39000, -87.91900, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2817, 75.39500, -85.94100, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2817, 75.50100, -83.94300, 1000.20801,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1563, 76.65700, -97.14800, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 75.86035, -97.12207, 1001.39502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 73.94500, -97.17100, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 73.21800, -97.17700, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 75.87300, -93.94500, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 76.65000, -93.96000, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 73.93600, -93.82100, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 73.22600, -93.82400, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 76.62800, -90.64300, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 75.86900, -90.66700, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 73.93700, -90.45800, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 73.13100, -90.47000, 1001.39203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1563, 75.86800, -100.51700, 1001.39203,   17.99854, 0.00000, 1.50000);
	CreateDynamicObject(1563, 76.63200, -100.47800, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 73.15100, -100.56400, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 73.92700, -100.55800, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 73.22500, -93.67500, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 73.95400, -93.69300, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 75.87500, -93.78600, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 76.64800, -93.76500, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 73.94600, -97.07100, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 73.22600, -97.06700, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 75.85800, -90.48900, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(1563, 76.65400, -90.49400, 1001.39203,   17.99561, 0.00000, 1.49963);
	CreateDynamicObject(2948, 74.23400, -87.65600, 1000.84900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 75.56100, -87.67500, 1000.84900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 74.20700, -87.69000, 1000.84900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2911, 74.37000, -83.74400, 1000.19397,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1847, 77.98300, -102.61600, 999.18298,   359.98352, 0.00000, 0.24719);
	CreateDynamicObject(1847, 78.01500, -102.63400, 1002.95898,   0.00000, 179.99451, 0.24170);
	CreateDynamicObject(2634, 74.88400, -102.34500, 1001.30603,   0.00000, 0.00000, 0.00000);

	// JAIL OOC:
	CreateDynamicObject(18759, -3599.48584, -2317.53979, -3.81637,   0.00000, 0.00000, -0.54000);

	// VIP Interior:
	CreateObject(14607, 812.20001, -1388.40002, 1022.00000,   0.00000, 0.00000, 270.00000);
	CreateObject(14563, 812.20001, -1388.40002, 1022.00000,   0.00000, 0.00000, 270.00000);
	CreateObject(14614, 812.20001, -1388.40002, 1022.00000,   0.00000, 0.00000, 270.00000);
	CreateObject(19129, 815.73999, -1370.78003, 1013.48999,   0.00000, 0.00000, 0.00000);
	CreateObject(19129, 795.77002, -1370.79004, 1013.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14561, 812.20001, -1381.00000, 1021.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14605, 812.20001, -1410.25000, 1025.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8661, 810.70001, -1398.40002, 1031.30005,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3528, 811.79999, -1400.09998, 1024.59998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3528, 811.79999, -1400.09998, 1024.59998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(6136, 754.70001, -1394.69995, 1017.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1386.69995, 1017.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1378.80005, 1016.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1370.80005, 1016.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1362.80005, 1016.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1354.90002, 1016.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1346.90002, 1016.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1338.90002, 1016.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 869.50000, -1395.40002, 1016.90002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(6136, 869.50000, -1387.40002, 1016.90002,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1379.40002, 1016.90002,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1371.40002, 1016.90002,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1363.40002, 1016.90002,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1355.40002, 1016.90002,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1347.40002, 1016.90002,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1339.40002, 1016.70001,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(9044, 816.79999, -1333.00000, 1025.40002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8483, 813.50000, -1343.59998, 1018.90002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(9831, 811.79999, -1352.80005, 1013.90002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(6965, 812.59998, -1348.40002, 1016.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2780, 812.59998, -1354.69995, 1008.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 803.00000, -1350.19995, 1014.40002,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(2773, 803.40002, -1352.09998, 1014.40002,   0.00000, 0.00000, 11.99000);
	CreateDynamicObject(2773, 804.20001, -1353.80005, 1014.40002,   0.00000, 0.00000, 39.24000);
	CreateDynamicObject(2773, 805.59998, -1355.50000, 1014.40002,   0.00000, 0.00000, 38.99000);
	CreateDynamicObject(2773, 807.09998, -1356.80005, 1014.40002,   0.00000, 0.00000, 62.99000);
	CreateDynamicObject(2773, 809.09998, -1357.80005, 1014.40002,   0.00000, 0.00000, 64.48000);
	CreateDynamicObject(2773, 811.20001, -1358.30005, 1014.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 813.50000, -1358.30005, 1014.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 815.50000, -1357.90002, 1014.40002,   0.00000, 0.00000, 116.00000);
	CreateDynamicObject(2773, 817.40002, -1357.00000, 1014.40002,   0.00000, 0.00000, 116.00000);
	CreateDynamicObject(2773, 819.20001, -1355.90002, 1014.40002,   0.00000, 0.00000, 135.25000);
	CreateDynamicObject(2773, 820.70001, -1354.19995, 1014.40002,   0.00000, 0.00000, 141.24001);
	CreateDynamicObject(2773, 821.79999, -1352.19995, 1014.40002,   0.00000, 0.00000, 161.49001);
	CreateDynamicObject(2773, 823.50000, -1349.40002, 1014.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2774, 825.40002, -1348.19995, 1026.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 798.79999, -1348.19995, 1026.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 807.00000, -1353.19995, 1010.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 817.09998, -1353.19995, 1010.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10771, 932.20001, -1371.50000, 1003.29999,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2773, 821.79999, -1366.30005, 1015.59998,   0.00000, 0.00000, 294.98999);
	CreateDynamicObject(2773, 823.90002, -1365.30005, 1015.59998,   0.00000, 0.00000, 294.98999);
	CreateDynamicObject(2773, 821.70001, -1376.59998, 1015.59998,   0.00000, 0.00000, 65.74000);
	CreateDynamicObject(2773, 823.79999, -1377.59998, 1015.59998,   0.00000, 0.00000, 65.74000);
	CreateDynamicObject(2773, 825.79999, -1378.50000, 1015.59998,   0.00000, 0.00000, 65.74000);
	CreateDynamicObject(12950, 825.59998, -1360.50000, 1011.70001,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(12950, 825.59998, -1360.50000, 1011.70001,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3524, 820.50000, -1376.00000, 1014.79999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3524, 820.50000, -1376.00000, 1014.79999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3524, 820.40002, -1366.90002, 1014.79999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3524, 820.40002, -1366.90002, 1014.79999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14391, 821.50000, -1371.50000, 1015.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 820.70001, -1375.40002, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2439, 820.70001, -1374.40002, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2439, 820.70001, -1373.40002, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2439, 820.70001, -1372.40002, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2439, 820.70001, -1371.40002, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2439, 820.70001, -1370.40002, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2439, 820.70001, -1369.40002, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2439, 820.70001, -1368.40002, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2439, 820.70001, -1367.59998, 1015.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3498, 818.90002, -1372.59998, 1010.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 819.00000, -1369.69995, 1010.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2595, 822.40002, -1368.40002, 1015.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 820.59998, -1374.50000, 1016.59998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2232, 820.59998, -1368.50000, 1016.59998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(18102, 821.79999, -1367.59998, 1017.09998,   52.00000, 0.00000, 90.00000);
	CreateDynamicObject(16088, 821.00000, -1371.59998, 1011.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 820.40002, -1364.80005, 1016.90002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2232, 820.40002, -1364.80005, 1015.29999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2232, 820.29999, -1378.30005, 1015.29999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2232, 820.29999, -1378.30005, 1016.90002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, 816.59998, -1405.50000, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 816.59998, -1407.80005, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 816.59998, -1410.09998, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 816.59998, -1412.40002, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 816.59998, -1414.69995, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 807.79999, -1405.50000, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 807.79999, -1407.80005, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 807.79999, -1410.09998, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 807.79999, -1412.40002, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 807.79999, -1414.69995, 1016.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14560, 798.29999, -1370.54004, 1017.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14565, 798.33002, -1370.58997, 1015.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1378.80005, 1024.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1370.80005, 1024.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1362.80005, 1024.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6136, 754.70001, -1354.90002, 1024.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3524, 800.06000, -1360.81995, 1013.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2350, 802.59998, -1364.43994, 1013.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 803.25000, -1365.68005, 1013.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 803.40997, -1367.07996, 1013.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 803.47998, -1368.54004, 1013.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 803.44000, -1371.88000, 1013.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 803.64001, -1369.92004, 1013.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 812.59998, -1421.59998, 1021.00000,   90.00000, 0.00000, 179.99001);
	CreateDynamicObject(3851, 804.40002, -1421.59998, 1024.80005,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 808.40002, -1421.59998, 1024.80005,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 812.40002, -1421.59998, 1024.80005,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 816.40002, -1421.59998, 1024.80005,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 820.40002, -1421.59998, 1024.80005,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 804.40002, -1421.59998, 1013.50000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 808.40002, -1421.59998, 1013.50000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 812.40002, -1421.59998, 1013.50000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 816.40002, -1421.59998, 1013.50000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 820.40002, -1421.59998, 1013.50000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 810.50000, -1421.50000, 1015.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 813.50000, -1421.50000, 1015.40002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(13594, 812.00000, -1421.50000, 1015.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14782, 797.59998, -1414.59998, 1016.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6136, 869.50000, -1379.40002, 1025.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1371.50000, 1025.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1363.59998, 1025.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(6136, 869.50000, -1355.69995, 1025.30005,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2773, 801.79999, -1349.19995, 1014.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 799.90002, -1349.19995, 1014.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 798.00000, -1349.19995, 1014.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 822.29999, -1350.30005, 1014.40002,   0.00000, 0.00000, 168.74001);
	CreateDynamicObject(2773, 825.50000, -1349.40002, 1014.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 805.40002, -1400.50000, 1017.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 804.40002, -1417.50000, 1020.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3533, 804.50000, -1420.00000, 1019.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3533, 804.50000, -1420.00000, 1029.59998,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(3533, 804.50000, -1411.40002, 1019.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3533, 804.50000, -1411.40002, 1029.59998,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(3533, 804.50000, -1407.69995, 1019.70001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 801.90002, -1407.50000, 1020.79999,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 797.90002, -1407.50000, 1020.79999,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 804.70001, -1409.69995, 1023.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3533, 804.50000, -1407.69995, 1029.59998,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 802.50000, -1407.19995, 1017.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 797.79999, -1409.09998, 1020.79999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14397, 798.20001, -1409.09998, 1020.79999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14397, 798.59998, -1409.09998, 1020.79999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14397, 799.00000, -1409.09998, 1020.79999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14397, 802.50000, -1407.19995, 1015.90002,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 802.50000, -1407.50000, 1015.90002,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 802.50000, -1407.59998, 1015.90002,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 804.40002, -1413.50000, 1020.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(14397, 803.20001, -1411.90002, 1002.29999,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(14397, 803.20001, -1412.40002, 1002.29999,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(14397, 803.20001, -1412.09998, 1002.29999,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2332, 797.23999, -1418.94995, 1017.32001,   0.00000, 0.00000, 88.50000);
	CreateDynamicObject(1703, 803.82001, -1414.81995, 1015.29999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8661, 784.00000, -1407.40002, 1016.29999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 784.09998, -1407.50000, 1022.79999,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(8661, 804.50000, -1431.40002, 1018.09998,   90.00000, 0.00000, 270.00000);
	CreateDynamicObject(8661, 804.40002, -1431.40002, 1018.09998,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 804.40002, -1421.69995, 1020.79999,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 784.09998, -1420.90002, 1022.79999,   90.00000, 0.00000, 179.99001);
	CreateDynamicObject(3851, 801.90002, -1420.90002, 1020.90002,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 797.90002, -1420.90002, 1020.90002,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(14608, 825.40002, -1410.30005, 1017.09998,   0.00000, 0.00000, 44.50000);
	CreateDynamicObject(2773, 802.29999, -1408.80005, 1016.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 800.20001, -1408.80005, 1016.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 798.09998, -1408.80005, 1016.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 804.88000, -1399.50000, 1015.40002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 800.85999, -1399.47998, 1015.40002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 801.90002, -1401.50000, 1015.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 801.40002, -1400.40002, 1017.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 797.67999, -1401.47998, 1015.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 801.41998, -1405.92004, 1017.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 805.40002, -1406.00000, 1017.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 797.67999, -1407.07996, 1015.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 800.91998, -1405.04004, 1015.40002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 801.94000, -1407.06006, 1015.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1704, 804.88000, -1405.00000, 1015.40002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3533, 804.50000, -1398.40002, 1016.29999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 801.70001, -1398.59998, 1020.79999,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 797.70001, -1398.59998, 1020.79999,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 799.79999, -1403.30005, 1015.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 803.70001, -1403.30005, 1015.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 796.90002, -1403.19995, 1015.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2100, 797.40002, -1403.50000, 1015.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18646, 820.39001, -1366.92004, 1017.04999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18646, 820.40002, -1376.03003, 1017.04999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18653, 814.00000, 4583.00000, -1351.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18653, 810.34998, -1350.07996, 1017.07001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18653, 814.00000, 5515.00000, -135.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18653, 814.32001, -1350.16003, 1017.07001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18653, 811.97998, -1398.28003, 1022.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18653, 811.97998, -1398.28003, 1022.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18653, 814.32001, -1350.16003, 1017.07001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18654, 820.00000, 2551365.00000, 5977.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18654, 820.31000, -1365.60999, 1017.28998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18654, 820.31000, -1377.59998, 1017.28998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18653, 810.34998, -1350.07996, 1017.07001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18885, 802.70001, -1420.52002, 1016.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18646, 805.40002, -1402.02002, 1018.94000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18646, 805.39001, -1404.47998, 1018.94000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2311, 799.32001, -1406.81006, 1015.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 799.32001, -1401.31995, 1015.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 803.38000, -1406.81006, 1015.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 803.00000, 3800.00000, -1401.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2311, 803.38000, -1401.29004, 1015.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3524, 799.69000, -1380.66003, 1013.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 827.00000, -1417.40002, 1017.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2755, 827.00000, -1403.19995, 1017.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 826.90002, -1418.19995, 1015.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 826.90002, -1402.50000, 1015.40002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2942, 800.34003, -1420.55005, 1016.10999,   0.00000, 0.00000, 180.84000);
	CreateDynamicObject(19125, 802.83002, -1408.05005, 1016.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 801.16998, -1408.10999, 1016.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 799.77002, -1408.09998, 1016.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 798.09998, -1408.13000, 1016.17999,   0.00000, 0.00000, 0.00000);

	// EXTERIOR VIP:
	CreateDynamicObject(3851, 809.20001, -1385.09998, 17.00000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 827.00000, -1385.09961, 17.00000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 823.00000, -1385.09998, 17.00000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2885, 807.50000, -1379.59961, 22.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2885, 807.50000, -1379.59998, 16.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2885, 807.50000, -1368.69922, 22.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2885, 807.50000, -1368.69995, 15.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2885, 834.50000, -1385.00000, 21.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2885, 842.00000, -1385.00000, 21.50000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2885, 834.50000, -1385.00000, 14.80000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2885, 842.00000, -1385.00000, 14.80000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1566, 815.40002, -1385.69995, 13.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 807.20001, -1383.09998, 17.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 807.20001, -1379.09998, 17.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 807.20001, -1375.09998, 17.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 807.20001, -1371.09998, 17.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 807.20001, -1367.09998, 17.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 821.69922, -1390.09961, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 810.79999, -1390.09998, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 819.59961, -1390.09961, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 812.89941, -1390.09961, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, 822.39941, -1384.79980, 19.00000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2885, 812.79999, -1384.80005, 19.00000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1215, 814.90002, -1390.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 817.39941, -1390.09961, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 823.79980, -1390.09961, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 808.69922, -1390.09961, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 817.29999, -1386.00000, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 815.00000, -1386.00000, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 817.29980, -1386.00000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 815.00000, -1385.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 823.00000, -1388.19995, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 821.09998, -1388.19995, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 819.20001, -1388.19995, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 817.29980, -1388.19922, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 815.40002, -1388.19995, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 813.50000, -1388.19995, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 811.59998, -1388.19995, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 809.70001, -1388.19995, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 809.70001, -1384.30005, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 811.59998, -1384.30005, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 813.50000, -1384.30005, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 815.40002, -1384.30005, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 817.29999, -1384.30005, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 819.20001, -1384.30005, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 821.09998, -1384.30005, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2632, 823.00000, -1384.30005, 12.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 823.90002, -1386.59998, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 823.79999, -1388.69995, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 808.79999, -1386.59998, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 808.70001, -1388.69995, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 815.40002, -1386.90002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 817.00000, -1386.90002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, 842.00000, -1384.59998, 14.80000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2885, 842.00000, -1384.59998, 21.50000,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2885, 869.00000, -1371.50000, 15.50000,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(8425, 857.50000, -1379.79980, 15.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8425, 857.00000, -1371.90002, 15.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11313, 853.39941, -1384.50000, 14.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 845.59998, -1389.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 841.50000, -1389.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 837.40002, -1389.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 861.40002, -1389.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 865.50000, -1389.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 869.59998, -1389.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 873.70001, -1389.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 877.79999, -1389.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 860.20001, -1384.80005, 13.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(640, 864.90002, -1384.80005, 13.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(640, 860.19922, -1384.79980, 13.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(970, 863.70001, -1385.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 859.59998, -1385.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 865.79999, -1385.19995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 857.50000, -1383.09998, 12.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 867.90002, -1383.09998, 12.80000,   0.00000, 0.00000, 90.00000);
	CreateObject(10010, 819.20001, -1385.90002, 4201.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11313, 856.00000, -1415.90002, 4203.29980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8425, 854.09998, -1420.59998, 4204.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8425, 854.09998, -1420.59998, 4211.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 852.40002, -1417.00000, 4201.29980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 851.50000, -1406.90002, 4201.29980,   0.00000, 0.00000, 100.25000);
	CreateDynamicObject(1232, 859.20001, -1389.40002, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 847.79999, -1389.50000, 15.30000,   0.00000, 0.00000, 182.00000);

	// RESTAURANTE VIP, Avenida del Banco.
	CreateDynamicObject(3934, 1039.86096, -1094.03906, 22.82813,   0.00000, 0.00000, 0.25000);
	CreateDynamicObject(10183, 1015.49591, -1084.50671, 22.84680,   0.00000, 0.00000, 45.50000);
	CreateDynamicObject(980, 973.01343, -1103.70032, 25.63875,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(980, 973.01270, -1103.70020, 20.01377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1033.85156, -1130.90039, 24.83013,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3499, 1017.19189, -1130.83386, 28.33246,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1033.85156, -1130.90039, 28.83011,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3499, 1027.59619, -1130.87915, 28.33246,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 1022.46033, -1130.86804, 33.08242,   89.74976, 180.00000, 269.75000);
	CreateDynamicObject(3499, 1022.45996, -1130.86719, 28.08240,   89.74731, 179.99451, 269.74731);
	CreateDynamicObject(3499, 1011.14099, -1130.80835, 31.25740,   89.74731, 179.99451, 269.74731);
	CreateDynamicObject(3499, 1033.73511, -1130.73792, 31.25740,   89.74731, 179.99451, 269.74731);
	CreateDynamicObject(3851, 1019.08142, -1130.80859, 21.83011,   90.00000, 180.69592, 269.30420);
	CreateDynamicObject(1569, 1021.05035, -1130.79028, 22.82813,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1025.47424, -1130.87744, 21.83011,   90.00000, 180.69214, 269.30237);
	CreateDynamicObject(1569, 1023.46747, -1130.83386, 22.82813,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3499, 1022.45996, -1130.86719, 25.98242,   89.74731, 179.99451, 269.74731);
	CreateDynamicObject(3851, 1022.38281, -1131.21777, 27.55510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3499, 1017.34875, -1125.44910, 31.88239,   89.74731, 179.99451, 359.74731);
	CreateDynamicObject(3499, 1027.44775, -1125.58899, 31.88239,   89.74731, 179.99451, 359.74731);
	CreateDynamicObject(1432, 1012.77173, -1118.19153, 22.97374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1006.73132, -1118.04358, 22.95021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1003.48999, -1122.68005, 22.97344,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1030.74365, -1119.09790, 22.96136,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1007.11993, -1127.60095, 22.95012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1013.42554, -1127.37122, 22.85253,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1008.72559, -1122.54785, 22.94973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1036.84338, -1118.48047, 22.89828,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1039.87988, -1123.32556, 22.97344,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1033.84680, -1122.73035, 22.96743,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1036.14392, -1126.91736, 22.97191,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1030.74878, -1126.72339, 22.98637,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1019.19611, -1131.27026, 23.48758,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1025.57202, -1131.35828, 23.48758,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1670, 1013.49274, -1127.31616, 23.49287,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 1007.25647, -1127.57861, 23.59045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 1039.84485, -1123.28345, 23.61377,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 1006.85254, -1118.07520, 23.59055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 1033.82019, -1122.82813, 23.60776,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 1030.80859, -1119.15332, 23.60170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1019.70056, -1120.60791, 23.57035,   0.00000, 0.00000, 61.50000);
	CreateDynamicObject(638, 1025.22046, -1120.60144, 23.57035,   0.00000, 0.00000, 299.24597);
	CreateDynamicObject(949, 1020.59229, -1132.11804, 23.46441,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1023.68500, -1121.16516, 23.50680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1011.11133, -1130.83105, 24.83013,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1011.11133, -1130.83105, 28.83010,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1022.38281, -1131.21777, 30.55510,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1011.11133, -1130.83105, 28.83010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1011.11133, -1130.83105, 24.83013,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1019.08105, -1130.80859, 21.83011,   90.00000, 180.69214, 89.30237);
	CreateDynamicObject(3851, 1025.47363, -1130.87695, 21.83011,   90.00000, 180.69214, 89.30237);
	CreateDynamicObject(3851, 1022.38092, -1131.19287, 27.55510,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1022.40607, -1131.24951, 30.55510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1033.85156, -1130.90039, 28.83011,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1033.85156, -1130.90039, 24.83013,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(949, 1021.29980, -1121.18555, 23.50680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1023.93701, -1132.14966, 23.46441,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1023.79138, -1131.25122, 23.38465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1020.76074, -1131.23730, 23.39245,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1024.02515, -1121.54224, 23.43862,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1020.93066, -1121.47070, 23.43427,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14777, 963.30609, -1100.76294, -61.63955,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 970.50757, -1099.97449, -60.38350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1517, 972.03149, -1099.99377, -60.32870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 970.53113, -1101.53772, -60.50345,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 962.13544, -1099.98047, -60.47845,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 960.58075, -1100.06970, -60.52845,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 967.28162, -1106.45654, -60.48928,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1548, 966.45343, -1106.52783, -60.56609,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 964.07623, -1106.44263, -60.41171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 965.51276, -1106.40344, -60.49765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1666, 965.31750, -1106.40479, -60.49765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 963.99640, -1106.53882, -60.41171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 959.73267, -1106.47473, -60.39025,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1951, 960.04669, -1106.48511, -60.39025,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 956.01819, -1105.51587, -60.36347,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 955.95801, -1098.89893, -60.36347,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 955.99414, -1102.61035, -60.36347,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 956.01843, -1097.78015, -60.36347,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(950, 961.25763, -1090.03418, -61.08865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(950, 965.26544, -1090.03210, -61.08865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 966.79022, -1087.16931, -61.63174,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1723, 959.83795, -1089.10632, -61.63174,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1739, 973.11121, -1093.18628, -59.33249,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1739, 976.26715, -1093.22180, -59.33249,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1739, 975.59564, -1093.69019, -59.33249,   0.00000, 0.00000, 182.00000);
	CreateDynamicObject(1739, 973.69269, -1093.75146, -59.33249,   0.00000, 0.00000, 1.99951);
	CreateDynamicObject(1739, 970.74139, -1093.79358, -59.33249,   0.00000, 0.00000, 1.99951);
	CreateDynamicObject(1739, 970.13135, -1093.24988, -59.33249,   0.00000, 0.00000, 89.99951);
	CreateDynamicObject(2232, 978.74323, -1104.18530, -61.03386,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2232, 953.05957, -1105.35547, -61.04167,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 978.75323, -1097.27966, -61.03386,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2773, 953.85675, -1109.66797, -61.11451,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 956.04846, -1109.07410, -61.11451,   0.00000, 0.00000, 116.00000);
	CreateDynamicObject(14758, 950.57617, -980.17480, -73.09735,   0.00000, 0.00000, 359.74731);
	CreateDynamicObject(14757, 965.37286, -976.24158, -73.33220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14764, 950.56287, -980.29095, -73.15961,   0.00000, 0.00000, 359.50000);
	CreateDynamicObject(2605, 951.41504, -960.32031, -70.07617,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1714, 951.40039, -958.84570, -70.46454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 962.34485, -958.24213, -68.89468,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 945.35742, -962.50195, -68.93787,   0.00000, 0.00000, 89.74731);
	CreateDynamicObject(2167, 954.46777, -958.21973, -70.46454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2191, 956.90540, -960.59448, -70.46454,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2197, 946.79395, -960.80957, -70.46454,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 954.79132, -963.14288, -70.46944,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 950.11523, -963.12402, -70.46944,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2163, 945.38672, -959.89941, -68.93787,   0.00000, 0.00000, 89.74731);
	CreateDynamicObject(1491, 960.76630, -967.90564, -70.46454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 950.66370, -963.73590, -70.46454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 960.79602, -963.77850, -70.46454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2605, 961.60132, -960.64990, -70.06610,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1714, 961.66522, -959.16852, -70.46454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 957.53760, -962.71527, -68.66535,   0.00000, 0.00000, 89.74731);
	CreateDynamicObject(2163, 957.55695, -960.09027, -68.66535,   0.00000, 0.00000, 89.74731);
	CreateDynamicObject(2197, 959.01825, -961.04260, -70.46454,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 964.90240, -963.16022, -70.46454,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2167, 965.56152, -959.02606, -70.46454,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2161, 949.86719, -958.15332, -69.05852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2605, 961.50415, -973.90411, -70.06610,   0.00000, 0.00000, 359.99451);
	CreateDynamicObject(1714, 961.48187, -975.42017, -70.46454,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 962.88324, -968.50665, -70.46454,   0.00000, 0.00000, 359.99451);
	CreateDynamicObject(1723, 958.23035, -968.49249, -70.46454,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(2161, 957.53180, -973.72162, -69.18152,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 957.52551, -971.72266, -68.96359,   0.00000, 0.00000, 89.74731);
	CreateDynamicObject(2197, 965.28253, -974.64984, -70.46454,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2197, 964.60657, -974.65106, -70.46454,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2167, 959.23248, -976.14929, -70.46454,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1557, 949.81732, -980.24768, -74.97054,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 952.86597, -980.24646, -74.97054,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1557, 957.52289, -963.42792, -74.94735,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2738, 951.45081, -958.62189, -74.36169,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2739, 949.81750, -961.52679, -74.96454,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2526, 951.77100, -965.77600, -74.96454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2527, 952.93451, -962.44238, -74.96454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 949.27472, -963.39728, -74.96059,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2637, 961.54443, -972.28973, -74.56761,   0.00000, 0.00000, 359.50000);
	CreateDynamicObject(2637, 961.54065, -973.54004, -74.56761,   0.00000, 0.00000, 359.49463);
	CreateDynamicObject(2637, 961.53857, -974.79089, -74.56761,   0.00000, 0.00000, 359.49463);
	CreateDynamicObject(2637, 961.50555, -976.04272, -74.56761,   0.00000, 0.00000, 359.49463);
	CreateDynamicObject(2636, 959.72650, -972.10492, -74.33656,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2636, 959.71973, -973.39685, -74.33656,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2636, 959.70422, -974.97388, -74.33656,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2636, 959.70288, -976.22369, -74.33656,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2636, 960.93738, -977.46619, -74.33656,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(2636, 962.06122, -977.43622, -74.33656,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2636, 962.28455, -970.95032, -74.33656,   0.00000, 0.00000, 89.98901);
	CreateDynamicObject(2636, 960.98389, -970.93970, -74.33656,   0.00000, 0.00000, 89.98901);
	CreateDynamicObject(2636, 963.28119, -976.10168, -74.33656,   0.00000, 0.00000, 359.99451);
	CreateDynamicObject(2636, 963.30450, -974.90295, -74.33656,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(2636, 963.30280, -973.67627, -74.33656,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(2636, 963.31427, -972.29865, -74.33656,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(2700, 957.77094, -972.87897, -71.91550,   0.00000, 0.00000, 0.00000);

	// EXTERIOR GROTTI:
	CreateDynamicObject(19378, 561.56000, -1294.37000, 19.21000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 552.06000, -1294.37000, 19.21000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 542.56000, -1294.37000, 19.21000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 533.06000, -1294.37000, 19.21000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 523.56000, -1294.37000, 19.21000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 523.03003, -1294.38000, 19.21000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(13187, 560.65997, -1294.32996, 17.53000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(13187, 523.78003, -1294.32996, 17.53000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(13187, 552.14001, -1294.30005, 17.53000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(13187, 532.28003, -1294.32996, 17.53000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 540.65997, -1294.33997, 16.23000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 543.64001, -1294.28003, 16.23000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(948, 544.12000, -1293.94995, 16.24000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 540.45001, -1293.97998, 16.24000,   0.00000, 0.00000, 0.00000);

	// INTERIOR APARTAMENTO:
	CreateObject(19376, 1783.01196, -1439.52600, 1358.50598,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19171, 1788.85095, -1441.76599, 1361.29199,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1783.42102, -1444.18896, 1360.34302,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1783.42004, -1444.17896, 1363.04199,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19445, 1788.17896, -1439.32202, 1357.54199,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, 1788.18896, -1443.31702, 1360.34302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19171, 1788.85095, -1442.51099, 1360.03503,   90.00000, 180.00000, 180.00000);
	CreateDynamicObject(19171, 1788.85095, -1442.51099, 1361.53503,   90.00000, 180.00000, 180.00000);
	CreateDynamicObject(19171, 1788.85095, -1441.76599, 1359.31201,   0.00000, 179.99400, 0.00000);
	CreateDynamicObject(19171, 1788.85095, -1441.00000, 1360.03503,   90.00000, 179.99400, 0.00000);
	CreateDynamicObject(19171, 1788.85095, -1441.00000, 1361.53503,   90.00000, 179.99400, 0.00000);
	CreateDynamicObject(19171, 1789.01001, -1441.76001, 1360.03503,   90.00000, 179.99400, 0.00000);
	CreateDynamicObject(19171, 1789.00903, -1441.75903, 1361.53503,   90.00000, 180.00500, 359.98300);
	CreateDynamicObject(19171, 1789.00903, -1441.76599, 1360.49194,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, 1788.18896, -1440.18201, 1360.34302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1783.43994, -1444.17896, 1357.54199,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1788.17896, -1439.32202, 1363.04199,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19171, 1788.85095, -1438.63599, 1359.31201,   0.00000, 179.99400, 0.00000);
	CreateDynamicObject(19171, 1788.85095, -1439.36096, 1360.03503,   90.00000, 179.99400, 179.99400);
	CreateDynamicObject(19171, 1788.85095, -1439.36096, 1361.53503,   90.00000, 180.00500, 179.98300);
	CreateDynamicObject(19171, 1788.85095, -1438.63599, 1361.29199,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19171, 1788.85095, -1437.90002, 1360.03503,   90.00000, 180.00500, 359.98901);
	CreateDynamicObject(19171, 1788.85095, -1437.90002, 1361.53503,   90.00000, 180.00500, 0.00000);
	CreateDynamicObject(19171, 1789.00903, -1438.61902, 1360.03503,   90.00000, 179.99400, 0.00000);
	CreateDynamicObject(19171, 1789.00903, -1438.61902, 1361.53503,   90.00000, 179.99400, 0.00000);
	CreateDynamicObject(19171, 1789.00903, -1438.63599, 1360.49194,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1788.18896, -1433.06897, 1360.34302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1768, 1786.64001, -1440.13696, 1358.59302,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1768, 1783.73499, -1439.24097, 1358.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2029, 1784.17700, -1441.03101, 1358.39294,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 1786.35303, -1436.43201, 1358.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1783.59705, -1436.46106, 1357.54199,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1814, 1784.19397, -1444.14294, 1358.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 1780.07898, -1444.14502, 1358.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1783.59595, -1436.44995, 1360.34302,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1783.59595, -1436.46997, 1363.04199,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19446, 1778.87402, -1440.04102, 1360.34302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1778.89404, -1440.04102, 1357.54199,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1778.89404, -1440.04102, 1363.04199,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(14455, 1778.99597, -1434.40100, 1360.26501,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19376, 1783.01099, -1439.52502, 1362.10596,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19893, 1783.95996, -1440.85205, 1359.18201,   0.00000, 0.00000, 166.10001);
	CreateDynamicObject(19623, 1779.12500, -1442.19604, 1360.58301,   0.00000, 0.00000, 162.69901);
	CreateDynamicObject(19622, 1780.91199, -1436.67200, 1359.29797,   -12.10000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1788.27405, -1440.38306, 1361.35498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1788.27295, -1440.38196, 1361.35498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1788.27295, -1440.38196, 1361.35498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1788.27295, -1440.38196, 1361.35498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1788.27295, -1440.38196, 1361.35498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2069, 1786.55505, -1439.37402, 1358.62305,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2277, 1787.60803, -1440.14001, 1360.19202,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2114, 1787.90198, -1443.44897, 1358.73901,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1784.41101, -1440.93103, 1362.00696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1816, 1784.11597, -1437.38098, 1358.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1787.69897, -1443.75806, 1359.61804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2244, 1784.71204, -1436.82898, 1359.37500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 1781.15601, -1436.55505, 1360.73706,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1744, 1778.79895, -1443.14001, 1360.19604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2269, 1783.41199, -1437.02502, 1360.09900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2275, 1779.46204, -1440.29797, 1360.09900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1788, 1785.00903, -1443.64502, 1359.16699,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1785.80896, -1444.09900, 1358.59302,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1782.95898, -1444.09302, 1358.59302,   0.00000, 0.00000, 179.99400);
	CreateDynamicObject(2245, 1779.19495, -1442.69702, 1360.81396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19559, 1779.75098, -1443.95703, 1358.88501,   -17.59900, 0.00000, -178.39999);
	CreateDynamicObject(19591, 1782.47498, -1444.09302, 1360.08203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19814, 1782.88501, -1444.08997, 1358.86499,   0.00000, 0.19900, -178.20000);
	CreateDynamicObject(19822, 1784.27405, -1441.02502, 1359.19299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19829, 1781.80798, -1444.10303, 1359.84302,   0.00000, 0.00000, 178.89999);
	CreateDynamicObject(19897, 1785.25806, -1440.82800, 1359.21301,   0.00000, 0.00000, -162.69901);
	CreateDynamicObject(19878, 1779.16504, -1441.94702, 1358.66199,   0.00000, 0.00000, 90.40000);
	CreateDynamicObject(19786, 1784.69800, -1444.15100, 1360.35400,   0.00000, 0.00000, 179.99899);
	CreateDynamicObject(19171, 1788.44897, -1441.71997, 1360.49902,   88.79900, 89.99900, 0.00000);
	CreateDynamicObject(19171, 1788.44104, -1438.56396, 1360.52600,   88.50000, 89.69900, 0.00000);

	// Edificio Interior delante de Hotel Jefferson.
	CreateDynamicObject(19508, 223.67680, -1118.80884, 33.15120,   0.00000, 0.00000, 152.34540);
	CreateDynamicObject(19454, 2243.27441, -1118.68445, 42.49869,   0.00000, 0.00000, 333.35751);
	CreateDynamicObject(19454, 2232.39160, -1115.17090, 42.49870,   0.00000, 0.00000, 333.35751);
	CreateDynamicObject(1537, 2243.59180, -1115.33179, 41.13560,   0.00000, 0.00000, 331.46729);
	CreateDynamicObject(19508, 2237.67676, -1118.80884, 43.40988,   0.00000, 0.00000, 152.34541);
	CreateDynamicObject(19508, 2237.67676, -1118.80884, 33.40990,   0.00000, 0.00000, 152.34540);
	CreateDynamicObject(19454, 2232.39160, -1115.17090, 32.49870,   0.00000, 0.00000, 333.35751);
	CreateDynamicObject(19454, 2243.27441, -1118.68445, 32.49870,   0.00000, 0.00000, 333.35751);
	CreateDynamicObject(1537, 2243.59180, -1115.33179, 31.13560,   0.00000, 0.00000, 331.46729);
	CreateDynamicObject(1649, 2240.19019, -1124.89673, 42.07690,   0.00000, 0.00000, 242.35699);
	CreateDynamicObject(1649, 2231.55566, -1122.90625, 42.07690,   0.00000, 0.00000, 152.35001);
	CreateDynamicObject(1649, 2236.49097, -1125.49634, 42.07690,   0.00000, 0.00000, 152.35001);
	CreateDynamicObject(1649, 2231.55566, -1122.90625, 32.07690,   0.00000, 0.00000, 152.35001);
	CreateDynamicObject(1649, 2236.49097, -1125.49634, 32.07690,   0.00000, 0.00000, 152.35001);
	CreateDynamicObject(1649, 2240.19019, -1124.89673, 32.07690,   0.00000, 0.00000, 242.35699);
	CreateDynamicObject(19446, 2236.12817, -1119.85803, 42.92570,   0.00000, 0.00000, 333.45001);
	CreateDynamicObject(19384, 2238.99341, -1114.12488, 42.92570,   0.00000, 0.00000, 333.45001);
	CreateDynamicObject(1502, 2239.32129, -1113.40747, 41.15310,   0.00000, 0.00000, 243.79160);
	CreateDynamicObject(1745, 2234.40723, -1114.39844, 41.13280,   0.00000, 0.00000, 333.32458);
	CreateDynamicObject(2296, 2242.00854, -1120.36426, 41.12890,   0.00000, 0.00000, 243.55580);
	CreateDynamicObject(2130, 2235.17749, -1123.06592, 41.17160,   0.00000, 0.00000, 63.63100);
	CreateDynamicObject(2127, 2236.10571, -1121.21912, 41.15440,   0.00000, 0.00000, 63.63100);
	CreateDynamicObject(2525, 2234.56323, -1121.67456, 41.16440,   0.00000, 0.00000, 243.86929);
	CreateDynamicObject(2131, 2243.79321, -1117.81763, 41.15410,   0.00000, 0.00000, 243.55580);
	CreateDynamicObject(2524, 2234.43042, -1121.94482, 41.15270,   0.00000, 0.00000, 243.86929);
	CreateDynamicObject(2591, 2234.23950, -1119.75989, 40.46300,   0.00000, 0.00000, 63.63100);
	CreateDynamicObject(2704, 2238.55127, -1126.54358, 42.87836,   0.00000, 0.00000, 338.59793);
	CreateDynamicObject(2689, 2238.55615, -1126.54468, 42.16929,   0.00000, 0.00000, 338.59790);
	CreateDynamicObject(2846, 2238.34595, -1126.55054, 41.17060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 2236.74512, -1117.36816, 41.14720,   0.00000, 0.00000, 243.11580);
	CreateDynamicObject(19446, 2236.12817, -1119.85803, 32.92570,   0.00000, 0.00000, 333.45001);
	CreateDynamicObject(19384, 2238.99341, -1114.12488, 32.92570,   0.00000, 0.00000, 333.45001);
	CreateDynamicObject(1502, 2239.32129, -1113.40747, 31.15310,   0.00000, 0.00000, 243.79160);
	CreateDynamicObject(2704, 2238.55127, -1126.54358, 32.87840,   0.00000, 0.00000, 338.59790);
	CreateDynamicObject(2689, 2238.55615, -1126.54468, 32.16930,   0.00000, 0.00000, 338.59790);
	CreateDynamicObject(2591, 2234.23950, -1119.75989, 30.46300,   0.00000, 0.00000, 63.63100);
	CreateDynamicObject(2525, 2234.56323, -1121.67456, 31.16440,   0.00000, 0.00000, 243.86929);
	CreateDynamicObject(2524, 2234.43042, -1121.94482, 31.15270,   0.00000, 0.00000, 243.86929);
	CreateDynamicObject(1745, 2234.40723, -1114.39844, 31.13280,   0.00000, 0.00000, 333.32458);
	CreateDynamicObject(2127, 2236.10571, -1121.21912, 31.15440,   0.00000, 0.00000, 63.63100);
	CreateDynamicObject(2130, 2235.17749, -1123.06592, 31.17160,   0.00000, 0.00000, 63.63100);
	CreateDynamicObject(2296, 2242.00854, -1120.36426, 31.12890,   0.00000, 0.00000, 243.55580);
	CreateDynamicObject(2131, 2243.79321, -1117.81763, 31.15410,   0.00000, 0.00000, 243.55580);
	CreateDynamicObject(2846, 2238.34595, -1126.55054, 31.17060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 2236.74512, -1117.36816, 31.14720,   0.00000, 0.00000, 243.11580);

 	// Cierre de FAMILIA en Las Venturas a petición
	CreateDynamicObject(971, 2616.11890, 2830.80029, 12.93109,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(971, 2539.39478, 2823.61914, 13.03310,   0.00000, 0.00000, 90.00000);

	// INTERIORES SÓLIDOS (Debugged):
	CreateDynamicObject(2395, 680.76, -450.74, -26.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 680.76, -450.74, -23.88,   298.00, 359.96, 359.96);
	CreateDynamicObject(1493, 680.87, -450.72, -26.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(2765, 677.89, -450.36, -23.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(2766, 686.85, -451.72, -23.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1966, 661.83, -568.60, 15.66,   0.00, 0.00, 90.00);
	CreateDynamicObject(2395, 669.83, -565.28, 15.33,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, 666.63, -565.37, 15.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 662.90, -565.37, 15.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 665.79, -570.59, 14.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 665.79, -574.92, 14.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(2837, 682.88, -457.87, -25.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(2838, 679.95, -456.98, -25.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(2839, 680.39, -454.61, -25.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 461.40, -15.44, 1000.13,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, 461.40, -19.17, 1000.13,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, 461.10, -20.20, 1000.14,   0.00, 0.00, 236.00);
	CreateDynamicObject(2395, 459.67, -22.85, 1000.14,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 456.48, -22.66, 1000.14,   0.00, 0.00, 90.00);
	CreateDynamicObject(2395, 456.33, -19.92, 1000.14,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, 456.88, -23.09, 998.38,   0.00, 0.00, 179.99);
	CreateDynamicObject(2395, 455.94, -23.31, 1000.88,   46.00, 0.00, 179.99);
	CreateDynamicObject(1532, 456.01, -23.13, 998.53,   0.00, 0.00, 180.00);
	CreateDynamicObject(2945, 1.12, 34.35, 1199.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(17951, 608.95, -128.31, 998.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(17951, 608.95, -122.15, 998.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 662.68, -567.73, 13.30,   0.00, 0.00, 0.00);

	// INTERIOR FARO:
	CreateDynamicObject(8947, 149.87025, -1961.59753, 1656.35059,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10008, 150.09282, -1965.72168, 1664.08069,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10008, 150.09302, -1965.71118, 1670.25281,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10008, 150.06522, -1965.70679, 1676.53491,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10008, 150.06982, -1965.71130, 1682.70520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 153.00818, -1968.76685, 1684.95984,   0.00000, 0.00000, 320.15659);
	CreateDynamicObject(8947, 151.53273, -1957.91370, 1671.40735,   90.24080, 0.00000, 347.89059);
	CreateDynamicObject(8947, 143.63519, -1961.06799, 1671.43237,   90.24080, 1.71890, 60.46990);
	CreateDynamicObject(8947, 145.23270, -1972.09021, 1671.43237,   90.24080, 1.71890, 150.46989);
	CreateDynamicObject(8947, 155.94411, -1971.29736, 1671.40710,   90.24080, 1.71890, 217.11040);
	CreateDynamicObject(8947, 158.73779, -1963.88159, 1671.38135,   90.24080, 1.71890, 266.48499);
	CreateDynamicObject(8947, 148.84531, -1961.35046, 1685.47363,   0.00000, 0.00000, 178.28110);
	CreateDynamicObject(8947, 146.17825, -1966.37610, 1685.46375,   0.00000, 0.00000, 128.98390);
	CreateDynamicObject(8947, 151.89218, -1968.20532, 1685.50049,   0.00000, 0.00000, 78.12250);
	CreateDynamicObject(8947, 146.87282, -1961.61755, 1685.46948,   0.00000, 0.85940, 61.71590);
	CreateDynamicObject(8947, 154.78416, -1961.50122, 1685.59668,   0.00000, 0.85940, 331.71591);
	CreateDynamicObject(1504, 155.63373, -1966.42517, 1684.32410,   0.00000, 0.00000, 88.28110);
	CreateDynamicObject(1504, 151.05344, -1960.89441, 1659.37329,   0.00000, 0.00000, 347.96790);
	CreateDynamicObject(3675, 155.82552, -1962.34241, 1661.23535,   0.00000, 0.00000, 269.14059);
	CreateDynamicObject(3675, 155.78867, -1963.32031, 1659.83594,   0.00000, 0.00000, 269.14059);
	CreateDynamicObject(3675, 155.79906, -1964.25500, 1659.83496,   0.00000, 0.00000, 269.14059);
	CreateDynamicObject(1691, 155.67152, -1965.25378, 1664.22815,   0.00000, 269.75919, 358.35840);
	CreateDynamicObject(3387, 155.07959, -1965.63428, 1659.40417,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(934, 146.01807, -1963.76086, 1660.50720,   0.00000, 0.00000, 334.06229);
	CreateDynamicObject(927, 155.70451, -1963.78564, 1664.71936,   0.00000, 0.00000, 87.42170);
	CreateDynamicObject(927, 155.62396, -1965.43311, 1662.86353,   0.00000, 0.00000, 88.28110);
	CreateDynamicObject(920, 145.99902, -1964.50085, 1661.73157,   0.00000, 0.00000, 64.92170);
	CreateDynamicObject(3798, 146.25002, -1968.13611, 1659.40076,   0.00000, 0.00000, 332.34341);
	CreateDynamicObject(3632, 147.85236, -1969.12805, 1659.87903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3632, 148.78830, -1970.05933, 1659.87903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3632, 148.76738, -1969.03540, 1659.87903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2359, 145.98233, -1967.70715, 1661.61450,   0.00000, 0.00000, 112.50000);
	CreateDynamicObject(1348, 149.59390, -1961.04016, 1660.10669,   0.00000, 0.00000, 348.75000);
	CreateDynamicObject(964, 150.08615, -1969.59363, 1659.40417,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1387, 149.98056, -1965.42310, 1683.42578,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11401, 149.98299, -1965.44958, 1685.78540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11406, 149.92090, -1966.28040, 1686.43713,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1387, 149.94489, -1966.26709, 1685.72473,   0.00000, 0.00000, 326.25000);
	CreateDynamicObject(2906, 150.62297, -1966.19678, 1683.98376,   262.02429, 280.07239, 172.31630);
	CreateDynamicObject(11401, 150.68799, -1966.26086, 1685.80103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2906, 151.32051, -1967.89697, 1659.47815,   1.71890, 278.35361, 93.56630);

	//apartamento
	new ApartmentObjects;
	ApartmentObjects = CreateObject(19379, 1435.356567, -1227.079956, 151.312393, 360.000000, 90.000000, 0.000000);
	SetObjectMaterial(ApartmentObjects, 0, 14534, "ab_wooziea", "walp72S", 0x00000000);
	ApartmentObjects = CreateObject(19379, 1424.864013, -1227.079956, 151.312393, 360.000000, 90.000000, 1080.000000);
	SetObjectMaterial(ApartmentObjects, 0, 14534, "ab_wooziea", "walp72S", 0x00000000);
	ApartmentObjects = CreateObject(19379, 1435.356567, -1217.446533, 151.312393, 360.000000, 90.000000, 0.000000);
	SetObjectMaterial(ApartmentObjects, 0, 14534, "ab_wooziea", "walp72S", 0x00000000);
	ApartmentObjects = CreateObject(19379, 1426.696044, -1217.468139, 151.732254, 360.000000, 90.000000, 0.000000);
	SetObjectMaterial(ApartmentObjects, 0, 14534, "ab_wooziea", "walp72S", 0x00000000);
	ApartmentObjects = CreateObject(19379, 1435.356567, -1214.220458, 151.316375, 360.000000, 90.000000, 0.000000);
	SetObjectMaterial(ApartmentObjects, 0, 14709, "lamidint2", "mp_apt1_bathfloor1", 0x00000000);
	ApartmentObjects = CreateObject(19379, 1426.570068, -1217.768432, 151.462326, 360.000000, 90.000000, 0.000000);
	SetObjectMaterial(ApartmentObjects, 0, 14534, "ab_wooziea", "walp72S", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19448, 1435.789794, -1231.780029, 153.118209, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1340, "foodkarts", "dogcart06", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19379, 1435.356567, -1226.999877, 154.882064, 360.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1433.437622, -1223.637329, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1430.222167, -1228.823364, 148.878540, 0.000000, 0.000000, 450.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1436.439208, -1231.588256, 152.318161, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19448, 1440.669555, -1226.900146, 153.118209, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1340, "foodkarts", "dogcart06", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.537597, -1231.725463, 153.048110, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1437.174194, -1231.591552, 148.878540, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1436.058105, -1231.727416, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1437.174194, -1231.591552, 154.768295, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19786, 1435.725341, -1231.733764, 153.338317, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 6354, "sunset03_law2", "billLA01", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1435.188232, -1231.588256, 152.320159, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1436.439208, -1231.378051, 152.108245, 0.000000, 90.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1435.187988, -1231.376098, 152.108245, 0.000000, 90.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(11721, 1438.098266, -1226.090698, 151.958435, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 3, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1760, 1434.734985, -1227.713012, 151.398330, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "redFabric", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1755, 1433.636840, -1229.786865, 151.398330, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "redFabric", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1755, 1437.738281, -1228.755859, 151.398330, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "redFabric", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1438.989257, -1226.000000, 153.057998, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.779174, -1226.006958, 150.218215, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1435.177978, -1225.868774, 151.958175, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1437.177978, -1225.868774, 151.958175, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1742, 1439.459838, -1225.958374, 151.388336, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2169, 1439.907348, -1230.329223, 151.398330, 0.000000, 0.000000, -137.400070);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1714, 1439.234375, -1230.004882, 151.398330, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "redFabric", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1734, 1435.830444, -1229.122802, 154.798187, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1434.187011, -1225.868774, 152.347976, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1434.187011, -1225.868774, 154.348098, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1435.177978, -1225.868774, 154.798080, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1437.168457, -1225.868774, 154.798080, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1437.387451, -1225.868774, 152.347976, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1437.387451, -1225.868774, 154.347976, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1436.386474, -1225.868774, 152.347976, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1435.235351, -1225.868774, 152.347976, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1436.386474, -1225.868774, 154.348052, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1435.235351, -1225.868774, 154.347961, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1435.177978, -1225.868774, 152.738159, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1435.177978, -1225.868774, 153.748123, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1437.159423, -1225.868774, 153.748123, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1437.177856, -1225.868774, 152.738159, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.779174, -1225.726684, 150.218215, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1438.989257, -1225.729736, 153.057998, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1434.285156, -1230.689697, 151.458404, 270.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14706, "labig2int2", "HS3_wall2", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2261, 1438.251464, -1226.608520, 152.708328, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14706, "labig2int2", "HS_art2", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2265, 1438.933227, -1226.575073, 153.848251, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14706, "labig2int2", "HS_art9", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2264, 1438.033447, -1226.584716, 153.748336, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14706, "labig2int2", "HS_art3", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2262, 1439.844116, -1226.575561, 153.788360, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14706, "labig2int2", "HS_art5", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2069, 1440.319580, -1229.571655, 151.428314, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "redFabric", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19896, 1439.850585, -1229.985351, 152.088119, 0.000000, 0.000000, -47.800006);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19896, 1438.835693, -1230.905151, 152.078079, 0.000000, 0.000000, -47.800006);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19896, 1438.835693, -1230.905151, 151.858108, 0.000000, 0.000000, -47.800006);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19896, 1438.835693, -1230.905151, 151.598205, 0.000000, 0.000000, -47.800006);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19896, 1439.850585, -1229.985351, 151.598205, 0.000000, 0.000000, -47.800006);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19896, 1439.850585, -1229.985351, 151.848205, 0.000000, 0.000000, -47.800006);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(949, 1438.052856, -1231.179565, 152.024139, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, -1, "none", "none", 0xFF00FFFF);
	ApartmentObjects = CreateDynamicObject(949, 1433.481201, -1231.179565, 152.024139, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, -1, "none", "none", 0xFF00FFFF);
	ApartmentObjects = CreateDynamicObject(2853, 1434.199951, -1225.800415, 152.326675, 32.100067, 81.000007, 1.100000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 4, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 5, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 6, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 7, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 10, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 11, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 12, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2853, 1434.471313, -1225.802856, 152.337402, 32.100067, 81.000007, 1.100000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 4, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 5, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 6, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 7, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 10, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 11, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 12, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2853, 1434.741210, -1225.809814, 152.356521, 32.100067, 81.000007, 1.100000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 4, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 5, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 6, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 7, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 10, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 11, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 12, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2194, 1435.808471, -1225.926635, 154.048049, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 17958, "burnsalpha", "plantb256", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1430.088378, -1226.860839, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19448, 1426.159790, -1231.780029, 153.118209, 0.000000, 0.000000, 450.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1340, "foodkarts", "dogcart06", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19391, 1430.084838, -1230.073120, 153.118377, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19379, 1424.856079, -1226.999877, 154.882064, 360.000000, 90.000000, 720.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1434.661010, -1226.153198, 148.878540, 0.000000, 0.000000, 720.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1437.333618, -1226.150146, 148.878540, 0.000000, 0.000000, 720.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1437.411865, -1225.591918, 148.878540, 0.000000, 0.000000, 540.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1437.333618, -1226.150146, 154.768600, 0.000000, 0.000000, 720.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1430.222167, -1231.185668, 154.778625, 0.000000, 0.000000, 450.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1430.222167, -1228.494384, 154.778625, 0.000000, 0.000000, 450.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1502, 1430.126098, -1230.820312, 151.358352, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(11724, 1430.451904, -1227.332397, 151.908401, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1736, 1430.482543, -1226.762695, 153.908248, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19939, 1430.164428, -1228.341430, 153.698425, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19939, 1430.164428, -1228.341430, 153.258468, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19939, 1430.166381, -1228.001098, 153.698425, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19939, 1430.166381, -1228.001098, 153.258636, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1903, 1430.055786, -1227.671264, 153.638015, 450.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1903, 1430.055786, -1228.581909, 153.318023, 450.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1428.478515, -1226.637695, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2123, 1428.879882, -1227.245483, 151.996459, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "redFabric", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2123, 1428.049072, -1227.956176, 151.996459, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "redFabric", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2123, 1428.819824, -1228.756469, 151.996459, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "redFabric", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2123, 1429.640014, -1227.985717, 151.996459, 0.000000, 0.000000, 360.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "redFabric", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2125, 1426.656372, -1231.190673, 151.704330, 0.000000, 0.000007, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2724, 1426.669189, -1231.162963, 151.948486, -0.000007, 0.000000, -89.999977);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "redFabric", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19926, 1425.794311, -1230.719116, 151.375839, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2125, 1426.656372, -1230.219726, 151.704330, 0.000000, 0.000014, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2724, 1426.669189, -1230.192016, 151.948486, -0.000014, 0.000000, -89.999954);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "redFabric", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1425.266967, -1226.637695, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1422.977905, -1230.291625, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1422.977905, -1227.079833, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1422.066528, -1226.637695, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2136, 1423.558715, -1231.164428, 151.391326, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 3, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 4, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2137, 1423.572387, -1229.211669, 151.393249, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 3, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 4, 3922, "bistro", "Marble", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2127, 1423.524902, -1228.204711, 151.400558, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19939, 1422.668701, -1230.557128, 153.102966, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1666, 1423.537841, -1229.415771, 152.517700, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 18065, "ab_sfammumain", "shelf_glas", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1666, 1423.467773, -1229.585937, 152.517700, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 18065, "ab_sfammumain", "shelf_glas", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1423.161376, -1230.652709, 153.700424, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 3922, "bistro", "Marble", 0x00000000);
	ApartmentObjects = CreateDynamicObject(11721, 1426.066162, -1226.750976, 151.958435, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 3, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2740, 1426.567138, -1230.206298, 154.676177, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 18065, "ab_sfammumain", "shelf_glas", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2740, 1426.567138, -1228.615966, 154.676177, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 18065, "ab_sfammumain", "shelf_glas", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19579, 1425.621215, -1229.995971, 152.291336, 0.000000, 0.000000, 15.700002);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19939, 1425.658203, -1231.017578, 152.303070, 360.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19468, 1425.630249, -1230.799316, 152.096466, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0xFFCC0000);
	ApartmentObjects = CreateDynamicObject(19468, 1425.630249, -1231.169677, 152.096466, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0xFFCC0000);
	ApartmentObjects = CreateDynamicObject(1902, 1425.743164, -1231.441162, 152.207626, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1902, 1425.653076, -1231.441162, 152.207626, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1902, 1425.552978, -1231.441162, 152.207626, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19581, 1428.834106, -1227.598022, 152.205764, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 5150, "wiresetc_las2", "ganggraf01_LA_m", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2001, 1431.530029, -1231.244628, 151.376464, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 801, "gta_proc_ferns", "veg_bush2", 0xFF009900);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.578247, -1231.218017, 152.012496, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil1-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.658325, -1231.218017, 152.182434, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil2-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.798461, -1231.218017, 152.252395, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil3-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.167968, -1231.218017, 152.252395, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil4-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.268066, -1231.218017, 152.152420, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil5-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.338134, -1231.218017, 152.002487, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil3-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.338134, -1231.218017, 152.412506, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil1-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.438232, -1231.218017, 152.282470, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil2-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.598388, -1231.218017, 152.462432, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil4-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.778564, -1231.218017, 152.562377, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil5-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.408203, -1231.218017, 152.562377, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil5-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.578369, -1231.218017, 152.632339, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil3-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.458251, -1231.218017, 152.742294, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil2-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3003, 1431.588378, -1231.218017, 152.842239, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19063, "xmasorbs", "foil1-128x128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1247, 1431.490234, -1231.260742, 153.141510, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0xFFCCFF00);
	ApartmentObjects = CreateDynamicObject(338, 1431.418334, -1231.276733, 151.930130, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 3044, "ciggarx", "CJ_bark", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19572, 1431.924926, -1231.423461, 151.383712, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14703, "vghsb3int2", "HS2_3Wall1", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19572, 1431.010742, -1231.307373, 151.383712, 0.000000, 0.000000, -38.100002);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14703, "vghsb3int2", "HS4_Wall7", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19572, 1430.679321, -1231.049438, 151.383712, 0.000000, 0.000000, -131.500045);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14714, "vghss1int2", "HS4_Wall6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19572, 1431.172485, -1230.896850, 151.383712, 0.000000, 0.000000, -30.600118);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19058, "xmasboxes", "wrappingpaper4-2", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19572, 1431.864501, -1230.956054, 151.383712, 0.000000, 0.000000, -47.900001);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 19058, "xmasboxes", "wrappingpaper28", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2694, 1432.321899, -1230.979248, 151.484970, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14703, "vghsb3int2", "HS2_2Wall2", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2040, 1431.321289, -1230.573852, 151.483154, 0.000000, 0.000000, -21.700000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14703, "vghsb3int2", "HS4_Wall8", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2040, 1431.599731, -1230.684570, 151.483154, 0.000000, 0.000000, -56.299999);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14714, "vghss1int2", "HS2_2Wall3", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1428.478515, -1225.356567, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1428.737060, -1223.890136, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1428.566894, -1224.040283, 151.718002, 360.000000, 90.000000, 450.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1597, "centralresac1", "hedge2_128", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1430.085327, -1223.880126, 150.068069, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1428.398437, -1222.365966, 150.078125, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(3850, 1428.409423, -1222.369140, 152.322616, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 18065, "ab_sfammumain", "shelf_glas", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19087, 1430.128662, -1222.362060, 152.875152, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19087, 1430.143676, -1222.362060, 152.875152, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1428.737060, -1220.689331, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1430.348388, -1220.268920, 153.057998, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1431.907958, -1222.120605, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1430.348388, -1222.200317, 150.057998, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1430.208251, -1222.500610, 149.778091, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1431.736206, -1220.980346, 149.778106, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(949, 1429.490478, -1224.439819, 152.004211, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, -1, "none", "none", 0xFF00FFFF);
	ApartmentObjects = CreateDynamicObject(949, 1429.490478, -1223.269897, 152.004211, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, -1, "none", "none", 0xFF00FFFF);
	ApartmentObjects = CreateDynamicObject(2395, 1430.222167, -1225.093627, 148.878540, 0.000000, 0.000000, 450.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1431.907958, -1218.911254, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2725, 1431.403198, -1220.724975, 152.204544, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2267, 1428.854492, -1224.010498, 153.492111, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14603, "bikeskool", "artish1", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1716, 1431.782104, -1220.926879, 151.787612, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "redFabric", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1716, 1431.031616, -1220.276489, 151.787612, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "redFabric", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2194, 1431.498291, -1220.523071, 152.887985, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 17958, "burnsalpha", "plantb256", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19379, 1424.858032, -1217.370361, 154.882064, 360.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.810180, -1221.270019, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19391, 1437.477416, -1224.481933, 153.118377, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.956787, -1223.634277, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1502, 1437.503540, -1225.231201, 151.348312, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2256, 1428.065551, -1226.745117, 153.541976, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14707, "labig3int2", "HS_art8", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2270, 1431.333618, -1221.623168, 152.881637, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14707, "labig3int2", "HS_art6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2270, 1431.333618, -1222.333862, 153.481552, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14738, "whorebar", "AH_whoredoor", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2270, 1431.333618, -1223.034545, 152.881637, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14707, "labig3int2", "HS_art6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2258, 1432.897949, -1223.733764, 153.164245, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14812, "lee_studhall", "GoldDisk6", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2258, 1434.599365, -1223.733764, 153.164245, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14812, "lee_studhall", "GoldDisk5", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2258, 1436.300415, -1223.733764, 153.164245, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14812, "lee_studhall", "GoldDisk4", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1432.313964, -1223.781982, 148.878540, 0.000000, 0.000000, 720.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1431.773437, -1220.489990, 148.878540, 0.000000, 0.000000, 990.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1434.315917, -1223.778930, 148.878540, 0.000000, 0.000000, 720.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1432.825561, -1223.509643, 154.798080, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1434.817382, -1223.509643, 154.798080, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1436.408691, -1223.511596, 154.798080, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19448, 1440.669555, -1217.279785, 153.118209, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1340, "foodkarts", "dogcart06", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.813232, -1220.469482, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.956787, -1222.963623, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2298, 1439.866088, -1222.438720, 151.394180, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 3, 14839, "lee_strippriv", "WH_Sofa", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19379, 1435.357055, -1217.370361, 154.882064, 360.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 11301, "carshow_sfse", "ws_officy_ceiling", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2323, 1439.076049, -1220.635986, 151.364288, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1439.258056, -1225.468627, 152.558120, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19391, 1438.977905, -1218.961425, 153.118377, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.766723, -1218.963256, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1438.977050, -1215.803466, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1436.288452, -1217.301025, 153.057998, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19360, 1435.766357, -1215.803466, 153.088104, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2139, 1436.853515, -1216.890258, 151.380416, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 3922, "bistro", "Marble2", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 3, 3922, "bistro", "Marble", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2139, 1436.853515, -1217.879150, 151.380416, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 3922, "bistro", "Marble2", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 3, 3922, "bistro", "Marble", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2518, 1436.862060, -1217.884033, 151.642395, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2257, 1436.402343, -1217.397827, 152.443649, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2525, 1438.333862, -1216.371337, 151.400146, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14832, "lee_stripclub", "Strip_sofa2", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 14832, "lee_stripclub", "Strip_sofa2", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2526, 1440.130859, -1217.605712, 151.347122, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 3922, "bistro", "Marble", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1734, 1438.401245, -1221.052124, 154.798187, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(1502, 1439.727294, -1218.950927, 151.348312, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1440.102783, -1225.589965, 148.878540, 0.000000, 0.000000, 540.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1430.165649, -1231.020019, 150.608062, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19940, 1430.165649, -1231.460449, 150.608062, 90.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1428.871215, -1224.773193, 154.778625, 0.000000, 0.000000, 450.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1428.871215, -1221.041625, 154.778625, 0.000000, 0.000000, 450.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1429.661987, -1225.203125, 154.778625, 0.000000, 0.000000, 540.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1428.671020, -1220.410766, 154.778625, 0.000000, 0.000000, 720.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2395, 1431.773925, -1220.490844, 154.778625, 0.000000, 0.000000, 990.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	ApartmentObjects = CreateDynamicObject(2257, 1435.937744, -1221.131225, 153.447509, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 14593, "papaerchaseoffice", "glassPartition", 0x00000000);
	ApartmentObjects = CreateDynamicObject(11721, 1437.307495, -1219.057617, 151.958435, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(ApartmentObjects, 1, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 2, 1714, "cj_office", "white32", 0x00000000);
	SetDynamicObjectMaterial(ApartmentObjects, 3, 1714, "cj_office", "white32", 0x00000000);
	ApartmentObjects = CreateDynamicObject(19893, 1439.644897, -1230.781005, 152.188339, 0.000000, 0.000000, -153.899993);
	ApartmentObjects = CreateDynamicObject(1827, 1435.718017, -1229.419433, 151.394271, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(14705, 1434.678466, -1225.794067, 152.978210, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(2855, 1436.411865, -1225.878784, 152.141769, 86.100013, 0.000000, 90.000000);
	ApartmentObjects = CreateDynamicObject(2855, 1437.366943, -1225.878784, 152.176864, 86.100013, 0.000000, 270.000000);
	ApartmentObjects = CreateDynamicObject(2855, 1436.852416, -1225.913818, 153.748214, 0.000000, 0.000000, 90.000000);
	ApartmentObjects = CreateDynamicObject(11745, 1440.115844, -1230.304565, 152.318191, 0.000000, 0.000000, 22.800001);
	ApartmentObjects = CreateDynamicObject(19632, 1430.547973, -1227.323852, 151.368347, 0.000000, 0.000000, 90.000000);
	ApartmentObjects = CreateDynamicObject(19573, 1430.465087, -1228.676635, 151.388336, 0.000000, 0.000000, 128.800018);
	ApartmentObjects = CreateDynamicObject(358, 1430.221557, -1228.358032, 153.413024, -2.599998, -8.099998, 95.399978);
	ApartmentObjects = CreateDynamicObject(2030, 1428.872192, -1228.023315, 151.797302, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(19564, 1423.336303, -1229.494140, 152.460037, 0.000000, 0.000000, 53.100002);
	ApartmentObjects = CreateDynamicObject(19581, 1423.110961, -1230.710205, 153.131790, 90.000000, 0.000000, 90.000000);
	ApartmentObjects = CreateDynamicObject(19586, 1423.102661, -1230.428833, 153.148941, 90.000000, 0.000000, 90.000000);
	ApartmentObjects = CreateDynamicObject(19562, 1423.332397, -1231.363647, 152.453918, 0.000000, 0.000000, 133.999969);
	ApartmentObjects = CreateDynamicObject(19571, 1423.649536, -1230.991699, 152.472076, 90.000000, 0.000000, 270.000000);
	ApartmentObjects = CreateDynamicObject(1668, 1423.215087, -1230.692504, 153.872344, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(1669, 1423.177490, -1230.062255, 153.871170, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(1669, 1423.177490, -1231.273437, 153.871170, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(1667, 1423.220214, -1230.344604, 153.808166, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(1667, 1423.220214, -1230.955200, 153.808166, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(19583, 1425.534423, -1229.979858, 152.611557, 90.000000, 11.900001, 0.000000);
	ApartmentObjects = CreateDynamicObject(19583, 1425.544799, -1230.028686, 152.611557, 90.000000, 11.900001, 0.000000);
	ApartmentObjects = CreateDynamicObject(19583, 1425.671752, -1230.001708, 152.611557, 90.000000, 11.900001, 0.000000);
	ApartmentObjects = CreateDynamicObject(19583, 1425.659301, -1229.943115, 152.611557, 90.000000, 11.900001, 0.000000);
	ApartmentObjects = CreateDynamicObject(19585, 1425.633056, -1230.582153, 152.507614, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(19574, 1428.954223, -1228.098510, 152.235748, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(19575, 1428.794067, -1227.998901, 152.225753, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(19576, 1428.864135, -1228.058471, 152.235748, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(19578, 1428.868164, -1227.924804, 152.225738, 0.000000, 0.000000, 165.300003);
	ApartmentObjects = CreateDynamicObject(19578, 1428.764892, -1228.140502, 152.225738, 0.000000, 0.000000, -41.899997);
	ApartmentObjects = CreateDynamicObject(1569, 1428.791992, -1222.086791, 151.811874, 0.000000, 0.000000, 90.000000);
	ApartmentObjects = CreateDynamicObject(2854, 1431.426513, -1220.705444, 152.643737, 0.000000, 0.000000, 161.900039);
	ApartmentObjects = CreateDynamicObject(19787, 1440.278686, -1221.137817, 152.780334, 0.000000, 0.000000, 270.000000);
	ApartmentObjects = CreateDynamicObject(2394, 1439.277832, -1225.358520, 152.161712, 0.000000, 0.000000, 0.000000);
	ApartmentObjects = CreateDynamicObject(2384, 1439.635864, -1225.495727, 152.657699, 0.000000, 0.000000, 270.000000);
	ApartmentObjects = CreateDynamicObject(2384, 1438.845581, -1225.495727, 152.657699, 0.000000, 0.000000, 270.000000);
	
	//mapeo garage nuevo
	//Objetos////////////////////////////////////////////////////////////////////////////////////////////////////////
	new tmpobjid;
	tmpobjid = CreateObject(7636, 2503.925781, -2539.875488, 2294.296630, 0.000000, 0.000000, 360.000000, 300.00);
	SetObjectMaterial(tmpobjid, 6, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetObjectMaterial(tmpobjid, 7, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2529.547119, -2536.394287, 2286.352050, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2529.547119, -2546.025634, 2286.352050, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2478.817626, -2541.912597, 2286.352050, 0.000000, 0.000014, 179.800094);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2478.851318, -2532.281250, 2286.352050, 0.000000, 0.000014, 179.800094);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateObject(16409, 2533.617187, -2555.531494, 2285.413085, 0.000000, 0.000014, 0.000000, 300.00);
	SetObjectMaterial(tmpobjid, 4, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetObjectMaterial(tmpobjid, 5, 10765, "airportgnd_sfse", "ws_whiteplaster_top", 0x00000000);
	SetObjectMaterial(tmpobjid, 6, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetObjectMaterial(tmpobjid, 7, 10765, "airportgnd_sfse", "ws_whiteplaster_top", 0x00000000);
	tmpobjid = CreateDynamicObject(8057, 2529.333984, -2517.856689, 2308.859863, 0.000000, 630.000000, 720.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2517.880371, -2562.112792, 2286.352050, 0.000000, 0.000014, 269.800109);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2527.513916, -2562.145507, 2286.352050, 0.000000, 0.000014, 269.800109);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2526.202636, -2565.507324, 2286.352050, 0.000000, 0.000014, 359.800109);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2526.213134, -2564.677978, 2295.158203, 0.000000, 180.000015, 359.800109);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, 2526.232421, -2550.462890, 2287.177490, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, 2526.232421, -2550.462890, 2290.670166, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, 2526.232421, -2550.643066, 2290.670166, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19362, 2526.232421, -2551.654052, 2291.610595, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2529.537109, -2524.782470, 2286.352050, 0.000000, 0.000007, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2529.537109, -2515.158203, 2286.352050, 0.000000, 0.000007, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(8057, 2506.826660, -2512.847412, 2308.330566, 0.000000, 270.000000, 450.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(8057, 2529.333251, -2573.987060, 2308.740966, 0.000000, 270.000000, 720.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(8057, 2499.644042, -2565.256591, 2308.330566, 0.000000, 630.000000, 990.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(8057, 2477.066650, -2537.773437, 2308.330566, 0.000000, 630.000000, 1260.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 7, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2529.547119, -2546.025634, 2286.352050, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	tmpobjid = CreateDynamicObject(2356, 2527.159423, -2544.976562, 2291.970458, -55.699977, -34.499996, 93.299942);
	SetDynamicObjectMaterial(tmpobjid, 0, 1560, "7_11_door", "CJ_CHROME2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "CJ_CHROME2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 1560, "7_11_door", "CJ_CHROME2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 1560, "7_11_door", "CJ_CHROME2", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19880, 2529.428710, -2539.117431, 2289.836425, 0.000029, 0.000000, 89.999908);
	tmpobjid = CreateDynamicObject(19477, 2488.157714, -2536.876220, 2293.272949, 0.000000, 0.000000, 0.000000);
	tmpobjid = CreateDynamicObject(19880, 2478.984863, -2539.117431, 2289.836425, 0.000022, 0.000000, 89.999931);
	tmpobjid = CreateDynamicObject(19880, 2493.447265, -2539.117431, 2289.836425, 0.000029, 0.000000, 89.999908);
	tmpobjid = CreateDynamicObject(19325, 2506.523437, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2506.523437, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2516.347167, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2522.990234, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2516.347167, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2522.990234, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19817, 2531.791015, -2556.486083, 2283.553710, -0.000007, 0.000000, -89.999977);
	tmpobjid = CreateDynamicObject(2687, 2526.629394, -2560.665039, 2287.373779, 0.000000, 0.000000, 180.000000);
	tmpobjid = CreateDynamicObject(19903, 2538.446533, -2560.059570, 2285.396972, 0.000000, 0.000000, 134.000106);
	tmpobjid = CreateDynamicObject(1543, 2538.867919, -2560.486816, 2285.443359, 0.000000, 0.000000, 0.000000);
	tmpobjid = CreateDynamicObject(3465, 2529.928955, -2560.593505, 2286.708496, 0.000000, 0.000000, 90.000000);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2506.523437, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2516.347167, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2522.990234, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2506.523437, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2516.347167, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2522.990234, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2506.523437, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2516.347167, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2522.990234, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2506.523437, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2499.880371, -2562.399169, 2287.645263, 0.000007, 0.000000, 89.999977);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2490.152587, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2483.509521, -2562.399169, 2287.645263, 0.000014, 0.000000, 89.999954);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2552.144287, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2558.787353, 2287.645263, 0.000014, -0.000014, 179.999832);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2519.439941, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2479.969482, -2526.083007, 2287.645263, 0.000014, -0.000022, 179.999786);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2483.583984, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2490.227050, -2515.799560, 2287.645263, 0.000007, -0.000029, -90.000175);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2499.890869, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2506.533935, -2515.799560, 2287.645263, 0.000000, -0.000029, -90.000152);
	tmpobjid = CreateDynamicObject(19325, 2516.347167, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(19325, 2522.990234, -2515.799560, 2287.645263, -0.000007, -0.000029, -90.000129);
	tmpobjid = CreateDynamicObject(1893, 2496.951416, -2555.642822, 2290.688720, 0.000000, 0.000007, 0.000000);
	tmpobjid = CreateDynamicObject(1775, 2492.959716, -2546.846435, 2286.492675, 0.000000, 0.000000, 270.000000);
	tmpobjid = CreateDynamicObject(19425, 2481.973144, -2548.600097, 2285.423095, 0.000000, 0.000007, 0.000000);
	tmpobjid = CreateDynamicObject(19425, 2485.273437, -2548.600097, 2285.423095, 0.000000, 0.000007, 0.000000);
	tmpobjid = CreateDynamicObject(19425, 2488.573730, -2548.600097, 2285.423095, 0.000000, 0.000007, 0.000000);
	tmpobjid = CreateDynamicObject(19425, 2491.864013, -2548.600097, 2285.423095, 0.000000, 0.000007, 0.000000);
	tmpobjid = CreateDynamicObject(19425, 2481.973144, -2529.510009, 2285.423095, 0.000000, 0.000022, 0.000000);
	tmpobjid = CreateDynamicObject(19425, 2485.273437, -2529.510009, 2285.423095, 0.000000, 0.000022, 0.000000);
	tmpobjid = CreateDynamicObject(19425, 2488.573730, -2529.510009, 2285.423095, 0.000000, 0.000022, 0.000000);
	tmpobjid = CreateDynamicObject(19425, 2491.864013, -2529.510009, 2285.423095, 0.000000, 0.000022, 0.000000);
	tmpobjid = CreateDynamicObject(19101, 2496.780029, -2555.504882, 2290.005859, 0.800000, 89.900009, -129.899993);
	tmpobjid = CreateDynamicObject(1665, 2478.988525, -2545.475341, 2285.433349, 0.000000, 0.000000, 0.000000);
	tmpobjid = CreateDynamicObject(1893, 2485.428466, -2523.142089, 2290.688720, 0.000000, 0.000014, 0.000000);
	tmpobjid = CreateDynamicObject(8057, 2497.716308, -2544.323242, 2306.425537, 0.000000, 179.999984, -179.999984);
	tmpobjid = CreateDynamicObject(8057, 2532.435546, -2544.323242, 2306.425537, 0.000000, -179.999984, -0.000029);
	tmpobjid = CreateDynamicObject(1668, 2526.181884, -2544.809570, 2291.433837, 0.000000, 0.000000, 0.000000);
	tmpobjid = CreateDynamicObject(1668, 2526.202636, -2545.268310, 2291.433837, 0.000000, 0.000000, -43.999996);
	tmpobjid = CreateDynamicObject(1893, 2505.235351, -2539.888427, 2303.210693, 0.000000, 0.000000, 90.000000);
}

// 12/02/2020
funcion IsPlayerConnectedEx(const playerid)
{
	if (IsPlayerConnected(playerid) && usuario_registro[playerid] == 2) return 1;
	return 0;
}

// 13/02/2020
SendSplitMessage(playerid, color, const text[])
{
	#define LENGHT (125)

	if(strlen(text) > LENGHT)
	{
		new firstString[LENGHT], secondString[LENGHT];

		strmid(firstString, text, 0, LENGHT);
		strmid(secondString, text, LENGHT - 1, LENGHT * 2);

		format(firstString, LENGHT, "%s...", firstString);
		format(secondString, LENGHT, "...%s", secondString);

		SendClientMessage(playerid, color, firstString);
		SendClientMessage(playerid, color, secondString);
	}
	else SendClientMessage(playerid, color, text);

	#undef LENGHT

	return 1;
}

// 15/02/2020
ProxExDetector(Float: f_Radius, playerid, string[], col1, col2, col3, col4, col5)
{
	new Float: f_playerPos[3];
	GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
	foreach(Player, i)
	{
		if (i == playerid)break;
		if (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		{
			if (IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (InfoPlayer[i][pHorasOn] != -1) SendSplitMessage(i, col1, string);
			}
			else if (IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (InfoPlayer[i][pHorasOn] != -1) SendSplitMessage(i, col2, string);
			}
			else if (IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (InfoPlayer[i][pHorasOn] != -1) SendSplitMessage(i, col3, string);
			}
			else if (IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (InfoPlayer[i][pHorasOn] != -1) SendSplitMessage(i, col4, string);
			}
			else if (IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2]))
			{
				if (InfoPlayer[i][pHorasOn] != -1) SendSplitMessage(i, col5, string);
			}
		}
	}
	return 1;
}

ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5)
{
	new Float: f_playerPos[3];
	GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
	foreach(Player, i)
	{
		if (!BigEar[i])
		{
			if (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				if (IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendSplitMessage(i, col1, string);
				}
				else if (IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendSplitMessage(i, col2, string);
				}
				else if (IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendSplitMessage(i, col3, string);
				}
				else if (IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendSplitMessage(i, col4, string);
				}
				else if (IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendSplitMessage(i, col5, string);
				}
			}
		}
		else SendClientMessage(i, col1, string);
	}
	return 1;
}

CercaDelMarica(Float:radi, playerid, targetid)
{
	new Float: fp_playerPos[3];
	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if (IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		if (IsPlayerInVehicle(playerid, vehicleid))
		return 1;
	}
	return 0;
}

SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4
		SendClientMessage(playerid, color, str);
		#emit RETN
	}
	return 1;
}

stock Fix_GT(string[])
{
	new szFixed[1024], iPos, iLen;
	for (iLen = strlen(string); iPos < iLen; iPos ++)
		switch (string[iPos])
		{
			case 'à':   szFixed[iPos] = 151;
			case 'á':   szFixed[iPos] = 152;
			case 'â':   szFixed[iPos] = 153;
			case 'ä':   szFixed[iPos] = 154;
			case 'À':   szFixed[iPos] = 128;
			case 'Á':   szFixed[iPos] = 129;
			case 'Â':   szFixed[iPos] = 130;
			case 'Ä':   szFixed[iPos] = 131;
			case 'è':   szFixed[iPos] = 157;
			case 'é':   szFixed[iPos] = 158;
			case 'ê':   szFixed[iPos] = 159;
			case 'ë':   szFixed[iPos] = 160;
			case 'È':   szFixed[iPos] = 134;
			case 'É':   szFixed[iPos] = 135;
			case 'Ê':   szFixed[iPos] = 136;
			case 'Ë':   szFixed[iPos] = 137;
			case 'ì':   szFixed[iPos] = 161;
			case 'í':   szFixed[iPos] = 162;
			case 'î':   szFixed[iPos] = 163;
			case 'ï':   szFixed[iPos] = 164;
			case 'Ì':   szFixed[iPos] = 138;
			case 'Í':   szFixed[iPos] = 139;
			case 'Î':   szFixed[iPos] = 140;
			case 'Ï':   szFixed[iPos] = 141;
			case 'ò':   szFixed[iPos] = 165;
			case 'ó':   szFixed[iPos] = 166;
			case 'ô':   szFixed[iPos] = 167;
			case 'ö':   szFixed[iPos] = 168;
			case 'Ò':   szFixed[iPos] = 142;
			case 'Ó':   szFixed[iPos] = 143;
			case 'Ô':   szFixed[iPos] = 144;
			case 'Ö':   szFixed[iPos] = 145;
			case 'ù':   szFixed[iPos] = 169;
			case 'ú':   szFixed[iPos] = 170;
			case 'û':   szFixed[iPos] = 171;
			case 'ü':   szFixed[iPos] = 172;
			case 'Ù':   szFixed[iPos] = 146;
			case 'Ú':   szFixed[iPos] = 147;
			case 'Û':   szFixed[iPos] = 148;
			case 'Ü':   szFixed[iPos] = 149;
			case 'ñ':   szFixed[iPos] = 174;
			case 'Ñ':   szFixed[iPos] = 173;
			case '¡':   szFixed[iPos] = 64;
			case '¿':   szFixed[iPos] = 175;
			case '`':   szFixed[iPos] = 177;
			case '&':   szFixed[iPos] = 38;
			default:    szFixed[iPos] = string[iPos];
	}
	return szFixed;
}

stock TextDrawSetStringEx(Text:Text_ID, text[])
{
	return TextDrawSetString(Text_ID, Fix_GT(text));
}

stock PlayerTextDrawSetStringEx(playerid, PlayerText:Text_ID, text[])
{
	return PlayerTextDrawSetString(playerid, Text_ID, Fix_GT(text));
}

Segundos_tiempo(segundos)
{
	new gformat[256],
		minutos, horitas, dias;
	if (segundos > 59)
	{
		minutos = segundos / 60;
		segundos = segundos - (minutos * 60);
	}
	if (minutos > 59)
	{
		horitas = minutos / 60;
		minutos = minutos - (horitas * 60);
	}
	if (horitas > 23)
	{
		dias = horitas / 24;
		horitas = horitas - (dias * 24);
	}
	if (dias > 0)
    {
		format(gformat, sizeof gformat, "%d días, %d hrs, %d mins, %d segs", dias, horitas, minutos, segundos);
	}
	else if (horitas > 0)
	{
		format(gformat, sizeof gformat, "%d hrs, %d mins, %d segs", horitas, minutos, segundos);
	}
	else if (minutos > 0)
	{
		format(gformat, sizeof gformat, "%d mins, %d segs", minutos, segundos);
	}
	else
	{
		format(gformat, sizeof gformat, "%d segs", segundos);
	}
	return gformat;
}

DestroyDynamic3DTextLabelEx(&Text3D:labelid)
{
	DestroyDynamic3DTextLabel(labelid);
	labelid = Text3D:INVALID_3DTEXT_ID; return 1;
}
